#####################################################################
# 	Fan Control
#####################################################################

[delayed_gcode _fans_cooling_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_fans_cooling_loaded func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _printer_vars"].ptr_verb_cfgload %} 
		M118 >>> _fans_cooling.cfg Loaded. <<<
	{% endif %}
	_proc_end function=_fans_cooling_loaded 

[gcode_macro _info_fans_cooling]
gcode:
	# none, just for preamble/docs purposes

# MCU Fan Ports

# Fan0 is Part Cooling
# Fan1 was Hot End, but now water cooled hotend installed
# Fan2 is Aft_Case_Fan Cooling
# Fan3 is Fwd_Case_Fan Cooling
# Fan4 is Chamber Cooling
# Fan5 is Stirring/nevermore blower
# Fan6 is an always on 12VDC fan slapped onto the 5VDC Light PS
# Fan7 is an always on 12VDC fan slapped onto the 24VDC Main PS

##########################################################
# [heater_fan blah] Config
##########################################################

#[heater_fan my_nozzle_fan]
#pin:
#   Output pin controlling the fan. This parameter must be provided.
#max_power: 1.0
#   The maximum power (expressed as a value from 0.0 to 1.0) that the
#   pin may be set to. The value 1.0 allows the pin to be set fully
#   enabled for extended periods, while a value of 0.5 would allow the
#   pin to be enabled for no more than half the time. This setting may
#   be used to limit the total power output (over extended periods) to
#   the fan. If this value is less than 1.0 then fan speed requests
#   will be scaled between zero and max_power (for example, if
#   max_power is .9 and a fan speed of 80% is requested then the fan
#   power will be set to 72%). The default is 1.0.
#shutdown_speed: 0
#   The desired fan speed (expressed as a value from 0.0 to 1.0) if
#   the micro-controller software enters an error state. The default
#   is 0.
#cycle_time: 0.010
#   The amount of time (in seconds) for each PWM power cycle to the
#   fan. It is recommended this be 10 milliseconds or greater when
#   using software based PWM. The default is 0.010 seconds.
#hardware_pwm: False
#   Enable this to use hardware PWM instead of software PWM. Most fans
#   do not work well with hardware PWM, so it is not recommended to
#   enable this unless there is an electrical requirement to switch at
#   very high speeds. When using hardware PWM the actual cycle time is
#   constrained by the implementation and may be significantly
#   different than the requested cycle_time. The default is False.
#kick_start_time: 0.100
#   Time (in seconds) to run the fan at full speed when either first
#   enabling or increasing it by more than 50% (helps get the fan
#   spinning). The default is 0.100 seconds.
#off_below: 0.0
#   The minimum input speed which will power the fan (expressed as a
#   value from 0.0 to 1.0). When a speed lower than off_below is
#   requested the fan will instead be turned off. This setting may be
#   used to prevent fan stalls and to ensure kick starts are
#   effective. The default is 0.0.
#
#   This setting should be recalibrated whenever max_power is adjusted.
#   To calibrate this setting, start with off_below set to 0.0 and the
#   fan spinning. Gradually lower the fan speed to determine the lowest
#   input speed which reliably drives the fan without stalls. Set
#   off_below to the duty cycle corresponding to this value (for
#   example, 12% -> 0.12) or slightly higher.
#tachometer_pin:
#   Tachometer input pin for monitoring fan speed. A pullup is generally
#   required. This parameter is optional.
#tachometer_ppr: 2
#   When tachometer_pin is specified, this is the number of pulses per
#   revolution of the tachometer signal. For a BLDC fan this is
#   normally half the number of poles. The default is 2.
#tachometer_poll_interval: 0.0015
#   When tachometer_pin is specified, this is the polling period of the
#   tachometer pin, in seconds. The default is 0.0015, which is fast
#   enough for fans below 10000 RPM at 2 PPR. This must be smaller than
#   30/(tachometer_ppr*rpm), with some margin, where rpm is the
#   maximum speed (in RPM) of the fan.
#heater: extruder
#   Name of the config section defining the heater that this fan is
#   associated with. If a comma separated list of heater names is
#   provided here, then the fan will be enabled when any of the given
#   heaters are enabled. The default is "extruder".
#heater_temp: 50.0
#   A temperature (in Celsius) that the heater must drop below before
#   the fan is disabled. The default is 50 Celsius.
#fan_speed: 1.0
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when its associated heater is enabled. The default
#   is 1.0

##########################################################
# Temperature Fan Commands
##########################################################

# The following command is available when a temperature_fan config section is enabled:

# SET_TEMPERATURE_FAN_TARGET temperature_fan=<temperature_fan_name> [target=<target_temperature>] [min_speed=<min_speed>] [max_speed=<max_speed>]: 
# Sets the target temperature for a temperature_fan. 
# If a target is not supplied, it is set to the specified temperature in the config file. 
# If speeds are not supplied, no change is applied.

##########################################################
# [temperature_fan] Section Enablement
##########################################################

# Temperature-triggered cooling fans (one may define any number of sections with a "temperature_fan" prefix). A "temperature fan" is a fan that 
# will be enabled whenever its associated sensor is above a set temperature. By default, a temperature_fan has a shutdown_speed equal to max_power.

##########################################################
# [temperature_fan blah] Config
##########################################################

# [temperature_fan my_temp_fan]
#pin:
#   Output pin controlling the fan. This parameter must be provided.
#max_power: 1.0
#   The maximum power (expressed as a value from 0.0 to 1.0) that the
#   pin may be set to. The value 1.0 allows the pin to be set fully
#   enabled for extended periods, while a value of 0.5 would allow the
#   pin to be enabled for no more than half the time. This setting may
#   be used to limit the total power output (over extended periods) to
#   the fan. If this value is less than 1.0 then fan speed requests
#   will be scaled between zero and max_power (for example, if
#   max_power is .9 and a fan speed of 80% is requested then the fan
#   power will be set to 72%). The default is 1.0.
#shutdown_speed: 0
#   The desired fan speed (expressed as a value from 0.0 to 1.0) if
#   the micro-controller software enters an error state. The default
#   is 0.
#cycle_time: 0.010
#   The amount of time (in seconds) for each PWM power cycle to the
#   fan. It is recommended this be 10 milliseconds or greater when
#   using software based PWM. The default is 0.010 seconds.
#hardware_pwm: False
#   Enable this to use hardware PWM instead of software PWM. Most fans
#   do not work well with hardware PWM, so it is not recommended to
#   enable this unless there is an electrical requirement to switch at
#   very high speeds. When using hardware PWM the actual cycle time is
#   constrained by the implementation and may be significantly
#   different than the requested cycle_time. The default is False.
#kick_start_time: 0.100
#   Time (in seconds) to run the fan at full speed when either first
#   enabling or increasing it by more than 50% (helps get the fan
#   spinning). The default is 0.100 seconds.
#off_below: 0.0
#   The minimum input speed which will power the fan (expressed as a
#   value from 0.0 to 1.0). When a speed lower than off_below is
#   requested the fan will instead be turned off. This setting may be
#   used to prevent fan stalls and to ensure kick starts are
#   effective. The default is 0.0.
# 
#   This setting should be recalibrated whenever max_power is adjusted.
#   To calibrate this setting, start with off_below set to 0.0 and the
#   fan spinning. Gradually lower the fan speed to determine the lowest
#   input speed which reliably drives the fan without stalls. Set
#   off_below to the duty cycle corresponding to this value (for
#   example, 12% -> 0.12) or slightly higher.
#tachometer_pin:
#   Tachometer input pin for monitoring fan speed. A pullup is generally
#   required. This parameter is optional.
#tachometer_ppr: 2
#   When tachometer_pin is specified, this is the number of pulses per
#   revolution of the tachometer signal. For a BLDC fan this is
#   normally half the number of poles. The default is 2.
#tachometer_poll_interval: 0.0015
#   When tachometer_pin is specified, this is the polling period of the
#   tachometer pin, in seconds. The default is 0.0015, which is fast
#   enough for fans below 10000 RPM at 2 PPR. This must be smaller than
#   30/(tachometer_ppr*rpm), with some margin, where rpm is the
#   maximum speed (in RPM) of the fan.

#sensor_type:
#   Type of sensor - common thermistors are "EPCOS 100K B57560G104F",
#   "ATC Semitec 104GT-2", "ATC Semitec 104NT-4-R025H42G", "Generic
#   3950","Honeywell 100K 135-104LAG-J01", "NTC 100K MGB18-104F39050L32",
#   "SliceEngineering 450", and "TDK NTCG104LH104JT1". See the
#   "Temperature sensors" section for other sensors. This parameter
#   must be provided.
#sensor_pin:
#   Analog input pin connected to the sensor. This parameter must be
#   provided.
#control:
#   Control algorithm (either pid or watermark). This parameter must
#   be provided.
#pid_Kp:
#   Kp is the "proportional" constant for the pid. This parameter must
#   be provided for PID heaters.
#pid_Ki:
#   Ki is the "integral" constant for the pid. This parameter must be
#   provided for PID heaters.
#pid_Kd:
#   Kd is the "derivative" constant for the pid. This parameter must
#   be provided for PID heaters.
#pid_deriv_time: 2.0
#   A time value (in seconds) over which the derivative in the pid
#   will be smoothed to reduce the impact of measurement noise. The
#   default is 2 seconds.
#max_delta: 2.0
#   On 'watermark' controlled heaters this is the number of degrees in
#   Celsius above the target temperature before disabling the heater
#   as well as the number of degrees below the target before
#   re-enabling the heater. The default is 2 degrees Celsius.
#min_temp:
#max_temp:
#   The maximum range of valid temperatures (in Celsius) that the
#   heater must remain within. This controls a safety feature
#   implemented in the micro-controller code - should the measured
#   temperature ever fall outside this range then the micro-controller
#   will go into a shutdown state. This check can help detect some
#   heater and sensor hardware failures. Set this range just wide
#   enough so that reasonable temperatures do not result in an error.
#   These parameters must be provided.
 
#target_temp: 40.0
#   A temperature (in Celsius) that will be the target temperature.
#   The default is 40 degrees.
#max_speed: 1.0
#   The fan speed (expressed as a value from 0.0 to 1.0) that the fan
#   will be set to when the sensor temperature exceeds the set value.
#   The default is 1.0.
#min_speed: 0.3
#   The minimum fan speed (expressed as a value from 0.0 to 1.0) that
#   the fan will be set to for PID temperature fans.
#   The default is 0.3.
#gcode_id:
#   If set, the temperature will be reported in M105 queries using the
#   given id. The default is to not report the temperature via M105.
 

[fan] # Part Cooling Fan
#####################################################################
# 	Part Cooling Fan
#####################################################################
# https://www.klipper3d.org/Config_Reference.html#fan

pin:						PA8  # Fan0
shutdown_speed:				0

hardware_pwm:				False
cycle_time:					0.100

kick_start_time:			0.1
max_power:					1.0
off_below:					0.1

#tachometer_pin:			
#tachometer_ppr:			2
#tachometer_poll_interval:	0.0015

[heater_fan H2O_Pump]
#####################################################################
# 	Water Pump
#####################################################################
# https://www.klipper3d.org/Config_Reference.html#heater_fan

heater:						extruder
heater_temp:				50.0

pin: 						pico:gpio20
shutdown_speed:				1.0

fan_speed:					1.0

hardware_pwm:				False
cycle_time:					0.100

kick_start_time:			0.1
max_power:					1.0
off_below:					0.1

tachometer_pin:				^pico:gpio19
tachometer_ppr:				2
tachometer_poll_interval:	0.003		# 30/(5000rpm*2ppr) fan speed is actually ~3000rpm

[heater_fan H2O_RadFan]
#####################################################################
# 	Water Radiator Fan
#####################################################################
# https://www.klipper3d.org/Config_Reference.html#heater_fan

heater:						extruder
heater_temp:				50.0

pin: 						pico:gpio15	# not actually connected - just for fan rpm monitoring purposes
shutdown_speed:				1.0			# fan speed is controlled by waterpump output (above - pico:gpio20)

fan_speed:					1.0

hardware_pwm:				False
cycle_time:					0.100

kick_start_time:			0.1
max_power:					1.0
off_below:					0.1

tachometer_pin:				^pico:gpio16
tachometer_ppr:				2
tachometer_poll_interval:	0.003	# 30/(5000rpm*2ppr) - good up to 5K rpm  Fan Speed is ~2000 RPM


[heater_fan H2O_Flow]
#####################################################################
# 	Water Flow Meter - No associated motor, just for tach purposes... 
#####################################################################
# https://www.klipper3d.org/Config_Reference.html#heater_fan

heater:						extruder
heater_temp:				50.0

pin:						pico:gpio17	 # not actually connected - just for flow meter monitoring purposes
shutdown_speed:				1.0

fan_speed:					1.0

hardware_pwm:				False
cycle_time:					0.100

kick_start_time:			0.1
max_power:					1.0
off_below:					0.1

tachometer_pin:				^pico:gpio21
tachometer_ppr:				1			# actually 3ppr - look down the hole
tachometer_poll_interval:	0.005		# 30/(3000rpm*1ppr) flow sensor speed is actually ~500-750rpm (@ 1ppr)

# A rabbit hole:
#
# @ ~35C coolant temp, flow is indicated @ ~750 rpm (2mm orifice (drilled out) or ~1000 rpm (1.5mm orifice (as shipped)) 
# I set ppr=1 even though this is a 3 ppr unit, using 1 to get higher resolution and direct display of pulses per minute.
#
# See https://i.imgur.com/eqYdCHm.png
# The sensor says frequency = 98(hz) * Q, and Q=(L/Min). 
# So at a flow rate of 1 liter per minute the pulses out would be 98 * 60 seconds = 5880 pulses to deliver that 1 liter.
# Accuracy is +/- 3%.
# So, at 1000rpm indicated (333.3 rpm actual @ 3ppr = 1000ppm) with a K-factor of 98 (per sticker on unit), that 1000ppm = 16.67Hz.
# If 1L/Min * 98 = 98Hz, @ 16.67Hz, flow is 16.67/98 ~= 170ml/min, or 1000ppm sensed/5880ppm base ~= 0.170L/min is flowing
# small diameter tubes and orifices so who the hell knows.?.  https://i.imgur.com/6Seu0GL.png sort of supports it.  ¯\_(ツ)_/¯  
# Pressures assumed based on 4M total head and closed loop: 4m = 5.69PSIG - presume all is on input & almost all on the output side
# No practical lift, so just a minor pressure differential across the flow sensor assumed
# The webs says that antifreeze has a flow coefficient of 0.66
# lol!  I taint got a klu - but some (reasonable?) amount of coolant is flowing and that is ultimately the goal here...

[temperature_fan MCU_Fan]
#####################################################################
# 	Aft_Case_Fan
#####################################################################
# https://www.klipper3d.org/Config_Reference.html#temperature_fan

sensor_type: 		temperature_mcu
#sensor_pin:		DERIVED
max_temp:			90.0
min_temp:			10.0
shutdown_speed:		1.0

target_temp: 		40.0
pin: 				PD12		# Fan2

control: 			pid			# or watermark
#max_delta: 		2.0			# delta to trigger w/ watermark control
pid_Kp:				0.3333
pid_Ki:				0.6666
pid_Kd:				0.1111
pid_deriv_time:		2.0

hardware_pwm:		False
cycle_time:			0.100

kick_start_time:	0.1
max_speed:			1.0
max_power:			1.0
min_speed:			0.0
off_below:			0.1

#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:

gcode_id:			MCU

[temperature_fan PS_Fan]
#####################################################################
# 	Fwd_Case_Fan
#####################################################################
# https://www.klipper3d.org/Config_Reference.html#temperature_fan

sensor_type:		PS
sensor_pin:			PF7
max_temp:			90
min_temp:			10
shutdown_speed:		1

target_temp:		35.0
pin:				PD13		# Fan3

control: 			pid			# or watermark
#max_delta: 		2.0			# delta to trigger w/ watermark control
pid_Kp:				0.3333
pid_Ki:				0.6666
pid_Kd:				0.1111
pid_deriv_time:		2.0

hardware_pwm:		False
cycle_time:			0.100

kick_start_time:	0.1
max_speed:			1.0
max_power:			1.0
min_speed:			0.0
off_below:			0.1

#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:

gcode_id:			PS

[temperature_fan Chamber]
#####################################################################
# 	Stirring_Filter Fan - Evermore blowers
#####################################################################
# https://www.klipper3d.org/Config_Reference.html#temperature_fan

sensor_type:		Duct
sensor_pin:			PF5
max_temp:			90.0
min_temp:			10.0
shutdown_speed:		1.0

target_temp:		35.0
pin:				PD15		# Fan5

control: 			pid			# or watermark
#max_delta: 		2.0			# delta to trigger w/ watermark control
pid_Kp:				0.3333
pid_Ki:				0.6666
pid_Kd:				0.1111
pid_deriv_time:		2.0

hardware_pwm:		False
cycle_time:			0.100

kick_start_time:	0.1
max_speed:			1.0
max_power:			1.0
min_speed:			0.0
off_below:			0.1

#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:

# gcode_id:			Chamber

[temperature_fan Exhaust]
#####################################################################
# 	Exhaust Fan
#####################################################################
# https://www.klipper3d.org/Config_Reference.html#temperature_fan

sensor_type:		Chamber
sensor_pin:			PF6
max_temp:			90
min_temp:			10
shutdown_speed:		0.0

target_temp:		60.0
pin:				PD14		# Fan4

control:			watermark	# or pid
max_delta: 			2.0			# delta to trigger w/ watermark control
#pid_Kp:			0.3333
#pid_Ki:			0.6666
#pid_Kd:			0.1111
#pid_deriv_time:	2.0

hardware_pwm:		False
cycle_time:			0.100

kick_start_time:	0.1
max_speed:			1.0
max_power:			1.0
#min_speed:			0.3
off_below:			0.0

#tachometer_pin:
#tachometer_ppr:
#tachometer_poll_interval:

# gcode_id: Exhaust
