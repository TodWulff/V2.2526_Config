#####################################################################
# 	_steppers_printer Stepper Settings
#####################################################################

[gcode_macro _info_steppers_printer]
gcode:

#####################################################################
# [stepper]Â¶
#####################################################################

# Stepper motor definitions. Different printer types (as specified by the "kinematics" 
# option in the [printer] config section) require different names for the stepper (eg, 
# stepper_x vs stepper_a). Below are common stepper definitions.

# See the rotation distance document for information on calculating the rotation_distance 
# parameter. See the Multi-MCU homing document for information on homing using multiple 
# micro-controllers.

#[stepper_x]
#step_pin:
#   Step GPIO pin (triggered high). This parameter must be provided.
#dir_pin:
#   Direction GPIO pin (high indicates positive direction). This
#   parameter must be provided.
#enable_pin:
#   Enable pin (default is enable high# use ! to indicate enable
#   low). If this parameter is not provided then the stepper motor
#   driver must always be enabled.
#rotation_distance:
#   Distance (in mm) that the axis travels with one full rotation of
#   the stepper motor (or final gear if gear_ratio is specified).
#   This parameter must be provided.
#microsteps:
#   The number of microsteps the stepper motor driver uses. This
#   parameter must be provided.
#full_steps_per_rotation: 200
#   The number of full steps for one rotation of the stepper motor.
#   Set this to 200 for a 1.8 degree stepper motor or set to 400 for a
#   0.9 degree motor. The default is 200.
#gear_ratio:
#   The gear ratio if the stepper motor is connected to the axis via a
#   gearbox. For example, one may specify "5:1" if a 5 to 1 gearbox is
#   in use. If the axis has multiple gearboxes one may specify a comma
#   separated list of gear ratios (for example, "57:11, 2:1"). If a
#   gear_ratio is specified then rotation_distance specifies the
#   distance the axis travels for one full rotation of the final gear.
#   The default is to not use a gear ratio.
#step_pulse_duration:
#   The minimum time between the step pulse signal edge and the
#   following "unstep" signal edge. This is also used to set the
#   minimum time between a step pulse and a direction change signal.
#   The default is 0.000000100 (100ns) for TMC steppers that are
#   configured in UART or SPI mode, and the default is 0.000002 (which
#   is 2us) for all other steppers.
#endstop_pin:
#   Endstop switch detection pin. If this endstop pin is on a
#   different mcu than the stepper motor then it enables "multi-mcu
#   homing". This parameter must be provided for the X, Y, and Z
#   steppers on cartesian style printers.
#position_min: 0
#   Minimum valid distance (in mm) the user may command the stepper to
#   move to.  The default is 0mm.
#position_endstop:
#   Location of the endstop (in mm). This parameter must be provided
#   for the X, Y, and Z steppers on cartesian style printers.
#position_max:
#   Maximum valid distance (in mm) the user may command the stepper to
#   move to. This parameter must be provided for the X, Y, and Z
#   steppers on cartesian style printers.
#homing_speed: 5.0
#   Maximum velocity (in mm/s) of the stepper when homing. The default
#   is 5mm/s.
#homing_retract_dist: 5.0
#   Distance to backoff (in mm) before homing a second time during
#   homing. Set this to zero to disable the second home. The default
#   is 5mm.
#homing_retract_speed:
#   Speed to use on the retract move after homing in case this should
#   be different from the homing speed, which is the default for this
#   parameter
#second_homing_speed:
#   Velocity (in mm/s) of the stepper when performing the second home.
#   The default is homing_speed/2.
#homing_positive_dir:
#   If true, homing will cause the stepper to move in a positive
#   direction (away from zero)# if false, home towards zero. It is
#   better to use the default than to specify this parameter. The
#   default is true if position_endstop is near position_max and false
#   if near position_min.


[stepper_x]
## X Stepper on MOTOR0(B Motor)
step_pin: PF13
dir_pin: PF12
enable_pin: !PF14
rotation_distance: 40
microsteps: 16
full_steps_per_rotation:400
endstop_pin: PG6
position_min: 0
position_endstop: 350
position_max: 350.05
homing_speed: 100   #Max 100
homing_retract_dist: 5
homing_positive_dir: true

##--------------------------------------------------------------------

[stepper_y]
## Y Stepper on MOTOR1 (A Motor)
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
rotation_distance: 40
microsteps: 16
full_steps_per_rotation:400
endstop_pin: PG9
position_min: 0
position_endstop: 350
position_max: 350.05
homing_speed: 100  #Max 100
homing_retract_dist: 5
homing_positive_dir: true

 
[stepper_z]
#####################################################################
# 	Z Stepper Settings
#####################################################################

## -----------------------------------
## Z0 Stepper - Front Left on MOTOR2_1
## -----------------------------------

step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

endstop_pin: PG10
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##	Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
#position_endstop: -0.5
position_max: 300	# this is with an enclosure and MHz wiring in chains - y chain rubs on upper @ 302
position_min: -5
homing_speed: 15
homing_retract_speed: 25
second_homing_speed: 10
homing_retract_dist: 2.0

[stepper_z1]
## -----------------------------------
##	Z1 Stepper - Rear Left on MOTOR3
## -----------------------------------

step_pin: PG4
dir_pin: !PC1
enable_pin: !PA0
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

[stepper_z2]
## -----------------------------------
##	Z2 Stepper - Rear Right on MOTOR4
## -----------------------------------

step_pin: PF9
dir_pin: PF10
enable_pin: !PG2
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

[stepper_z3]
## -----------------------------------
##	Z3 Stepper - Front Right on MOTOR5
## -----------------------------------

step_pin: PC13
dir_pin: !PF0
enable_pin: !PF1
rotation_distance: 40
gear_ratio: 80:16
microsteps: 16

[extruder]
#####################################################################
# 	Extruder - Orbiter v2.0 insatlled 23May22
#####################################################################
# Oribiter v1.5 here
# drive ratio is 7.5:1
# [Pre-Gear] MOTOR rotation distance is 4.637 as reported in docs...
# multiply those out and one gets 34.7775 which could be used for initial rotation distance
# It takes 7.5 revolutions of the stepper to do this, so with a 1.8deg stepper, this
# nets 1500 steps for 34.7775, reduces down to a val of 43.131335 steps per mm.

## -----------------------------------
##	E0 on MOTOR6
## -----------------------------------

step_pin:						PE2
dir_pin:						PE3
enable_pin:						!PD4
##	Update value below when you perform extruder calibration

##	rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100

# Orbiter v1.5 installed
# rotation_distance:			4.637 <-- fukin lies on the orbiter v1.5 firmware config guide section 2.1.  Lies, I tell Ya!  Lies...
# rotation_distance:			33.34816366896		# netted 104.5 consumed.
# light rotation_distance:		34.8488310340632	# netted < 100 consumed
#rotation_distance: 			33.75				# netted 101.351325 consumed
								# increasing the rot dist value serves to cause less filament to be extruded
								# so, with 33.75 RD if 101.351325 was consumed when 100 commanded, need to bump it a bit
#rotation_distance: 			34.2060721875		# Orbiter v1.5 final - need to refine with weight based validation

# ok just changed to a Orbiter v2 from a v1.5 - 200mm of filament weights .504g
# A PITA!  I suspect my math is fucked somewhere.  Had to do it way too many time to narrow in on a good value
# rotation_distance:			34.20607219			# .490
# rotation_distance:			33.25590352			# .515
# rotation_distance:			33.98172681			# .488
# rotation_distance:			32.90294183			# .492
# rotation_distance:			33.67397773			# .495
# rotation_distance:			33.48584433			# .509
# rotation_distance:			33.55303483			# .500
# rotation_distance:			33.52317239			# .503
rotation_distance:				33.50000000			# .504

##	Update Gear Ratio depending on your Extruder Type
##	Use 50:17 for Afterburner/Clockwork (BMG Gear Ratio)
##	Use 80:20 for M4, M3.1
gear_ratio:						7.5:1	# orbiter v1.5 & v2
# though I saw a reference to 7.2:1 and trying to vet if that may be applicable

microsteps:						16		# per ldo docs
full_steps_per_rotation:		200		# 200 for 1.8 degree, 400 for 0.9 degree
filament_diameter:				1.75	# why is this a mandatory klipper config item vs. slicer only?  PA, maybe?
nozzle_diameter:				0.600	# why is this a mandatory klipper config item vs. slicer only?  PA, maybe?
#instantaneous_corner_velocity:	5.000	# mm/s

##	Try to keep pressure_advance below 1.0  ##	Default smth time is 0.040, leave stock
pressure_advance:				0.035	# 0.025 per ldo docs  was 0.035
pressure_advance_smooth_time:	0.040	# 0.030 per ldo docs  was 0.040

# per orbiter
max_extrude_only_velocity:		7200	# 120 per ldo docs  was 7200
max_extrude_only_accel:			800 	# 10K per ldo docs  was 800 (10K seems way fat, but will try it)
max_extrude_only_distance:		200		# 500 per ldo docs  was 200

# per ercf
max_extrude_cross_section:		50.0	# no ldo doc guidance here - dunno if this warrants update

heater_pin:						PA2
max_power:						1.0
sensor_type:					PT1000
sensor_pin:						PF4
pullup_resistor:				4700
smooth_time:					1.0
min_extrude_temp:				170
min_temp:						0
max_temp:						375

## These are system config'd - these setting are used until a PID tuning session is ran.
#control = pid
#pid_kp = 17.665
#pid_ki = 0.885
#pid_kd = 88.107

# pwm_cycle_time:					0.100

#control = watermark
#max_delta: 2.0

