#--------------------------------------------------------------------

[delayed_gcode _corexy_gantry_speed_test_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_corexy_gantry_speed_test_loaded func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _printer_vars"].ptr_verb_cfgload %} 
		M118 >>> _corexy_gantry_speed_test.cfg Loaded. <<<
	{% endif %}
	_proc_end function=_corexy_gantry_speed_test_loaded 


[gcode_macro corexy_gantry_speed_test]
description: ~MHz's CoreXY Speed Test [spdidx=float 1.0 to 20.0] 1 is slow, 6 is fast, >10 wearing PPE is advised...

# Example:  corexy_gantry_speed_test spdidx= 

# Optional Parameter(s):
# spdidx=__	float index from 1.x to 20.0 - detailed below - defaults to 4.0.  The speed index parameter can be used
# to pass either a 1.0>=spdidx>=20.0 as orig designed, or, if the user passes a 50.0<=spdidx<=1000.0 parameter, the
# code will interpret this as an angular speed in mm/x and derive a spdidx from same.  So passing a spdidx of 1.0
# to 20.0 will impute speeds as depicted in the table below, whereas passing a spdidx of, as a couple examples, 350
# or 550 will impute overt speeds of 350mm/sec or 550mm/sec respectively.  The use of the spdidx parameter in this
# manner makes the tool a bit easier to use. 1.0<=spdidx<=20.0 (with speeds derived from maths/table below) OR
# 50.0<=spdidx<=1000.0 (results in that speed being tested directly).
#
# (reasonable parameter error trapping imputed in the code below)
#
# The following is a todomization of the original code by 120decibell (OP).
# The hole was deep:  `Well!' thought [~MHz] to [him]self, `after such a fall as this,
# I shall think nothing of tumbling down stairs! How brave they'll all think me at home!
# Why, I wouldn't say anything about it, even if I fell off the top of the house!'
# (shamelessly raped from https://www.cs.cmu.edu/~rgs/alice-I.html)
#
# Optional Parameters enumerated above.  It is up to the user to wrap this in other code
# to instantiate the desired test context (wrt HE/Bed/Chamber temps, primairly)...
#
# This proc is intended to exercise a CoreXY A/B drive assembly in logical patterns at specific
# speeds, so users can view before/after displacement vitals enabling one to make an objective
# determination as to what practical speed limits should be applied to the printer, considering
# the physics in play at that time: TH mass, rail friction, chain/wire mass, various temps, etc.
#
# In the Voron CoreXY kinematics, there are two steppers that drive the toolhead on
# the horizontal plane.  There are three states that each of the steppers can operate in:
# Static (not moving), spinning ClockWise (cw), or spinning CounterClockwise (ccw).
# The table below enumerates the combinatings of these states for the gantry/toolhead.
# The following table assumes v2/vT - B motor on LH gantry rear and A motor on RH gantry rear,
# with drive belt routing per their respective designs (Rot_ direction when viewed from top)
#
#-	RotA	RotB	Bed From	To
#0	-		-   	..toolhead static..
#1	-		cw  	lt front	rt rear
#2	-		ccw 	rt rear		lt front
#3 	cw		-   	lt rear		rt front
#4	cw		cw  	lt rear		rt rear
#5 	cw		ccw 	rt rear		rt front
#6	ccw		-   	rt front	lt rear
#7	ccw		cw  	lt front	lt rear
#8	ccw		ccw 	rt front	lt front
#
# This imputes that there are 8 dynamic states that can be in play which merit testing.  The
# code below drives the steppers in all 8 of the states enumerated in the above table by [first
# QGL'g and homing if not so and then] moving at a prep_rate to the origin starting point.  OP
# had testing coordinates codified from edge to edge (i.e. 0,0 to 350,350).  This is cringe-
# inducing and triggering for me, so adopted a conservative buffer of 10mm on each edge, given
# the motors will be potentially driven at 'insane rates' which can impute overshoot/collision.
#
# Currently, the code is structured to drive the motors in a predetermined sequence to
# ensure that each of the above 8 states are exercised once per iteration.  Future test
# sequencing may enable randomness, or enable the user to pass a sequencer parameter to
# allow run-time selection of multiple (or random?) sequences.  To keep the stepper motors
# moving at the selected rate passed, the sequencing of the movements are intentionally
# structured such that there is congruity in transitioning from one leg to the next without
# repositioning the toolhead - ensures all 8 of the motor states can be exercised efficiently.
#
# OP's code had rates (and sequencing) hard-coded @ F27000 on angular & F36000 on axial movements, a
# (3:4) ratio.  Considering Pythagoras/isosceles right triangles, equal sides of 3 nets a hypotenuse of
# 4.242...  So, to get all movements to the same temporal factors, a ratio of 3:4.24264 is to be employed
# herein.  Interestingly (given I'm a pseudo EE), this reduces to 1:1.414213562 <-- look familiar (RMS:Peak)?
#
# Speeds:
#				Feedrates					Speeds
#				mm/Minute					mm/Second
#			(Single)	(Dual)			(Single)	(Dual)
#spdidx		Angular		Axial			Angular		Axial
#---------------------------------------------------------------
# 1.0		3000		4242.640687		50			70.71067812
# 2.0		6000		8485.281374		100			141.4213562
# 3.0		9000		12727.92206		150			212.1320344
# 4.0		12000		16970.56275		200			282.8427125
# 5.0		15000		21213.20344		250			353.5533906
# 6.0		18000		25455.84412		300			424.2640687
# 7.0		21000		29698.48481		350			494.9747468
# 8.0		24000		33941.1255		400			565.6854249
# 9.0		27000		38183.76618		450			636.3961031
# 10.0		30000		42426.40687		500			707.1067812
# 11.0		33000		46669.04756		550			777.8174593
# 12.0		36000		50911.68825		600			848.5281374
# 13.0		39000		55154.32893		650			919.2388155
# 14.0		42000		59396.96962		700			989.9494937
# 15.0		45000		63639.61031		750			1060.660172
# 16.0		48000		67882.25099		800			1131.37085
# 17.0		51000		72124.89168		850			1202.081528
# 18.0		54000		76367.53237		900			1272.792206
# 19.0		57000		80610.17306		950			1343.502884
# 20.0		60000		84852.81374		1000		1414.213562
#
# "SO, this is all well and good, but wth am I to use it for?"  A good question.  Short Answer:  To see how fast you
# can move the toolhead around on the XY gantry without tossing errors, or losing track of it's positioning.
#
# In reviewing the results (a marked-up copy here: https://i.imgur.com/kaccEpA.png), the items of interest are primairly
# those in the box, with specific focus on the X and Y (A & B) stepper values.  The goal is to use the tool to find the
# fastest rates/speeds in which the tool head can be yanked around rapidly without losing track of the tool head positioning,
# or having an error tossed because the FW/HW couldn't keep up with the demands of the Klipper host.
#
# Test at a specific spdidx (starting from lower values and working towards larger values), review results, bump speeds up,
# compare to last, keep going until a it develops where you see a divergent trend between start and stop positioning, or
# that you start getting errors being tossed.
#
# The practical limits this tool is intended to reveal are the max speeds the gantry AB servos can be driven with both no/
# minimal loss of position tracking and no error messages about the stepper drivers not being able to keep up with the demands
# from the klipper host.  An example of the latter is depicted here: https://i.imgur.com/UjGzqx3.png
#
# If one gets up to the point where they are bumping up against the ->max_velocity<- speed defined in the [printer] section,
# but are not yet seeing loss of tracking nor errors being tossed, one might want to increase said parameter in the .cfg file
# and rerun the corexy_gantry_speed_test with larger spdidx= values.  Example of exceeding speed limits in the config file:
# https://i.imgur.com/sF0vu0E.png  (I had 750mm/s limit, and was pushing at 777mm/s axial speeds).  Changing my max_velocity
# to 1000 mm/s, I was able to run the test successfully at index 11 with no issues:  https://i.imgur.com/Ih96dat.png
#
# However, running it at index 12 600/848 mm/S, the steppers started skipping and I had to emergency stop as it got fubar - lol.
# So my max_velocity is set back at 750mm/s.  I could play around with running the tests at fractional portions above 11 (i.e.
# 11.25, 11.5, 11.75, etc.), but meh, I've hit the point of diminishing returns and will never likely print this fast anyways.
# However, it is good to know that I could do so, if I desired or needed to.
#
# Of note:  I know that stepper drivers, stepper motors, and config thereof is material in all of this.  1.8 deg steppers are by
# design stronger and more capable than the 0.9 degree steppers I have on here currently.  Also, microsteps and interpolation do
# factor into max usable speeds.  When I run at 256 microsteps, things start flailing at speeds north of 500mm/s.  Changing to
# microsteps of 16, I was able to squeeze out ~50% more speed.
#
# Further, I am pretty sure stepper driver current settings factor into this, as well as material changes to the tool-head,
# and general system topology.  With a new build, with a Pi, a stock AB and minimal wires in the chains, I was able to run at
# speeds that were North of 500mm/S and was seeing loss of position tracking (Deltas of severall hundreds depicted between the
# start and finish info displays.  With my system as it is today (external klipper host connected to the printer via a USB hub),
# and with full chains due to all the things I am doing out on the TH (different/heavier now (PCB, Accelerometer, Nozzle Cam, etc.))
# I am able to push it only so hard (I start getting errors with spdidx of 7.0 and higher (just N of 500mm/s)) and get errors before
# the drivers start to lose track of TH positioning (with microsteps of 256).  YMMV.  If you find it useful, please do let me know
# how, and what you might want to see improved with the tool.  TIA!
#
# ~MHz

gcode:

	_proc_start function=corexy_gantry_speed_test func_params='"{rawparams|string}"'  

	{% set axialrate_multiplier = 1.414166667|float  %}						# is sqrt(2) - there is no jinja2 root nor sqrt filter

	# get printer parameters
	{% set max_x = printer.toolhead.axis_maximum.x|int %}	 				# max_x from [printer]
	{% set max_y = printer.toolhead.axis_maximum.y|int %}	 				# max_y from [printer]
	{% set max_frxy = printer.toolhead.max_velocity|int * 60 %}	 			# max_velocity from [printer]

	# assert bounds on play field
	{% set min_x_test = 10|int %}											# provide 10mm buffer zone from printer limits
	{% set min_y_test = 10|int %}											# provide 10mm buffer zone from printer limits
	{% set max_x_test = max_x - 10|int %}									# provide 10mm buffer zone from printer limits
	{% set max_y_test = max_y - 10|int %}									# provide 10mm buffer zone from printer limits

	# assert origin stuffs
	{% set test_x_origin = max_x_test|int %}								# origin cordinates for test start/conclusion
	{% set test_Y_origin = max_y_test|int %}								# origin cordinates for test start/conclusion
	{% set test_preprateidx = 1|int %}										# stepper rates for test start/conclusion movements

	# init vars from passed params
	{% set spdidx = params.SPDIDX|default(4)|float %}						# defaults to spdidx 4 = 200mm/sec

	# allow for passing speeds directly as the spdidx parameter and divide by 50 to derive the spdidx
	{% if spdidx >= 50.0 %}
		{% set spdidx = (spdidx/50.0) %}
	{% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
		M118 corexy_gantry_speed_test params: {rawparams}
	{% endif %}

	# set parameter bounds
	{% set spdidx_min = 1|int %}		#
	{% set spdidx_max = 20|int %}		#

	# passed parameter bounds checking & error tossing
	{% if spdidx < spdidx_min or spdidx > spdidx_max %}
		M118 Passed spdidx parameter out of bounds - aborting
		{ action_raise_error("Bounds: 1.0>=spdidx>=20.0  OR  50.0>=spdidx>=1000.0") }
	{% endif %}

	# set test feedrates
	{% set test_axialfr = (spdidx*3000*axialrate_multiplier)|int %}
	{% set test_angularfr = (spdidx*3000)|int %}

	# set test feedrates
	M118 {'PrinterMaxFeedrate:\t' + max_frxy|int|string + ' mm/min  |  ' + (max_frxy/60)|int|string  + ' mm/s' }
	M118 {'TestAxialFeedrate:\t' + test_axialfr|int|string + ' mm/min  |  ' + (test_axialfr/60)|int|string  + ' mm/s' }
	M118 {'TestAngularFeedrate:\t' + test_angularfr|int|string + ' mm/min  |  ' + (test_angularfr/60)|int|string  + ' mm/s' }

	# check test feedrates against printer max feedrates and error out on an exceedance
	{% if test_axialfr > max_frxy %}
		{ action_raise_error("Passed spdidx parameter imputes a speed exceedance - aborting") }
	{% endif %}

	#for test dev
	{% set test_preprate = 3000|int %}							# 50mm/s speed * 60s = 3000 feedrate - benign...

	go_absolute													# overtly force absolute positioning
	_ENSURE_HOMED												# home if needed

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %}
		M118 corexy_gantry_speed_test Commencing					# annunciate test commencement
	{% endif %}

	G0 X{test_x_origin} Y{test_Y_origin} F{test_preprate} 		# move to test origin
	G4 P500														# dwell on the starting line a short bit to let things settle
	GET_POSITION												# display start stats

	# Sequencing depicted here: https://i.imgur.com/Tv5Ty06.png
	# 2 sets of movements along each of the 8 test movements
	G0 X{max_x_test} Y{min_y_test} F{test_axialfr}
	G0 X{min_x_test} Y{max_y_test} F{test_angularfr}
	G0 X{max_x_test} Y{min_y_test} F{test_angularfr}
	G0 X{min_x_test} Y{min_y_test} F{test_axialfr}
	G0 X{max_x_test} Y{max_y_test} F{test_angularfr}
	G0 X{min_x_test} Y{min_y_test} F{test_angularfr}
	G0 X{min_x_test} Y{max_y_test} F{test_axialfr}
	G0 X{max_x_test} Y{max_y_test} F{test_axialfr}

	G0 X{min_x_test} Y{min_y_test} F{test_angularfr}
	G0 X{max_x_test} Y{max_y_test} F{test_angularfr}
	G0 X{min_x_test} Y{max_y_test} F{test_axialfr}
	G0 X{max_x_test} Y{min_y_test} F{test_angularfr}
	G0 X{min_x_test} Y{max_y_test} F{test_angularfr}
	G0 X{min_x_test} Y{min_y_test} F{test_axialfr}
	G0 X{max_x_test} Y{min_y_test} F{test_axialfr}
	G0 X{max_x_test} Y{max_y_test} F{test_axialfr}

	G0 X{test_x_origin} Y{test_Y_origin} F{test_preprate} 		# move to test origin
	G4 P500														# dwell @ the finish line a short bit to let things settle
	GET_POSITION												# display finish stats

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %}
		M118 corexy_gantry_speed_test Complete						# annunciate test conclusion
	{% endif %}

	_proc_end function=corexy_gantry_speed_test 

