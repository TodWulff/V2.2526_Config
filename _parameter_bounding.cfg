[gcode_macro _bound_vars]
description:  vars for bounds checking

variable_bound_alarm_duration:			1000		#ms		(3 iterations)
variable_bound_alarm_recurse_period:	1800		#secs	(30 min)
variable_bounds_check_period:			60			#secs	(check bounds once a minute)

variable_h2o_flow_rpm_max:				1999
variable_h2o_flow_rpm_min:				200

variable_h2o_pump_rpm_max:				9999
variable_h2o_pump_rpm_min:				1000

variable_h2o_rad_fan_rpm_max:			9999
variable_h2o_rad_fan_rpm_min:			1000

variable_h2o_temp_max:					50
variable_h2o_temp_min:					10

gcode:
	#there is none - for var use only...

[delayed_gcode _bound_alarm]
#description: runtime proc to check various runtime parameters and initiate a pause on an exceedence
initial_duration: 0

gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_bound_alarm func_params='"{rawparams|string}"'  {% endif %}

	SET_PIN PIN=_Alarm_pin VALUE=1
	G4 P{printer["gcode_macro _bound_vars"].bound_alarm_duration}
	SET_PIN PIN=_Alarm_pin VALUE=0
	
	UPDATE_DELAYED_GCODE ID=_bound_alarm DURATION={printer["gcode_macro _bound_vars"].bound_alarm_recurse_period|float}
	
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_bound_alarm {% endif %}

[gcode_macro _start_bounds_alarm]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_start_bounds_alarm func_params='"{rawparams|string}"'  {% endif %}

	UPDATE_DELAYED_GCODE ID=_bound_alarm DURATION=0.1

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_start_bounds_alarm {% endif %}

[gcode_macro _stop_bounds_alarm]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_stop_bounds_alarm func_params='"{rawparams|string}"'  {% endif %}

	UPDATE_DELAYED_GCODE ID=_bound_alarm DURATION=0

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_stop_bounds_alarm {% endif %}

[gcode_macro _check_bounds]
description: runtime proc to check various parameters and initiate a pause & bound_alarm on an exceedence

gcode:
	
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_check_bounds func_params='"{rawparams|string}"'  {% endif %}

	{% set H2O_Flow_RPM = printer['heater_fan H2O_Flow_720'].rpm %}
	{% set H2O_Pump_RPM = printer['heater_fan H2O_Pump_3K'].rpm %}
	{% set H2O_Rad_Fan_RPM = printer['heater_fan H2O_Rad_Fan'].rpm %}
	{% set H2O_Temp = printer['temperature_sensor Hotend_H2O'].temperature %}

#	M118 H2O_Flow_RPM: {printer["gcode_macro _bound_vars"].h2o_flow_rpm_min|int} <= {H2O_Flow_RPM|int} <= {printer["gcode_macro _bound_vars"].h2o_flow_rpm_max|int}
#	M118 H2O_Pump_RPM: {printer["gcode_macro _bound_vars"].h2o_pump_rpm_min|int} <= {H2O_Pump_RPM|int} <= {printer["gcode_macro _bound_vars"].h2o_pump_rpm_max|int}
#	M118 **H2O_Rad_Fan_RPM: {printer["gcode_macro _bound_vars"].h2o_rad_fan_rpm_min|int} <= {H2O_Rad_Fan_RPM|int} <= {printer["gcode_macro _bound_vars"].h2o_rad_fan_rpm_max|int}
#	M118 H2O_Temp: {printer["gcode_macro _bound_vars"].h2o_temp_min|int} <= {H2O_Temp|int} <= {printer["gcode_macro _bound_vars"].h2o_temp_max|int}
	
	{% if 	
		(H2O_Flow_RPM 		>	printer["gcode_macro _bound_vars"].h2o_flow_rpm_max)		or 
		(H2O_Flow_RPM 		<	printer["gcode_macro _bound_vars"].h2o_flow_rpm_min)		or
		(H2O_Pump_RPM 		>	printer["gcode_macro _bound_vars"].h2o_pump_rpm_max)		or
		(H2O_Pump_RPM 		<	printer["gcode_macro _bound_vars"].h2o_pump_rpm_min)		or
	# these are commented, pending receipt of a 4-pin radiator fan
		# (H2O_Rad_Fan_RPM	>	printer["gcode_macro _bound_vars"].h2o_rad_fan_rpm_max)		or
		# (H2O_Rad_Fan_RPM	<	printer["gcode_macro _bound_vars"].h2o_rad_fan_rpm_min)		or
		(H2O_Temp			>	printer["gcode_macro _bound_vars"].h2o_temp_max)			or
		(H2O_Temp			<	printer["gcode_macro _bound_vars"].h2o_temp_min)		
		%}

		_start_bounds_alarm
		pause

	{% else %}

		_stop_bounds_alarm
		
	{% endif %}
	
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_check_bounds {% endif %}

[delayed_gcode check_bounds]
initial_duration: 0

gcode:
	
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=check_bounds func_params='"{rawparams|string}"'  {% endif %}

	_check_bounds
	
	UPDATE_DELAYED_GCODE ID=check_bounds DURATION={printer["gcode_macro _bound_vars"].bounds_check_period|int}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=check_bounds {% endif %}

[gcode_macro _start_bounds_checking]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_start_bounds_checking func_params='"{rawparams|string}"'  {% endif %}

	_stop_bounds_alarm
	
	UPDATE_DELAYED_GCODE ID=check_bounds DURATION=0.1

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_start_bounds_checking {% endif %}

[gcode_macro _stop_bounds_checking]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_stop_bounds_checking func_params='"{rawparams|string}"'  {% endif %}
	
	UPDATE_DELAYED_GCODE ID=check_bounds DURATION=0

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_stop_bounds_checking {% endif %}

