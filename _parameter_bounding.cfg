[gcode_macro _bound_vars]
description:  vars for bounds checking

variable_bound_alarm_duration:			1200		#ms		(3 iterations)
variable_bound_alarm_recurse_period:	1800		#secs	(30 min)
variable_bounds_check_period:			60			#secs	(check bounds once a minute)

variable_H2O_Flow_RPM_Max:				999
variable_H2O_Flow_RPM_Min:				200

variable_H2O_Pump_RPM_Max:				9999
variable_H2O_Pump_RPM_Min:				2000

variable_H2O_Rad_Fan_RPM_Max:			9999
variable_H2O_Rad_Fan_RPM_Min:			2000

variable_H2O_Temp_Max:					50
variable_H2O_Temp_Min:					10

; variable_
; variable_
; variable_
; variable_

gcode:
	#there is none - for var use only...

[delayed_gcode _bound_alarm]
#description: runtime proc to check various runtime parameters and initiate a pause on an exceedence
initial_duration: 0.0

gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_bound_alarm func_params='"{rawparams|string}"'  {% endif %}

	SET_PIN PIN=_Alarm_pin VALUE=1
	G4 P{printer["gcode_macro _bound_vars"].bound_alarm_duration}
	SET_PIN PIN=_Alarm_pin VALUE=0
	
	UPDATE_DELAYED_GCODE ID=_bound_alarm DURATION={printer["gcode_macro _bound_vars"].bound_alarm_recurse_period}
	
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_bound_alarm {% endif %}

[gcode_macro _start_bound_alarm]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_start_bound_alarm func_params='"{rawparams|string}"'  {% endif %}

	UPDATE_DELAYED_GCODE ID=_bound_alarm DURATION=0.1					# start a recursive pause alarm

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_start_bound_alarm {% endif %}

[gcode_macro _stop_bound_alarm]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_stop_bound_alarm func_params='"{rawparams|string}"'  {% endif %}

	UPDATE_DELAYED_GCODE ID=_bound_alarm DURATION=0					# stop the recursive pause alarm

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_stop_bound_alarm {% endif %}

[delayed_gcode _check_bounds]
#description: runtime proc to check various parameters and initiate a pause & bound_alarm on an exceedence
initial_duration: 0.0

gcode:
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_check_bounds func_params='"{rawparams|string}"'  {% endif %}

	{% set H2O_Flow_RPM = printer['heater_fan H2O_Flow_720'].rpm %}
	{% set H2O_Pump_RPM = printer['heater_fan H2O_Pump_3K'].rpm %}
	{% set H2O_Rad_Fan_RPM = printer['heater_fan H2O_Rad_Fan'].rpm %}
	{% set H2O_Temp = printer['temperature_sensor Hotend_H2O'].temperature %}
	
	{% if 	
		H2O_Flow_RPM 	>	printer["gcode_macro _bound_vars"].H2O_Flow_RPM_Max	or 
		H2O_Flow_RPM 	<	printer["gcode_macro _bound_vars"].H2O_Flow_RPM_Min	or
		H2O_Pump_RPM 	>	printer["gcode_macro _bound_vars"].H2O_Pump_RPM_Max	or
		H2O_Pump_RPM 	<	printer["gcode_macro _bound_vars"].H2O_Pump_RPM_Min	or
		H2O_Rad_Fan_RPM	>	printer["gcode_macro _bound_vars"].H2O_Rad_Fan_RPM_Max	or
		H2O_Rad_Fan_RPM	<	printer["gcode_macro _bound_vars"].H2O_Rad_Fan_RPM_Min	or
		H2O_Temp		>	printer["gcode_macro _bound_vars"].H2O_Temp_Max		or
		H2O_Temp		<	printer["gcode_macro _bound_vars"].H2O_Temp_Min		
		%}

		_start_bound_alarm
		
		pause				# includes a _stop_bounds_checking

	{% else %}
	
		_stop_bound_alarm	#dunno if it makes sense or not, but feels right
		
		UPDATE_DELAYED_GCODE ID=_check_bounds DURATION={bounds_check_period}
		
	{% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_check_bounds {% endif %}

[gcode_macro _start_bounds_checking]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_start_bounds_checking func_params='"{rawparams|string}"'  {% endif %}

	_stop_bound_alarm	#dunno if it makes sense or not, but feels right
	
	UPDATE_DELAYED_GCODE ID=_check_bounds DURATION=0.1					# start a recursive iterative loop

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_start_bounds_checking {% endif %}

[gcode_macro _stop_bounds_checking]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_stop_bounds_checking func_params='"{rawparams|string}"'  {% endif %}

	_stop_bound_alarm
	UPDATE_DELAYED_GCODE ID=_check_bounds DURATION=0					# stop the recursive pause alarm

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_stop_bounds_checking {% endif %}

