#--------------------------------------------------------------------
# _sys_load_validation.cfg gcode 'module'
# https://github.com/TodWulff/blah <-- repo documentation placeholder
#--------------------------------------------------------------------

[delayed_gcode _sys_load_validation_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_sys_load_validation_loaded func_params='"{rawparams|string}"'
	_module_loaded MODULE=_sys_load_validation
	_proc_end function=_sys_load_validation_loaded

[gcode_macro _INFO_sys_load_validation_module]				# module prerequisites/documentation/notes/examples/etc.

gcode:

# OK, with telegram bot's post print video encode/transcode/composing, there is a
# real threat of trying to initiate a print when system is task saturated, such as
# starting a print right after the last print completed.
# https://i.imgur.com/DlGY2Ln.png

# this code is intended to, at print start:

# check if printer['system_stats'].sysload threshold is exceeded, if not, carry on
# if exceeded,
#	increment counter svv.sys_load_escapes (reset to 0 on startup and print_start entry),
#	annunciate and wait the dwell (g4 p(sys_load_check_dwell*1000))
# then loops to recheck (looping via delayed gcode and svv.flag state variables)

# if svv.sys_load_escapes exceeds sys_load_escape_trigger, trip and fire off a UI query to
# wait until load decreases to below threshold, or to forcibly carry on now regardless...
#
# if wait, reset svv.sys_load_escapes to 0 and do it all again
# if no wait, then carry on

# Conditionally call this modules procs by use of the following template code:

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	{% if	svv.module_sys_load_validation_loaded|int and
		not svv.module_sys_load_validation_err_flag|int %}
		check_system_load	# [included sys_load_validation.cfg] module's proc to ensure that system not tasksat @ print start
	{% endif %}

	# instrumentation code for macro trace purposes
	_proc_start function=_INFO_sys_load_validation_module func_params='"THIS SHOULD NOT HAPPEN...\n{rawparams|string}"'

	# there is none - this module's code should not be called by other code

	# instrumentation code for macro trace purposes
	_proc_end function=_INFO_sys_load_validation_module

#--------------------------------------------------------------------

[delayed_gcode _sys_load_validation_module_start]
#description: Sets module-specific state flags for conditional use elsewhere.
#be sure to add in any module-specific init into __startup_autoexec.cfg (i.e. module loaded = 0, error = 1, etc.)
# this should autorun once time at module loading and not called from elsewhere
initial_duration: 0.5							# have this delayed a bit as init code in _startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_sys_load_validation_module_start func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE=module_sys_load_validation_loaded VALUE=1		# flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=module_sys_load_validation_err_flag VALUE=0		# init error flag via persistent variable that this module is not in error

	_proc_end function=_sys_load_validation_module_start

#--------------------------------------------------------------------

[gcode_macro _sys_load_validation_vars]						# base config default macro variables for the _blah module
description: sys_load_validation module variables init'd herein

variable_cpu_util_threshold:		25			# % cpu utilization warning threshold - is avail in svv.last_cpu_util after polling w/ _update_cpu_util

gcode:

	_proc_start function=_sys_load_validation_vars func_params='"THIS SHOULD NOT HAPPEN...\n{rawparams|string}"'

	_proc_end function=_sys_load_validation_vars

#--------------------------------------------------------------------

[gcode_shell_command update_cpu_util]
command: cpu_util_to_svv
timeout: 2
verbose: false

#--------------------------------------------------------------------

[gcode_macro _update_cpu_util]
description: calls above shell cmd to update svv.last_cpu_util 
gcode::

	_proc_start function=update_cpu_util func_params={rawparams|string}

	RUN_SHELL_CMD CMD=update_cpu_util					# calls update script
	
	_proc_end function=update_cpu_util

#--------------------------------------------------------------------

[gcode_macro check_system_load]
description: main module proc intended to be called at top of print_start macro
gcode:

	_proc_start function=check_system_load func_params='"{rawparams|string}"'

	say_wait S="System Load Check"		# Being verbose
	_update_cpu_util						# this updates svv.last_cpu_util (blocks until completed)
	_sys_load_validation					# chains to _sys_load_validation for updated svv.last_cpu_util visibility
	 
	_proc_end function=check_system_load

#--------------------------------------------------------------------

[gcode_macro _sys_load_validation]
description: split this from above for cpu_util update visibility purposes
gcode: 

	_proc_start function=_sys_load_validation func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	{% if svv.last_cpu_util > printer["gcode_macro _sys_load_validation_vars"].cpu_util_threshold %}
	
		say_wait S="CPU Utilization High ({svv.last_cpu_util}％)" C="lightcoral"
		
		{% set emission = "Use:<BR>" ~ 
						  "<font color=cyan>" ~
						  "SET_GCODE_VARIABLE MACRO=_sys_load_validation_vars VARIABLE=cpu_util_threshold VALUE=__" ~
						  "</font>" ~
						  "<BR>to change threshold."
						  %}
						  
		M118 {emission}
		
		{% set ui_prompt = "Resolve and Press any UI button to continue..." %}
		
		get_user_input PROMPT="{ui_prompt}" TYPE=string RCVR_MACRO=check_system_load TO_PERIOD=0 RMDR_PERIOD=60

	{% else %}
	
		say_nc S="Good @ {svv.last_cpu_util}％"
		
	{% endif %}
	 
	_proc_end function=_sys_load_validation
