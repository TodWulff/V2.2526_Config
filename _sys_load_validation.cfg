#--------------------------------------------------------------------
# _sys_load_validation.cfg gcode 'module'
# https://github.com/TodWulff/blah <-- repo documentation placeholder
#--------------------------------------------------------------------

# remember to have this mnodule loaded via an '[include _sys_load_validation.cfg]' in ___printer.cfg

## sub-module includes, if any:
# [include _blah.cfg]

#--------------------------------------------------------------------

[delayed_gcode _sys_load_validation_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_sys_load_validation_loaded func_params='"{rawparams|string}"'
	_module_loaded MODULE=_sys_load_validation
	_proc_end function=_sys_load_validation_loaded

[gcode_macro _INFO_sys_load_validation_module]				# module prerequisites/documentation/notes/examples/etc.

gcode:

# OK, with telegram bot's post print video encode/transcode/composing, there is a
# real threat of trying to initiate a print when system is task saturated, such as
# starting a print right after the last print completed.
# https://i.imgur.com/DlGY2Ln.png

# this code is intended to, at print start:

# check if printer['system_stats'].sysload threshold is exceeded, if not, carry on
# if exceeded,
#	increment counter svv.sys_load_escapes (reset to 0 on startup and print_start entry),
#	annunciate and wait the dwell (g4 p(sys_load_check_dwell*1000))
# then loops to recheck (looping via delayed gcode and svv.flag state variables)

# if svv.sys_load_escapes exceeds sys_load_escape_trigger, trip and fire off a UI query to
# wait until load decreases to below threshold, or to forcibly carry on now regardless...
#
# if wait, reset svv.sys_load_escapes to 0 and do it all again
# if no wait, then carry on

# Conditionally call this modules procs by use of the following template code:

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	{% if	svv.module_sys_load_validation_loaded|int and
		not svv.module_sys_load_validation_err_flag|int %}
		check_system_load	# [included sys_load_validation.cfg] module's proc to ensure that system not tasksat @ print start
	{% endif %}

	# instrumentation code for macro trace purposes
	_proc_start function=_INFO_sys_load_validation_module func_params='"THIS SHOULD NOT HAPPEN...\n{rawparams|string}"'

	# there is none - this module's code should not be called by other code

	# instrumentation code for macro trace purposes
	_proc_end function=_INFO_sys_load_validation_module

#--------------------------------------------------------------------

[delayed_gcode _sys_load_validation_module_start]
#description: Sets module-specific state flags for conditional use elsewhere.
#be sure to add in any module-specific init into __startup_autoexec.cfg (i.e. module loaded = 0, error = 1, etc.)
# this should autorun once time at module loading and not called from elsewhere
initial_duration: 0.5							# have this delayed a bit as init code in _startup_autoexec.cfg runs at 0.1s after start
gcode:

	# instrumentation code for macro trace purposes
	_proc_start function=_sys_load_validation_module_start func_params='"{rawparams|string}"'

	#_blah_somehelperproc	#calling of helper procs (macros..., either below or included)

	SAVE_VARIABLE VARIABLE=module_sys_load_validation_loaded VALUE=1		# flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=module_sys_load_validation_err_flag VALUE=0		# init error flag via persistent variable that this module is not in error
	# other module-specific initialization here (sample follows)
	#SAVE_VARIABLE VARIABLE=ui_input_to_cycl_def VALUE=-1	#internal decremented counter to force a default response in event of n timeouts.

	# instrumentation code for macro trace purposes
	_proc_end function=_sys_load_validation_module_start

#--------------------------------------------------------------------

[gcode_macro _sys_load_validation_vars]						# base config default macro variables for the _blah module
description:  sys_load_validation module variables init'd herein - above module_start macro for persistent/global variable init

# _sys_load_validation_module variables here
variable_sys_load_threshold = 1.0
variable_sys_load_check_dwell = 5.0
variable_sys_load_escape_trigger = 3

gcode:

	# instrumentation code for macro trace purposes
	_proc_start function=_sys_load_validation_vars func_params='"THIS SHOULD NOT HAPPEN...\n{rawparams|string}"'

	# there is none - for _sys_load_validation_module variable use only

	# instrumentation code for macro trace purposes
	_proc_end function=_sys_load_validation_vars

#--------------------------------------------------------------------

### [delayed_gcode _blah_delayed_gcode_macro_template]
### # description: template for module's delayed_gcode macros
### # remember to edit the instrumentation code function=[BLAH] below
### initial_duration: 0
### # delayed_gcode doesn't support variables nor parameter passing, so need to use svv or other means for same
### gcode:
###
### 	# instrumentation code for macro trace entry purposes
### 	_proc_start function=_blah_delayed_gcode_macro_template func_params='"{rawparams|string}"'
###
### 	{% set svv = printer.save_variables.variables %}				# set context for save_variables object
###
### 	# do some blahy stuffs here - this could be used for one-time stuffss (like _blah_module_start above)
### 	# or for an interative looping construct - the UI module adopts this for checking for user input and
### 	# annunciating an awaiting user input bleeping every so often.
###
### 	# instrumentation code for macro trace exit purposes
### 	_proc_end function=_blah_delayed_gcode_macro_template
###
### #--------------------------------------------------------------------
###
### [gcode_macro _blah_macro_template]
### # description: template for module's gcode macros
### # remember to edit the instrumentation code function=[BLAH] below
### initial_duration: 0
### # gcode macros support variables and parameter passing - can use svv or other means for same, obv
### gcode:
###
### 	# instrumentation code for macro trace entry purposes
### 	_proc_start function=_blah_macro_template func_params='"{rawparams|string}"'
###
### 	{% set svv = printer.save_variables.variables %}				# set context for save_variables object
###
### 	# do some blahy stuffs here
###
### 	# instrumentation code for macro trace exit purposes
### 	_proc_end function=_blah_macro_template
###
### #--------------------------------------------------------------------

[gcode_macro check_system_load]
# description: main module proc intended to be called at top of print_start macro

# gcode macros support variables and parameter passing - can use svv or other means for same, obv
# variable_blah_var: val

gcode:

	# instrumentation code for macro trace entry purposes
	_proc_start function=check_system_load func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	# do some blahy stuffs here

	# instrumentation code for macro trace exit purposes
	_proc_end function=check_system_load

#--------------------------------------------------------------------

[gcode_macro _sys_load_query]
# description: ping user for input as system load is excessive and has been so for __ iterations of __ seconds

# variable_blah_var: val

gcode:

	# instrumentation code for macro trace entry purposes
	_proc_start function=_sys_load_query func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	# do some _sys_load_query stuffs here

	# instrumentation code for macro trace exit purposes
	_proc_end function=_sys_load_query

#--------------------------------------------------------------------

[gcode_macro _sys_load_dwell]
# description: proc to dwell and wait for system load to decrease to __ or below

# variable_blah_var: val

gcode:

	# instrumentation code for macro trace entry purposes
	_proc_start function=_sys_load_dwell func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	# do some blahy stuffs here

	# instrumentation code for macro trace exit purposes
	_proc_end function=_sys_load_dwell

#--------------------------------------------------------------------
