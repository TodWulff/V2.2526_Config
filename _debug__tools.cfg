#####################################################################
# _debug__tools
#####################################################################

[include _debug_userlogs.cfg]

[include _debug_trace.cfg]
[include _debug_gmove.cfg]
[include _debug_savar.cfg]
[include _debug_state.cfg]

[delayed_gcode _debug__tools_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_debug__tools_loaded func_params='"{rawparams|string}"'
	_module_loaded MODULE=_debug__tools
	_proc_end function=_debug__tools_loaded

#--------------------------------------------------------------------

[gcode_macro _info_debug__tools]
gcode:

#--------------------------------------------------------------------

[gcode_macro _debug__tools_vars]
description: macro for debug variables

variable_ptr_verb_cfgload:			0 	# enable to see cfg files loading and their load sequence
										# during boot, this overrides debug_codetrace bool below

variable_force_svv_typing:			1	# if enabled, forces type conv from str to int/flt, if numbers are stringified

variable_debug_codetrace:			0	# code trace debug startup state - 0=disabled, 1=enabled - togglable w/ macro button
variable_debug_gmove:				0	# gmove debug startup state - 0=disabled, 1=enabled - togglable w/ macro button
variable_debug_save_var:			0	# save var debug startup state - 0=disabled, 1=enabled - togglable w/ macro button
variable_debug_gcode_state:			0	# gcode state debug startup state - 0=disabled, 1=enabled - togglable w/ macro button

variable_show_proc_exit:			1	# 1 enables display of nesting depth backtics on procedure exit
variable_show_proc_exit_details:	1	# previous needs to be enabled for this to work, 1 displays function on exit, if passed

gcode:

	_proc_start function=_debug__tools_vars func_params='"{rawparams|string}"'

	# there is none, this is for module variable use only

	_proc_end function=_debug__tools_vars

#--------------------------------------------------------------------

[delayed_gcode _debug__tools_module_start]
#description: Inits state flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5					# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_debug__tools_module_start func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE=module_debug_tools_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_debug_tools_err_flag VALUE=0							#init error flag that this module is not in error

	_proc_end function=_debug__tools_module_start

#--------------------------------------------------------------------

[gcode_macro DUMP_PARAMETERS]
#####################################################################
# Dump Parameter & Print Area Limits
#####################################################################

# Use:
# - DUMP_PARAMETER print all parameter expect configfile
# - DUMP_PARAMETER P='gcode_macro _TEST' print the defined parameter group
# - DUMP_PARAMETER C='printer' print the defined config values
# - DUMP_PARAMETER S='printer' print the defined settings values
description: Debug: Print entries of the printer object
gcode:

	_proc_start function=DUMP_PARAMETERS func_params='"{rawparams|string}"'

	{% set config = True if params.C or params.S else False %}
	{% set path = 'config' if params.C
	else 'settings' if params.S %}
	{% set search = params.C if params.C
	else params.S if params.S
	else params.P if params.P %}
	{% set out = [] %}
	{% for name1 in printer|sort %}
	{% if config %} ; print the searched printer.configfile[path] parameter
	{% if name1 is in ['configfile'] %}
	{% for name2 in printer[name1][path]|sort %}
	{% if name2 is in [search] %}
	{% for name3, value in printer[name1][path][name2].items()|sort %}
	{% set _dummy = out.append("printer.configfile.%s['%s'].%s = %s" %
	(path, name2, name3, value)) %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% else %}
	{% for name2, value in printer[name1].items()|sort %} ; search for anything expext printer.configfile
	{% if search is not defined and name1 is not in ['configfile'] %} ; print all printer. parameter
	{% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
	{% elif search is defined and name1 is in [search] %} ; print the searched printer. parameter
	{% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	{% if out|length > 0 %}
	{action_respond_info(out|join("\n"))}
	{% else %}
	{action_respond_info("Nothing found for \"DUMP_PARAMETER %s\"" % rawparams)}
	{% endif %}

	_proc_end function=DUMP_PARAMETERS

#--------------------------------------------------------------------

[gcode_macro DUMP_PARAMETER]
# Use:
# - DUMP_PARAMETER print all parameter expect configfile
# - DUMP_PARAMETER P='gcode_macro _TEST' print the defined parameter group
# - DUMP_PARAMETER C='printer' print the defined config values
# - DUMP_PARAMETER S='printer' print the defined settings values
description: Debug: Print entries of the printer object
gcode:

	_proc_start function=DUMP_PARAMETER func_params='"{rawparams|string}"'

	{% set config = True if params.C or params.S else False %}
	{% set path = 'config' if params.C
	else 'settings' if params.S %}
	{% set search = params.C if params.C
	else params.S if params.S
	else params.P if params.P %}
	{% set out = [] %}
	{% for name1 in printer|sort %}
	{% if config %} ; print the searched printer.configfile[path] parameter
	{% if name1 is in ['configfile'] %}
	{% for name2 in printer[name1][path]|sort %}
	{% if name2 is in [search] %}
	{% for name3, value in printer[name1][path][name2].items()|sort %}
	{% set _dummy = out.append("printer.configfile.%s['%s'].%s = %s" %
	(path, name2, name3, value)) %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% else %}
	{% for name2, value in printer[name1].items()|sort %} ; search for anything expext printer.configfile
	{% if search is not defined and name1 is not in ['configfile'] %} ; print all printer. parameter
	{% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
	{% elif search is defined and name1 is in [search] %} ; print the searched printer. parameter
	{% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
	{% endif %}
	{% endfor %}
	{% endif %}
	{% endfor %}
	{% if out|length > 0 %}
	{action_respond_info(out|join("\n"))}
	{% else %}
	{action_respond_info("Nothing found for \"DUMP_PARAMETER %s\"" % rawparams)}
	{% endif %}

	_proc_end function=DUMP_PARAMETER

#--------------------------------------------------------------------

[gcode_macro SEARCH_VARS]
gcode:

	_proc_start function=SEARCH_VARS func_params='"{rawparams|string}"'

	{ action_respond_info("-------------------------------------------------------") }
	{ action_respond_info("-------------------------------------------------------") }
	{ action_respond_info("-------------------------------------------------------") }

	{% set search = params.S|lower %}
	{% set ns = namespace() %}
	{% for item in printer %}
	{% if ' ' in item %}
	{% set ns.path = ['printer', "['%s']" % (item), ''] %}
	{% else %}
	{% set ns.path = ['printer.', item, ''] %}
	{% endif %}

	{% if search in ns.path|lower %}
	{ action_respond_info(ns.path|join) }
	{% endif %}

	{% if printer[item].items() %}
	{% for childkey, child in printer[item].items() recursive %}
	{% set ns.path = ns.path[:loop.depth|int + 1] %}

	{% if ' ' in childkey %}
	{% set null = ns.path.append("['%s']" % (childkey)) %}
	{% else %}
	{% set null = ns.path.append(".%s" % (childkey)) %}
	{% endif %}

	{% if child is mapping %}
	{ loop(child.items()) }
	{% else %}
	{% if search in ns.path|lower %}
	{ action_respond_info("%s : %s" % (ns.path|join, child)) }
	{% endif %}
	{% endif %}

	{% endfor %}
	{% endif %}
	{% endfor %}

	{ action_respond_info("-------------------------------------------------------") }
	{ action_respond_info("-------------------------------------------------------") }
	{ action_respond_info("-------------------------------------------------------") }

	_proc_end function=SEARCH_VARS

#--------------------------------------------------------------------

[gcode_macro DUMP_PRINT_AREA_LIMITS]
description: Debug: Print information about print volume and probeable area
gcode:

	_proc_start function=DUMP_PRINT_AREA_LIMITS func_params='"{rawparams|string}"'

	{% set min = printer.toolhead.axis_minimum %}
	{% set max = printer.toolhead.axis_maximum %}
	{% set probe_offset = {'x' : printer.configfile.settings.probe.x_offset,
						 'y' : printer.configfile.settings.probe.y_offset} %}
	{% set probe_area = {'min' : {'x' : [min.x,(min.x-probe_offset.x)]|max,
								'y' : [min.y,(min.y-probe_offset.y)]|max},
					 'max' : {'x' : [max.x,(max.x-probe_offset.x)]|min,
								'y' : [max.y,(max.y-probe_offset.y)]|min}} %}
	{action_respond_info("Print Volume Limits:
						Min X:%7.1f, Y:%7.1f, Z:%7.1f
						Max X:%7.1f, Y:%7.1f, Z:%7.1f
						Probe Area Limits:
						Min X:%7.1f, Y:%7.1f
						Max X:%7.1f, Y:%7.1f" %
	(min.x,min.y,min.z,max.x,max.y,max.z,probe_area.min.x,probe_area.min.y, probe_area.max.x,probe_area.max.y))}

	_proc_end function=DUMP_PRINT_AREA_LIMITS

#--------------------------------------------------------------------

#####################################################################
# Temp setting captures
#####################################################################

#--------------------------------------------------------------------

[gcode_macro M106]
description: capture and set PCF Setting
rename_existing: M106.1
gcode:

	_proc_start function=M106 func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE=pcf_setting VALUE={params.S|int}	# provisional
	save_variable VARIABLE=boot_pcf VALUE={params.S|int}	# provisional

	#say S="Cooling {((params.S|int/255)*100)|int}"

	M106.1 {rawparams}

	_proc_end function=M106

#--------------------------------------------------------------------

[gcode_macro RUN_SHELL_CMD]
description: wrapping RSC FW proc for code trace purposes
gcode:

	_proc_start function=RUN_SHELL_CMD func_params={rawparams|string}

	RUN_SHELL_COMMAND {rawparams}

	_proc_end function=RUN_SHELL_CMD

#--------------------------------------------------------------------

[gcode_macro list_sensors]
gcode:

	_proc_start function=list_sensors func_params='"{rawparams|string}"'

	M118 Sensor List:
	{ action_respond_info(printer.heaters.available_heaters | join(', ')) }
	{ action_respond_info(printer.heaters.available_sensors | join(', ')) }
	M118 -- Sensor List End --

	_proc_end function=list_sensors

#--------------------------------------------------------------------

[gcode_macro M122]
#####################################################################
# TMC Debugging
#####################################################################

description: dumps tmc_stepper status stuffs
gcode:

	_proc_start function=M122 func_params='"{rawparams|string}"'

	M118
	M118 >>>> M122 TMC Debug Start <<<<
	M118

	M118 >>> stepper_x <<<
	M118
	DUMP_TMC STEPPER=stepper_x

	M118
	M118 >>> stepper_y <<<
	M118
	DUMP_TMC STEPPER=stepper_y

	M118
	M118 >>> stepper_z <<<
	M118
	DUMP_TMC STEPPER=stepper_z

	M118
	M118 >>> stepper_z1 <<<
	M118
	DUMP_TMC STEPPER=stepper_z1

	M118
	M118 >>> stepper_z2 <<<
	M118
	DUMP_TMC STEPPER=stepper_z2

	M118
	M118 >>> stepper_z3 <<<
	M118
	DUMP_TMC STEPPER=stepper_z3

	M118
	M118 >>> extruder <<<
	M118
	DUMP_TMC STEPPER=extruder

	M118
	M118 >>> selector_stepper <<<
	M118
	DUMP_TMC STEPPER=selector_stepper

	M118
	M118 >>> gear_stepper <<<
	M118
	DUMP_TMC STEPPER=gear_stepper

	M118
	M118 >>>> M122 TMC Debug End <<<<
	M118

	_proc_end function=M122

#--------------------------------------------------------------------

[gcode_macro TMC_Debug_Dump_M122]
gcode:

	_proc_start function=TMC_Debug_Dump_M122 func_params='"{rawparams|string}"'

	M122	# see previous proc

	_proc_end function=TMC_Debug_Dump_M122

#--------------------------------------------------------------------

[gcode_macro enable_speech_feedback]
gcode:

	_proc_start function=enable_speech_feedback func_params='"{rawparams|string}"'

	SET_GCODE_VARIABLE MACRO=_tts_vars VARIABLE=tts_enable VALUE=1
	say_wait S="Hi there"

	_proc_end function=enable_speech_feedback

#--------------------------------------------------------------------

[gcode_macro disable_speech_feedback]
gcode:

	_proc_start function=disable_speech_feedback func_params='"{rawparams|string}"'

	say_wait S="Good bye"
	SET_GCODE_VARIABLE MACRO=_tts_vars VARIABLE=tts_enable VALUE=0

	_proc_end function=disable_speech_feedback

#--------------------------------------------------------------------

