#####################################################################
# 	CANCEL_PRINT + ERCF adaptations
#####################################################################

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_canceling"'	# machine state save
	# M118 print_canceling
	stop_pause_alarm						   						# in event canx called from pause, shut the beeping down
	
	{% if printer.save_variables.variables.module_led_effect_loaded %}
		set_light_mode CHAIN=chamber_lights	EFFECT=normal			# uses LED_EFFECTS code
		set_light_mode CHAIN=lcd_lights 	EFFECT=normal			# uses LED_EFFECTS code
		# set_light_mode CHAIN=ercf_lights	EFFECT=off				# uses LED_EFFECTS code
		# set_light_mode CHAIN=dash_lights	EFFECT=off				# uses LED_EFFECTS code
	{% else %}
		ChLts_Normal		# set chamber lights to normal	- uses Klipper Dotstar code
		LcdLts_Normal		# set lcd lights to normal		- uses Klipper Neopixel code
		# ERCFLts_off			# set ercf lights to normal		- uses Klipper Neopixel code
		# DBLts_off			# set dash lights to normal		- uses Klipper Neopixel code
	{% endif %}

	TURN_OFF_HEATERS						   						# so we've canx'd the print, might as well start to cool it down
	CLEAR_PAUSE						   							# reset the fw pause state, in case canx called from pause
	SDCARD_RESET_FILE						   						# reset the fw file state
		
	M300 P10 S3000						   						# play
	M300 P10 S2000						   						# 	descending
	M300 P10 S1000						   						#		tone
	M106 S26														# force small breeze across duct mounted chamber temp sensor

	{% set svv = printer.save_variables.variables %}

	{% set x_park = printer.toolhead.axis_maximum.x//2|float %}		### changed to max x
	{% set y_park = printer.toolhead.axis_maximum.y|float %}		### changed to max y
	{% set max_z = printer.toolhead.axis_maximum.z|float %}			# get maximum Z axis height
	{% set act_z = printer.toolhead.position.z|float %}				# get actual Z axis position
	{% if act_z < (max_z - 20.0) %}									# check to ensure we're not going to exceed max Z when lifting
		{% set z_safe = 20.0 %}										# and if OK, then set the z_safe relative val to the desired lift value
	{% else %}														# otherwise
		{% set z_safe = max_z - act_z %}							# set the z_safe (relative) value to ensure we stop at max z
	{% endif %}

	{% set z_park = [z_safe|float,svv.maxz|float+5.0]|min|float %}	# and then choose the parking location

	{% if printer.save_variables.variables.module_ercf_loaded %}
		SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
	{% endif %}

	relative														### go relative
	G1 Z{z_park} F900												### and move up the safe amount
	absolute														### go absolute
	G0 X{x_park} Y{y_park} F6000									### and move to absolute XY
	CANCEL_PRINT_BASE												### chain to klipper fw print canx stuffs

	_HOURMETER_OFF						   						# so we're not printing, stop accumulating print hours
	_PrintLED_Off						   						# restore previous switch led state
	SAVE_VARIABLE VARIABLE=maxz VALUE='"0.0"'						# clear saved print dims
	SAVE_VARIABLE VARIABLE=v2_2526_slicer_check VALUE='"NULL"'		# clear SLICER VITALS
 	snd_PrintCancel
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_canceled"'	# machine state save
	M118 print_canceled
