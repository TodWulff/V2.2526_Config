#####################################################################
# _ercf_hardware
#####################################################################
[gcode_macro _info_ercf_hardware]
gcode:

# Enraged Rabbit : Carrot Feeder config file for ERCF EASY BRD v1.1
# This config sample assumes two J6 jumpers are installed on 2-3 and 4-5, i.e. .[..][..]
# (ties tmc idx to gpio6 for sensorless homing/stall guard)
# DON'T CHANGE SENSOR NAMES - HARDCODED IN ERCF.PY...
# https://cdn-learn.adafruit.com/assets/assets/000/101/678/original/adafruit_products_QTRP_sch.png

[ercf]
# Encoder 
encoder_pin: ^ercf:gpio3
encoder_resolution: 1.346348 # 1000 11
#speeds
long_moves_speed: 80   # mm/s. Default value is 100mm/s.
long_moves_accel: 400  # mm/s². Default value is 400mm/s²
short_moves_speed: 40  # mm/s. Default value is 25mm/s.
short_moves_accel: 400 # mm/s². Default value is 400mm/s²

[duplicate_pin_override]
pins: ercf:gpio3, PG15
# Put here the pin used by the encoder & the filament_motion_sensor, and toolhead sensor
# It has to be the same pin for this override section, the filament_motion_sensor below,
# and the encoder pin def in [ercf] section

[mcu ercf]
serial: /dev/serial/by-id/usb-Klipper_rp2040_E660583883995731-if00    # this is the QT Py RP2040
restart_method: command

[tmc2209 manual_stepper gear_stepper]
#######################################################################################
### Filament Drive Gear Stepper Motor and Driver ######################################
#######################################################################################

# NEMA17 motors, you'll usually set the stealthchop_threshold to 0 & use higher current

uart_pin: ercf:gpio24
uart_address: 0
interpolate: True
run_current: 1.8
hold_current: 0.1
sense_resistor: 0.110
stealthchop_threshold: 0

[manual_stepper gear_stepper]
# Carrot Feeder 5mm D-cut shaft
step_pin: ercf:gpio28
dir_pin: !ercf:gpio27
enable_pin: !ercf:gpio29
endstop_pin: ^ercf:gpio0			# MHz: Bogus (unused but needed by Klipper)

rotation_distance: 22.81048901638	# Bondtech 5mm Drive Gears
gear_ratio: 80:20
microsteps: 16
full_steps_per_rotation: 200		# 200 for 1.8 degree, 400 for 0.9 degree
velocity: 50						# default speed if move cmd sans speed
accel: 200							# default accel if move cmd sans accel

[tmc2209 manual_stepper selector_stepper]
#######################################################################################
### Color Selector Stepper Motor and Driver ###########################################
#######################################################################################

uart_pin: ercf:gpio24
# Uncomment the lines below if you want to use sensorless homing for the selector
diag_pin: ^ercf:gpio6					# Set to MCU pin connected to TMC DIAG pin

uart_address: 1
run_current: 0.6
hold_current: 0.1
interpolate: True
sense_resistor: 0.110
stealthchop_threshold: 5000			# 0
driver_SGTHRS: 67					# 255 is most sensitive value, 0 is least sensitive - 64 hard, 96 fail, 75 meh

[manual_stepper selector_stepper]
step_pin: ercf:gpio25
dir_pin: ercf:gpio20
enable_pin: !ercf:gpio26
# Select the endstop you want depending if you are using sensorless homing for the selector or not
# endstop_pin: ^ercf:gpio5			# MHz - using NC contacts
endstop_pin: tmc2209_selector_stepper:virtual_endstop		# using the stallguard (via diag output) of the driver

rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 200		# 200 for 1.8 degree, 400 for 0.9 degree
velocity: 100						# was 200
accel: 300							# was 600
position_endstop: 0
homing_speed: 100


[servo ercf_servo]
#######################################################################################
### Idler Gear Engagement Servo Motor #################################################
#######################################################################################

# Values are for the MG90S servo
pin: ercf:gpio4
# MHz - these are based on real world tests.
# seems a bit misleading - it is merely scaling angles internal in Klipper, I perceive
# servo commands still allow full travel - maximum_servo_angle is just scaled
maximum_servo_angle: 150
minimum_pulse_width: 0.0005
maximum_pulse_width: 0.0025

[filament_motion_sensor encoder_sensor]
#######################################################################################
### Selector Cart Filament Encoder ####################################################
#######################################################################################

switch_pin: ^ercf:gpio3		# this is a 'shared' signal - doubles as the ERCF encoder - see ercf_software.cfg
pause_on_runout: false		# pause is handled in ERCF_ENCODER_MOTION_ISSUE
detection_length: 4.0
extruder: extruder

runout_gcode:
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=encoder_sensor_runout {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object
	
	# slicer wipetower ops effs with the encoder so ignoring any issues during same...
	{% if svv.type|lower != "wipe tower" %}
		# fil_ecdr_rel
		ERCF_ENCODER_MOTION_ISSUE
	{% endif %}
	
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=encoder_sensor_runout {% endif %}

insert_gcode:
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=encoder_sensor_insert {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object
	
	# slicer wipetower ops effs with the encoder so ignoring any issues during same...
	{% if svv.type|lower != "wipe tower" %}
		# fil_ecdr_prs
	{% endif %}
	
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=encoder_sensor_insert {% endif %}

event_delay: 0.1
pause_delay: 0.5

[neopixel ercf_mcu]
pin: ercf:gpio12