#####################################################################
# 	_z_calibration config file
#####################################################################

[delayed_gcode _z_calibration_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_z_calibration_loaded func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _printer_vars"].ptr_verb_cfgload %}
		M118 >>> _z_calibration.cfg Loaded. <<<
	{% endif %}
	_proc_end function=_z_calibration_loaded 

[gcode_macro _info_z_calibration]
gcode:

# no info

[z_calibration]

## these settings affect:
#	- Z-Endstop Accuracy Test
#	- Z-Calibration
#	- NOT Z-Probe Accuracy

## update these variable according to the documentation here https://github.com/protoloft/klipper_z_calibration
## you then should call CALIBRATE_Z as one of the last lines on your PRINT_START to set the Z offset dinamically

probe_nozzle_x:		232.5
probe_nozzle_y:		350.0
#   The X and Y coordinates (in mm) for clicking the nozzle on the Z endstop. 

probe_switch_x:		227.5
probe_switch_y:		331
#   The X and Y coordinates (in mm) for clicking the probe's switch on the Z endstop. 
#(probe_switch_x should be minus 5mm from the probe_nozzle_x)
#(probe_switch_y should be minus 19.5mm from the probe_nozzle_y) ## NOTE: <-- text read -10.5 - dunno why - valiated with baby stepping and watching...

probe_bed_x:		175
probe_bed_y:		175
#probe_bed_x: default from relative_reference_index of bed_mesh
#probe_bed_y: default from relative_reference_index of bed_mesh
#   The X and Y coordinates (in mm) for probing on the print surface
#   (e.g. the center point) These coordinates will be adapted by the
#   probe's X and Y offsets. The default is the relative_reference_index
#   of the configured bed_mesh. It will raise an error if there is no
#   probe_bed site and no bed_mesh with a relative_reference_index
#   configured.

#switch_offset:		0.675 # 0.600 0.575  # was 0.42 need to be closer for moar squish
switch_offset:		0.550
#   The trigger point offset of the used klicky switch.
#   THIS NEEDS TO BE FINED OUT MANUALLY. More on this later
#   in this section..

max_deviation:		1.5
#   The maximum allowed deviation of the calculated offset.
#   If the offset exceeds this value, it will stop!
#   The default is 1.0 mm.

samples:			5
# default from [probe] section
#   The number of times to probe each point. The probed z-values
#   will be averaged. The default is from the probe's configuration.

samples_tolerance: 0.01
# default from [probe] section
#   The maximum Z distance (in mm) that a sample may differ from other
#   samples. The default is from the probe's configuration.

samples_tolerance_retries: 3
# default from [probe] section
#   The number of times to retry if a sample is found that exceeds
#   samples_tolerance. The default is from the probe's configuration.

samples_result: median
# default from [probe] section
#   The calculation method when sampling more than once - either
#   "median" or "average". The default is from the probe's configuration.

clearance: 5
#   The distance in mm to move up before moving to the next
#   position. The default is two times the z_offset from the probe's
#   configuration.

#position_min: 0
#   Minimum valid distance (in mm) used for probing move. The
#   default is from the Z rail configuration.

speed: 250
#   The moving speed in X and Y. The default is 50 mm/s.

lift_speed: 25
#   Speed (in mm/s) of the Z axis when lifting the probe between
#   samples and clearance moves. The default is from the probe's
#   configuration.

#probing_speed: 15
# default homing_speed from [stepper_z] section.
#   The fast probing speed (in mm/s) used, when probing_first_fast
#   is activated. The default is from the Z rail configuration.

#probing_second_speed: 10
# default second_homing_speed from [stepper_z] section.
#   The slower speed (in mm/s) for probing the recorded samples.
#   The default is second_homing_speed of the Z rail configuration.

probing_retract_dist: 2	# safe for so little as will be homed and qgl'd
# default homing_retract_dist from [stepper_z] section.
#   Distance to backoff (in mm) before probing the next sample.
#   The default is homing_retract_dist from the Z rail configuration.

probing_first_fast: true
#   If true, the first probing is done faster by the probing speed.
#   This is to get faster down and the result is not recorded as a
#   probing sample. The default is false.

start_gcode: Dock_Probe_Unlock
#   A list of G-Code commands to execute prior to each calibration command.
#   See docs/Command_Templates.md for G-Code format. This can be used to
#   attach the probe.

before_switch_gcode: Attach_Probe
#   A list of G-Code commands to execute prior to each probing on the
#   mag-probe. See docs/Command_Templates.md for G-Code format. This can be
#   used to attach the probe after probing on the nozzle and before probing
#   on the mag-probe.

end_gcode: Dock_Probe
#   A list of G-Code commands to execute after each calibration command.
#   See docs/Command_Templates.md for G-Code format. This can be used to
#   detach the probe afterwards.

[gcode_macro CALIBRATE_Z]
description: This and following macros form a wrapper around protoloft's calibrate_z module
# to ensure home/qgl context exists, to avoice repetative recals, and to annunciate repetative
# if the following variable is null

variable_enable_recal:					0		# bool to enable repetative recal inlieu of a force (for testing primairly...)
												# set to 0 to force z_offset to 0 and recal if an active z_cal context exists

description: Automatically calibrates the nozzles offset to the print surface and, possibly/optionally dock/undock Klicky 
rename_existing: _CALIBRATE_Z_STOCK
gcode:

	_proc_start function=CALIBRATE_Z func_params='"{rawparams|string}"'  

	{% set force = params.FORCE|default(0)|int %}
	
	# added conditional and a state global so repetative z_autocals are avoided
	{% if 	printer.save_variables.variables.z_axis_cal and 
			printer.configfile.settings.z_calibration.switch_offset != 0.000 and 
			force == 0 and 
			enable_recal == 0 
			%}
		# so a z_autocal context exists, and recal is disabled, so skip it.
		{% if params.SHH|default(0)|int == 0 %}
			M300
			M300
			M300
			M118 CALIBRATE_Z skipped - already completed
			M118 -> Clear Z-offset or call CALIBRATE_Z FORCE=1 to force a recal
		{% endif %}
	# also added o'ride var above to enable repetative z_autocals with pre-cal zero'g of z_offset
	{% elif printer.save_variables.variables.z_axis_cal and 
		printer.configfile.settings.z_calibration.switch_offset != 0.000 and 
		force == 0 and 
		enable_recal != 0 
		%}
		# so a z_autocal context exists, but recal is enabled, so do it.
		{% if params.SHH|default(0)|int == 0 %}
			M300
			M300
			M118 Clearing Z-offset and forcing a recal
		{% endif %}
		_do_z_offset_cal {rawparams}
	# so a z_autocal context doesn't exist, or is forced, so do it.
	{% else %}
		{% if params.SHH|default(0)|int == 0 %}
			M300 
		{% endif %}
		_do_z_offset_cal {rawparams}
	{% endif %}

	_proc_end function=CALIBRATE_Z 

[gcode_macro _do_z_offset_cal]
description: This is 2nd half of a logic wrapper around protoloft's calibrate_z module to ensure homed/qgl'd and avoid repetative z_cals

variable_entryexit_z:					15		# Z to go to before/after calibrating
variable_entryexit_zfeedrate:			900		# rate in mm/min for same before/after calibrating

gcode:

	_proc_start function=_do_z_offset_cal func_params='"{rawparams|string}"'  

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"z_calibrating"'	# machine state save

	# so were doin it, so need to null out any existing z_offset that might exist
	# technically this could cause a nozle strike by blindly zeroing any offset and moving to the newly nulled position, but,
	# objectively, the risk of that is so low that I am going to go ostrich here and ignore it (for now, until my CDO dictates otherwise...)
	SET_GCODE_OFFSET Z=0 MOVE=1
	
	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 Z-Cal'g {% endif %}
	_ENSURE_QGL									# homes if needed - need to have the gantry leveled
	
	{% set hushed = params.SHH|default(0)|int %}
	{% if hushed == 0 %} M118 Performing Nozzle Scrub & Z-Offset Autocal {% endif %}

	M117 Z-Calibration
	CLEAN_NOZZLE
	G0 Z{entryexit_z} F{entryexit_zfeedrate}	# move to known Z
	_CALIBRATE_Z_STOCK
	G0 Z{entryexit_z} F{entryexit_zfeedrate}	# move to known Z
	M117
	SAVE_VARIABLE VARIABLE=z_axis_cal VALUE=1	# set flag indicating that z auto cal is complete
												# resets to 0 if homed, GQL, and at printer boot
												# prevents repetative z_autocals when not needed
												# but those procs ensures no cal flag when appropriate
												
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"z_calibrated"'	# machine state save

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 z_calibrated {% endif %}

	_proc_end function=_do_z_offset_cal 

[delayed_gcode collect_zcal_datapoint]
initial_duration: 0
# this relies on svv so that repetition time can be programatically adjusted without passing parameters
# (delayed gcodes don't support parameters...)
gcode:
	{% set svv = printer.save_variables.variables %}

	Z_Calibrate FORCE=1	SHH=1	# this is ~26 seconds
	UPDATE_DELAYED_GCODE ID=collect_zcal_datapoint DURATION={svv.zcal_test_dwell}
	
	# use the following to start the endless loop via console
	# SAVE_VARIABLE VARIABLE=zcal_test_dwell VALUE=60 # or 180 or 120 or ...
	# AND
	# UPDATE_DELAYED_GCODE ID=collect_zcal_datapoint DURATION=1
	
	# use the following to terminate the endless loop via console
	# UPDATE_DELAYED_GCODE ID=collect_zcal_datapoint DURATION=0	# ceases immediately w/ no next iteration
	# or
	# SAVE_VARIABLE VARIABLE=zcal_test_dwell VALUE=0			# ceases after the next iteration
	
	
	