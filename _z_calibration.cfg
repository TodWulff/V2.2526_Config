#####################################################################
# 	_z_calibration config file
# (CALIBRATE_Z & _do_z_offset_cal moved to _userWrap_z_calibration.cfg)
#####################################################################

[delayed_gcode _z_calibration_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_z_calibration_loaded func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'
	_module_loaded MODULE=_z_calibration
	_proc_end function=_z_calibration_loaded

#--------------------------------------------------------------------

[gcode_macro _info_z_calibration]
gcode:

# todo - write up on module's purpose/function/implementation/use
# see user_interaction for an example of intended use

#--------------------------------------------------------------------

[gcode_macro _z_calibration_vars]
description: macro for _z_calibration variables

# see [z_calibration] module enablement section below

gcode:

	_proc_start function=_z_calibration_vars func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	# there is none, this is for module variable use only

	_proc_end function=_z_calibration_vars

#--------------------------------------------------------------------

[delayed_gcode _z_calibration_module_start]
#description: Inits svv flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5					# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_z_calibration_module_start func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	SAVE_VARIABLE VARIABLE=module_z_calibration_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_z_calibration_err_flag VALUE=0							#init error flag that this module is not in error

	_proc_end function=_z_calibration_module_start

#--------------------------------------------------------------------

#--------------------------------------------------------------------

#--------------------------------------------------------------------

[z_calibration]

## these settings affect:
#	- Z-Endstop Accuracy Test
#	- Z-Calibration
#	- NOT Z-Probe Accuracy

## update these variable according to the documentation here https://github.com/protoloft/klipper_z_calibration
## you then should call CALIBRATE_Z as one of the last lines on your PRINT_START to set the Z offset dynamically

probe_nozzle_x:		232.5
probe_nozzle_y:		350.0
# The X and Y coordinates (in mm) for clicking the nozzle on the Z endstop.

probe_switch_x:		227.5
probe_switch_y:		331
# The X and Y coordinates (in mm) for clicking the probe's switch on the Z endstop.
#(probe_switch_x should be minus 5mm from the probe_nozzle_x)
#(probe_switch_y should be minus 19.5mm from the probe_nozzle_y) ## NOTE: <-- text read -10.5 - dunno why - validated with baby stepping and watching...

probe_bed_x:		175
probe_bed_y:		175
#probe_bed_x: default from relative_reference_index of bed_mesh
#probe_bed_y: default from relative_reference_index of bed_mesh
# The X and Y coordinates (in mm) for probing on the print surface
# (e.g. the center point) These coordinates will be adapted by the
# probe's X and Y offsets. The default is the relative_reference_index
# of the configured bed_mesh. It will raise an error if there is no
# probe_bed site and no bed_mesh with a relative_reference_index
# configured.

#switch_offset:		0.675 # 0.600 0.575 # was 0.42 need to be closer for moar squish
switch_offset:		0.550
# The trigger point offset of the used Klicky switch.
# THIS NEEDS TO BE FINED OUT MANUALLY. More on this later
# in this section..

max_deviation:		1.5
# The maximum allowed deviation of the calculated offset.
# If the offset exceeds this value, it will stop!
# The default is 1.0 mm.

samples:			5
# default from [probe] section
# The number of times to probe each point. The probed z-values
# will be averaged. The default is from the probe's configuration.

samples_tolerance: 0.01
# default from [probe] section
# The maximum Z distance (in mm) that a sample may differ from other
# samples. The default is from the probe's configuration.

samples_tolerance_retries: 3
# default from [probe] section
# The number of times to retry if a sample is found that exceeds
# samples_tolerance. The default is from the probe's configuration.

samples_result: median
# default from [probe] section
# The calculation method when sampling more than once - either
# "median" or "average". The default is from the probe's configuration.

clearance: 5
# The distance in mm to move up before moving to the next
# position. The default is two times the z_offset from the probe's
# configuration.

#position_min: 0
# Minimum valid distance (in mm) used for probing move. The
# default is from the Z rail configuration.

speed: 250
# The moving speed in X and Y. The default is 50 mm/s.

lift_speed: 25
# Speed (in mm/s) of the Z axis when lifting the probe between
# samples and clearance moves. The default is from the probe's
# configuration.

#probing_speed: 15
# default homing_speed from [stepper_z] section.
# The fast probing speed (in mm/s) used, when probing_first_fast
# is activated. The default is from the Z rail configuration.

#probing_second_speed: 10
# default second_homing_speed from [stepper_z] section.
# The slower speed (in mm/s) for probing the recorded samples.
# The default is second_homing_speed of the Z rail configuration.

probing_retract_dist: 2	# safe for so little as will be homed and qgl'd
# default homing_retract_dist from [stepper_z] section.
# Distance to back-off (in mm) before probing the next sample.
# The default is homing_retract_dist from the Z rail configuration.

probing_first_fast: true
# If true, the first probing is done faster by the probing speed.
# This is to get faster down and the result is not recorded as a
# probing sample. The default is false.

start_gcode: Dock_Probe_Unlock
# A list of G-Code commands to execute prior to each calibration command.
# See docs/Command_Templates.md for G-Code format. This can be used to
# attach the probe.

before_switch_gcode: Attach_Probe
# A list of G-Code commands to execute prior to each probing on the
# mag-probe. See docs/Command_Templates.md for G-Code format. This can be
# used to attach the probe after probing on the nozzle and before probing
# on the mag-probe.

end_gcode: Dock_Probe
# A list of G-Code commands to execute after each calibration command.
# See docs/Command_Templates.md for G-Code format. This can be used to
# detach the probe afterwards.

#--------------------------------------------------------------------

[delayed_gcode collect_zcal_datapoint]
initial_duration: 0
# this relies on svv so that repetition time can be programmatically adjusted without passing parameters
# (delayed gcodes don't support parameters...)
gcode:

	_proc_start function=collect_zcal_datapoint func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	{% set svv = printer.save_variables.variables %}

	Z_Calibrate FORCE=1	SHH=1	# this is ~26 seconds
	UPDATE_DELAYED_GCODE ID=collect_zcal_datapoint DURATION={svv.zcal_test_dwell}

	# use the following to start the endless loop via console
	# SAVE_VARIABLE VARIABLE=zcal_test_dwell VALUE=60 # or 180 or 120 or ...
	# AND
	# UPDATE_DELAYED_GCODE ID=collect_zcal_datapoint DURATION=1

	# use the following to terminate the endless loop via console
	# UPDATE_DELAYED_GCODE ID=collect_zcal_datapoint DURATION=0	# ceases immediately w/ no next iteration
	# or
	# SAVE_VARIABLE VARIABLE=zcal_test_dwell VALUE=0			# ceases after the next iteration

	_proc_end function=collect_zcal_datapoint

#--------------------------------------------------------------------


