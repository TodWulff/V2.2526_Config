#####################################################################
# _userWrap_z_calibration
#####################################################################

[delayed_gcode _userWrap_z_calibration_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_z_calibration_loaded func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'
	_module_loaded MODULE=_userWrap_z_calibration
	_proc_end function=_z_calibration_loaded

#--------------------------------------------------------------------

[gcode_macro _info_userWrap_z_calibration]
gcode:

# user config to wrap FW procs constained in z_calibration.cfg

#--------------------------------------------------------------------

[gcode_macro _userWrap_z_calibration_vars]
description: macro for _z_calibration variables

gcode:

	_proc_start function=_z_calibration_vars func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	# there is none, this is for module variable use only

	_proc_end function=_z_calibration_vars

#--------------------------------------------------------------------

[delayed_gcode _userWrap_z_calibration_module_start]
#description: Inits svv flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5					# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_z_calibration_module_start func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	SAVE_VARIABLE VARIABLE=module_z_calibration_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_z_calibration_err_flag VALUE=0							#init error flag that this module is not in error

	_proc_end function=_z_calibration_module_start

#--------------------------------------------------------------------

[gcode_macro CALIBRATE_Z]
description: This and the concluding macro below form a wrapper around protoloft's FW calibrate_z module
# to ensure home/qgl context exists, to avoid repetitive recals, and to annunciate repetitive
# if the following variable is null

variable_enable_recal:					0		# bool to enable repetitive recal in lieu of a force (for testing primarily...)
												# set to 0 to force z_offset to 0 and recal if an active z_cal context exists

description: Automatically calibrates the nozzles offset to the print surface and, possibly/optionally dock/undock Klicky
rename_existing: _CALIBRATE_Z_STOCK
gcode:

	_proc_start function=CALIBRATE_Z func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	{% set force = params.FORCE|default(0)|int %}

	# added conditional and a state global so repetitive z_autocals are avoided
	{% if 	printer.save_variables.variables.z_axis_cal and
			printer.configfile.settings.z_calibration.switch_offset != 0.000 and
			force == 0 and
			enable_recal == 0
			%}
		# so a z_autocal context exists, and recal is disabled, so skip it.
		{% if params.SHH|default(0)|int == 0 %}
			M300
			M300
			M300
			M118 CALIBRATE_Z skipped - already completed
			M118 -> Clear Z-offset or call CALIBRATE_Z FORCE=1 to force a recal
		{% endif %}
	# also added o'ride var above to enable repetitive z_autocals with pre-cal zero'g of z_offset
	{% elif printer.save_variables.variables.z_axis_cal and
		printer.configfile.settings.z_calibration.switch_offset != 0.000 and
		force == 0 and
		enable_recal != 0
		%}
		# so a z_autocal context exists, but recal is enabled, so do it.
		{% if params.SHH|default(0)|int == 0 %}
			M300
			M300
			M118 Clearing Z-offset and forcing a recal
		{% endif %}
		_do_z_offset_cal {rawparams}
	# so a z_autocal context doesn't exist, or is forced, so do it.
	{% else %}
		{% if params.SHH|default(0)|int == 0 %}
			M300
		{% endif %}
		_do_z_offset_cal {rawparams}
	{% endif %}

	_proc_end function=CALIBRATE_Z

#--------------------------------------------------------------------

[gcode_macro _do_z_offset_cal]
description: This is the conclusion of a logic wrapper around protoloft's FW calibrate_z module to ensure homed/qgl'd and avoid repetitive z_cals
# see _userWrap_z_calibration.cfg for initiating proc

variable_entryexit_z:					15		# Z to go to before/after calibrating
variable_entryexit_zfeedrate:			900		# rate in mm/min for same before/after calibrating

gcode:

	_proc_start function=_do_z_offset_cal func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"z_calibrating"'	# machine state save

	# so were doin it, so need to null out any existing z_offset that might exist
	# technically this could cause a nozzle strike by blindly zeroing any offset and moving to the newly nulled position, but,
	# objectively, the risk of that is so low that I am going to go ostrich here and ignore it (for now, until my CDO dictates otherwise...)
	SET_GCODE_OFFSET Z=0 MOVE=1

	_ENSURE_QGL									# homes if needed - need to have the gantry leveled

	{% set hushed = params.SHH|default(0)|int %}
	{% if hushed == 0 %} M118 Performing Nozzle Scrub & Z-Offset Autocal {% endif %}

	M117 Z-Calibration
	CLEAN_NOZZLE
	G0 Z{entryexit_z} F{entryexit_zfeedrate}	# move to known Z
	_CALIBRATE_Z_STOCK
	G0 Z{entryexit_z} F{entryexit_zfeedrate}	# move to known Z
	M117
	SAVE_VARIABLE VARIABLE=z_axis_cal VALUE=1	# set flag indicating that z auto cal is complete
												# resets to 0 if homed, GQL, and at printer boot
												# prevents repetitive z_autocals when not needed
												# but those procs ensures no cal flag when appropriate

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"z_calibrated"'	# machine state save

	_proc_end function=_do_z_offset_cal

#--------------------------------------------------------------------

[gcode_macro PROBE_Z_ACCURACY]	# see following commented proc
description: wrap FW proc for userLogging purposes
RENAME_EXISTING: _PROBE_Z_ACCURACY_STOCK
gcode:

	_proc_start function=PROBE_Z_ACCURACY func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	_PROBE_Z_ACCURACY_STOCK {rawparams}

	_proc_end function=PROBE_Z_ACCURACY

#--------------------------------------------------------------------

### ############################################################################
### # PROBE_Z_ACCURACY
### ############################################################################
### [gcode_macro PROBE_Z_ACCURACY]
### rename_existing: _PROBE_Z_ACCURACY_STOCK
### description: adapts an undocumented FW routine to test z_endstop accuracy
###
### # adapted to instantiate a codified known end Z position as the FW doesn't do so
###
### variable_entryexit_z:				15		# Z to go to before/after calibrating
### variable_entryexit_zrate:			900		# rate in mm/min for same before/after calibrating
###
### gcode:
###
### 	_proc_start function=PROBE_Z_ACCURACY func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'
###
### 	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"pza-ing"'	# machine state save
### 	_ENSURE_QGL							# homes if needed - need to have the gantry leveled
### 	M117 PROBE_Z_ACCURACY
### 	G0 Z{entryexit_z} F{entryexit_zrate}
### 	_PROBE_Z_ACCURACY_STOCK {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
### 	G0 Z{entryexit_z} F{entryexit_zrate}
### 	M117
### 	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"pza-ed"'	# machine state save
###
### 	_proc_end function=PROBE_Z_ACCURACY

#--------------------------------------------------------------------


