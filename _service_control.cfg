#####################################################################
# _service_control
#####################################################################

#--------------------------------------------------------------------

[delayed_gcode _service_control_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_service_control_loaded func_params='"{rawparams|string}"'
	_module_loaded MODULE=_service_control
	_proc_end function=_service_control_loaded

#--------------------------------------------------------------------

[gcode_macro _info_service_control_macros]
gcode:
	#todo
	
#--------------------------------------------------------------------

[gcode_macro _service_control_vars]
description: macro for _service_control variables

gcode:

	_proc_start function=_service_control_vars func_params='"{rawparams|string}"'

	# there is none, this is for module variable use only

	_proc_end function=_service_control_vars

#--------------------------------------------------------------------

[delayed_gcode _service_control_module_start]
#description: Inits state flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5					# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_service_control_module_start func_params='"{rawparams|string}"'
 
	{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _service_control_module_start Start <<< {% endif %}

	SAVE_VARIABLE VARIABLE=module_service_control_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_service_control_err_flag VALUE=0							#init error flag that this module is not in error

	{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _service_control_module_start End <<< {% endif %}

	_proc_end function=_service_control_module_start

#--------------------------------------------------------------------

[gcode_macro RESTART]
description: wrap FW proc to save existing heat settings at a restart
RENAME_EXISTING: RESTART_STOCK
gcode:

	_proc_start function=RESTART func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}

	# see if any heat is applied and, if so, flag for restoration at boot
	save_variable VARIABLE=boot_extruder_temp VALUE={svv.extruder_temp_setting}
	save_variable VARIABLE=boot_heater_bed_temp VALUE={svv.heater_bed_temp_setting}

	stop_music

	say_wait S="Restarting Klipper"

#	FIRMWARE_RESTART #<-- had used this because of silly case error, but now RESTART_STOCK works (RESTART_stock wasn't and that is due to casing. ugh...)
	RESTART_STOCK

	_proc_end function=RESTART

#--------------------------------------------------------------------

[gcode_macro klipper_restart]
gcode:

	_proc_start function=klipper_restart func_params='"{rawparams|string}"'

	stop_music

	say_wait S="Restarting Klipper"
	RUN_SHELL_CMD CMD=klipper_restart

	_proc_end function=klipper_restart

#--------------------------------------------------------------------

# [gcode_shell_command restart_klipper]
# # gracefully shuts down the klipper host immediately - be careful... ;)
# command: /bin/systemctl restart klipper
# timeout: 2
# verbose: false
	
#--------------------------------------------------------------------

[gcode_shell_command klipper_restart]
# restarts the klipper service immediately - be careful... ;)
# RUN_SHELL_CMD CMD=klipper_restart
command: sh /home/pi/printer_data/config/restart_klipper_service.sh
timeout: 2
verbose: false

