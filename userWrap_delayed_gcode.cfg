#####################################################################
# _userWrap_delayed_gcode
#####################################################################

[delayed_gcode _userWrap_delayed_gcode_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_delayed_gcode_loaded func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'
	_module_loaded MODULE=_userWrap_delayed_gcode
	_proc_end function=_delayed_gcode_loaded

#--------------------------------------------------------------------

[gcode_macro _info_userWrap_delayed_gcode]
gcode:

# user config to wrap FW procs constained in delayed_gcode.cfg

#--------------------------------------------------------------------

[gcode_macro _userWrap_delayed_gcode_vars]
description: macro for _delayed_gcode variables

gcode:

	_proc_start function=_delayed_gcode_vars func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	# there is none, this is for module variable use only

	_proc_end function=_delayed_gcode_vars

#--------------------------------------------------------------------

[delayed_gcode _userWrap_delayed_gcode_module_start]
#description: Inits svv flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5					# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_delayed_gcode_module_start func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	SAVE_VARIABLE VARIABLE=module_delayed_gcode_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_delayed_gcode_err_flag VALUE=0							#init error flag that this module is not in error

	_proc_end function=_delayed_gcode_module_start

#--------------------------------------------------------------------

[gcode_macro UPDATE_DELAYED_GCODE]
description: wrap FW proc for userLogging purposes
# passing SHH=1 mutes the trace emissions (specific use cases: H2O updates (30s period) & awaiting user input (2Hz))
RENAME_EXISTING: _UPDATE_DELAYED_GCODE_STOCK
gcode:

	{% set log_emissions_ok = not (params.SHH|default(0)|int) %}

	{% if log_emissions_ok %}
		_proc_start function=UPDATE_DELAYED_GCODE func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'
	{% endif %}

	_UPDATE_DELAYED_GCODE_STOCK {rawparams}

	{% if log_emissions_ok %}
		_proc_end function=UPDATE_DELAYED_GCODE
	{% endif %}

#--------------------------------------------------------------------


