#####################################################################
# _userWrap_heater_bed
#####################################################################

[delayed_gcode _userWrap_heater_bed_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_heater_bed_loaded func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'
	_module_loaded MODULE=_userWrap_heater_bed
	_proc_end function=_heater_bed_loaded

#--------------------------------------------------------------------

[gcode_macro _info_userWrap_heater_bed]
gcode:

# user config to wrap FW procs constained in heater_bed.cfg

#--------------------------------------------------------------------

[gcode_macro _userWrap_heater_bed_vars]
description: macro for _heater_bed variables

gcode:

	_proc_start function=_heater_bed_vars func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	# there is none, this is for module variable use only

	_proc_end function=_heater_bed_vars

#--------------------------------------------------------------------

[delayed_gcode _userWrap_heater_bed_module_start]
#description: Inits svv flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5					# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_heater_bed_module_start func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	SAVE_VARIABLE VARIABLE=module_heater_bed_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_heater_bed_err_flag VALUE=0							#init error flag that this module is not in error

	_proc_end function=_heater_bed_module_start

#--------------------------------------------------------------------

[gcode_macro M140]
description: capture and set target heater_bed temp, non-blocking - if params.S <0 just skip
rename_existing: M140.1
gcode:

	_proc_start function=M140 func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	{% if params.S|int >= 0 %}
		SAVE_VARIABLE VARIABLE=heater_bed_temp_setting VALUE={params.S|int}
		save_variable VARIABLE=boot_heater_bed_temp VALUE={params.S|int}
		say_wait S="Bed {params.S|int}"
		M140.1 {rawparams}
	{% else %}
		_ps_fixM140
	{% endif %}

	_proc_end function=M140

#--------------------------------------------------------------------

[gcode_macro M190]
description: capture and set heater_bed temp, waiting for temp attainment
rename_existing: M190.1
gcode:

	_proc_start function=M190 func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	SAVE_VARIABLE VARIABLE=heater_bed_temp_setting VALUE={params.S|int}
	save_variable VARIABLE=boot_heater_bed_temp VALUE={params.S|int}

	say_wait S="Bed {params.S|int}"

	M190.1 {rawparams}

	_proc_end function=M190

#--------------------------------------------------------------------

#--------------------------------------------------------------------


