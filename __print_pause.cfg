#####################################################################
# 	pause/resume enablement
#####################################################################

[delayed_gcode __print_pause_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=__print_pause_loaded func_params='"{rawparams|string}"'
	_module_loaded MODULE=__print_pause
	_proc_end function=__print_pause_loaded

[gcode_macro _info_print_printer]
gcode:

# https://www.klipper3d.org/Config_Reference.html#pause_resume
# https://www.klipper3d.org/G-Codes.html#pause_resume

#####################################################################
# 	pause_alarm stuffs
#####################################################################

[pause_resume]
recover_velocity: 300.0
# When capture/restore is enabled, the speed at which to return to
# the captured position (in mm/s). Default is 50.0 mm/s.

[delayed_gcode pause_alarm]
# provides a repeating alarm to alert on a pause (can get here from filament sensors)
initial_duration: 0
gcode:

	_proc_start function=pause_alarm func_params='"{rawparams|string}"'

	_PrintLED_Off
	M300 P100 S3000
	M300 P100 S3000
	M300 P100 S3000
	_PrintLED_On
	# going to consider self silencing after XX minutes, amybe with a sms or telegram bot notification
	# to give operator a chance to intercede and keep the bed warm. need to flesh this out moar.
	UPDATE_DELAYED_GCODE ID=pause_alarm DURATION=30 # recurse in 30 seconds

	_proc_end function=pause_alarm

[gcode_macro start_pause_alarm]
gcode:

	_proc_start function=start_pause_alarm func_params='"{rawparams|string}"'

	UPDATE_DELAYED_GCODE ID=pause_alarm DURATION=1					# start a recursive pause alarm

	_proc_end function=start_pause_alarm

[gcode_macro stop_pause_alarm]
gcode:

	_proc_start function=stop_pause_alarm func_params='"{rawparams|string}"'

	UPDATE_DELAYED_GCODE ID=pause_alarm DURATION=0					# stop the recursive pause alarm

	_proc_end function=stop_pause_alarm

#####################################################################
# 	PAUSE + ERCF adaptations
#####################################################################

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: _PAUSE_STOCK
gcode:

	_proc_start function=PAUSE func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	say S="Pausing"

		######################### debug stuffs
	#	{% if svv.module_debug_loaded %} _enable_trace_debug REASON='"ercf resume issue t/sg"' {% endif %}
	#	{% if svv.module_debug_loaded %} _enable_gmove_debug REASON='"blah"' {% endif %}
	#	{% if svv.module_debug_loaded %} _enable_save_var_debug REASON='"blah"' {% endif %}

	# prevent stacking pauses - fracks with resume...
	{% if printer.pause_resume.is_paused %}

		M118 Printer Already Paused - No Further Action...

	{% else %}

		#nix ercf encoder_sensor ops at pause, in case user wants to do stuff - will be enabled at resume.
		{% if svv.module_ercf_loaded|int %}
			{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
				SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
			{% endif %}
			M118 ERCF Interactions: {svv.ercf_interactions}				# advise Interaction Count
		{% endif %}

		{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Pausing <<< {% endif %}

		SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_pausing"'	# machine state save

		{% if svv.ercf_err_flag %}
			#state ERCF_state already saved in ercf_pause macro
			save_variable VARIABLE=pause_ercf_error VALUE=1				# set ercf_pause flag for use in resume
			RUN_SHELL_CMD CMD=send_sms_pause_alert					# send sms once on an error pause - not for manual pause.
		{% else %}
			SAVE_GCODE_STATE NAME=State_Save_Pause						# save state for restoration at resume
			save_variable VARIABLE=pause_ercf_error VALUE=0				# set ercf_pause flag for use in resume
		{% endif %}

		_HOURMETER_OFF
		_PrintLED_Off

		# set paused lighting state here (consider a timeout countdown, etc)
		{% if printer.save_variables.variables.module_ledeff_loaded %}
			_set_ledeff_mode CHAIN=chamber_lights	EFFECT=normal	RESET=1		# uses LED_EFFECTS code
			_set_ledeff_mode CHAIN=lcd_lights 	EFFECT=normal	RESET=1		# uses LED_EFFECTS code
			; _set_ledeff_mode CHAIN=ercf_lights	EFFECT=off		RESET=1		# uses LED_EFFECTS code
			; _set_ledeff_mode CHAIN=dash_lights	EFFECT=off		RESET=1		# uses LED_EFFECTS code
		{% else %}
			ChLts_Normal		# set chamber lights to normal	- uses Klipper Dotstar code
			LcdLts_Normal		# set lcd lights to normal		- uses Klipper Neopixel code
			; ERCFLts_off			# set ercf lights to normal		- uses Klipper Neopixel code
			; DBLts_off			# set dash lights to normal		- uses Klipper Neopixel code
		{% endif %}

		# prep for nozzle move away from the print and prevent oozing with a retract
		##### set defaults #####
		{% set max_x = printer.toolhead.axis_maximum.x|float %}
		{% set max_y = printer.toolhead.axis_maximum.y|float %}
		{% set x = params.X|default(max_x//2)|float %}
		{% set y = params.Y|default(0)|float %}
		{% set z = params.Z|default(20)|float %} 					#Z is relative - default to lifting 20mm up from print on a pause

		{% set e = params.E|default(printer["gcode_macro _printer_vars"].pause_retract_default|float)|float %}

		##### calculate save lift position #####
		{% set max_z = printer.toolhead.axis_maximum.z|float %}
		{% set act_z = printer.toolhead.position.z|float %}
		{% set lift_z = z|abs %}									#z is relative
		{% if act_z < (max_z - lift_z) %}
			{% set z_safe = lift_z %}
		{% else %}
			{% set z_safe = max_z - act_z %}
		{% endif %}
		##### end of definitions #####

		M118 _PAUSE_STOCK @ S{printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X{printer.toolhead.position.x} Y{printer.toolhead.position.y} Z{printer.toolhead.position.z}

		_PAUSE_STOCK	# ceases processing of gcode - pause_resume.py forces save gcode state PAUSE_STATE

		go_relative	REASON="Pause Extruder Retract and Z Lift"	#set relative for following (E and Z stuffs)

		# retract a bit
		{% if printer.extruder.can_extrude|lower == 'true' %}
			G1 E-{e} F2100 REASON="resume deretract"
		{% else %}
			M118 No Pause Retract as Extruder not hot enough
		{% endif %}

		{% if "xyz" in printer.toolhead.homed_axes %}
			#remember, we're relative atm
			G1 Z{z_safe}
			go_absolute	REASON="Extruder and Z Lift done, going abs for X/Y parking"	# go absolute for XY
			G1 X{x} Y{y} F6000
		{% else %}
		 M118 Printer not homed
		{% endif %}

		go_absolute REASON="All Pause relative stuff done"

		snd_PrintPause
		start_pause_alarm

		M118 PAUSE @ S{printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X{printer.toolhead.position.x|round(3,'common')} Y{printer.toolhead.position.y|round(3,'common')} Z{printer.toolhead.position.z|round(3,'common')}

		{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Paused <<< {% endif %}
		SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_paused"'	# machine state save

	{% endif %}

	say_wait S="Paused"

	######################### debug stuffs
#	{% if svv.module_debug_loaded %} _disable_save_var_debug {% endif %}	# make sure svv debug off
#	{% if svv.module_debug_loaded %} _disable_gmove_debug {% endif %}
#	{% if svv.module_debug_loaded %} _disable_trace_debug {% endif %}

	_proc_end function=PAUSE
	