#####################################################################
# 	pause_resume enablement
#####################################################################

[pause_resume]
recover_velocity: 300.0
#   When capture/restore is enabled, the speed at which to return to
#   the captured position (in mm/s). Default is 50.0 mm/s.

#####################################################################
# 	pause_alarm stuffs
#####################################################################

[delayed_gcode pause_alarm]
# provides a repeating alarm to alert on a pause (can get here from filament sensors)
initial_duration: 0
gcode:
	_PrintLED_Off
	M300 P100 S3000
	M300 P100 S3000
	M300 P100 S3000
	_PrintLED_On
	# going to consider self silencing after XX minutes, amybe with a sms or telegram bot notification
	# to give operator a chance to intercede and keep the bed warm.  need to flesh this out moar.
	UPDATE_DELAYED_GCODE ID=pause_alarm DURATION=3 # recurse in 3 seconds

[gcode_macro start_pause_alarm]
gcode:
	UPDATE_DELAYED_GCODE ID=pause_alarm DURATION=3 # start a recursive alarm every 3 seconds

[gcode_macro stop_pause_alarm]
gcode:
	UPDATE_DELAYED_GCODE ID=pause_alarm DURATION=0 # stop the recursion

#####################################################################
# 	PAUSE + ERCF adaptations (there is none really...)
#####################################################################

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_pausing"'	# machine state save
	# M118 print_pausing
	_HOURMETER_OFF
	_PrintLED_Off
	
	{% if printer.save_variables.variables.module_led_effect_loaded %}
		set_light_mode CHAIN=chamber_lights	EFFECT=normal	RESET=1		# uses LED_EFFECTS code
		set_light_mode CHAIN=lcd_lights 	EFFECT=normal	RESET=1		# uses LED_EFFECTS code
		# set_light_mode CHAIN=ercf_lights	EFFECT=off		RESET=1		# uses LED_EFFECTS code
		# set_light_mode CHAIN=dash_lights	EFFECT=off		RESET=1		# uses LED_EFFECTS code
	{% else %}
		ChLts_Normal		# set chamber lights to normal	- uses Klipper Dotstar code
		LcdLts_Normal		# set lcd lights to normal		- uses Klipper Neopixel code
		# ERCFLts_off			# set ercf lights to normal		- uses Klipper Neopixel code
		# DBLts_off			# set dash lights to normal		- uses Klipper Neopixel code
	{% endif %}
	
	SAVE_GCODE_STATE NAME=State_Save_Pause						# save state for restoration at resume

	##### set defaults #####
	{% set max_x = printer.toolhead.axis_maximum.x|float %}
	{% set max_y = printer.toolhead.axis_maximum.y|float %}
	{% set x = params.X|default(max_x//2)|float %}
	{% set y = params.Y|default(0)|float %}
	{% set z = params.Z|default(20)|float %} 					#Z is relative - default to lifting 20mm up from print on a pause
	{% set e = params.E|default(1)|float %}						#edit to your retract length
	##### calculate save lift position #####
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% set lift_z = z|abs %}
	{% if act_z < (max_z - lift_z) %}
		{% set z_safe = lift_z %}
	{% else %}
		{% set z_safe = max_z - act_z %}
	{% endif %}
	##### end of definitions #####

	PAUSE_BASE
	relative
	{% if printer.extruder.can_extrude|lower == 'true' %}
	  G1 E-{e} F2100
	{% else %}
	  {action_respond_info("Extruder not hot enough")}
	{% endif %}
	{% if "xyz" in printer.toolhead.homed_axes %}	
	  G1 Z{z_safe}
	  absolute
	  G1 X{x} Y{y} F6000
	{% else %}
	  {action_respond_info("Printer not homed")}
	{% endif %}
	snd_PrintPause
	start_pause_alarm
	# M118 print_paused
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_paused"'	# machine state save