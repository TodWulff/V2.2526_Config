#####################################################################
# _homing_override
#####################################################################

[delayed_gcode _homing_override_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_homing_override_loaded func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'
	_module_loaded MODULE=_homing_override
	_proc_end function=_homing_override_loaded

#--------------------------------------------------------------------

[gcode_macro _info_homing_override]
gcode:

# user config to wrap FW procs constained in z_tilt.cfg

#--------------------------------------------------------------------

[gcode_macro _homing_override_vars]
description: macro for _homing_override variables

gcode:

	_proc_start function=_homing_override_vars func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	# there is none, this is for module variable use only

	_proc_end function=_homing_override_vars

#--------------------------------------------------------------------

[delayed_gcode _homing_override_module_start]
#description: Inits svv flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5					# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_homing_override_module_start func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	SAVE_VARIABLE VARIABLE=module_homing_override_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_homing_override_err_flag VALUE=0							#init error flag that this module is not in error

	_proc_end function=_homing_override_module_start

#--------------------------------------------------------------------

[homing_override]
# originally in klicky
axes: xyz
gcode:

	_proc_start function=homing_override func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"homing"'	# machine state save

	{% if params.X|default(-999)|int == 0 %} {% set xreq = 1 %} {% else %} {% set xreq = 0 %} {% endif %}
	{% if params.Y|default(-999)|int == 0 %} {% set yreq = 1 %} {% else %} {% set yreq = 0 %} {% endif %}
	{% if params.Z|default(-999)|int == 0 %} {% set zreq = 1 %} {% else %} {% set zreq = 0 %} {% endif %}

	{% set th = printer.toolhead %}

	{% if "x" not in th.homed_axes %} {% set xhomed = 0 %} {% else %} {% set xhomed = 1 %} {% endif %}
	{% if "y" not in th.homed_axes %} {% set yhomed = 0 %} {% else %} {% set yhomed = 1 %} {% endif %}
	{% if "z" not in th.homed_axes %} {% set zhomed = 0 %} {% else %} {% set zhomed = 1 %} {% endif %}

	{% if xhomed and yhomed and zhomed and zreq and not xreq and not yreq %}
		say S="ReHoming Z"
	{% elif xhomed and yhomed and zhomed %}
		say S="Rehoming"
	{% else %}
		say S="Homing"
	{% endif %}

	# collect user state variables
	_Klicky_Variables

	# Safe Z for travel
	{% set safe_z = 		 printer["gcode_macro _Klicky_Variables"].safe_z|float				%}
	{% set enable_z_hop = 	 printer["gcode_macro _Klicky_Variables"].enable_z_hop				%}
	{% set attachmove_x = 	 printer["gcode_macro _Klicky_Variables"].attachmove_x|default(0)	%}
	{% set attachmove_y =	 printer["gcode_macro _Klicky_Variables"].attachmove_y|default(0)	%}
	{% set attachmove_z = 	 printer["gcode_macro _Klicky_Variables"].attachmove_z|default(0)	%}
	{% set z_drop_feedrate = printer["gcode_macro _Klicky_Variables"].z_drop_speed * 60			%}

	#checks if the variable definitions are up to date
	_klicky_check_variables_version

	# if there is no Attach movement, fail
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
		{ action_raise_error("No attachmove location!") }
	{% endif %}

	_CheckProbe action=query

	# reset parameters
	{% set home_x, home_y, home_z = False, False, False %}

	# which axes have been requested for homing
	{% if not 'X' in params
		and not 'Y' in params
		and not 'Z' in params %}

		{% set home_x, home_y, home_z = True, True, True %}

	{% else %}
		# Frame mount x-endstop - home Y before X
		{% if 'X' in params %}
			{% set home_x = True %}
		{% endif %}

		{% if 'Y' in params %}
			{% set home_y = True %}
		{% endif %}

		{% if 'Z' in params %}
			{% set home_z = True %}
		{% endif %}

		{% if 'X' in params
		 and 'Y' in params
		 and 'Z' in params %}
			# reset homing state variables
			# if homing all axes
			_Homing_Variables reset=1
		 {% endif %}

	{% endif %}

	_entry_point function=homing_override

	# if Z is not homed, do not move the bed if it goes down
	{% if 'z' not in printer.toolhead.homed_axes %}
		{% if not enable_z_hop %} # Disables safe_z
			{% set safe_z = 0 %}
		{% endif %}
	{% endif %}

	{% if home_z %}
		{% if 'z' in printer.toolhead.homed_axes %}
			{% if printer.toolhead.position.z < safe_z %}
				G0 Z{safe_z} F{z_drop_feedrate}
			{% endif %}
		{% else %}
			SET_KINEMATIC_POSITION X=0 Y=0 Z=0
			G0 Z{safe_z} F{z_drop_feedrate}
			{% set home_x, home_y, home_z = True, True, True %}
		{% endif %}
	{% endif %}

	# if the dock is oriented on the Y, first do Y endstop
	{% if attachmove_y == 0 %}
		# Home y
		{% if home_y %}
			# mimmicing a userWrap around a renamed FW proc, for the purposes of recursion prevention
			_proc_start function=G28 func_params='"Y0"'
			G28.1 Y0	# call stock G28 code
			_proc_end function=G28
		{% endif %}
		{% set home_y = False %}
	{% endif %}

	# Home x
	{% if home_x %}
		# mimmicing a userWrap around a renamed FW proc, for the purposes of recursion prevention
		_proc_start function=G28 func_params='"X0"'
		G28.1 X0	# call stock G28 code
		_proc_end function=G28
	{% endif %}

	# Home y
	{% if home_y %}
		# mimmicing a userWrap around a renamed FW proc, for the purposes of recursion prevention
		_proc_start function=G28 func_params='"Y0"'
		G28.1 Y0	# call stock G28 code
		_proc_end function=G28
	{% endif %}
	
	# Home z
	{% if home_z %}
		# if probe is configured as endstop, attach it, else dock the probe if attached
		{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
			Attach_Probe
		{% else %}
			Dock_Probe
		{% endif %}
		_Home_Z
		# if probe is configured as endstop, dock it
		{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
			Dock_Probe
		{% endif %}
	{% endif %}
	_CheckProbe action=query

	# park the toolhead
	_Park_Toolhead

	_exit_point function=homing_override

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"homed"'	# machine state save

	{% if xhomed and yhomed and zhomed and zreq and not xreq and not yreq %}
		say_nc S="Z ReHomed"
	{% elif xhomed and yhomed and zhomed %}
		say_nc S="Rehomed"
	{% else %}
		say_nc S="Homed"
	{% endif %}

	_proc_end function=homing_override

#--------------------------------------------------------------------

[gcode_macro _Home_Z]
gcode:

	_proc_start function=_Home_Z func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"z_homing"'	# machine state save
	
	{% set z_endstop_x =		printer["gcode_macro _Probe_Variables"].z_endstop_x				%}
	{% set z_endstop_y =		printer["gcode_macro _Probe_Variables"].z_endstop_y				%}
	
	{% set safe_z =				printer["gcode_macro _Klicky_Variables"].safe_z|float			%}
	{% set xytravel_feedrate =	printer["gcode_macro _Klicky_Variables"].xytravel_speed * 60	%}
	{% set ztravel_feedrate =	printer["gcode_macro _Klicky_Variables"].ztravel_speed * 60		%}
	{% set z_drop_feedrate =	printer["gcode_macro _Klicky_Variables"].z_drop_speed * 60		%}
	{% set verbose =			printer["gcode_macro _Klicky_Variables"].verbose				%}

	_entry_point function=Home_Z

	# if x and y are not homed yet, raise error
	{% if not 'xy' in printer.toolhead.homed_axes %}
		{ action_raise_error("Must Home X and Y Axis First!") }
	{% else %}
		{% if not 'z' in printer.toolhead.homed_axes %}
			{% if verbose %} M118 Resetting Z position to zero {% endif %}
			SET_KINEMATIC_POSITION Z=0
		{% endif %}
		# Move tool to safe homing position and home Z axis
		G0 X{z_endstop_x} Y{z_endstop_y} F{xytravel_feedrate}	# location of z endstop
		# mimmicing a userWrap around a renamed FW proc, for the purposes of recursion prevention
		_proc_start function=G28 func_params='"Z0"'
		G28.1 Z0
		_proc_end function=G28
		G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}

	_exit_point function=Home_Z
	
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"z_homed"'	# machine state save

	_proc_end function=_Home_Z

#--------------------------------------------------------------------

