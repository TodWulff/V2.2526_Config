#####################################################################
# _debug_svv
#####################################################################

[delayed_gcode _debug_svv_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_debug_svv_loaded func_params='"{rawparams|string}"'
	_module_loaded MODULE=_debug_svv
	_proc_end function=_debug_svv_loaded

#--------------------------------------------------------------------

[gcode_macro _info_debug_svv_macros]
gcode:

# todo - write up on module's purpose/function/implementation/use
# see user_interaction for an example of intended use

#--------------------------------------------------------------------

[gcode_macro _debug_svv_vars]
description: macro for _debug_svv variables

gcode:

	_proc_start function=_debug_svv_vars func_params='"{rawparams|string}"'

	# there is none, this is for module variable use only

	_proc_end function=_debug_svv_vars

#--------------------------------------------------------------------

[delayed_gcode _debug_svv_module_start]
#description: Inits svv flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5					# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_debug_svv_module_start func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE=module_debug_svv_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_debug_svv_err_flag VALUE=0							#init error flag that this module is not in error

	_proc_end function=_debug_svv_module_start

#--------------------------------------------------------------------

[gcode_macro SAVE_VARIABLE]
#####################################################################
#  realtime save_var debug echo
#####################################################################
description: SAVE_VARIABLE, with console echo if so enabled
# does type conversion of numbers too, pulling them out of strings
# optional param save_raw, if passed and != 0, bypasses the type conversion
rename_existing: _SAVE_VARIABLE_STOCK
gcode:

	_proc_start function=SAVE_VARIABLE func_params='"{rawparams|string}"'  

	{% set save_var = params.VARIABLE|lower %}			# lower case var names are required
	{% set save_val = params.VALUE %}
	{% set save_raw = params.RAW|default(0)|int %}

	{% if printer["gcode_macro _debug__tools_vars"].force_svv_typing and save_raw == 0 %}

		## forcibly save numbers as numbers (int/float) and not within strings, 
		## even though passed numbers may be stringified
		{% if save_val|replace("\"","")|int|string == save_val|replace("\"","")|string %}		# test for int
			{% set svv_VALUE = save_val|replace("\"","")|int %}									# it's an int, so strip any string encapsulations
		{% elif save_val|replace("\"","")|float|string == save_val|replace("\"","")|string %}	# test for float
			{% set svv_VALUE = save_val|replace("\"","")|float %}								# it's a float, so strip any string encapsulations
		{% else %}																				# it's not a number
			{% set svv_VALUE = "'" + save_val|string + "'" %}									# so wrap in string encapsulation chars
		{% endif %}
	
	{% endif %}
	
	{% if printer["gcode_macro _debug__tools_vars"].debug_save_var %}  
		{% if printer["gcode_macro _debug__tools_vars"].log_savar_to_file %}  
			log_savar S="VAR={save_var} VAL={svv_VALUE|replace("\\\"", "`")|replace("\\\'", "`")|replace("\"", "`")|replace("\'", "`")}"
		{% else %}
			M118 >>> SVV: VAR={save_var} VAL={svv_VALUE} <<<
		{% endif %}
	{% endif %}
	
	_SAVE_VARIABLE_STOCK VARIABLE={save_var} VALUE={svv_VALUE}

	_proc_end function=SAVE_VARIABLE 

#--------------------------------------------------------------------

[gcode_macro _enable_debug_save_var]
description: used to enable save_var debug
gcode:

	_proc_start function=_enable_debug_save_var func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _debug__tools_vars"].debug_save_var %}  
		{% if printer["gcode_macro _debug__tools_vars"].log_savar_to_file %}  
			log_savar S=">>>>> _enable_debug_save_var <<<<<"
		{% else %}
			M118 >>>>> _enable_debug_save_var <<<<<
		{% endif %}
	{% endif %}
	
	say S="Save Variable Debug Enabled"

	_proc_end function=_enable_debug_save_var 

#--------------------------------------------------------------------

[gcode_macro _disable_debug_save_var]
description: used to disable save_var debug
gcode:

	_proc_start function=_disable_debug_save_var func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _debug__tools_vars"].debug_save_var %}  
		{% if printer["gcode_macro _debug__tools_vars"].log_savar_to_file %}  
			log_savar S=">>>>> _disable_debug_savar <<<<<"
		{% else %}
			M118 >>>>> _disable_debug_savar <<<<<
		{% endif %}
	{% endif %}
	
	say S="Save Variable Debug Disabled"

	_proc_end function=_disable_debug_save_var 
	
	SET_GCODE_VARIABLE MACRO=_debug__tools_vars VARIABLE=debug_save_var VALUE=0

#--------------------------------------------------------------------

[gcode_macro enable_debug_save_var]
description:
gcode:
	_proc_start function=enable_debug_save_var func_params='"{rawparams|string}"'
	
	SET_GCODE_VARIABLE MACRO=_debug__tools_vars VARIABLE=debug_save_var VALUE=1
	
	_enable_debug_save_var
	
	_proc_end function=enable_debug_save_var

#--------------------------------------------------------------------

[gcode_macro disable_debug_save_var]
description:
gcode:
	_proc_start function=disable_debug_save_var func_params='"{rawparams|string}"'
	_disable_debug_save_var
	_proc_end function=disable_debug_save_var
