OK, there are several groups of info here for future reference:

1) TMC Driver Data Dump
2) DUMP_PARAMETER Output
3) Prusa Slicer Gcode Placeholders
4) Search_Vars Output

-------------------------------------------------------
---  TMC Debug Output
-------------------------------------------------------

00:28:20 >>>> M122 TMC Debug Start <<<<

00:28:20 >>> stepper_x <<<
========== Write-only registers ==========
00:28:20 SLAVECONF: 00000200 senddelay=2
00:28:20 IHOLD_IRUN: 00081919 ihold=25 irun=25 iholddelay=8
00:28:20 TPOWERDOWN: 00000014 tpowerdown=20
00:28:20 SGTHRS: 00000000
00:28:20 ========== Queried registers ==========
00:28:20 GCONF: 000001c4 en_spreadcycle=1 pdn_disable=1 mstep_reg_select=1 multistep_filt=1
00:28:21 GSTAT: 00000001 reset=1(Reset)
00:28:21 IFCNT: 0000001c ifcnt=28
00:28:21 OTP_READ: 0000000e otp_fclktrim=14
00:28:21 IOIN: 21000041 enn=1 pdn_uart=1 version=0x21
00:28:21 FACTORY_CONF: 0000000e fclktrim=14
00:28:21 TSTEP: 000fffff tstep=1048575
00:28:21 MSCNT: 00000028 mscnt=40
00:28:21 MSCURACT: 00ef003c cur_a=60 cur_b=239
00:28:21 CHOPCONF: 24010053 toff=3 hstrt=5 tbl=2 mres=4(16usteps) dedge=1
00:28:22 DRV_STATUS: 80190000 cs_actual=25 stst=1
00:28:22 PWMCONF: c80d0e24 pwm_ofs=36 pwm_grad=14 pwm_freq=1 pwm_autoscale=1 pwm_autograd=1 pwm_reg=8 pwm_lim=12
00:28:22 PWM_SCALE: 0000001d pwm_scale_sum=29
00:28:22 PWM_AUTO: 000e0024 pwm_ofs_auto=36 pwm_grad_auto=14
00:28:22 SG_RESULT: 00000000

00:28:22 >>> stepper_y <<<
========== Write-only registers ==========
00:28:23 SLAVECONF: 00000200 senddelay=2
00:28:23 IHOLD_IRUN: 00081919 ihold=25 irun=25 iholddelay=8
00:28:23 TPOWERDOWN: 00000014 tpowerdown=20
00:28:23 SGTHRS: 00000000
00:28:23 ========== Queried registers ==========
00:28:23 GCONF: 000001c4 en_spreadcycle=1 pdn_disable=1 mstep_reg_select=1 multistep_filt=1
00:28:23 GSTAT: 00000001 reset=1(Reset)
00:28:23 IFCNT: 0000001c ifcnt=28
00:28:23 OTP_READ: 0000000e otp_fclktrim=14
00:28:23 IOIN: 21000041 enn=1 pdn_uart=1 version=0x21
00:28:24 FACTORY_CONF: 0000000e fclktrim=14
00:28:24 TSTEP: 000fffff tstep=1048575
00:28:24 MSCNT: 00000028 mscnt=40
00:28:24 MSCURACT: 00ef003c cur_a=60 cur_b=239
00:28:24 CHOPCONF: 24010053 toff=3 hstrt=5 tbl=2 mres=4(16usteps) dedge=1
00:28:24 DRV_STATUS: 80190000 cs_actual=25 stst=1
00:28:24 PWMCONF: c80d0e24 pwm_ofs=36 pwm_grad=14 pwm_freq=1 pwm_autoscale=1 pwm_autograd=1 pwm_reg=8 pwm_lim=12
00:28:24 PWM_SCALE: 0000001d pwm_scale_sum=29
00:28:24 PWM_AUTO: 000e0024 pwm_ofs_auto=36 pwm_grad_auto=14
00:28:25 SG_RESULT: 00000000

00:28:25 >>> stepper_z <<<
========== Write-only registers ==========
00:28:25 SLAVECONF: 00000200 senddelay=2
00:28:25 IHOLD_IRUN: 0008150e ihold=14 irun=21 iholddelay=8
00:28:26 TPWMTHRS: 00000753 tpwmthrs=1875
00:28:26 TPOWERDOWN: 00000014 tpowerdown=20
00:28:26 SGTHRS: 00000000
00:28:26 ========== Queried registers ==========
00:28:27 GCONF: 000001c0 pdn_disable=1 mstep_reg_select=1 multistep_filt=1
00:28:27 GSTAT: 00000001 reset=1(Reset)
00:28:27 IFCNT: 00000020 ifcnt=32
00:28:27 OTP_READ: 00000010 otp_fclktrim=16
00:28:28 IOIN: 21000041 enn=1 pdn_uart=1 version=0x21
00:28:28 FACTORY_CONF: 00000010 fclktrim=16
00:28:28 TSTEP: 000fffff tstep=1048575
00:28:28 MSCNT: 00000028 mscnt=40
00:28:28 MSCURACT: 00ef003c cur_a=60 cur_b=239
00:28:29 CHOPCONF: 24010053 toff=3 hstrt=5 tbl=2 mres=4(16usteps) dedge=1
00:28:29 DRV_STATUS: c00e0000 cs_actual=14 stealth=1 stst=1
00:28:29 PWMCONF: c80d0e24 pwm_ofs=36 pwm_grad=14 pwm_freq=1 pwm_autoscale=1 pwm_autograd=1 pwm_reg=8 pwm_lim=12
00:28:29 PWM_SCALE: 00000010 pwm_scale_sum=16
00:28:30 PWM_AUTO: 000e0024 pwm_ofs_auto=36 pwm_grad_auto=14
00:28:30 SG_RESULT: 00000000

00:28:30 >>> stepper_z1 <<<
========== Write-only registers ==========
00:28:31 SLAVECONF: 00000200 senddelay=2
00:28:31 IHOLD_IRUN: 0008150e ihold=14 irun=21 iholddelay=8
00:28:31 TPWMTHRS: 00000753 tpwmthrs=1875
00:28:32 TPOWERDOWN: 00000014 tpowerdown=20
00:28:32 SGTHRS: 00000000
00:28:32 ========== Queried registers ==========
00:28:32 GCONF: 000001c0 pdn_disable=1 mstep_reg_select=1 multistep_filt=1
00:28:33 GSTAT: 00000001 reset=1(Reset)
00:28:33 IFCNT: 00000020 ifcnt=32
00:28:33 OTP_READ: 0000000e otp_fclktrim=14
00:28:33 IOIN: 21000041 enn=1 pdn_uart=1 version=0x21
00:28:33 FACTORY_CONF: 0000000e fclktrim=14
00:28:34 TSTEP: 000fffff tstep=1048575
00:28:34 MSCNT: 00000028 mscnt=40
00:28:34 MSCURACT: 00ef003c cur_a=60 cur_b=239
00:28:34 CHOPCONF: 24010053 toff=3 hstrt=5 tbl=2 mres=4(16usteps) dedge=1
00:28:34 DRV_STATUS: c00e0000 cs_actual=14 stealth=1 stst=1
00:28:35 PWMCONF: c80d0e24 pwm_ofs=36 pwm_grad=14 pwm_freq=1 pwm_autoscale=1 pwm_autograd=1 pwm_reg=8 pwm_lim=12
00:28:35 PWM_SCALE: 00000010 pwm_scale_sum=16
00:28:35 PWM_AUTO: 000e0024 pwm_ofs_auto=36 pwm_grad_auto=14
00:28:35 SG_RESULT: 00000000

00:28:35 >>> stepper_z2 <<<
========== Write-only registers ==========
00:28:36 SLAVECONF: 00000200 senddelay=2
00:28:36 IHOLD_IRUN: 0008150e ihold=14 irun=21 iholddelay=8
00:28:37 TPWMTHRS: 00000753 tpwmthrs=1875
00:28:37 TPOWERDOWN: 00000014 tpowerdown=20
00:28:37 SGTHRS: 00000000
00:28:37 ========== Queried registers ==========
00:28:38 GCONF: 000001c0 pdn_disable=1 mstep_reg_select=1 multistep_filt=1
00:28:38 GSTAT: 00000001 reset=1(Reset)
00:28:38 IFCNT: 00000020 ifcnt=32
00:28:38 OTP_READ: 0000000f otp_fclktrim=15
00:28:39 IOIN: 21000041 enn=1 pdn_uart=1 version=0x21
00:28:39 FACTORY_CONF: 0000000f fclktrim=15
00:28:39 TSTEP: 000fffff tstep=1048575
00:28:39 MSCNT: 00000008 mscnt=8
00:28:39 MSCURACT: 00f7000c cur_a=12 cur_b=247
00:28:40 CHOPCONF: 24010053 toff=3 hstrt=5 tbl=2 mres=4(16usteps) dedge=1
00:28:40 DRV_STATUS: c00e0000 cs_actual=14 stealth=1 stst=1
00:28:40 PWMCONF: c80d0e24 pwm_ofs=36 pwm_grad=14 pwm_freq=1 pwm_autoscale=1 pwm_autograd=1 pwm_reg=8 pwm_lim=12
00:28:40 PWM_SCALE: 00000010 pwm_scale_sum=16
00:28:40 PWM_AUTO: 000e0024 pwm_ofs_auto=36 pwm_grad_auto=14
00:28:41 SG_RESULT: 00000000

00:28:41 >>> stepper_z3 <<<
========== Write-only registers ==========
00:28:42 SLAVECONF: 00000200 senddelay=2
00:28:42 IHOLD_IRUN: 0008150e ihold=14 irun=21 iholddelay=8
00:28:42 TPWMTHRS: 00000753 tpwmthrs=1875
00:28:42 TPOWERDOWN: 00000014 tpowerdown=20
00:28:42 SGTHRS: 00000000
00:28:43 ========== Queried registers ==========
00:28:43 GCONF: 000001c0 pdn_disable=1 mstep_reg_select=1 multistep_filt=1
00:28:43 GSTAT: 00000001 reset=1(Reset)
00:28:43 IFCNT: 00000020 ifcnt=32
00:28:43 OTP_READ: 00000011 otp_fclktrim=17
00:28:44 IOIN: 21000041 enn=1 pdn_uart=1 version=0x21
00:28:44 FACTORY_CONF: 00000011 fclktrim=17
00:28:44 TSTEP: 000fffff tstep=1048575
00:28:44 MSCNT: 00000008 mscnt=8
00:28:44 MSCURACT: 00f7000c cur_a=12 cur_b=247
00:28:45 CHOPCONF: 24010053 toff=3 hstrt=5 tbl=2 mres=4(16usteps) dedge=1
00:28:45 DRV_STATUS: c00e0000 cs_actual=14 stealth=1 stst=1
00:28:45 PWMCONF: c80d0e24 pwm_ofs=36 pwm_grad=14 pwm_freq=1 pwm_autoscale=1 pwm_autograd=1 pwm_reg=8 pwm_lim=12
00:28:45 PWM_SCALE: 00000010 pwm_scale_sum=16
00:28:46 PWM_AUTO: 000e0024 pwm_ofs_auto=36 pwm_grad_auto=14
00:28:46 SG_RESULT: 00000000

00:28:46 >>> extruder <<<
========== Write-only registers ==========
00:28:47 SLAVECONF: 00000200 senddelay=2
00:28:47 IHOLD_IRUN: 00081b01 ihold=1 irun=27 iholddelay=8
00:28:47 TPOWERDOWN: 00000014 tpowerdown=20
00:28:47 SGTHRS: 00000000
00:28:48 ========== Queried registers ==========
00:28:48 GCONF: 000001c4 en_spreadcycle=1 pdn_disable=1 mstep_reg_select=1 multistep_filt=1
00:28:48 GSTAT: 00000001 reset=1(Reset)
00:28:48 IFCNT: 0000001c ifcnt=28
00:28:48 OTP_READ: 0000000f otp_fclktrim=15
00:28:49 IOIN: 21000041 enn=1 pdn_uart=1 version=0x21
00:28:49 FACTORY_CONF: 0000000f fclktrim=15
00:28:49 TSTEP: 000fffff tstep=1048575
00:28:49 MSCNT: 00000008 mscnt=8
00:28:49 MSCURACT: 00f7000c cur_a=12 cur_b=247
00:28:49 CHOPCONF: 24030053 toff=3 hstrt=5 tbl=2 vsense=1 mres=4(16usteps) dedge=1
00:28:50 DRV_STATUS: 80010000 cs_actual=1 stst=1
00:28:50 PWMCONF: c80d0e24 pwm_ofs=36 pwm_grad=14 pwm_freq=1 pwm_autoscale=1 pwm_autograd=1 pwm_reg=8 pwm_lim=12
00:28:50 PWM_SCALE: 00000002 pwm_scale_sum=2
00:28:50 PWM_AUTO: 000e0024 pwm_ofs_auto=36 pwm_grad_auto=14
00:28:50 SG_RESULT: 00000000

00:28:50 >>> selector_stepper <<<
========== Write-only registers ==========
00:28:51 SLAVECONF: 00000200 senddelay=2
00:28:51 IHOLD_IRUN: 00081302 ihold=2 irun=19 iholddelay=8
00:28:52 TPOWERDOWN: 00000014 tpowerdown=20
00:28:52 SGTHRS: 00000000
00:28:52 ========== Queried registers ==========
00:28:52 GCONF: 000001c4 en_spreadcycle=1 pdn_disable=1 mstep_reg_select=1 multistep_filt=1
00:28:52 GSTAT: 00000001 reset=1(Reset)
00:28:53 IFCNT: 0000001c ifcnt=28
00:28:53 OTP_READ: 0000000d otp_fclktrim=13
00:28:53 IOIN: 21000045 enn=1 ms1=1 pdn_uart=1 version=0x21
00:28:53 FACTORY_CONF: 0000000d fclktrim=13
00:28:53 TSTEP: 000fffff tstep=1048575
00:28:53 MSCNT: 00000008 mscnt=8
00:28:54 MSCURACT: 00f7000c cur_a=12 cur_b=247
00:28:54 CHOPCONF: 24030053 toff=3 hstrt=5 tbl=2 vsense=1 mres=4(16usteps) dedge=1
00:28:54 DRV_STATUS: 80020000 cs_actual=2 stst=1
00:28:54 PWMCONF: c80d0e24 pwm_ofs=36 pwm_grad=14 pwm_freq=1 pwm_autoscale=1 pwm_autograd=1 pwm_reg=8 pwm_lim=12
00:28:54 PWM_SCALE: 00000003 pwm_scale_sum=3
00:28:54 PWM_AUTO: 000e0024 pwm_ofs_auto=36 pwm_grad_auto=14
00:28:55 SG_RESULT: 00000000

00:28:55 >>> gear_stepper <<<
========== Write-only registers ==========
00:28:55 SLAVECONF: 00000200 senddelay=2
00:28:56 IHOLD_IRUN: 00081902 ihold=2 irun=25 iholddelay=8
00:28:56 TPOWERDOWN: 00000014 tpowerdown=20
00:28:56 SGTHRS: 00000000
00:28:56 ========== Queried registers ==========
00:28:56 GCONF: 000001c4 en_spreadcycle=1 pdn_disable=1 mstep_reg_select=1 multistep_filt=1
00:28:56 GSTAT: 00000001 reset=1(Reset)
00:28:56 IFCNT: 0000001c ifcnt=28
00:28:57 OTP_READ: 00000010 otp_fclktrim=16
00:28:57 IOIN: 21000041 enn=1 pdn_uart=1 version=0x21
00:28:57 FACTORY_CONF: 00000010 fclktrim=16
00:28:57 TSTEP: 000fffff tstep=1048575
00:28:57 MSCNT: 00000008 mscnt=8
00:28:57 MSCURACT: 00f7000c cur_a=12 cur_b=247
00:28:58 CHOPCONF: 34030053 toff=3 hstrt=5 tbl=2 vsense=1 mres=4(16usteps) intpol=1 dedge=1
00:28:58 DRV_STATUS: 80020000 cs_actual=2 stst=1
00:28:58 PWMCONF: c80d0e24 pwm_ofs=36 pwm_grad=14 pwm_freq=1 pwm_autoscale=1 pwm_autograd=1 pwm_reg=8 pwm_lim=12
00:28:58 PWM_SCALE: 00000003 pwm_scale_sum=3
00:28:58 PWM_AUTO: 000e0024 pwm_ofs_auto=36 pwm_grad_auto=14
00:28:59 SG_RESULT: 00000000

00:28:59 >>>> M122 TMC Debug End <<<<

-------------------------------------------------------
---  DUMP_PARAMETER Output
-------------------------------------------------------

printer['bed_mesh'].mesh_matrix = [[0.1375, 0.124593, 0.103241, 0.09, 0.085944, 0.082667, 0.0825, 0.092537, 0.110019, 0.1225, 0.136704, 0.157574, 0.17], [0.114926, 0.104657, 0.087579, 0.07663, 0.070694, 0.063742, 0.061333, 0.071402, 0.089449, 0.102389, 0.117116, 0.138783, 0.151685], [0.077685, 0.07171, 0.061589, 0.05437, 0.04538, 0.032452, 0.026389, 0.036447, 0.055313, 0.068944, 0.084574, 0.107632, 0.12137], [0.055, 0.051407, 0.045148, 0.04, 0.029333, 0.013111, 0.005, 0.014796, 0.033704, 0.0475, 0.063833, 0.088056, 0.1025], [0.051426, 0.046502, 0.038088, 0.031796, 0.022251, 0.00811, 0.001037, 0.009094, 0.024914, 0.037019, 0.054615, 0.081336, 0.097333], [0.051074, 0.043384, 0.030491, 0.021815, 0.014498, 0.004539, -0.00037, 0.004785, 0.015355, 0.024537, 0.044024, 0.074565, 0.092944], [0.0525, 0.043167, 0.027611, 0.0175, 0.011407, 0.003759, 0.0, 0.003204, 0.010296, 0.0175, 0.037889, 0.070389, 0.09], [0.059796, 0.050755, 0.03564, 0.02563, 0.018457, 0.008925, 0.003815, 0.005519, 0.010366, 0.016037, 0.034879, 0.065164, 0.083463], [0.072537, 0.064455, 0.050842, 0.041426, 0.032204, 0.019027, 0.011407, 0.011014, 0.012833, 0.016352, 0.0324, 0.058542, 0.07437], [0.0825, 0.075481, 0.063574, 0.055, 0.044593, 0.029185, 0.02, 0.018185, 0.017926, 0.02, 0.034389, 0.058111, 0.0725], [0.099148, 0.095381, 0.088834, 0.083519, 0.073587, 0.058158, 0.048685, 0.045397, 0.042712, 0.04337, 0.058003, 0.082465, 0.097333], [0.124685, 0.12613, 0.12819, 0.128148, 0.119277, 0.104305, 0.094704, 0.089306, 0.08309, 0.081741, 0.097157, 0.123397, 0.139389], [0.14, 0.144593, 0.151852, 0.155, 0.146796, 0.132148, 0.1225, 0.115852, 0.107537, 0.105, 0.120926, 0.148296, 0.165]]
printer['bed_mesh'].mesh_max = (330.0, 330.0)
printer['bed_mesh'].mesh_min = (40.0, 40.0)
printer['bed_mesh'].probed_matrix = [[0.1375, 0.09, 0.0825, 0.1225, 0.17], [0.055, 0.04, 0.005, 0.0475, 0.1025], [0.0525, 0.0175, 0.0, 0.0175, 0.09], [0.0825, 0.055, 0.02, 0.02, 0.0725], [0.14, 0.155, 0.1225, 0.105, 0.165]]
printer['bed_mesh'].profile_name = default
printer['bed_mesh'].profiles = {'UberSoaked': {'points': ((0.1675, 0.12, 0.085, 0.085, 0.155), (0.055, 0.04, -0.01, 0.0375, 0.1025), (0.07, 0.01, 0.0, 0.0275, 0.0775), (0.0825, 0.0825, 0.03, 0.0575, 0.1075), (0.1575, 0.1825, 0.1525, 0.16, 0.2175)), 'mesh_params': OrderedDict([('tension', 0.2), ('mesh_x_pps', 2), ('algo', 'bicubic'), ('min_x', 40.0), ('min_y', 40.0), ('y_count', 5), ('mesh_y_pps', 2), ('x_count', 5), ('max_x', 330.0), ('max_y', 330.0)])}, 'HOT_KLICKY': {'points': ((0.115938, 0.114063, 0.075, 0.093594, 0.175313), (0.0975, 0.040938, -0.007344, 0.026875, 0.090625), (0.040313, 0.01375, 0.0, 0.019687, 0.044062), (0.09875, 0.049687, 0.012812, 0.045, 0.07875), (0.157812, 0.171719, 0.125, 0.133594, 0.200312)), 'mesh_params': OrderedDict([('tension', 0.2), ('mesh_x_pps', 2), ('algo', 'bicubic'), ('min_x', 40.0), ('min_y', 40.0), ('y_count', 5), ('mesh_y_pps', 2), ('x_count', 5), ('max_x', 330.0), ('max_y', 330.0)])}, 'default': {'points': ((0.1375, 0.09, 0.0825, 0.1225, 0.17), (0.055, 0.04, 0.005, 0.0475, 0.1025), (0.0525, 0.0175, 0.0, 0.0175, 0.09), (0.0825, 0.055, 0.02, 0.02, 0.0725), (0.14, 0.155, 0.1225, 0.105, 0.165)), 'mesh_params': OrderedDict([('tension', 0.2), ('mesh_x_pps', 2), ('algo', 'bicubic'), ('min_x', 40.0), ('min_y', 40.0), ('y_count', 5), ('mesh_y_pps', 2), ('x_count', 5), ('max_x', 330.0), ('max_y', 330.0)])}, 'SOAKED': {'points': ((0.155, 0.1225, 0.1225, 0.1325, 0.2025), (0.0925, 0.0825, 0.035, 0.0375, 0.1125), (0.0975, 0.035, 0.0, 0.035, 0.08), (0.1225, 0.1025, 0.0675, 0.0725, 0.125), (0.215, 0.2075, 0.1575, 0.1625, 0.225)), 'mesh_params': OrderedDict([('tension', 0.2), ('mesh_x_pps', 2), ('algo', 'bicubic'), ('min_x', 40.0), ('min_y', 40.0), ('y_count', 5), ('mesh_y_pps', 2), ('x_count', 5), ('max_x', 330.0), ('max_y', 330.0)])}, '110_Klicky_NoSoak': {'points': ((-0.045, -0.025, 0.0025, -0.045, -0.06), (-0.075, -0.0, -0.01, -0.05, -0.025), (-0.0075, -0.0025, 0.0, 0.0, -0.0225), (-0.0075, 0.0275, 0.04, 0.01, -0.01), (-0.0025, 0.0575, 0.04, -0.015, -0.0225)), 'mesh_params': OrderedDict([('tension', 0.2), ('mesh_x_pps', 2), ('algo', 'bicubic'), ('min_x', 40.0), ('min_y', 40.0), ('y_count', 5), ('mesh_y_pps', 2), ('x_count', 5), ('max_x', 330.0), ('max_y', 330.0)])}, '120_MAGPROBE': {'points': ((0.072344, 0.080781, 0.059531, 0.05, 0.092656), (-0.000312, 0.005313, -0.015156, -0.017969, 0.021406), (0.018281, 0.020781, 0.0, -0.006719, 0.027656), (0.023594, 0.035469, 0.021562, 0.000156, 0.040625), (0.098594, 0.130625, 0.104375, 0.088594, 0.120937)), 'mesh_params': OrderedDict([('tension', 0.2), ('mesh_x_pps', 2), ('algo', 'bicubic'), ('min_x', 40.0), ('min_y', 40.0), ('y_count', 5), ('mesh_y_pps', 2), ('x_count', 5), ('max_x', 330.0), ('max_y', 330.0)])}, '110_Soaked_Klicky': {'points': ((0.05, 0.05, 0.0825, 0.08, 0.1175), (-0.0325, 0.03, 0.015, 0.0175, 0.075), (-0.0075, -0.0075, 0.0, 0.035, 0.06), (0.01, 0.04, 0.05, 0.045, 0.07), (0.0525, 0.0925, 0.0775, 0.0525, 0.08)), 'mesh_params': OrderedDict([('tension', 0.2), ('mesh_x_pps', 2), ('algo', 'bicubic'), ('min_x', 40.0), ('min_y', 40.0), ('y_count', 5), ('mesh_y_pps', 2), ('x_count', 5), ('max_x', 330.0), ('max_y', 330.0)])}, 'COLD_KLICKY': {'points': ((0.003281, 0.035625, 0.063438, 0.025781, -0.020937), (-0.007344, 0.030469, 0.021719, -0.021094, -0.02), (-0.035156, 0.006406, 0.0, -0.013906, -0.055625), (-0.01375, 0.044375, 0.014375, -0.021875, -0.044375), (-0.032813, 0.016875, -0.002188, -0.035781, -0.03625)), 'mesh_params': OrderedDict([('tension', 0.2), ('mesh_x_pps', 2), ('algo', 'bicubic'), ('min_x', 40.0), ('min_y', 40.0), ('y_count', 5), ('mesh_y_pps', 2), ('x_count', 5), ('max_x', 330.0), ('max_y', 330.0)])}, 'NoSoak': {'points': ((-0.08, -0.0575, -0.07, -0.115, -0.1575), (-0.0725, -0.0275, -0.04, -0.04, -0.0825), (-0.02, -0.0, 0.0, -0.0075, -0.025), (-0.0275, 0.035, 0.01, 0.0075, -0.01), (-0.0525, 0.0375, 0.0325, 0.0025, -0.02)), 'mesh_params': OrderedDict([('tension', 0.2), ('mesh_x_pps', 2), ('algo', 'bicubic'), ('min_x', 40.0), ('min_y', 40.0), ('y_count', 5), ('mesh_y_pps', 2), ('x_count', 5), ('max_x', 330.0), ('max_y', 330.0)])}}
printer['display_status'].message = Done - 1 swap.
printer['display_status'].progress = 1.0
printer['dotstar chamber_lights'].color_data = [(0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0)]
printer['ercf'].encoder_pos = 0.6715915
printer['extruder'].can_extrude = True
printer['extruder'].power = 0.230390255619
printer['extruder'].pressure_advance = 0.0
printer['extruder'].smooth_time = 0.04
printer['extruder'].target = 240.0
printer['extruder'].temperature = 240.04
printer['fan'].rpm = None
printer['fan'].speed = 0.101960784314
printer['filament_motion_sensor encoder_sensor'].enabled = False
printer['filament_motion_sensor encoder_sensor'].filament_detected = True
printer['filament_switch_sensor toolhead_sensor'].enabled = True
printer['filament_switch_sensor toolhead_sensor'].filament_detected = False
printer['firmware_retraction'].retract_length = 0.4
printer['firmware_retraction'].retract_speed = 45.0
printer['firmware_retraction'].unretract_extra_length = 0.0
printer['firmware_retraction'].unretract_speed = 22.5
printer['gcode_macro _CheckProbe'].probe_state = 0
printer['gcode_macro _debug_vars'].debug_verb_codeflow = 0
printer['gcode_macro _debug_vars'].debug_verb_debug = 0
printer['gcode_macro _debug_vars'].debug_verb_error = 1
printer['gcode_macro _debug_vars'].debug_verb_info = 0
printer['gcode_macro _debug_vars'].debug_verb_status = 0
printer['gcode_macro _debug_vars'].gcode_state_debug = 0
printer['gcode_macro _debug_vars'].gmove_debug = 0
printer['gcode_macro _debug_vars'].save_var_debug = 0
printer['gcode_macro _ERCF_PAUSE'].extruder_temp = 0
printer['gcode_macro _ERCF_PAUSE'].is_paused = 0
printer['gcode_macro _ERCF_VAR'].clog_detection = 0
printer['gcode_macro _ERCF_VAR'].colorselector = [2.0, 23.0, 44.15, 70.5, 91.5, 112.0, 138.6, 159.5, 180.0, 206.5, 227.5, 248.5]
printer['gcode_macro _ERCF_VAR'].disable_heater = 600
printer['gcode_macro _ERCF_VAR'].end_of_bowden_to_sensor = 47
printer['gcode_macro _ERCF_VAR'].endless_spool_mode = 0
printer['gcode_macro _ERCF_VAR'].ercf_cart_load_length = 45
printer['gcode_macro _ERCF_VAR'].ercf_cart_move_dwell = 100
printer['gcode_macro _ERCF_VAR'].ercf_cart_unload_length = 68
printer['gcode_macro _ERCF_VAR'].ercf_dual_unload_mod = 20
printer['gcode_macro _ERCF_VAR'].ercf_eject_unknow_state_len_mod = 50
printer['gcode_macro _ERCF_VAR'].ercf_extruder_move_dwell = 100
printer['gcode_macro _ERCF_VAR'].ercf_gear_move_dwell = 100
printer['gcode_macro _ERCF_VAR'].ercf_load_unload_dwell = 50
printer['gcode_macro _ERCF_VAR'].ercf_servo_move_dwell = 200
printer['gcode_macro _ERCF_VAR'].ercf_test_load_seq_len = 100
printer['gcode_macro _ERCF_VAR'].ercf_th_load_len_mod = 0
printer['gcode_macro _ERCF_VAR'].ercf_verb_codeflow = 0
printer['gcode_macro _ERCF_VAR'].ercf_verb_debug = 0
printer['gcode_macro _ERCF_VAR'].ercf_verb_error = 1
printer['gcode_macro _ERCF_VAR'].ercf_verb_info = 0
printer['gcode_macro _ERCF_VAR'].ercf_verb_loadunload = 0
printer['gcode_macro _ERCF_VAR'].ercf_verb_motors = 0
printer['gcode_macro _ERCF_VAR'].ercf_verb_status = 0
printer['gcode_macro _ERCF_VAR'].extruder_eject_temp = 240
printer['gcode_macro _ERCF_VAR'].home_ercf_at_boot = 0
printer['gcode_macro _ERCF_VAR'].min_bowden_length = 945.0
printer['gcode_macro _ERCF_VAR'].min_temp_extruder = 180
printer['gcode_macro _ERCF_VAR'].sensor_to_nozzle = 41.5
printer['gcode_macro _ERCF_VAR'].servo_down_angle = 80
printer['gcode_macro _ERCF_VAR'].servo_up_angle = 30
printer['gcode_macro _ERCF_VAR'].sync_accel = 0
printer['gcode_macro _ERCF_VAR'].sync_feedrate = 1500
printer['gcode_macro _ERCF_VAR'].sync_speed = 25
printer['gcode_macro _ERCF_VAR'].test_ercf_load_seq_at_boot = 0
printer['gcode_macro _ERCF_VAR'].test_ercf_load_seq_at_print = 0
printer['gcode_macro _ERCF_VAR'].timeout_pause = 72000
printer['gcode_macro _ERCF_VAR'].unload_modifier = 9.0
printer['gcode_macro _gcodeproc_vars'].dynamic_extrate_enable = 0
printer['gcode_macro _gcodeproc_vars'].dynamic_spdrate_enable = 0
printer['gcode_macro _gcodeproc_vars'].gcodeproc_verb_codeflow = 0
printer['gcode_macro _gcodeproc_vars'].gcodeproc_verb_debug = 0
printer['gcode_macro _gcodeproc_vars'].gcodeproc_verb_error = 1
printer['gcode_macro _gcodeproc_vars'].gcodeproc_verb_info = 0
printer['gcode_macro _gcodeproc_vars'].gcodeproc_verb_status = 0
printer['gcode_macro _klicky_vars'].klicky_verb_codeflow = 0
printer['gcode_macro _klicky_vars'].klicky_verb_debug = 0
printer['gcode_macro _klicky_vars'].klicky_verb_error = 1
printer['gcode_macro _klicky_vars'].klicky_verb_info = 0
printer['gcode_macro _klicky_vars'].klicky_verb_status = 0
printer['gcode_macro _ledeff_vars'].ledeff_verb_debug = 0
printer['gcode_macro _ledeff_vars'].ledeff_verb_error = 1
printer['gcode_macro _ledeff_vars'].ledeff_verb_info = 0
printer['gcode_macro _ledeff_vars'].ledeff_verb_status = 0
printer['gcode_macro _linadv_vars'].dynamic_pa_enable = 0
printer['gcode_macro _linadv_vars'].linadv_verb_codeflow = 0
printer['gcode_macro _linadv_vars'].linadv_verb_debug = 0
printer['gcode_macro _linadv_vars'].linadv_verb_error = 1
printer['gcode_macro _linadv_vars'].linadv_verb_info = 0
printer['gcode_macro _linadv_vars'].linadv_verb_status = 0
printer['gcode_macro _print_purge'].ooze_dwell = 1
printer['gcode_macro _print_purge'].purge_len = 30
printer['gcode_macro _print_purge'].purge_ret = 0.2
printer['gcode_macro _print_purge'].purge_spd = 750
printer['gcode_macro _print_purge'].purge_temp_min = 180
printer['gcode_macro _print_purge'].verbose = False
printer['gcode_macro _print_purge'].wipe_zheight = 0.05
printer['gcode_macro _printer_vars'].pause_retract_default = 1.0
printer['gcode_macro _printer_vars'].ptr_verb_codeflow = 0
printer['gcode_macro _printer_vars'].ptr_verb_debug = 0
printer['gcode_macro _printer_vars'].ptr_verb_error = 1
printer['gcode_macro _printer_vars'].ptr_verb_info = 0
printer['gcode_macro _printer_vars'].ptr_verb_modload = 0
printer['gcode_macro _printer_vars'].ptr_verb_status = 0
printer['gcode_macro _printer_vars'].show_proc_exit = 1
printer['gcode_macro _printer_vars'].show_proc_exit_details = 1
printer['gcode_macro _Probe_Variables'].probe_attached = False
printer['gcode_macro _Probe_Variables'].probe_lock = False
printer['gcode_macro _Probe_Variables'].probe_state = 1
printer['gcode_macro _Probe_Variables'].z_endstop_x = 231.3
printer['gcode_macro _Probe_Variables'].z_endstop_y = 349.0
printer['gcode_macro _scrub_vars'].scrub_err_flag = 0
printer['gcode_macro _scrub_vars'].scrub_verb_codeflow = 0
printer['gcode_macro _scrub_vars'].scrub_verb_debug = 0
printer['gcode_macro _scrub_vars'].scrub_verb_error = 1
printer['gcode_macro _scrub_vars'].scrub_verb_info = 0
printer['gcode_macro _scrub_vars'].scrub_verb_status = 0
printer['gcode_macro _SetDynamicExtRate'].mesh_extrate = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
printer['gcode_macro _SetDynamicExtRate'].mesh_name = ['Unknown', 'Perimeter', 'External perimeter', 'Overhang perimeter', 'Internal infill', 'Solid infill', 'Top solid infill', 'Ironing', 'Bridge infill', 'Gap fill', 'Skirt/Brim', 'Support material', 'Support material interface', 'Wipe tower', 'Custom', 'Mixed']
printer['gcode_macro _SetDynamicPA'].mesh_kval = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
printer['gcode_macro _SetDynamicPA'].mesh_name = ['Unknown', 'Perimeter', 'External perimeter', 'Overhang perimeter', 'Internal infill', 'Solid infill', 'Top solid infill', 'Ironing', 'Bridge infill', 'Gap fill', 'Skirt/Brim', 'Support material', 'Support material interface', 'Wipe tower', 'Custom', 'Mixed']
printer['gcode_macro _SetDynamicPA'].mesh_smtm = [0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04]
printer['gcode_macro _SetDynamicSpdRate'].mesh_name = ['Unknown', 'Perimeter', 'External perimeter', 'Overhang perimeter', 'Internal infill', 'Solid infill', 'Top solid infill', 'Ironing', 'Bridge infill', 'Gap fill', 'Skirt/Brim', 'Support material', 'Support material interface', 'Wipe tower', 'Custom', 'Mixed']
printer['gcode_macro _SetDynamicSpdRate'].mesh_spdrate = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
printer['gcode_macro _User_Variables'].attachmove_x = 0
printer['gcode_macro _User_Variables'].attachmove_y = 30
printer['gcode_macro _User_Variables'].attachmove_z = 0
printer['gcode_macro _User_Variables'].docklocation_x = 319.0
printer['gcode_macro _User_Variables'].docklocation_y = 350.0
printer['gcode_macro _User_Variables'].docklocation_z = -128
printer['gcode_macro _User_Variables'].dockmove_x = -88
printer['gcode_macro _User_Variables'].dockmove_y = 0
printer['gcode_macro _User_Variables'].dockmove_z = 0
printer['gcode_macro _User_Variables'].enable_z_hop = True
printer['gcode_macro _User_Variables'].max_bed_x = 350.0
printer['gcode_macro _User_Variables'].max_bed_y = 350.0
printer['gcode_macro _User_Variables'].park_toolhead = False
printer['gcode_macro _User_Variables'].parkposition_x = 175
printer['gcode_macro _User_Variables'].parkposition_y = 350
printer['gcode_macro _User_Variables'].parkposition_z = 15
printer['gcode_macro _User_Variables'].safe_z = 15
printer['gcode_macro _User_Variables'].umbilical = False
printer['gcode_macro _User_Variables'].umbilical_x = 15
printer['gcode_macro _User_Variables'].umbilical_y = 15
printer['gcode_macro _User_Variables'].verbose = False
printer['gcode_macro _User_Variables'].version = 1
printer['gcode_macro _User_Variables'].xydock_speed = 50
printer['gcode_macro _User_Variables'].xyrelease_speed = 75
printer['gcode_macro _User_Variables'].xytravel_speed = 250
printer['gcode_macro _User_Variables'].z_drop_speed = 5
printer['gcode_macro _User_Variables'].z_endstop_x = 231.3
printer['gcode_macro _User_Variables'].z_endstop_y = 349.0
printer['gcode_macro _User_Variables'].zdock_speed = 5
printer['gcode_macro _User_Variables'].zrelease_speed = 5
printer['gcode_macro _User_Variables'].ztravel_speed = 50
printer['gcode_macro CALIBRATE_Z'].entryexit_z = 15
printer['gcode_macro CALIBRATE_Z'].entryexit_zfeedrate = 900
printer['gcode_macro clean_nozzle'].brush_depth = 0
printer['gcode_macro clean_nozzle'].brush_front = 0
printer['gcode_macro clean_nozzle'].brush_start = 84
printer['gcode_macro clean_nozzle'].brush_top = 4
printer['gcode_macro clean_nozzle'].brush_width = 34
printer['gcode_macro clean_nozzle'].bucket_gap = 22
printer['gcode_macro clean_nozzle'].bucket_left_width = 92
printer['gcode_macro clean_nozzle'].bucket_pos = 1
printer['gcode_macro clean_nozzle'].bucket_right_width = 40
printer['gcode_macro clean_nozzle'].bucket_start = 0
printer['gcode_macro clean_nozzle'].clearance_z = 5
printer['gcode_macro clean_nozzle'].enable_purge = False
printer['gcode_macro clean_nozzle'].location_bucket_rear = True
printer['gcode_macro clean_nozzle'].ooze_dwell = 2
printer['gcode_macro clean_nozzle'].prep_spd_xy = 15000
printer['gcode_macro clean_nozzle'].prep_spd_z = 3000
printer['gcode_macro clean_nozzle'].purge_len = 10
printer['gcode_macro clean_nozzle'].purge_ret = 2
printer['gcode_macro clean_nozzle'].purge_spd = 150
printer['gcode_macro clean_nozzle'].purge_temp_min = 180
printer['gcode_macro clean_nozzle'].verbose = False
printer['gcode_macro clean_nozzle'].wipe_qty = 3
printer['gcode_macro clean_nozzle'].wipe_spd_xy = 15000
printer['gcode_macro DO_BED_MESH'].bed_temp = 60
printer['gcode_macro DO_BED_MESH'].extruder_temp = 230
printer['gcode_macro ERCF_CALIB_UNLOAD'].ratio = 0.0
printer['gcode_macro ERCF_CALIB_UNLOAD'].ref = 0.0
printer['gcode_macro ERCF_CHANGE_TOOL'].retract_temp_min = 180
printer['gcode_macro ERCF_HOME'].home = 1
printer['gcode_macro ERCF_SELECT_TOOL'].color_selected = -1
printer['gcode_macro ERCF_SELECT_TOOL'].tool_selected = -1
printer['gcode_macro PRINT_END'].print_end_scrub = False
printer['gcode_macro PRINT_END'].retract_temp_min = 180
printer['gcode_macro PROBE_Z_ACCURACY'].entryexit_z = 15
printer['gcode_macro PROBE_Z_ACCURACY'].entryexit_zrate = 900
printer['gcode_macro set_startup_bedtemp'].heat_on_start = 0
printer['gcode_macro set_startup_bedtemp'].ptrstartup_bedtemp = 120
printer['gcode_move'].absolute_coordinates = True
printer['gcode_move'].absolute_extrude = False
printer['gcode_move'].extrude_factor = 1.0
printer['gcode_move'].gcode_position = Coord(x=175.0, y=350.05, z=15.9110470161, e=92.20451000000031)
printer['gcode_move'].homing_origin = Coord(x=0.0, y=0.0, z=0.0, e=0.0)
printer['gcode_move'].position = Coord(x=175.0, y=350.05, z=15.9110470161, e=300.1839399999998)
printer['gcode_move'].speed = 2400.0
printer['gcode_move'].speed_factor = 1.0
printer['heater_bed'].power = 0.513520747884
printer['heater_bed'].target = 120.0
printer['heater_bed'].temperature = 120.3
printer['heater_fan H2O_Flow_720'].rpm = 941.154728661
printer['heater_fan H2O_Flow_720'].speed = 1.0
printer['heater_fan H2O_Pump_3K'].rpm = 3023.88225531
printer['heater_fan H2O_Pump_3K'].speed = 1.0
printer['heater_fan H2O_Rad_Fan'].rpm = 0.0
printer['heater_fan H2O_Rad_Fan'].speed = 1.0
printer['heaters'].available_heaters = ['heater_bed', 'extruder']
printer['heaters'].available_sensors = ['temperature_sensor Hotend_H2O', 'temperature_sensor Host', 'heater_bed', 'temperature_fan MCU_Fan', 'temperature_fan PS_Fan', 'temperature_fan Chamber', 'temperature_fan Exhaust', 'extruder']
printer['idle_timeout'].printing_time = 0.0
printer['idle_timeout'].state = Ready
printer['mcu'].last_stats = {'retransmit_seq': 2, 'receive_seq': 77984, 'send_seq': 77984, 'bytes_invalid': 0, 'rto': 0.025, 'ready_bytes': 0, 'srtt': 0.0, 'stalled_bytes': 0, 'bytes_write': 1713071, 'mcu_awake': 0.005, 'mcu_task_avg': 8e-06, 'rttvar': 0.0, 'mcu_task_stddev': 1.5e-05, 'freq': 180004182, 'bytes_retransmit': 9, 'bytes_read': 2379332}
printer['mcu'].mcu_build_versions = gcc: (15:9-2019-q4-0ubuntu1) 9.2.1 20191025 (release) [ARM/arm-9-branch revision 277599] binutils: (2.34-4ubuntu1+13ubuntu1) 2.34
printer['mcu'].mcu_constants = {u'BUS_PINS_i2c1': u'PB6,PB7', u'BUS_PINS_i2c2': u'PB10,PB11', u'BUS_PINS_spi3a': u'PC11,PC12,PC10', u'PWM_MAX': 255, u'BUS_PINS_spi2a': u'PC2,PC3,PB10', u'BUS_PINS_i2c1a': u'PB8,PB9', u'RESERVE_PINS_crystal': u'PH0,PH1', u'STEPPER_BOTH_EDGE': 1, u'ADC_MAX': 4095, u'BUS_PINS_spi4': u'PE13,PE14,PE12', u'RESERVE_PINS_USB': u'PA11,PA12', u'CLOCK_FREQ': 180000000, u'BUS_PINS_spi1': u'PA6,PA7,PA5', u'BUS_PINS_spi3': u'PB4,PB5,PB3', u'MCU': u'stm32f446xx', u'BUS_PINS_spi2': u'PB14,PB15,PB13', u'BUS_PINS_spi1a': u'PB4,PB5,PB3', u'STATS_SUMSQ_BASE': 256}
printer['mcu'].mcu_version = v0.10.0-184-gdd714fc7
printer['mcu ercf'].last_stats = {'retransmit_seq': 0, 'receive_seq': 21207, 'send_seq': 21207, 'bytes_invalid': 0, 'rto': 0.025, 'ready_bytes': 0, 'srtt': 0.0, 'stalled_bytes': 0, 'bytes_write': 251840, 'mcu_awake': 0.049, 'mcu_task_avg': 2.9e-05, 'rttvar': 0.0, 'mcu_task_stddev': 2.3e-05, 'freq': 47999831, 'bytes_retransmit': 0, 'adj': 47998715, 'bytes_read': 7617752}
printer['mcu ercf'].mcu_build_versions = gcc: (15:9-2019-q4-0ubuntu1) 9.2.1 20191025 (release) [ARM/arm-9-branch revision 277599] binutils: (2.34-4ubuntu1+13ubuntu1) 2.34
printer['mcu ercf'].mcu_constants = {u'STEPPER_BOTH_EDGE': 1, u'ADC_MAX': 4095, u'PWM_MAX': 255, u'CLOCK_FREQ': 48000000, u'RESERVE_PINS_USB': u'PA24,PA25', u'MCU': u'samd21g18a', u'STATS_SUMSQ_BASE': 256}
printer['mcu ercf'].mcu_version = v0.10.0-235-gf97fd7c6-dirty-20220126_035429-thow3d
printer['mcu pico'].last_stats = {'retransmit_seq': 2, 'receive_seq': 1016764, 'send_seq': 1016764, 'bytes_invalid': 0, 'rto': 0.025, 'ready_bytes': 0, 'srtt': 0.001, 'stalled_bytes': 0, 'bytes_write': 50452198, 'mcu_awake': 0.144, 'mcu_task_avg': 7e-05, 'rttvar': 0.0, 'mcu_task_stddev': 5.1e-05, 'freq': 12000000, 'bytes_retransmit': 9, 'adj': 11999723, 'bytes_read': 5527815}
printer['mcu pico'].mcu_build_versions = gcc: (15:9-2019-q4-0ubuntu1) 9.2.1 20191025 (release) [ARM/arm-9-branch revision 277599] binutils: (2.34-4ubuntu1+13ubuntu1) 2.34
printer['mcu pico'].mcu_constants = {u'BUS_PINS_spi0a': u'gpio0,gpio3,gpio2', u'BUS_PINS_spi0b': u'gpio4,gpio7,gpio6', u'BUS_PINS_spi0c': u'gpio16,gpio19,gpio18', u'BUS_PINS_spi0d': u'gpio20,gpio23,gpio22', u'INITIAL_PINS': u'gpio2,!gpio3,!gpio12,gpio13', u'STEPPER_BOTH_EDGE': 1, u'ADC_MAX': 4095, u'PWM_MAX': 255, u'CLOCK_FREQ': 12000000, u'MCU': u'rp2040', u'BUS_PINS_spi1c': u'gpio24,gpio27,gpio26', u'BUS_PINS_spi1b': u'gpio12,gpio15,gpio14', u'BUS_PINS_spi1a': u'gpio8,gpio11,gpio10', u'STATS_SUMSQ_BASE': 256}
printer['mcu pico'].mcu_version = v0.10.0-184-gdd714fc7
printer['menu'].cols = 16
printer['menu'].rows = 4
printer['menu'].running = False
printer['menu'].timeout = 0
printer['motion_report'].live_extruder_velocity = 0.0
printer['motion_report'].live_position = Coord(x=175.0, y=350.05, z=15.9810470161, e=300.1839399999998)
printer['motion_report'].live_velocity = 0.0
printer['motion_report'].steppers = ['extruder', 'manual_stepper gear_stepper', 'manual_stepper selector_stepper', 'stepper_x', 'stepper_y', 'stepper_z', 'stepper_z1', 'stepper_z2', 'stepper_z3']
printer['motion_report'].trapq = ['extruder', 'toolhead']
printer['neopixel dash_lights'].color_data = [(0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0)]
printer['neopixel ercf_lights'].color_data = [(0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0)]
printer['neopixel lcd_lights'].color_data = [(0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0)]
printer['output_pin _Alarm_pin'].value = 0.0
printer['output_pin _BEEPER_pin'].value = 0.0
printer['output_pin _host_connect_led'].value = 1.0
printer['output_pin _hourmeter'].value = 0.0
printer['output_pin _sw_blu_led'].value = 0.0
printer['output_pin _sw_grn_led'].value = 1.0
printer['output_pin _sw_red_led'].value = 0.0
printer['pause_resume'].is_paused = False
printer['print_stats'].filament_used = 300.18394
printer['print_stats'].filename = Squished_Voron_Design_Cube_v7.gcode
printer['print_stats'].message =
printer['print_stats'].print_duration = 265.939747611
printer['print_stats'].state = complete
printer['print_stats'].total_duration = 464.298381762
printer['probe'].last_query = 1
printer['probe'].last_z_result = 0.0
printer['quad_gantry_level'].applied = True
printer['query_endstops'].last_query = {}
printer['save_variables'].variables = {'ercf_selector_homed': 1, 'ercf_calib_11': 1.01550066403, 'ercf_calib_10': 1.01550066403, 'final_maxz': 0.95, 'ledeff_err_flag': 0, 'total_toolchanges': 0, 'last_spd_fact': 1.0, 'height': 0.3, 'last_chamber_lights_effect': 'normal', 'scrub_err_flag': 0, 'z_axis_cal': 0, 'module_led_effect_loaded': 1, 'ercf_he_temp_restore_val': 0, 'maxz': 0.0, 'last_dash_lights_effect': 'off', 'last_layer_chg_msg': 'L:3/3|53335 | 46.12%: X:186.707 Y:64.396 Z:1.012', 'pause_ercf_error': 0, 'width': 0.6, 'ercf_swaps': 0, 'ercf_calib_3': 1.01550066403, 'ercf_calib_2': 1.00495632806, 'ercf_calib_1': 0.999368802804, 'ercf_calib_0': 1.0, 'ercf_calib_7': 1.01550066403, 'ercf_calib_6': 1.01550066403, 'ercf_calib_5': 1.01550066403, 'ercf_calib_4': 1.01550066403, 'ercf_calib_9': 1.01550066403, 'last_ptr_state': 'print_ended', 'type': 'custom', 'debug_err_flag': 0, 'v2_2526_slicer_check': 'NULL', 'module_klicky_loaded': 1, 'last_restored_gcode_state': 'STATE_PRINT_END', 'ercf_err_flag': 0, 'klicky_err_flag': 0, 'linadv_err_flag': 0, 'extruder_temp_setting': 240, 'module_ledeff_loaded': 1, 'module_debug_loaded': 1, 'last_ercf_lights_effect': 'off', 'module_linadv_loaded': 1, 'last_saved_gcode_state': 'NULL', 'ercf_swaps_last_canx_print': 0, 'gcodeproc_err_flag': 0, 'last_lcd_lights_effect': 'normal', 'ercf_calib_8': 1.01550066403, 'module_gcodeproc_loaded': 1, 'ercf_calib_ref': 1000.671335, 'ercf_swaps_last_complete_print': 1, 'module_scrub_loaded': 1, 'has_wipe_tower': -1, 'heater_bed_temp_setting': 120, 'proc_depth': 0, 'module_ercf_loaded': 1, 'z': 0.3}
printer['servo ercf_servo'].value = 0.0
printer['system_stats'].cputime = 2993.413223
printer['system_stats'].memavail = 14495648
printer['system_stats'].sysload = 1.34
printer['temperature_fan Chamber'].rpm = None
printer['temperature_fan Chamber'].speed = 1.0
printer['temperature_fan Chamber'].target = 35.0
printer['temperature_fan Chamber'].temperature = 56.41
printer['temperature_fan Exhaust'].rpm = None
printer['temperature_fan Exhaust'].speed = 0.0
printer['temperature_fan Exhaust'].target = 60.0
printer['temperature_fan Exhaust'].temperature = 49.94
printer['temperature_fan MCU_Fan'].rpm = None
printer['temperature_fan MCU_Fan'].speed = 1.0
printer['temperature_fan MCU_Fan'].target = 35.0
printer['temperature_fan MCU_Fan'].temperature = 37.79
printer['temperature_fan PS_Fan'].rpm = None
printer['temperature_fan PS_Fan'].speed = 0.0
printer['temperature_fan PS_Fan'].target = 35.0
printer['temperature_fan PS_Fan'].temperature = 33.72
printer['temperature_host Host'].temperature = 48.0
printer['temperature_sensor Host'].measured_max_temp = 52.0
printer['temperature_sensor Host'].measured_min_temp = 47.0
printer['temperature_sensor Host'].temperature = 48.0
printer['temperature_sensor Hotend_H2O'].measured_max_temp = 34.98
printer['temperature_sensor Hotend_H2O'].measured_min_temp = 28.9
printer['temperature_sensor Hotend_H2O'].temperature = 32.02
printer['tmc2209 extruder'].drv_status = {'cs_actual': 1L, 'stst': 1L}
printer['tmc2209 extruder'].hold_current = 0.0611919329873
printer['tmc2209 extruder'].mcu_phase_offset = 63
printer['tmc2209 extruder'].phase_offset_position = -5126.52389937
printer['tmc2209 extruder'].run_current = 0.856687061822
printer['tmc2209 manual_stepper gear_stepper'].drv_status = {'cs_actual': 2L, 'stst': 1L}
printer['tmc2209 manual_stepper gear_stepper'].hold_current = 0.0917878994809
printer['tmc2209 manual_stepper gear_stepper'].mcu_phase_offset = 63
printer['tmc2209 manual_stepper gear_stepper'].phase_offset_position = -666.654362198
printer['tmc2209 manual_stepper gear_stepper'].run_current = 0.795495128835
printer['tmc2209 manual_stepper selector_stepper'].drv_status = {'cs_actual': 2L, 'stst': 1L}
printer['tmc2209 manual_stepper selector_stepper'].hold_current = 0.0917878994809
printer['tmc2209 manual_stepper selector_stepper'].mcu_phase_offset = 63
printer['tmc2209 manual_stepper selector_stepper'].phase_offset_position = 93.0125
printer['tmc2209 manual_stepper selector_stepper'].run_current = 0.611919329873
printer['tmc2209 stepper_x'].drv_status = {'cs_actual': 25L, 'stst': 1L}
printer['tmc2209 stepper_x'].hold_current = 1.41421356237
printer['tmc2209 stepper_x'].mcu_phase_offset = 61
printer['tmc2209 stepper_x'].phase_offset_position = 180.6125
printer['tmc2209 stepper_x'].run_current = 1.41421356237
printer['tmc2209 stepper_y'].drv_status = {'cs_actual': 25L, 'stst': 1L}
printer['tmc2209 stepper_y'].hold_current = 1.41421356237
printer['tmc2209 stepper_y'].mcu_phase_offset = 61
printer['tmc2209 stepper_y'].phase_offset_position = 169.9625
printer['tmc2209 stepper_y'].run_current = 1.41421356237
printer['tmc2209 stepper_z'].drv_status = {'stealth': 1L, 'stst': 1L, 'cs_actual': 14L}
printer['tmc2209 stepper_z'].hold_current = 0.815892439831
printer['tmc2209 stepper_z'].mcu_phase_offset = 61
printer['tmc2209 stepper_z'].phase_offset_position = 38.7875
printer['tmc2209 stepper_z'].run_current = 1.19664224508
printer['tmc2209 stepper_z1'].drv_status = {'stealth': 1L, 'stst': 1L, 'cs_actual': 14L}
printer['tmc2209 stepper_z1'].hold_current = 0.815892439831
printer['tmc2209 stepper_z1'].mcu_phase_offset = 3
printer['tmc2209 stepper_z1'].phase_offset_position = 34.645
printer['tmc2209 stepper_z1'].run_current = 1.19664224508
printer['tmc2209 stepper_z2'].drv_status = {'stealth': 1L, 'stst': 1L, 'cs_actual': 14L}
printer['tmc2209 stepper_z2'].hold_current = 0.815892439831
printer['tmc2209 stepper_z2'].mcu_phase_offset = 63
printer['tmc2209 stepper_z2'].phase_offset_position = 33.03
printer['tmc2209 stepper_z2'].run_current = 1.19664224508
printer['tmc2209 stepper_z3'].drv_status = {'stealth': 1L, 'stst': 1L, 'cs_actual': 14L}
printer['tmc2209 stepper_z3'].hold_current = 0.815892439831
printer['tmc2209 stepper_z3'].mcu_phase_offset = 1
printer['tmc2209 stepper_z3'].phase_offset_position = 35.24
printer['tmc2209 stepper_z3'].run_current = 1.19664224508
printer['toolhead'].axis_maximum = Coord(x=350.05, y=350.05, z=300.0, e=0.0)
printer['toolhead'].axis_minimum = Coord(x=0.0, y=0.0, z=-5.0, e=0.0)
printer['toolhead'].estimated_print_time = 13390.8821041
printer['toolhead'].extruder = extruder
printer['toolhead'].homed_axes = xyz
printer['toolhead'].max_accel = 4000.0
printer['toolhead'].max_accel_to_decel = 3000.0
printer['toolhead'].max_velocity = 400.0
printer['toolhead'].position = Coord(x=175.0, y=350.05, z=15.9810470161, e=300.1839399999998)
printer['toolhead'].print_time = 10361.1747781
printer['toolhead'].square_corner_velocity = 20.0
printer['toolhead'].stalls = 0
printer['virtual_sdcard'].file_path = None
printer['virtual_sdcard'].file_position = 115636
printer['virtual_sdcard'].file_size = 115636
printer['virtual_sdcard'].is_active = False
printer['virtual_sdcard'].progress = 1.0
printer['webhooks'].state = ready
printer['webhooks'].state_message = Printer is ready
printer['z_calibration'].last_query = False
printer['z_calibration'].last_z_offset = 0.0

-------------------------------------------------------
---  Prusa Slicer Gcode Placeholders
-------------------------------------------------------

GCODE LISTING PLACEHOLDERS 
before_layer_gcode
between_objects_gcode
color_change_gcode
end_filament_gcode
end_gcode
layer_gcode
pause_print_gcode
start_filament_gcode
start_gcode
tcr_rotated_gcode
template_custom_gcode
toolchange_gcode

PLACEHOLDERS AVAILABLE IN ALL CUSTOM G-CODES
current_extruder
current_object_idx
day
filament_preset
first_layer_print_convex_hull
first_layer_print_max
first_layer_print_min
first_layer_print_size
has_single_extruder_multi_material_priming
has_wipe_tower
hour
initial_extruder
initial_tool
input_filename
input_filename_base
layer_height
minute
month
num_instances
num_objects
physical_printer_preset
print_bed_max
print_bed_min
print_bed_size
print_preset
printer_preset
scale
second
timestamp
total_layer_count
total_toolchanges
year

TOOLCHANGE GCODE PLACEHOLDERS
next_extruder
previous_extruder
toolchange_z
max_layer_z
layer_num
layer_z

BEFORE LAYER GCODE PLACEHOLDERS
max_layer_z
layer_num
layer_z

AFTER LAYER GCODE PLACEHOLDERS
max_layer_z
layer_num
layer_z

FILAMENT START GCODE PLACEHOLDERS
max_layer_z
layer_num
layer_z
filament_extruder_id

FILAMENT END GCODE PLACEHOLDERS
max_layer_z
layer_num
layer_z
filament_extruder_id

END GCODE PLACEHOLDERS
max_layer_z
layer_num
layer_z

OUTPUT FILENAME FORMAT FDM PLACEHOLDERS
day
extruded_volume
filament_preset
hour
initial_extruder
initial_filament_type
initial_tool
input_filename
input_filename_base
minute
month
normal_print_time
num_extruders
num_instances
num_objectsnum_printing_extruders
physical_printer_preset
print_preset
print_time
printer_preset
printing_filament_types
scale
second
silent_print_time
timestamp
total_cost
total_toolchanges
total_weight
total_wipe_tower_cost
total_wipe_tower_filament
used_filament
version
year

OUTPUT FILENAME FORMAT SLA PLACEHOLDERS
day
hour
input_filename
input_filename_base
minute
month
num_instances
num_objects
objects_used_material
print_time
scale
second
support_used_material
timestamp
total_cost
total_weight
version
year

-------------------------------------------------------
---  Search_Vars Output
-------------------------------------------------------

printer.webhooks
printer.webhooks.state : ready
printer.webhooks.state_message : Printer is ready
printer.configfile
printer.configfile.warnings : []
printer.configfile.config['gcode_macro ERCF_SERVO_UP'].gcode : 
_ERCF_SERVO_UP {rawparams}
printer.configfile.config['gcode_macro ERCF_SERVO_UP'].description : for macro purposes
printer.configfile.config['gcode_macro HOST_REBOOT'].gcode : 
{action_call_remote_method("reboot_machine")}
printer.configfile.config['gcode_macro _proc_start'].gcode : 
{% set svv = printer.save_variables.variables %}
_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE={svv.proc_depth + 1|int}
{% set this1 = namespace(depth_indent = "`") %}
{% for iter in range(svv.proc_depth|int) %}
{% set this1.depth_indent = this1.depth_indent + "`" %}
{% endfor %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %}
{% set new_params = rawparams|replace("function=", "") %}
{% set new_params = new_params|replace("func_params=", "") %}
{% set new_params = new_params|replace("'", "") %}
{% set new_params = new_params|replace("\"", "") %}
M118 {this1.depth_indent ~ " " ~ new_params|upper}
{% endif %}
printer.configfile.config['gcode_macro _proc_start'].description : for trace debug purposes - presents depth as leading back-tics
printer.configfile.config.stepper_z.homing_retract_dist : 2.0
printer.configfile.config.stepper_z.position_endstop : 0.705
printer.configfile.config.stepper_z.endstop_pin : PG10
printer.configfile.config.stepper_z.rotation_distance : 40
printer.configfile.config.stepper_z.gear_ratio : 80:16
printer.configfile.config.stepper_z.second_homing_speed : 10
printer.configfile.config.stepper_z.step_pin : PF11
printer.configfile.config.stepper_z.position_min : -5
printer.configfile.config.stepper_z.microsteps : 16
printer.configfile.config.stepper_z.homing_speed : 15
printer.configfile.config.stepper_z.dir_pin : PG3
printer.configfile.config.stepper_z.position_max : 300
printer.configfile.config.stepper_z.homing_retract_speed : 25
printer.configfile.config.stepper_z.enable_pin : !PG5
printer.configfile.config.stepper_y.homing_positive_dir : true
printer.configfile.config.stepper_y.homing_retract_dist : 5
printer.configfile.config.stepper_y.position_endstop : 350
printer.configfile.config.stepper_y.full_steps_per_rotation : 400
printer.configfile.config.stepper_y.endstop_pin : PG9
printer.configfile.config.stepper_y.rotation_distance : 40
printer.configfile.config.stepper_y.step_pin : PG0
printer.configfile.config.stepper_y.position_min : 0
printer.configfile.config.stepper_y.microsteps : 16
printer.configfile.config.stepper_y.homing_speed : 100
printer.configfile.config.stepper_y.dir_pin : PG1
printer.configfile.config.stepper_y.position_max : 350.05
printer.configfile.config.stepper_y.enable_pin : !PF15
printer.configfile.config.stepper_x.homing_positive_dir : true
printer.configfile.config.stepper_x.homing_retract_dist : 5
printer.configfile.config.stepper_x.position_endstop : 350
printer.configfile.config.stepper_x.full_steps_per_rotation : 400
printer.configfile.config.stepper_x.endstop_pin : PG6
printer.configfile.config.stepper_x.rotation_distance : 40
printer.configfile.config.stepper_x.step_pin : PF13
printer.configfile.config.stepper_x.position_min : 0
printer.configfile.config.stepper_x.microsteps : 16
printer.configfile.config.stepper_x.homing_speed : 100
printer.configfile.config.stepper_x.dir_pin : PF12
printer.configfile.config.stepper_x.position_max : 350.05
printer.configfile.config.stepper_x.enable_pin : !PF14
printer.configfile.config.input_shaper.shaper_freq_x : 62.2
printer.configfile.config.input_shaper.shaper_freq_y : 34.4
printer.configfile.config.input_shaper.shaper_type_x : 2hump_ei
printer.configfile.config.input_shaper.shaper_type_y : mzv
printer.configfile.config['gcode_macro ercf_move_cart'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ercf_move_cart func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ercf_move_cart start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > ercf_move_cart Skipped - an error condition is asserted < {% endif %}
{% else %}
_ercf_park_n_home
{% set selector_axis_pos = printer["gcode_macro _ERCF_VAR"].colorselector[params.C|default(0)|int]|float %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 >>> ERCF_CART:{params.C|default(0)|int} -> {selector_axis_pos} <<< {% endif %}
MANUAL_STEPPER STEPPER=selector_stepper MOVE={selector_axis_pos} SPEED=100
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ercf_move_cart End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ercf_move_cart {% endif %}
printer.configfile.config['gcode_macro ercf_move_cart'].description : move ercf cart to param C
printer.configfile.config['gcode_macro ERCF_MOVE_SELECTOR'].rename_existing : _ERCF_MOVE_SELECTOR_STOCK
printer.configfile.config['gcode_macro ERCF_MOVE_SELECTOR'].description : wrapper for ERCF.py fw proc to handle error conditions, verbosity
printer.configfile.config['gcode_macro ERCF_MOVE_SELECTOR'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_MOVE_SELECTOR func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_MOVE_SELECTOR Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > ERCF_MOVE_SELECTOR Skipped - an error condition is asserted < {% endif %}
{% else %}
_ERCF_MOVE_SELECTOR_STOCK {rawparams}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_MOVE_SELECTOR End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_MOVE_SELECTOR {% endif %}
printer.configfile.config['gcode_macro print_start_purge'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=print_start_purge func_params='"{rawparams|string}"'  {% endif %}
{% if params.TOWER|default(0)|int %} _print_purge {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=print_start_purge {% endif %}
printer.configfile.config['gcode_macro print_start_purge'].description : purge at start of print, if param.TOWER
printer.configfile.config['gcode_macro G1'].rename_existing : G1.1
printer.configfile.config['gcode_macro G1'].description : G1, with console echo if enabled
printer.configfile.config['gcode_macro G1'].gcode : 
{% if printer["gcode_macro _debug_vars"].gmove_debug %} M118 G1 {rawparams|upper} {% endif %}
G1.1 {rawparams}
printer.configfile.config['gcode_macro G4'].rename_existing : G4.1
printer.configfile.config['gcode_macro G4'].description : G4, with console echo if enabled
printer.configfile.config['gcode_macro G4'].gcode : 
{% if printer["gcode_macro _debug_vars"].gmove_debug %} M118 G4 {rawparams|upper} {% endif %}
G4.1 {rawparams}
printer.configfile.config['gcode_macro DO_BED_MESH'].variable_bed_temp : 60
printer.configfile.config['gcode_macro DO_BED_MESH'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=DO_BED_MESH func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> DO_BED_MESH <<< {% endif %}
M117 Heating...
M140 S{bed_temp}
M104 S{extruder_temp}
M190 S{bed_temp}
M109 S{extruder_temp}
_PrintLED_On
M300
_ENSURE_QGL
BED_MESH_CALIBRATE
G28
M300
M300
_PrintLED_Off
SAVE_CONFIG
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=DO_BED_MESH {% endif %}
printer.configfile.config['gcode_macro DO_BED_MESH'].variable_extruder_temp : 230
printer.configfile.config['gcode_macro DO_BED_MESH'].description : Heat bed and then perform a bed mesh sequence
printer.configfile.config['gcode_macro ERCF_EJECT'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_EJECT func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_EJECT Start ... {% endif %}
{% set ercf_params = printer.save_variables.variables %}
{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
_ercf_set_eject_temp
{% endif %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
{% if printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int != -1 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Unloading tool {printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int} ... {% endif %}
{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
{% set unload_ratio = ercf_params['ercf_calib_%s' % (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|string)] %}
ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING RATIO={unload_ratio}
ERCF_UNLOAD LENGTH={ercf_params.ercf_calib_ref|float - printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + printer["gcode_macro _ERCF_VAR"].unload_modifier|float - printer["gcode_macro _ERCF_VAR"].ercf_dual_unload_mod|float }
_ERCF_UNSELECT_TOOL
{% else %}
ERCF_EJECT_UNKNOW_STATE
{% endif %}
{% else %}
ERCF_EJECT_UNKNOW_STATE
{% endif %}
{% else %}
_alert_ercf_is_paused
{% endif %}
_ercf_restore_he_temp
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_EJECT End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_EJECT {% endif %}
printer.configfile.config['gcode_macro ERCF_EJECT'].description : Retract from nozzle, form tip, eject, parking filament in cart
printer.configfile.config.fan.pin : PA8
printer.configfile.config.fan.off_below : 0.1
printer.configfile.config.fan.shutdown_speed : 0
printer.configfile.config.fan.max_power : 1.0
printer.configfile.config.fan.kick_start_time : 0.1
printer.configfile.config.fan.hardware_pwm : False
printer.configfile.config.gcode_arcs.resolution : 1.0
printer.configfile.config['gcode_macro _alert_ercf_is_paused'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_alert_ercf_is_paused func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _alert_ercf_is_paused Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 ERCF is paused, run "ERCF_UNLOCK" to unlock it ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _alert_ercf_is_paused End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_alert_ercf_is_paused {% endif %}
printer.configfile.config['gcode_macro _alert_ercf_is_paused'].description : alerts user that ERCF is Paused and needs to be Unlocked
printer.configfile.config.stepper_z3.rotation_distance : 40
printer.configfile.config.stepper_z3.gear_ratio : 80:16
printer.configfile.config.stepper_z3.step_pin : PC13
printer.configfile.config.stepper_z3.microsteps : 16
printer.configfile.config.stepper_z3.dir_pin : !PF0
printer.configfile.config.stepper_z3.enable_pin : !PF1
printer.configfile.config['gcode_macro ERCFLts_Red'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCFLts_Red {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=ercf_lights RED=0.5 GREEN=0 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCFLts_Red {% endif %}
printer.configfile.config['gcode_shell_command power_off_printer'].command : curl "http://10.0.0.25/cm?cmnd=Backlog%3BDelay%200%3BPower%20OFF"
printer.configfile.config['gcode_shell_command power_off_printer'].verbose : false
printer.configfile.config['gcode_shell_command power_off_printer'].timeout : 2
printer.configfile.config['delayed_gcode welcome_msg'].gcode : 
M117 Welcome!
UPDATE_DELAYED_GCODE ID=clear_display DURATION=10
printer.configfile.config['gcode_macro ERCF_SELECT_TOOL_dbg'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_SELECT_TOOL_dbg func_params='"{rawparams|string}"'  {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > ERCF_SELECT_TOOL {rawparams} Skipped - an error condition is asserted < {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 > ERCF_SELECT_TOOL TOOL={params.TOOL|int} < {% endif %}
ERCF_SELECT_TOOL {rawparams}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_SELECT_TOOL_dbg {% endif %}
printer.configfile.config['gcode_macro ERCF_SELECT_TOOL_dbg'].description : wrapper around ercf lib proc for error check so seq test procs can not run on blindly if an error exists.
printer.configfile.config['gcode_macro IdleLED_Off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=IdleLED_Off func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> IdleLED_Off <<< {% endif %}
_IdleLED_Off
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=IdleLED_Off {% endif %}
printer.configfile.config['gcode_shell_command wcv2_irled_on'].command : curl -d value=1 http://10.0.0.61:8081/api/ir_led
printer.configfile.config['gcode_shell_command wcv2_irled_on'].verbose : false
printer.configfile.config['gcode_shell_command wcv2_irled_on'].timeout : 2
printer.configfile.config['gcode_macro sng_simpons'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_simpons {% endif %}
M117 The Simpons
M3001 S0 P46
M3001 S1046 P562
M3001 S1317 P375
M3001 S1480 P375
M3001 S1760 P187
M3001 S1566 P562
M3001 S1319 P375
M3001 S1046 P375
M3001 S880 P187
M3001 S740 P187
M3001 S740 P187
M3001 S740 P187
M3001 S784 P750
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_simpons {% endif %}
printer.configfile.config['gcode_shell_command hello_world'].command : echo hello world
printer.configfile.config['gcode_shell_command hello_world'].verbose : True
printer.configfile.config['gcode_shell_command hello_world'].timeout : 2
printer.configfile.config['gcode_macro ERCF_UNLOAD_TOOL'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_UNLOAD_TOOL func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_UNLOAD_TOOL Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
_ercf_set_eject_temp
{% endif %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
{% if printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int != -1 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF_UNLOAD_TOOL {printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int} ... {% endif %}
{% set ercf_params = printer.save_variables.variables %}
ERCF_HOME_EXTRUDER
; ERCF_SELECT_TOOL TOOL={printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int}
ERCF_SELECT_TOOL_dbg TOOL={printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int}
ERCF_SET_STEPS RATIO={ercf_params['ercf_calib_%s' % (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|string)]}
_ercf_syncd_th_load_unload RETRACT=1 MODIFIER={printer["gcode_macro _ERCF_VAR"].ercf_dual_unload_mod|float}
ERCF_UNLOAD LENGTH={ercf_params.ercf_calib_ref|float - printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + printer["gcode_macro _ERCF_VAR"].unload_modifier|float - (printer["gcode_macro _ERCF_VAR"].ercf_dual_unload_mod|float)}
_ERCF_UNSELECT_TOOL
{% endif %}
{% else %}
_alert_ercf_is_paused
{% endif %}
_ercf_restore_he_temp
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_UNLOAD_TOOL End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_UNLOAD_TOOL {% endif %}
printer.configfile.config['gcode_macro ERCF_UNLOAD_TOOL'].description : Eject the filament DURING A PRINT and park it into the ERCF
printer.configfile.config['tmc2209 manual_stepper gear_stepper'].sense_resistor : 0.110
printer.configfile.config['tmc2209 manual_stepper gear_stepper'].uart_address : 0
printer.configfile.config['tmc2209 manual_stepper gear_stepper'].interpolate : True
printer.configfile.config['tmc2209 manual_stepper gear_stepper'].uart_pin : ercf:PA8
printer.configfile.config['tmc2209 manual_stepper gear_stepper'].run_current : 0.8
printer.configfile.config['tmc2209 manual_stepper gear_stepper'].stealthchop_threshold : 0
printer.configfile.config['tmc2209 manual_stepper gear_stepper'].hold_current : 0.1
printer.configfile.config['gcode_macro QUAD_GANTRY_LEVEL'].rename_existing : _QUAD_GANTRY_LEVEL_STOCK
printer.configfile.config['gcode_macro QUAD_GANTRY_LEVEL'].description : Conform a moving, twistable gantry to the shape of a stationary bed with klicky automount - rehomez z thereafter
printer.configfile.config['gcode_macro QUAD_GANTRY_LEVEL'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=QUAD_GANTRY_LEVEL func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"qgling"'
{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> QGL'g <<< {% endif %}
{% set V = printer["gcode_macro _User_Variables"].verbose %}
{% if V %}
M118 QG Level
{% endif %}
_ENSURE_HOMED
_CheckProbe action=query
Attach_Probe
{% if printer["gcode_macro _klicky_vars"].klicky_verb_info %} M118 >>> ____ QUAD_GANTRY_LEVEL_STOCK {rawparams} <<< {% endif %}
_QUAD_GANTRY_LEVEL_STOCK {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
G28 Z
Dock_Probe
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"qgled"'
{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> QGL'd <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=QUAD_GANTRY_LEVEL {% endif %}
printer.configfile.config['gcode_macro CALIBRATE_Z'].rename_existing : _CALIBRATE_Z_STOCK
Write g-code response
Traceback (most recent call last):
  File "/home/pi/klipper/klippy/gcode.py", line 446, in _respond_raw
    os.write(self.fd, (msg+"\n").encode())
OSError: [Errno 11] Resource temporarily unavailable
printer.configfile.config['gcode_macro CALIBRATE_Z'].variable_entryexit_z : 15
printer.configfile.config['gcode_macro CALIBRATE_Z'].variable_entryexit_zfeedrate : 900
printer.configfile.config['gcode_macro CALIBRATE_Z'].description : Automatically calibrates the nozzles offset to the print surface and, possibly/optionally dock/undock Klicky
printer.configfile.config['gcode_macro CALIBRATE_Z'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=CALIBRATE_Z func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"z_calibrating"'
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 z_calibrating {% endif %}
{% set force = params.FORCE|default(0)|int %}
{% if printer.save_variables.variables.z_axis_cal and force == 0 %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 Z-AutoCalibration already completed, skipping... {% endif %}
{% else %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 Z-Cal'g {% endif %}
_ENSURE_QGL
M117 Z-Calibration
G0 Z{entryexit_z} F{entryexit_zfeedrate}
_CALIBRATE_Z_STOCK
G0 Z{entryexit_z} F{entryexit_zfeedrate}
M117
SAVE_VARIABLE VARIABLE=z_axis_cal VALUE=1
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"z_calibrated"'
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 z_calibrated {% endif %}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=CALIBRATE_Z {% endif %}
printer.configfile.config['gcode_macro ERCF_CHECK_IF_RESUME'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CHECK_IF_RESUME func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CHECK_IF_RESUME Start ... {% endif %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
RESUME
{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
{% endif %}
{% else %}
_alert_ercf_is_paused
save_variable VARIABLE=ercf_err_flag VALUE=1
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CHECK_IF_RESUME End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CHECK_IF_RESUME {% endif %}
printer.configfile.config['gcode_macro ERCF_CHECK_IF_RESUME'].description : Safety checks before resuming the print after an encoder event
printer.configfile.config['gcode_macro PwrLED_On'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PwrLED_On func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> PwrLED_On <<< {% endif %}
_PwrLED_On
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PwrLED_On {% endif %}
printer.configfile.config['gcode_macro _PrintLED_On'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_PrintLED_On func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _PrintLED_On <<< {% endif %}
SET_PIN PIN=_sw_red_led VALUE=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_PrintLED_On {% endif %}
printer.configfile.config['gcode_macro _PrintLED_On'].description : Illuminate the Halo Sw Red LED
printer.configfile.config['gcode_macro Attach_Probe'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=Attach_Probe func_params='"{rawparams|string}"'  {% endif %}
{% set goback  = params.BACK|default(0) %}
{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed * 60 %}
{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed * 60 %}
{% set xydock_feedrate = printer["gcode_macro _User_Variables"].xydock_speed * 60 %}
{% set zdock_feedrate = printer["gcode_macro _User_Variables"].zdock_speed * 60 %}
{% set xyrelease_feedrate = printer["gcode_macro _User_Variables"].xyrelease_speed * 60 %}
{% set zrelease_feedrate = printer["gcode_macro _User_Variables"].zrelease_speed * 60 %}
{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
_entry_point function=Attach_Probe
{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
{% endif %}
{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
{% endif %}
{% if not 'xy' in printer.toolhead.homed_axes %}
{ action_raise_error("Must Home X and Y Axis First!") }
{% elif not probe_attached and not probe_lock %}
{% if verbose %} M118 Attaching Probe {% endif %}
{% if not 'z' in printer.toolhead.homed_axes %}
{% if verbose %} M118 Resetting Z position to zero {% endif %}
SET_KINEMATIC_POSITION Z=0
{% if not enable_z_hop %}
{% set safe_z = 0 %}
{% endif %}
{% endif %}
{% if printer.toolhead.position.z < safe_z %}
{% if verbose %} M118 moving to a safe Z height {% endif %}
G0 Z{safe_z} F{z_drop_feedrate}
{% endif %}
{% if not 'z' in printer.toolhead.homed_axes %}
{% if verbose %} M118 Resetting Z position to zero {% endif %}
SET_KINEMATIC_POSITION Z=0
{% endif %}
{% if printer.toolhead.position.z < safe_z %}
G0 Z{safe_z} F{z_drop_feedrate}
{% endif %}
_Umbilical_Path
_entry_point function=Attach_Probe_intern
G0 X{docklocation_x|float - attachmove_x|float} Y{docklocation_y|float - attachmove_y|float} F{xytravel_feedrate}
{% if docklocation_z != -128 %}
G0 Z{docklocation_z|float - attachmove_z|float} F{zdock_feedrate}
{% endif %}
{% if docklocation_z != -128 %}
G0 Z{docklocation_z} F{zdock_feedrate}
{% endif %}
G0 X{docklocation_x} Y{docklocation_y} F{xydock_feedrate}
{% if docklocation_z != -128 %}
G0 Z{docklocation_z|float - attachmove_z|float} F{z_drop_feedrate}
{% endif %}
G0 X{docklocation_x|float - attachmove_x|float} Y{docklocation_y|float - attachmove_y|float} F{xyrelease_feedrate}
{% if printer.toolhead.position.z < safe_z %}
G0 Z{safe_z} F{z_drop_feedrate}
{% endif %}
_Park_Toolhead
_CheckProbe action=attach
_exit_point function=Attach_Probe_intern move={goback}
{% elif probe_lock %}
{% if verbose %} M118 Probe locked! {% endif %}
_CheckProbe action=query
{% else %}
{% if verbose %} M118 Probe already attached! {% endif %}
_CheckProbe action=query
{% endif %}
_exit_point function=Attach_Probe move={goback}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=Attach_Probe {% endif %}
printer.configfile.config['gcode_macro Attach_Probe'].description : Attaches Klicky Probe
printer.configfile.config['gcode_macro ERCF_LOAD_FILAMENT_IN_EXTRUDER'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_LOAD_FILAMENT_IN_EXTRUDER func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_LOAD_FILAMENT_IN_EXTRUDER Start ... {% endif %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
{% if printer.extruder.temperature >= printer["gcode_macro _ERCF_VAR"].min_temp_extruder %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Loading Filament... {% endif %}
_ercf_syncd_th_load_unload MODIFIER=-7
_extruder_move_dwell
ERCF_HOME_EXTRUDER TOTAL_LENGTH=30.0 STEP_LENGTH=0.5
_ERCF_UNSELECT_TOOL FORCED=0
ERCF_FINALIZE_LOAD LENGTH={printer["gcode_macro _ERCF_VAR"].sensor_to_nozzle|float}
_reset_extruder
go_absolute
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Load Complete {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Extruder too cold {% endif %}
_ERCF_PAUSE
{% endif %}
{% else %}
_alert_ercf_is_paused
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_LOAD_FILAMENT_IN_EXTRUDER End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_LOAD_FILAMENT_IN_EXTRUDER {% endif %}
printer.configfile.config['gcode_macro ERCF_LOAD_FILAMENT_IN_EXTRUDER'].description : Load filament from the toolhead entrance to the nozzle
printer.configfile.config['gcode_macro _disable_save_var_debug'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_disable_save_var_debug func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _disable_save_var_debug <<<<< {% endif %}
SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=save_var_debug VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_disable_save_var_debug {% endif %}
printer.configfile.config['gcode_macro _disable_save_var_debug'].description : used to disable save_var debug
printer.configfile.config['gcode_macro _start_bounds_checking'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_start_bounds_checking func_params='"{rawparams|string}"'  {% endif %}
_stop_bounds_alarm
M118 H2O cooling automatic parameter check Enabled
UPDATE_DELAYED_GCODE ID=check_bounds DURATION=0.1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_start_bounds_checking {% endif %}
printer.configfile.config['gcode_macro ERCF_CHANGE_TOOL'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CHANGE_TOOL func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CHANGE_TOOL Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% set th = printer.toolhead %}
{% if printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int == params.TOOL|int and
printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
{% else %}
{% if printer.idle_timeout.state == "Printing" and svv.has_wipe_tower == 0 %}
{% set z_entry = th.position.z|float %}
save_gcode_state NAME=ercf_change_tool_entry
{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
; {% set z_safe = [(th.position.z|float + 1), th.axis_maximum.z|float]|min %}
{% set z_safe = [svv.maxz|float+1, th.axis_maximum.z]|min %}
_reset_extruder
go_relative
{% if printer.extruder.temperature|int >= retract_temp_min|int %}
G1 E-0.4 F3600
{% else %}
M118 No pre-swap retract due to Low Temp...
{% endif %}
go_absolute
G0 X{x_safe} Y{y_safe} Z{z_safe} F15000
M400
go_relative
G0 Z15 F3000
go_absolute
G0 X{range(6,70)|random} Y350 F15000
{% endif %}
_ercf_set_eject_temp
{% if printer.idle_timeout.state == "Printing" and svv.has_wipe_tower != 0 %}
ERCF_CHANGE_TOOL_SLICER TOOL={params.TOOL|int}
{% else %}
ERCF_CHANGE_TOOL_STANDALONE TOOL={params.TOOL|int}
{% endif %}
_ercf_restore_he_temp
{% if printer.idle_timeout.state == "Printing" and svv.has_wipe_tower == 0 %}
_print_purge
G0 Z{z_entry} F3000
restore_gcode_state NAME=ercf_change_tool_entry MOVE=1 MOVE_SPEED=300
{% endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CHANGE_TOOL End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CHANGE_TOOL {% endif %}
printer.configfile.config['gcode_macro ERCF_CHANGE_TOOL'].description : Perform a tool swap, either in or out of a print
printer.configfile.config['gcode_macro ERCF_CHANGE_TOOL'].variable_retract_temp_min : 180
printer.configfile.config['gcode_macro ERCF_EJECT_FROM_BOWDEN'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_EJECT_FROM_BOWDEN func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_EJECT_FROM_BOWDEN Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
_ercf_wait_eject_temp
{% endif %}
{% if printer.ercf.encoder_pos|float != 0 %}
ERCF_UNLOAD HOMING=1
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Filament ejected {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Filament already ejected {% endif %}
{% endif %}
_ERCF_SERVO_UP
_ercf_restore_he_temp
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_EJECT_FROM_BOWDEN End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_EJECT_FROM_BOWDEN {% endif %}
printer.configfile.config['gcode_macro ERCF_EJECT_FROM_BOWDEN'].description : Unload filament from the reverse bowden - set/wait for HE temp, if filament detected in TH
printer.configfile.config['gcode_macro DUMP_PARAMETER'].gcode : 
{% set config = True if params.C or params.S else False %}
{% set path = 'config'   if params.C
else 'settings' if params.S %}
{% set search = params.C if params.C
else params.S if params.S
else params.P if params.P %}
{% set out = [] %}
{% for name1 in printer|sort %}
{% if config %} ; print the searched printer.configfile[path] parameter
{% if name1 is in ['configfile'] %}
{% for name2 in printer[name1][path]|sort %}
{% if name2 is in [search] %}
{% for name3, value in printer[name1][path][name2].items()|sort %}
{% set _dummy = out.append("printer.configfile.%s['%s'].%s = %s" %
(path, name2, name3, value)) %}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% else %}
{% for name2, value in printer[name1].items()|sort %} ; search for anything expext printer.configfile
{% if search is not defined and name1 is not in ['configfile'] %} ; print all printer. parameter
{% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
{% elif search is defined and name1 is in [search] %} ; print the searched printer. parameter
{% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
{% if out|length > 0 %}
{action_respond_info(out|join("\n"))}
{% else %}
{action_respond_info("Nothing found for \"DUMP_PARAMETER %s\"" % rawparams)}
{% endif %}
printer.configfile.config['gcode_macro DUMP_PARAMETER'].description : Debug: Print entries of the printer object
printer.configfile.config['gcode_macro _debug_vars'].variable_debug_verb_debug : 0
printer.configfile.config['gcode_macro _debug_vars'].description : macro for debug variables
printer.configfile.config['gcode_macro _debug_vars'].variable_save_var_debug : 0
printer.configfile.config['gcode_macro _debug_vars'].gcode : 
printer.configfile.config['gcode_macro _debug_vars'].variable_gcode_state_debug : 0
printer.configfile.config['gcode_macro _debug_vars'].variable_debug_verb_info : 0
printer.configfile.config['gcode_macro _debug_vars'].variable_debug_verb_error : 1
printer.configfile.config['gcode_macro _debug_vars'].variable_debug_verb_codeflow : 0
printer.configfile.config['gcode_macro _debug_vars'].variable_gmove_debug : 0
printer.configfile.config['gcode_macro _debug_vars'].variable_debug_verb_status : 0
printer.configfile.config['gcode_macro M141'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M141 func_params='"{rawparams|string}"'  {% endif %}
{% set ch_tmp_tgt = params.S|default(0)|int %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_info %} M118 >>> M141 S{ch_tmp_tgt} <<< {% endif %}
SET_TEMPERATURE_FAN_TARGET temperature_fan=Exhaust target={ch_tmp_tgt} min_speed=0.0 max_speed=1.0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M141 {% endif %}
printer.configfile.config['gcode_macro M141'].description : Implement a pseudo chamber heat control
printer.configfile.config['gcode_macro M140'].rename_existing : M140.1
printer.configfile.config['gcode_macro M140'].description : capture and set target heater_bed temp
printer.configfile.config['gcode_macro M140'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M140 func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=heater_bed_temp_setting VALUE={params.S|int}
M140.1 {rawparams}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M140 {% endif %}
printer.configfile.config['gcode_macro snd_MeshStore'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_MeshStore {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_MeshStore {% endif %}
printer.configfile.config['gcode_macro M300done'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M300done {% endif %}
SET_PIN PIN=_BEEPER_pin VALUE=0.0 cycle_time=0.024
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M300done {% endif %}
printer.configfile.config['gcode_macro printer_config_restore'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=printer_config_restore func_params='"{rawparams|string}"'  {% endif %}
RUN_SHELL_COMMAND CMD=restore_configs
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Printer config updated from git repo <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=printer_config_restore {% endif %}
printer.configfile.config['gcode_macro printer_config_restore'].description : Restore local configs from the git repo and restart klipper if updated
printer.configfile.config['gcode_macro _servo_move_dwell'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_servo_move_dwell func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _servo_move_dwell Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 >>> _servo_move_dwell {printer["gcode_macro _ERCF_VAR"].ercf_servo_move_dwell|int}mS <<< {% endif %}
G4 P{printer["gcode_macro _ERCF_VAR"].ercf_servo_move_dwell|int}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _servo_move_dwell End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_servo_move_dwell {% endif %}
printer.configfile.config['gcode_macro _servo_move_dwell'].description : impute a dwell time to allow for the servo movement to complete
printer.configfile.config['gcode_macro DBLts_Red'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=DBLts_Red {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=dash_lights RED=0.5 GREEN=0 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=DBLts_Red {% endif %}
printer.configfile.config['gcode_macro ERCF_CALIBRATE'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CALIBRATE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CALIBRATE Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %}
M118 Start the complete auto calibration...
M118 First home'g the ERCF
{% endif %}
ERCF_HOME
save_variable VARIABLE=ercf_err_flag VALUE=0
{% for chan in range(printer["gcode_macro _ERCF_VAR"].colorselector|length) if not svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %}
M118 ERCF_CALIBRATE_SINGLE TOOL={chan|int}
{% else %}
M118 __ Calibrating Tool {chan|int} __
{% endif %}
ERCF_CALIBRATE_SINGLE TOOL={chan|int}
{% endfor %}
_ERCF_UNSELECT_TOOL
M118 ERCF_Calibrate Error: {svv.ercf_err_flag}
{% if svv.ercf_err_flag == 0 %}
M118 End of auto-cal - Restart firmware now.
{% else %}
M118 End of auto-cal - Error Exists - resolve and rerun.
{% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=0
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CALIBRATE End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CALIBRATE {% endif %}
printer.configfile.config['gcode_macro ERCF_CALIBRATE'].description : Complete calibration of all ERCF Tools
printer.configfile.config['gcode_macro ERCFLts_Orange'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCFLts_Orange {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=ercf_lights RED=0.3 GREEN=0.1 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCFLts_Orange {% endif %}
printer.configfile.config['mcu pico'].restart_method : command
printer.configfile.config['mcu pico'].serial : /dev/serial/by-id/usb-Klipper_rp2040_E66058388326382F-if00
printer.configfile.config['gcode_macro _linadv_vars'].variable_linadv_verb_error : 1
printer.configfile.config['gcode_macro _linadv_vars'].description : led effects module variables
printer.configfile.config['gcode_macro _linadv_vars'].variable_dynamic_pa_enable : 0
printer.configfile.config['gcode_macro _linadv_vars'].variable_linadv_verb_info : 0
printer.configfile.config['gcode_macro _linadv_vars'].variable_linadv_verb_status : 0
printer.configfile.config['gcode_macro _linadv_vars'].variable_linadv_verb_debug : 0
printer.configfile.config['gcode_macro _linadv_vars'].gcode : 
printer.configfile.config['gcode_macro _linadv_vars'].variable_linadv_verb_codeflow : 0
printer.configfile.config['bed_mesh SOAKED'].tension : 0.2
printer.configfile.config['bed_mesh SOAKED'].min_x : 40.0
printer.configfile.config['bed_mesh SOAKED'].min_y : 40.0
printer.configfile.config['bed_mesh SOAKED'].y_count : 5
printer.configfile.config['bed_mesh SOAKED'].mesh_y_pps : 2
printer.configfile.config['bed_mesh SOAKED'].x_count : 5
printer.configfile.config['bed_mesh SOAKED'].points : 
0.155000, 0.122500, 0.122500, 0.132500, 0.202500
0.092500, 0.082500, 0.035000, 0.037500, 0.112500
0.097500, 0.035000, 0.000000, 0.035000, 0.080000
0.122500, 0.102500, 0.067500, 0.072500, 0.125000
0.215000, 0.207500, 0.157500, 0.162500, 0.225000
printer.configfile.config['bed_mesh SOAKED'].version : 1
printer.configfile.config['bed_mesh SOAKED'].algo : bicubic
printer.configfile.config['bed_mesh SOAKED'].mesh_x_pps : 2
printer.configfile.config['bed_mesh SOAKED'].max_x : 330.0
printer.configfile.config['bed_mesh SOAKED'].max_y : 330.0
printer.configfile.config['gcode_macro ChLts_Red'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ChLts_Red {% endif %}
SET_LED LED=chamber_lights RED=0.5 GREEN=0 BLUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ChLts_Red {% endif %}
printer.configfile.config['gcode_macro ERCF_LOAD_TOOL'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_LOAD_TOOL func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_LOAD_TOOL Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
_ercf_set_eject_temp
{% set ercf_params = printer.save_variables.variables %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
{% if printer["gcode_macro ERCF_HOME"].home == -1 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF not homed, homing it... {% endif %}
ERCF_HOME
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Loading tool {params.TOOL|int} ... {% endif %}
; ERCF_SELECT_TOOL TOOL={params.TOOL|int}
ERCF_SELECT_TOOL_dbg TOOL={params.TOOL|int}
ERCF_SET_STEPS RATIO={ercf_params['ercf_calib_%s' % (params.TOOL|string)]}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Loading filament from ERCF to extruder ... {% endif %}
ERCF_LOAD LENGTH={ercf_params.ercf_calib_ref|float - printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + printer["gcode_macro _ERCF_VAR"].ercf_th_load_len_mod|float}
ERCF_LOAD_FILAMENT_IN_EXTRUDER
{% else %}
_alert_ercf_is_paused
{% endif %}
_ercf_restore_he_temp
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_LOAD_TOOL End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_LOAD_TOOL {% endif %}
printer.configfile.config['gcode_macro ERCF_LOAD_TOOL'].description : Load the filament from the ERCF to the toolhead
printer.configfile.config.ercf.encoder_resolution : 1.343183
printer.configfile.config.ercf.long_moves_speed : 50
printer.configfile.config.ercf.short_moves_speed : 25
printer.configfile.config.ercf.short_moves_accel : 200
printer.configfile.config.ercf.long_moves_accel : 200
printer.configfile.config.ercf.encoder_pin : ^ercf:PA6
printer.configfile.config.save_variables.filename : ~/klipper_config/_globals.pvar
printer.configfile.config['gcode_macro PrintLED_On'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PrintLED_On func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> PrintLED_On <<< {% endif %}
_PrintLED_On
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PrintLED_On {% endif %}
printer.configfile.config['gcode_macro _CheckProbe'].variable_probe_state : 0
printer.configfile.config['gcode_macro _CheckProbe'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_CheckProbe func_params='"{rawparams|string}"'  {% endif %}
Query_Probe
_SetProbeState action={ params.ACTION }
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_CheckProbe {% endif %}
printer.configfile.config['gcode_macro G0'].rename_existing : G0.1
printer.configfile.config['gcode_macro G0'].description : G0, with console echo if enabled
printer.configfile.config['gcode_macro G0'].gcode : 
{% if printer["gcode_macro _debug_vars"].gmove_debug %} M118 G0 {rawparams|upper} {% endif %}
G0.1 {rawparams}
printer.configfile.config['gcode_macro _printer_vars'].variable_ptr_verb_codeflow : 0
printer.configfile.config['gcode_macro _printer_vars'].variable_ptr_verb_status : 0
printer.configfile.config['gcode_macro _printer_vars'].variable_ptr_verb_debug : 0
printer.configfile.config['gcode_macro _printer_vars'].gcode : 
printer.configfile.config['gcode_macro _printer_vars'].variable_ptr_verb_error : 1
printer.configfile.config['gcode_macro _printer_vars'].variable_pause_retract_default : 1.0
printer.configfile.config['gcode_macro _printer_vars'].variable_show_proc_exit_details : 1
printer.configfile.config['gcode_macro _printer_vars'].variable_show_proc_exit : 1
printer.configfile.config['gcode_macro _printer_vars'].variable_ptr_verb_info : 0
printer.configfile.config['gcode_macro _printer_vars'].variable_ptr_verb_modload : 0
printer.configfile.config['gcode_macro PwrLED_Off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PwrLED_Off func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> PwrLED_Off <<< {% endif %}
_PwrLED_Off
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PwrLED_Off {% endif %}
printer.configfile.config['output_pin _host_connect_led'].shutdown_value : 0
printer.configfile.config['output_pin _host_connect_led'].pin : pico:gpio25
printer.configfile.config['output_pin _host_connect_led'].value : 1
printer.configfile.config['delayed_gcode _startup_var_init'].gcode : 
_SAVE_VARIABLE_STOCK VARIABLE=proc_depth	VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_startup_var_init func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"initializing"'
SAVE_VARIABLE VARIABLE=module_ledeff_loaded VALUE=0
SAVE_VARIABLE VARIABLE=module_ercf_loaded VALUE=0
SAVE_VARIABLE VARIABLE=module_debug_loaded VALUE=0
SAVE_VARIABLE VARIABLE=module_linadv_loaded VALUE=0
SAVE_VARIABLE VARIABLE=module_scrub_loaded VALUE=0
SAVE_VARIABLE VARIABLE=module_klicky_loaded VALUE=0
SAVE_VARIABLE VARIABLE=module_gcodeproc_loaded VALUE=0
SAVE_VARIABLE VARIABLE=extruder_temp_setting VALUE=0
SAVE_VARIABLE VARIABLE=heater_bed_temp_setting VALUE=0
SAVE_VARIABLE VARIABLE=ercf_he_temp_restore_val VALUE=0
SAVE_VARIABLE VARIABLE=maxz VALUE=0.0
SAVE_VARIABLE VARIABLE=has_wipe_tower VALUE=-1
SAVE_VARIABLE VARIABLE=z_axis_cal VALUE=0
SAVE_VARIABLE VARIABLE=v2_2526_slicer_check VALUE='"NULL"'
SAVE_VARIABLE VARIABLE=last_saved_gcode_state VALUE='"NULL"'
SAVE_VARIABLE VARIABLE=ercf_selector_homed	VALUE=0
SAVE_VARIABLE VARIABLE=ercf_he_temp_restore_val	VALUE=0
; SAVE_VARIABLE VARIABLE=ercf_gear_direction	VALUE=0
; SAVE_VARIABLE VARIABLE=ercf_encoder_count	VALUE=0
SAVE_VARIABLE VARIABLE=last_chamber_lights_effect	VALUE='"off"'
SAVE_VARIABLE VARIABLE=last_dash_lights_effect		VALUE='"off"'
SAVE_VARIABLE VARIABLE=last_ercf_lights_effect		VALUE='"off"'
SAVE_VARIABLE VARIABLE=last_lcd_lights_effect		VALUE='"off"'
save_variable VARIABLE=total_toolchanges 			VALUE=0
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"initialized"'
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_startup_var_init {% endif %}
printer.configfile.config['delayed_gcode _startup_var_init'].initial_duration : 0.1
printer.configfile.config['gcode_macro LcdLts_Off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=LcdLts_Off {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=lcd_lights RED=0 GREEN=0 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=LcdLts_Off {% endif %}
printer.configfile.config['gcode_macro ERCFLts_Green'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCFLts_Green {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=ercf_lights RED=0 GREEN=0.5 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCFLts_Green {% endif %}
printer.configfile.config['gcode_macro PROBE_ACCURACY'].rename_existing : _PROBE_ACCURACY_STOCK
printer.configfile.config['gcode_macro PROBE_ACCURACY'].description : Probe Z-height accuracy at current XY position with klicky automount uses [probe] section configs for non passed vars
printer.configfile.config['gcode_macro PROBE_ACCURACY'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PROBE_ACCURACY func_params='"{rawparams|string}"'  {% endif %}
{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed %}
{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed %}
{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
{% if not 'xyz' in printer.toolhead.homed_axes %}
{ action_raise_error("Must Home X, Y and Z Axis First!") }
{% endif %}
_entry_point function=PROBE_ACCURACY
{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
or printer['gcode_move'].position.y < probe_offset_y
or printer['gcode_move'].position.x > (max_x - probe_offset_x)
or printer['gcode_move'].position.x < probe_offset_x %}
{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!") }
{% endif%}
_CheckProbe action=query
Attach_Probe back=1
_PROBE_ACCURACY_STOCK {% for p in params
%}{'%s=%s ' % (p, params[p])}{%
endfor %}
Dock_Probe back=1
_exit_point function=PROBE_ACCURACY move=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PROBE_ACCURACY {% endif %}
printer.configfile.config['gcode_macro ERCF_TEST_LOAD_CART'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_TEST_LOAD_CART func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_TEST_LOAD_CART Start ... {% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=0
_ercf_park_n_home
ERCF_SELECT_TOOL_dbg TOOL={params.C|int}
ERCF_LOAD LENGTH={printer["gcode_macro _ERCF_VAR"].ercf_test_load_seq_len}
ERCF_UNLOAD LENGTH={printer["gcode_macro _ERCF_VAR"].ercf_test_load_seq_len}
_ERCF_UNSELECT_TOOL
ercf_move_cart C=0
save_variable VARIABLE=ercf_err_flag VALUE=0
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_TEST_LOAD_CART End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_TEST_LOAD_CART {% endif %}
printer.configfile.config['gcode_macro ERCF_TEST_LOAD_CART'].description : Test load sequence on a single Cart (param is C) - home at start, home at end
printer.configfile.config['gcode_macro LcdLts_Test'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=LcdLts_Test {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=lcd_lights RED=0.1 GREEN=0.1 BLUE=0.5
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=LcdLts_Test {% endif %}
printer.configfile.config['gcode_macro ERCF_CALIB_UNLOAD'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CALIB_UNLOAD func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CALIB_UNLOAD Start ... {% endif %}
{% set unload_length = params.LENGTH|default(0.0)|float %}
{% if unload_length|float == 0.0 %}
ERCF_UNLOAD LENGTH={(ref|float)*(ratio|float) - printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + 27.0}
{% else %}
{% if ratio|float < 1.0 %}
ERCF_UNLOAD LENGTH={(unload_length|float)}
{% else %}
ERCF_UNLOAD LENGTH={(unload_length|float)*(ratio|float)}
{% endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CALIB_UNLOAD End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CALIB_UNLOAD {% endif %}
printer.configfile.config['gcode_macro ERCF_CALIB_UNLOAD'].variable_ratio : 0.0
printer.configfile.config['gcode_macro ERCF_CALIB_UNLOAD'].variable_ref : 0.0
printer.configfile.config['gcode_macro ERCF_CALIB_UNLOAD'].description : Filament unload during ERCF calibration
printer.configfile.config['gcode_macro init_gbl_vars'].gcode : 
printer.configfile.config['gcode_macro init_gbl_vars'].description : testing use of marcro variables
printer.configfile.config['manual_stepper gear_stepper'].full_steps_per_rotation : 200
printer.configfile.config['manual_stepper gear_stepper'].endstop_pin : ^ercf:PA7
printer.configfile.config['manual_stepper gear_stepper'].rotation_distance : 22.81048901638
printer.configfile.config['manual_stepper gear_stepper'].accel : 150
printer.configfile.config['manual_stepper gear_stepper'].gear_ratio : 80:20
printer.configfile.config['manual_stepper gear_stepper'].step_pin : ercf:PA4
printer.configfile.config['manual_stepper gear_stepper'].microsteps : 16
printer.configfile.config['manual_stepper gear_stepper'].velocity : 35
printer.configfile.config['manual_stepper gear_stepper'].dir_pin : ercf:PA10
printer.configfile.config['manual_stepper gear_stepper'].enable_pin : !ercf:PA2
printer.configfile.config['gcode_macro ERCF_DISPLAY_ENCODER_POS'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_DISPLAY_ENCODER_POS func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_DISPLAY_ENCODER_POS Start ... {% endif %}
M118 Encoder value is {printer['ercf'].encoder_pos|float}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_DISPLAY_ENCODER_POS End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_DISPLAY_ENCODER_POS {% endif %}
printer.configfile.config['gcode_macro ERCF_DISPLAY_ENCODER_POS'].description : Display current value of the ERCF encoder
printer.configfile.config['gcode_macro _stop_bounds_alarm'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_stop_bounds_alarm func_params='"{rawparams|string}"'  {% endif %}
UPDATE_DELAYED_GCODE ID=_recursive_bounds_alarm DURATION=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_stop_bounds_alarm {% endif %}
printer.configfile.config['gcode_macro _stop_bounds_alarm'].description : cancels the bound exceedance alarm
printer.configfile.config['gcode_macro ERCF_FINALIZE_LOAD'].rename_existing : _ERCF_FINALIZE_LOAD_STOCK
printer.configfile.config['gcode_macro ERCF_FINALIZE_LOAD'].description : wrapper for ERCF.py fw proc to handle error conditions, verbosity
printer.configfile.config['gcode_macro ERCF_FINALIZE_LOAD'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_FINALIZE_LOAD func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_FINALIZE_LOAD Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > ERCF_FINALIZE_LOAD Skipped - an error condition is asserted < {% endif %}
{% else %}
_ERCF_FINALIZE_LOAD_STOCK {rawparams}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_FINALIZE_LOAD End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_FINALIZE_LOAD {% endif %}
printer.configfile.config['gcode_macro _PwrLED_Off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_PwrLED_Off func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _PwrLED_Off <<< {% endif %}
SET_PIN PIN=_sw_blu_led VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_PwrLED_Off {% endif %}
printer.configfile.config['gcode_macro _PwrLED_Off'].description : Extinguish the Halo Sw Blue LED
printer.configfile.config['gcode_macro IdleLED_On'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=IdleLED_On func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> IdleLED_On <<< {% endif %}
_IdleLED_On
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=IdleLED_On {% endif %}
printer.configfile.config['gcode_macro DBLts_Blue'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=DBLts_Blue {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=dash_lights RED=0 GREEN=0 BLUE=0.5
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=DBLts_Blue {% endif %}
printer.configfile.config['bed_mesh 110_Klicky_NoSoak'].tension : 0.2
printer.configfile.config['bed_mesh 110_Klicky_NoSoak'].min_x : 40.0
printer.configfile.config['bed_mesh 110_Klicky_NoSoak'].min_y : 40.0
printer.configfile.config['bed_mesh 110_Klicky_NoSoak'].y_count : 5
printer.configfile.config['bed_mesh 110_Klicky_NoSoak'].mesh_y_pps : 2
printer.configfile.config['bed_mesh 110_Klicky_NoSoak'].x_count : 5
printer.configfile.config['bed_mesh 110_Klicky_NoSoak'].points : 
-0.045000, -0.025000, 0.002500, -0.045000, -0.060000
-0.075000, -0.000000, -0.010000, -0.050000, -0.025000
-0.007500, -0.002500, 0.000000, 0.000000, -0.022500
-0.007500, 0.027500, 0.040000, 0.010000, -0.010000
-0.002500, 0.057500, 0.040000, -0.015000, -0.022500
printer.configfile.config['bed_mesh 110_Klicky_NoSoak'].version : 1
printer.configfile.config['bed_mesh 110_Klicky_NoSoak'].algo : bicubic
printer.configfile.config['bed_mesh 110_Klicky_NoSoak'].mesh_x_pps : 2
printer.configfile.config['bed_mesh 110_Klicky_NoSoak'].max_x : 330.0
printer.configfile.config['bed_mesh 110_Klicky_NoSoak'].max_y : 330.0
printer.configfile.config['gcode_macro T9'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T9 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T9 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=9
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T9 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T9 {% endif %}
printer.configfile.config['gcode_macro T8'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T8 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T8 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=8
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T8 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T8 {% endif %}
printer.configfile.config['gcode_macro _enable_trace_debug'].gcode : 
{% set entry_trace_enabled_flag = printer["gcode_macro _printer_vars"].ptr_verb_codeflow|default(0)|int %}
SET_GCODE_VARIABLE MACRO=_printer_vars VARIABLE=ptr_verb_codeflow VALUE=1
{% if entry_trace_enabled_flag == 0 %}
M118
M118
{% endif %}
_proc_start function=_enable_trace_debug func_params='"{rawparams|string}"'
_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE=1
{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _enable_trace_debug <<<<< {% endif %}
_proc_end function=_enable_trace_debug
printer.configfile.config['gcode_macro _enable_trace_debug'].description : sets codeflow verbosity flag and inits depth counter
printer.configfile.config['gcode_macro T5'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T5 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T5 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=5
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T5 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T5 {% endif %}
printer.configfile.config['gcode_macro T4'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T4 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T4 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=4
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T4 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T4 {% endif %}
printer.configfile.config['gcode_macro T7'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T7 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T7 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=7
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T7 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T7 {% endif %}
printer.configfile.config['gcode_macro _disable_gcode_state_debug'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_disable_gcode_state_debug func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _disable_save_var_debug <<<<< {% endif %}
SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=gcode_state_debug VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_disable_gcode_state_debug {% endif %}
printer.configfile.config['gcode_macro _disable_gcode_state_debug'].description : used to disable save_var debug
printer.configfile.config['gcode_macro T1'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T1 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T1 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=1
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T1 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T1 {% endif %}
printer.configfile.config['gcode_macro T0'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T0 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T0 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=0
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T0 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T0 {% endif %}
printer.configfile.config['gcode_macro T3'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T3 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T3 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=3
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T3 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T3 {% endif %}
printer.configfile.config['gcode_macro T2'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T2 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T2 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=2
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T2 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T2 {% endif %}
printer.configfile.config['delayed_gcode disable_heater'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=disable_heater func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> disable_heater Start ... {% endif %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int != 0 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Disable extruder heater (_ERCF_PAUSE timeout...) {% endif %}
M104 S0
_clear_HE_heating_indication
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... disable_heater End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=disable_heater {% endif %}
printer.configfile.config['gcode_macro ERCF_CALIB_SAVE_VAR'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CALIB_SAVE_VAR func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CALIB_SAVE_VAR Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 >>> ERCF_CALIB_SAVE_VAR - Entered Params: {rawparams} <<< {% endif %}
{% if params.TOOL|int == 0 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_CALIB_SAVE_VAR - Tool is 0 <<< {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Tool {params.TOOL} calibration value is {printer['ercf'].encoder_pos|float} {% endif %}
SAVE_VARIABLE VARIABLE=ercf_calib_ref VALUE={printer['ercf'].encoder_pos|float}
SAVE_VARIABLE VARIABLE=ercf_calib_{params.TOOL|int} VALUE=1.0
SET_GCODE_VARIABLE MACRO=ERCF_CALIB_UNLOAD VARIABLE=ref VALUE={printer['ercf'].encoder_pos|float}
SET_GCODE_VARIABLE MACRO=ERCF_CALIB_UNLOAD VARIABLE=ratio VALUE=1.0
{% else %}
{% set ratio = (printer["gcode_macro _ERCF_VAR"].min_bowden_length|float - 100.0) / printer['ercf'].encoder_pos|float %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Tool {params.TOOL} ratio is {ratio|float} {% endif %}
SAVE_VARIABLE VARIABLE=ercf_calib_{params.TOOL|int} VALUE={ratio|float}
SET_GCODE_VARIABLE MACRO=ERCF_CALIB_UNLOAD VARIABLE=ratio VALUE={ratio|float}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CALIB_SAVE_VAR End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CALIB_SAVE_VAR {% endif %}
printer.configfile.config['gcode_macro ERCF_CALIB_SAVE_VAR'].description : Saving ERCF calibration values
printer.configfile.config['gcode_macro SAVE_GCODE_STATE'].rename_existing : _SAVE_GCODE_STATE_STOCK
printer.configfile.config['gcode_macro SAVE_GCODE_STATE'].description : for debug purposes, and to ease resume pains...
printer.configfile.config['gcode_macro SAVE_GCODE_STATE'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=SAVE_GCODE_STATE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _debug_vars"].gcode_state_debug %} M118 >>>>> SAVE_GCODE_STATE {rawparams} <<<<< {% endif %}
save_variable VARIABLE=last_saved_gcode_state VALUE='"{params.NAME}"'
_SAVE_GCODE_STATE_STOCK {rawparams}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=SAVE_GCODE_STATE {% endif %}
printer.configfile.config['gcode_macro _Park_Toolhead'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_Park_Toolhead func_params='"{rawparams|string}"'  {% endif %}
{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}
{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed * 60 %}
{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed * 60 %}
{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
_entry_point function=Park_Toolhead
{% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
{% if verbose %} M118 Parking Toolhead {% endif %}
G0 X{parkposition_x} Y{parkposition_y} F{xytravel_feedrate}
G0 Z{parkposition_z} F{ztravel_feedrate}
{% else %}
{% if verbose %} M118 Toolhead Parking Disabled... {% endif %}
{% endif %}
_exit_point function=Park_Toolhead
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_Park_Toolhead {% endif %}
printer.configfile.config['delayed_gcode _gcodeproc_module_start'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_gcodeproc_module_start func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %}  M118 >>> _gcodeproc_module_start Start <<< {% endif %}
SAVE_VARIABLE VARIABLE=module_gcodeproc_loaded VALUE=1
SAVE_VARIABLE VARIABLE=gcodeproc_err_flag VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %}  M118 >>> _gcodeproc_module_start End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_gcodeproc_module_start {% endif %}
printer.configfile.config['delayed_gcode _gcodeproc_module_start'].initial_duration : 0.5
printer.configfile.config['gcode_macro ERCF_EJECT_UNKNOW_STATE'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_EJECT_UNKNOW_STATE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_EJECT_UNKNOW_STATE Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% set ercf_params = printer.save_variables.variables %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF_EJECT_UNKNOW_STATE {% endif %}
{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
_ercf_set_eject_temp
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Filament in extruder, trying to eject it .. {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Calling ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING {% endif %}
{% set unload_ratio = ercf_params['ercf_calib_%s' % (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|string)] %}
{% if unload_ratio|string == "" %}
{% set unload_ratio = 1.0 %}
{% endif %}
ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING RATIO={unload_ratio}
ERCF_UNLOAD LENGTH={printer["gcode_macro _ERCF_VAR"].min_bowden_length - printer["gcode_macro _ERCF_VAR"].ercf_eject_unknow_state_len_mod - printer["gcode_macro _ERCF_VAR"].ercf_dual_unload_mod|float} UNKNOWN=1
_ercf_restore_he_temp
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 No filament detected in TH, calling _ERCF_SERVO_DOWN {% endif %}
_ERCF_SERVO_DOWN
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF_BUZZ_GEAR_MOTOR {% endif %}
ERCF_BUZZ_GEAR_MOTOR
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF_EJECT_FROM_BOWDEN {% endif %}
ERCF_EJECT_FROM_BOWDEN
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_EJECT_UNKNOW_STATE End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_EJECT_UNKNOW_STATE {% endif %}
printer.configfile.config['gcode_macro ERCF_EJECT_UNKNOW_STATE'].description : Unload filament from an unknown position
printer.configfile.config['output_pin _sw_red_led'].shutdown_value : 0
printer.configfile.config['output_pin _sw_red_led'].pin : pico:gpio28
printer.configfile.config['output_pin _sw_red_led'].value : 0
printer.configfile.config['gcode_macro T11'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T11 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T11 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=11
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T11 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T11 {% endif %}
printer.configfile.config['gcode_macro T10'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T10 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T10 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=10
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T10 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T10 {% endif %}
printer.configfile.config['gcode_macro DUMP_PRINT_AREA_LIMITS'].gcode : 
{% set min = printer.toolhead.axis_minimum %}
{% set max = printer.toolhead.axis_maximum %}
{% set probe_offset = {'x' : printer.configfile.settings.probe.x_offset,
'y' : printer.configfile.settings.probe.y_offset} %}
{% set probe_area = {'min' : {'x' : [min.x,(min.x-probe_offset.x)]|max,
'y' : [min.y,(min.y-probe_offset.y)]|max},
'max' : {'x' : [max.x,(max.x-probe_offset.x)]|min,
'y' : [max.y,(max.y-probe_offset.y)]|min}} %}
{action_respond_info("Print Volume Limits:
Min X:%7.1f, Y:%7.1f, Z:%7.1f
Max X:%7.1f, Y:%7.1f, Z:%7.1f
Probe Area Limits:
Min X:%7.1f, Y:%7.1f
Max X:%7.1f, Y:%7.1f" %
(min.x,min.y,min.z,max.x,max.y,max.z,probe_area.min.x,probe_area.min.y, probe_area.max.x,probe_area.max.y))}
printer.configfile.config['gcode_macro DUMP_PRINT_AREA_LIMITS'].description : Debug: Print information about print volume and probeable area
printer.configfile.config['temperature_fan MCU_Fan'].control : pid
printer.configfile.config['temperature_fan MCU_Fan'].pid_kp : 40
printer.configfile.config['temperature_fan MCU_Fan'].min_temp : 10
printer.configfile.config['temperature_fan MCU_Fan'].max_speed : 1.0
printer.configfile.config['temperature_fan MCU_Fan'].gcode_id : MCU
printer.configfile.config['temperature_fan MCU_Fan'].pin : PD12
printer.configfile.config['temperature_fan MCU_Fan'].off_below : 0.1
printer.configfile.config['temperature_fan MCU_Fan'].shutdown_speed : 1
printer.configfile.config['temperature_fan MCU_Fan'].sensor_type : temperature_mcu
printer.configfile.config['temperature_fan MCU_Fan'].target_temp : 40
printer.configfile.config['temperature_fan MCU_Fan'].pid_deriv_time : 2.0
printer.configfile.config['temperature_fan MCU_Fan'].min_speed : 0.0
printer.configfile.config['temperature_fan MCU_Fan'].kick_start_time : 0.1
printer.configfile.config['temperature_fan MCU_Fan'].max_power : 1.0
printer.configfile.config['temperature_fan MCU_Fan'].pid_ki : 0.2
printer.configfile.config['temperature_fan MCU_Fan'].hardware_pwm : False
printer.configfile.config['temperature_fan MCU_Fan'].max_temp : 90
printer.configfile.config['temperature_fan MCU_Fan'].pid_kd : 0.1
printer.configfile.config.stepper_z2.rotation_distance : 40
printer.configfile.config.stepper_z2.gear_ratio : 80:16
printer.configfile.config.stepper_z2.step_pin : PF9
printer.configfile.config.stepper_z2.microsteps : 16
printer.configfile.config.stepper_z2.dir_pin : PF10
printer.configfile.config.stepper_z2.enable_pin : !PG2
printer.configfile.config['gcode_macro snd_MeshEnd'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_MeshEnd {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_MeshEnd {% endif %}
printer.configfile.config['temperature_fan PS_Fan'].control : pid
printer.configfile.config['temperature_fan PS_Fan'].pid_kp : 40
printer.configfile.config['temperature_fan PS_Fan'].min_temp : 10
printer.configfile.config['temperature_fan PS_Fan'].max_speed : 1.0
printer.configfile.config['temperature_fan PS_Fan'].sensor_pin : PF7
printer.configfile.config['temperature_fan PS_Fan'].pin : PD13
printer.configfile.config['temperature_fan PS_Fan'].off_below : 0.1
printer.configfile.config['temperature_fan PS_Fan'].max_temp : 90
printer.configfile.config['temperature_fan PS_Fan'].shutdown_speed : 1
printer.configfile.config['temperature_fan PS_Fan'].sensor_type : PS
printer.configfile.config['temperature_fan PS_Fan'].target_temp : 35.0
printer.configfile.config['temperature_fan PS_Fan'].pid_deriv_time : 2.0
printer.configfile.config['temperature_fan PS_Fan'].min_speed : 0.0
printer.configfile.config['temperature_fan PS_Fan'].kick_start_time : 0.1
printer.configfile.config['temperature_fan PS_Fan'].max_power : 1.0
printer.configfile.config['temperature_fan PS_Fan'].pid_ki : 0.2
printer.configfile.config['temperature_fan PS_Fan'].hardware_pwm : False
printer.configfile.config['temperature_fan PS_Fan'].gcode_id : PS
printer.configfile.config['temperature_fan PS_Fan'].pid_kd : 0.1
printer.configfile.config.heater_bed.control : pid
printer.configfile.config.heater_bed.pid_kp : 37.631
printer.configfile.config.heater_bed.sensor_pin : PF3
printer.configfile.config.heater_bed.heater_pin : PA1
printer.configfile.config.heater_bed.sensor_type : MHz_B3950
printer.configfile.config.heater_bed.pid_kd : 276.590
printer.configfile.config.heater_bed.pwm_cycle_time : 0.01666
printer.configfile.config.heater_bed.pid_ki : 1.280
printer.configfile.config.heater_bed.min_temp : 0
printer.configfile.config.heater_bed.max_temp : 125
printer.configfile.config.heater_bed.max_power : 1
printer.configfile.config.stepper_z1.rotation_distance : 40
printer.configfile.config.stepper_z1.gear_ratio : 80:16
printer.configfile.config.stepper_z1.step_pin : PG4
printer.configfile.config.stepper_z1.microsteps : 16
printer.configfile.config.stepper_z1.dir_pin : !PC1
printer.configfile.config.stepper_z1.enable_pin : !PA0
printer.configfile.config['gcode_macro Z_EndStop_Accuracy'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=Z_EndStop_Accuracy func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Z_EndStop_Accuracy <<< {% endif %}
_ENSURE_QGL
PROBE_Z_ACCURACY
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=Z_EndStop_Accuracy {% endif %}
printer.configfile.config['gcode_macro Z_EndStop_Accuracy'].description : Probe Z-Endstop accuracy at Nozzle-Endstop position
printer.configfile.config['gcode_macro _Homing_Variables'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_Homing_Variables func_params='"{rawparams|string}"'  {% endif %}
{% set reset  = params.RESET|default(0) %}
{% if reset %}
SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_Homing_Variables {% endif %}
printer.configfile.config['gcode_shell_command system_shutdown'].command : sudo shutdown now
printer.configfile.config['gcode_shell_command system_shutdown'].verbose : false
printer.configfile.config['gcode_shell_command system_shutdown'].timeout : 2
printer.configfile.config['gcode_macro fil_ecdr_rel'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=fil_ecdr_rel {% endif %}
M118 fil_ecdr_rel
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=fil_ecdr_rel {% endif %}
printer.configfile.config['gcode_macro fil_ecdr_rel'].description : called when the fil encoder toggles open
printer.configfile.config['gcode_macro sng_scom'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_scom {% endif %}
M117 SCOM
M3001 S294 P200
M3001 S588 P200
M3001 S440 P200
M3001 S392 P200
M3001 S784 P200
M3001 S440 P200
M3001 S740 P200
M3001 S440 P200
M3001 S294 P200
M3001 S588 P200
M3001 S440 P200
M3001 S392 P200
M3001 S784 P200
M3001 S440 P200
M3001 S740 P200
M3001 S440 P200
M3001 S330 P200
M3001 S588 P200
M3001 S440 P200
M3001 S392 P200
M3001 S784 P200
M3001 S440 P200
M3001 S740 P200
M3001 S440 P200
M3001 S330 P200
M3001 S588 P200
M3001 S440 P200
M3001 S392 P200
M3001 S784 P200
M3001 S440 P200
M3001 S740 P200
M3001 S440 P200
M3001 S392 P200
M3001 S588 P200
M3001 S440 P200
M3001 S392 P200
M3001 S784 P200
M3001 S440 P200
M3001 S740 P200
M3001 S440 P200
M3001 S392 P200
M3001 S588 P200
M3001 S440 P200
M3001 S392 P200
M3001 S784 P200
M3001 S440 P200
M3001 S740 P200
M3001 S440 P200
M3001 S294 P800
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_scom {% endif %}
printer.configfile.config['gcode_macro _enable_gcode_state_debug'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_enable_gcode_state_debug func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _enable_save_var_debug <<<<< {% endif %}
SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=gcode_state_debug VALUE=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_enable_gcode_state_debug {% endif %}
printer.configfile.config['gcode_macro _enable_gcode_state_debug'].description : used to enable save_var debug
printer.configfile.config['gcode_macro _klicky_vars'].gcode : 
printer.configfile.config['gcode_macro _klicky_vars'].variable_klicky_verb_error : 1
printer.configfile.config['gcode_macro _klicky_vars'].variable_klicky_verb_debug : 0
printer.configfile.config['gcode_macro _klicky_vars'].variable_klicky_verb_status : 0
printer.configfile.config['gcode_macro _klicky_vars'].variable_klicky_verb_codeflow : 0
printer.configfile.config['gcode_macro _klicky_vars'].variable_klicky_verb_info : 0
printer.configfile.config['menu __main __filament __clean'].gcode : 
clean_nozzle
printer.configfile.config['menu __main __filament __clean'].type : command
printer.configfile.config['menu __main __filament __clean'].name : Clean Nozzle
printer.configfile.config['gcode_macro SET_PRESSURE_ADVANCE'].rename_existing : _SET_PRESSURE_ADVANCE_STOCK
printer.configfile.config['gcode_macro SET_PRESSURE_ADVANCE'].description : wrapper for FW proc
printer.configfile.config['gcode_macro SET_PRESSURE_ADVANCE'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=SET_PRESSURE_ADVANCE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _linadv_vars"].linadv_verb_codeflow %} M118 >>> SET_PRESSURE_ADVANCE Start ... {% endif %}
_SET_PRESSURE_ADVANCE_STOCK {rawparams}
{% if printer["gcode_macro _linadv_vars"].linadv_verb_codeflow %} M118 ... SET_PRESSURE_ADVANCE End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=SET_PRESSURE_ADVANCE {% endif %}
printer.configfile.config['gcode_macro Z_Probe_Accuracy'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=Z_Probe_Accuracy func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Z_Probe_Accuracy <<< {% endif %}
{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
_ENSURE_QGL
{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
or printer['gcode_move'].position.y < probe_offset_y
or printer['gcode_move'].position.x > (max_x - probe_offset_x)
or printer['gcode_move'].position.x < probe_offset_x %}
M118 Z_Probe_Accuracy - PROBE_CALIBRATE requires probe above the BED - moving to bed center...
go_absolute
G0 X{(max_x / 2)} Y{(max_y / 2)} F15000
{% endif%}
PROBE_ACCURACY PROBE_SPEED=10 SAMPLES=5 SAMPLE_RETRACT_DIST=2 LIFT_SPEED=15
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=Z_Probe_Accuracy {% endif %}
printer.configfile.config['gcode_macro Z_Probe_Accuracy'].description : Test and report Probe accuracy at current location, moving to 175,175 if outside of bed
printer.configfile.config['gcode_macro printer_config_backup'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=printer_config_backup func_params='"{rawparams|string}"'  {% endif %}
RUN_SHELL_COMMAND CMD=backup_configs
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Printer config backed up to git repo <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=printer_config_backup {% endif %}
printer.configfile.config['gcode_macro printer_config_backup'].description : performs backup of local configs to the git master
printer.configfile.config['gcode_macro _stop_bounds_checking'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_stop_bounds_checking func_params='"{rawparams|string}"'  {% endif %}
UPDATE_DELAYED_GCODE ID=check_bounds DURATION=0
M118 H2O cooling automatic parameter check Disabled
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_stop_bounds_checking {% endif %}
printer.configfile.config['gcode_macro sng_bethovene'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_bethovene {% endif %}
M117 Bethoven
M3001 S988 P400
M3001 S988 P400
M3001 S1047 P400
M3001 S1175 P400
M3001 S1175 P400
M3001 S1047 P400
M3001 S988 P400
M3001 S880 P400
M3001 S784 P400
M3001 S784 P400
M3001 S880 P400
M3001 S988 P400
M3001 S988 P600
M3001 S880 P200
M3001 S880 P800
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_bethovene {% endif %}
printer.configfile.config['gcode_macro PRINT_START'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PRINT_START func_params='"{rawparams|string}"'  {% endif %}
{% set th = printer.toolhead %}
SAVE_VARIABLE VARIABLE=maxz VALUE=0.0
SAVE_VARIABLE VARIABLE=ercf_swaps VALUE=0
M220 S100
M221 S100
M104 S{params.EXTRUDER|int}
M140 S{params.BED|int}
{% if svv.module_ercf_loaded|int %}
{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
{% endif %}
{% if svv.module_linadv_loaded %}
{% if printer["gcode_macro _linadv_vars"].dynamic_pa_enable %}
M118 -- Mesh-Specific Dynamic PA Enabled --
{% else %}
M118 -- Mesh-Specific Dynamic PA DISABLED --
{% endif %}
{% endif %}
{% if svv.module_gcodeproc_loaded %}
{% if printer["gcode_macro _gcodeproc_vars"].dynamic_extrate_enable %}
M118 -- Mesh-Specific Dynamic ExtRate Enabled --
{% else %}
M118 -- Mesh-Specific Dynamic ExtRate DISABLED --
{% endif %}
{% endif %}
{% if svv.module_gcodeproc_loaded %}
{% if printer["gcode_macro _gcodeproc_vars"].dynamic_spdrate_enable %}
M118 -- Mesh-Specific Dynamic SpdRate Enabled --
{% else %}
M118 -- Mesh-Specific Dynamic SpdRate DISABLED --
{% endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].test_ercf_load_seq_at_print %}
M118 PrintStart ERCF Fil Load Test Seq Starting
ERCF_TEST_LOAD_SEQUENCE LOOP=1
M118 PrintStart ERCF Fil Load Test Seq Completed
{% endif %}
{% endif %}
{% if svv.v2_2526_slicer_check != "mhz_cura"  and svv.v2_2526_slicer_check != "mhz_ps" %}
M117 Houston, We have a problem...
SAVE_VARIABLE VARIABLE=v2_2526_slicer_check VALUE='"NULL"'
{action_raise_error("WRONG SLICER AND/OR CONFIGURATION USED: " + svv.v2_2526_slicer_check|string) }
{% else %}
M118 { "Slicer Check Passed: " ~ svv.v2_2526_slicer_check }
{% endif %}
{% if svv.module_ledeff_loaded %}
_set_ledeff_mode CHAIN=chamber_lights	EFFECT=normal	RESET=1
_set_ledeff_mode CHAIN=lcd_lights 	EFFECT=normal	RESET=1
; _set_ledeff_mode CHAIN=ercf_lights	EFFECT=off		RESET=1
; _set_ledeff_mode CHAIN=dash_lights	EFFECT=off		RESET=1
{% else %}
ChLts_Normal
LcdLts_Normal
; ERCFLts_off
; DBLts_off
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Print Starting <<< {% endif %}
{% if svv.module_debug_loaded %} _disable_save_var_debug {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_starting"'
snd_PrintStart
{% if svv.module_ercf_loaded %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 1 %}
UPDATE_DELAYED_GCODE ID=disable_heater DURATION=0
SET_GCODE_VARIABLE MACRO=_ERCF_PAUSE VARIABLE=is_paused VALUE=0
{% endif %}
{% endif %}
reset_noz_cam
CLEAR_PAUSE
_HOURMETER_ON
_PrintLED_On
M106 S26
M141 S60
go_absolute
G0 F15000
_ENSURE_QGL
CLEAN_NOZZLE
G28 Z
{% if svv.v2_2526_slicer_check == "mhz_ps" %}
M109 S{params.EXTRUDER|int}
{% endif %}
{% if svv.v2_2526_slicer_check != "mhz_ps" %}
{% if svv.module_ercf_loaded and printer['filament_switch_sensor toolhead_sensor'].filament_detected != False %}
{% else %}
_print_purge
{% endif %}
{% endif %}
{% if svv.v2_2526_slicer_check == "mhz_ps" %}
M190 S{params.BED|int}
{% endif %}
{% if svv.module_ercf_loaded %}
{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
{% endif %}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Temps are up - Printing <<< {% endif %}
M118 PRINT_START @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}
M117 Printing
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_started"'
_start_bounds_checking
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PRINT_START {% endif %}
printer.configfile.config['gcode_macro DBLts_Green'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=DBLts_Green {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=dash_lights RED=0 GREEN=0.5 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=DBLts_Green {% endif %}
printer.configfile.config['gcode_macro HELLO_WORLD'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=HELLO_WORLD {% endif %}
RUN_SHELL_COMMAND CMD=hello_world
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=HELLO_WORLD {% endif %}
printer.configfile.config['gcode_macro sng_mch2'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_mch2 {% endif %}
M117 MCH2
M3001 P229 S294
M3001 P214 S370
M3001 P8 S440
M3001 P201 S73
M3001 P16 S110
M3001 P5 S294
M3001 P125 S370
M3001 P104 S0
M3001 P214 S440
M3001 P10 S370
M3001 P3 S110
M3001 P3 S147
M3001 P5 S220
M3001 P211 S294
M3001 P8 S110
M3001 P201 S440
M3001 P8 S165
M3001 P10 S220
M3001 P10 S330
M3001 P125 S277
M3001 P76 S0
M3001 P211 S440
M3001 P5 S139
M3001 P3 S165
M3001 P3 S220
M3001 P5 S277
M3001 P229 S330
M3001 P5 S73
M3001 P203 S440
M3001 P3 S110
M3001 P3 S147
M3001 P5 S294
M3001 P417 S370
M3001 P16 S587
M3001 P5 S110
M3001 P203 S147
M3001 P5 S370
M3001 P10 S440
M3001 P375 S294
M3001 P21 S0
M3001 P16 S370
M3001 P8 S147
M3001 P201 S92
M3001 P214 S392
M3001 P219 S440
M3001 P3 S165
M3001 P13 S220
M3001 P5 S277
M3001 P198 S330
M3001 P201 S440
M3001 P3 S165
M3001 P16 S220
M3001 P10 S330
M3001 P198 S139
M3001 P13 S110
M3001 P206 S392
M3001 P3 S277
M3001 P10 S330
M3001 P13 S165
M3001 P125 S220
M3001 P260 S0
M3001 P5 S139
M3001 P3 S165
M3001 P219 S220
M3001 P8 S73
M3001 P193 S294
M3001 P5 S110
M3001 P250 S147
M3001 P169 S0
M3001 P3 S92
M3001 P5 S110
M3001 P232 S147
M3001 P404 S73
M3001 P3 S110
M3001 P8 S147
M3001 P10 S294
M3001 P203 S92
M3001 P229 S370
M3001 P5 S73
M3001 P198 S440
M3001 P3 S110
M3001 P13 S147
M3001 P5 S220
M3001 P3 S294
M3001 P219 S370
M3001 P211 S440
M3001 P5 S110
M3001 P3 S147
M3001 P3 S220
M3001 P5 S294
M3001 P232 S370
M3001 P8 S440
M3001 P188 S110
M3001 P5 S165
M3001 P10 S220
M3001 P16 S330
M3001 P198 S277
M3001 P201 S440
M3001 P13 S220
M3001 P5 S139
M3001 P3 S165
M3001 P3 S277
M3001 P224 S330
M3001 P3 S73
M3001 P195 S440
M3001 P3 S110
M3001 P8 S147
M3001 P10 S370
M3001 P411 S294
M3001 P21 S587
M3001 P5 S110
M3001 P10 S147
M3001 P193 S92
M3001 P5 S73
M3001 P5 S294
M3001 P5 S370
M3001 P391 S440
M3001 P5 S110
M3001 P3 S147
M3001 P216 S370
M3001 P203 S392
M3001 P10 S440
M3001 P182 S110
M3001 P21 S165
M3001 P3 S220
M3001 P13 S277
M3001 P141 S330
M3001 P57 S0
M3001 P193 S440
M3001 P5 S165
M3001 P29 S220
M3001 P8 S139
M3001 P161 S330
M3001 P26 S0
M3001 P5 S110
M3001 P193 S392
M3001 P10 S330
M3001 P3 S220
M3001 P250 S277
M3001 P154 S0
M3001 P3 S165
M3001 P125 S220
M3001 P104 S0
M3001 P8 S73
M3001 P198 S294
M3001 P10 S147
M3001 P125 S110
M3001 P286 S0
M3001 P5 S92
M3001 P3 S110
M3001 P29 S147
M3001 P5 S185
M3001 P195 S220
M3001 P393 S73
M3001 P5 S587
M3001 P5 S110
M3001 P198 S147
M3001 P219 S554
M3001 P5 S98
M3001 P188 S494
M3001 P5 S147
M3001 P65 S196
M3001 P167 S0
M3001 P8 S294
M3001 P182 S392
M3001 P5 S147
M3001 P10 S196
M3001 P242 S123
M3001 P8 S98
M3001 P177 S494
M3001 P203 S196
M3001 P16 S392
M3001 P159 S294
M3001 P10 S147
M3001 P10 S196
M3001 P125 S123
M3001 P122 S0
M3001 P10 S440
M3001 P167 S147
M3001 P10 S185
M3001 P250 S220
M3001 P156 S0
M3001 P3 S185
M3001 P10 S494
M3001 P206 S220
M3001 P5 S440
M3001 P391 S147
M3001 P3 S185
M3001 P3 S220
M3001 P195 S587
M3001 P221 S554
M3001 P8 S98
M3001 P185 S494
M3001 P3 S147
M3001 P221 S196
M3001 P5 S294
M3001 P172 S392
M3001 P5 S147
M3001 P10 S196
M3001 P221 S123
M3001 P10 S98
M3001 P164 S494
M3001 P229 S587
M3001 P10 S196
M3001 P3 S123
M3001 P125 S147
M3001 P34 S0
M3001 P10 S147
M3001 P125 S196
M3001 P120 S0
M3001 P10 S440
M3001 P188 S110
M3001 P5 S220
M3001 P5 S277
M3001 P250 S330
M3001 P151 S0
M3001 P10 S277
M3001 P5 S165
M3001 P3 S220
M3001 P206 S330
M3001 P336 S110
M3001 P29 S0
M3001 P3 S220
M3001 P10 S294
M3001 P8 S139
M3001 P172 S165
M3001 P227 S370
M3001 P8 S440
M3001 P193 S73
M3001 P5 S110
M3001 P3 S147
M3001 P10 S370
M3001 P8 S220
M3001 P198 S294
M3001 P208 S440
M3001 P5 S92
M3001 P5 S110
M3001 P3 S147
M3001 P3 S220
M3001 P5 S294
M3001 P219 S370
M3001 P10 S440
M3001 P193 S110
M3001 P5 S165
M3001 P3 S220
M3001 P8 S277
M3001 P198 S330
M3001 P182 S440
M3001 P8 S220
M3001 P8 S139
M3001 P3 S165
M3001 P3 S277
M3001 P206 S330
M3001 P8 S73
M3001 P188 S440
M3001 P3 S110
M3001 P3 S294
M3001 P10 S370
M3001 P125 S147
M3001 P234 S0
M3001 P21 S587
M3001 P5 S110
M3001 P214 S147
M3001 P3 S73
M3001 P8 S294
M3001 P354 S440
M3001 P21 S0
M3001 P5 S110
M3001 P10 S370
M3001 P125 S147
M3001 P73 S0
M3001 P195 S392
M3001 P10 S440
M3001 P174 S110
M3001 P3 S165
M3001 P29 S220
M3001 P13 S277
M3001 P185 S330
M3001 P198 S440
M3001 P10 S277
M3001 P5 S165
M3001 P174 S330
M3001 P39 S0
M3001 P172 S392
M3001 P206 S330
M3001 P13 S220
M3001 P172 S165
M3001 P125 S139
M3001 P109 S0
M3001 P18 S294
M3001 P177 S73
M3001 P3 S185
M3001 P10 S220
M3001 P5 S110
M3001 P125 S147
M3001 P242 S0
M3001 P3 S110
M3001 P16 S147
M3001 P3 S185
M3001 P206 S220
M3001 P5 S92
M3001 P16 S147
M3001 P250 S73
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_mch2 {% endif %}
printer.configfile.config['gcode_macro go_absolute'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=go_absolute func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> ABSOLUTE <<< {% endif %}
G90
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=go_absolute {% endif %}
printer.configfile.config['gcode_macro go_absolute'].description : does a G90 - just for readability's sake
printer.configfile.config['gcode_macro sng_'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_ {% endif %}
M117 Playing ___
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_ {% endif %}
printer.configfile.config.resonance_tester.probe_points : 
175,175,20
printer.configfile.config.resonance_tester.accel_chip : adxl345
printer.configfile.config['delayed_gcode _linadv_module_start'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_linadv_module_start func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _linadv_vars"].linadv_verb_codeflow %}  M118 >>> _linadv_module_start Start <<< {% endif %}
SAVE_VARIABLE VARIABLE=module_linadv_loaded VALUE=1
SAVE_VARIABLE VARIABLE=linadv_err_flag VALUE=0
{% if printer["gcode_macro _linadv_vars"].linadv_verb_codeflow %}  M118 >>> _linadv_module_start End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_linadv_module_start {% endif %}
printer.configfile.config['delayed_gcode _linadv_module_start'].initial_duration : 0.5
printer.configfile.config['gcode_macro HOST_SHUTDOWN'].gcode : 
{action_call_remote_method("shutdown_machine")}
printer.configfile.config['gcode_macro _ercf_syncd_th_load_unload'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_syncd_th_load_unload func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ercf_syncd_th_load_unload Start ... {% endif %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > _ercf_syncd_th_load_unload Skipped - an error condition is asserted < {% endif %}
{% else %}
go_relative
_reset_extruder
MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
MANUAL_STEPPER STEPPER=gear_stepper MOVE={"-" if params.RETRACT|default(0)|int else ""}{printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + params.MODIFIER|default(0)|float} SPEED={printer["gcode_macro _ERCF_VAR"].sync_speed|float} ACCEL={printer["gcode_macro _ERCF_VAR"].sync_accel|float} SYNC=0 NODWELL=1
G1 E{"-" if params.RETRACT|default(0)|int else ""}{printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + params.MODIFIER|default(0)|float} F{printer["gcode_macro _ERCF_VAR"].sync_feedrate|float}
_gear_move_dwell
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ercf_syncd_th_load_unload End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ercf_syncd_th_load_unload {% endif %}
printer.configfile.config['gcode_macro _ercf_syncd_th_load_unload'].description : perform syncronous retract/extrude move of ercf gear motor and extruder motor for unload/load of filament to/from top of th inlet from/to th_sensor
printer.configfile.config['gcode_macro ERCF_SET_STEPS'].rename_existing : _ERCF_SET_STEPS_STOCK
printer.configfile.config['gcode_macro ERCF_SET_STEPS'].description : wrapper for ERCF.py fw proc to handle error conditions, verbosity
printer.configfile.config['gcode_macro ERCF_SET_STEPS'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_SET_STEPS func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_SET_STEPS Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
_ERCF_SET_STEPS_STOCK {rawparams}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_SET_STEPS End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_SET_STEPS {% endif %}
printer.configfile.config['gcode_macro snd_PrintFail'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_PrintFail {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_PrintFail {% endif %}
printer.configfile.config['gcode_macro _exit_point'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_exit_point func_params='"{rawparams|string}"'  {% endif %}
{% set move_speed = printer["gcode_macro _User_Variables"].xytravel_speed %}
{% set function  = 'pre_' ~ params.FUNCTION %}
{% set move  = params.MOVE|default(0) %}
{% if printer["gcode_macro _klicky_vars"].klicky_verb_info %} M118 >>> _____EXITING {function} MOVE={move} <<< {% endif %}
M400
RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={move_speed}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_exit_point {% endif %}
printer.configfile.config['gcode_macro ERCF_IS_FILAMENT_STUCK_IN_ERCF'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_IS_FILAMENT_STUCK_IN_ERCF func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_IS_FILAMENT_STUCK_IN_ERCF Start ... {% endif %}
{% if printer.ercf.encoder_pos|float != 0 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Filament stuck in ERCF {% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=1
_ERCF_PAUSE
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Filament not in ERCF {% endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_IS_FILAMENT_STUCK_IN_ERCF End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_IS_FILAMENT_STUCK_IN_ERCF {% endif %}
printer.configfile.config.homing_override.gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=homing_override func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"homing"'
{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> homing <<< {% endif %}
_User_Variables
{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
_klicky_check_variables_version
{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
{ action_raise_error("No attachmove location!") }
{% endif %}
_CheckProbe action=query
{% set home_x, home_y, home_z = False, False, False %}
{% if not 'X' in params
and not 'Y' in params
and not 'Z' in params %}
{% set home_x, home_y, home_z = True, True, True %}
{% else %}
{% if 'X' in params %}
{% set home_x = True %}
{% endif %}
{% if 'Y' in params %}
{% set home_y = True %}
{% endif %}
{% if 'Z' in params %}
{% set home_z = True %}
{% endif %}
{% if 'X' in params
and 'Y' in params
and 'Z' in params %}
_Homing_Variables reset=1
{% endif %}
{% endif %}
_entry_point function=homing_override
{% if 'z' not in printer.toolhead.homed_axes %}
{% if not enable_z_hop %}
{% set safe_z = 0 %}
{% endif %}
{% endif %}
{% if home_z %}
{% if 'z' in printer.toolhead.homed_axes %}
{% if printer.toolhead.position.z < safe_z %}
{% if verbose %} M118 Z too low, performing ZHOP {% endif %}
G0 Z{safe_z} F{z_drop_feedrate}
{% endif %}
{% else %}
{% if verbose %} M118 Z not homed, forcing full G28 {% endif %}
SET_KINEMATIC_POSITION X=0 Y=0 Z=0
G0 Z{safe_z} F{z_drop_feedrate}
{% set home_x, home_y, home_z = True, True, True %}
{% endif %}
{% endif %}
{% if attachmove_y == 0 %}
{% if home_y %}
{% if verbose %} M118 Homing Y {% endif %}
G28 Y0
{% endif %}
{% set home_y = False %}
{% endif %}
{% if home_x %}
{% if verbose %} M118 Homing X {% endif %}
G28 X0
{% endif %}
{% if home_y %}
{% if verbose %} M118 Homing Y {% endif %}
G28 Y0
{% endif %}
{% if home_z %}
{% if verbose %} M118 Homing Z {% endif %}
{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
Attach_Probe
{% else %}
Dock_Probe
{% endif %}
_Home_Z
{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
Dock_Probe
{% endif %}
{% endif %}
_CheckProbe action=query
_Park_Toolhead
_exit_point function=homing_override
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"homed"'
{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> homed <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=homing_override {% endif %}
printer.configfile.config.homing_override.axes : xyz
printer.configfile.config['gcode_macro _ercf_ptr_startup'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_ptr_startup func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].home_ercf_at_boot %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ___ ERCF Boot Home Start ___ {% endif %}
UPDATE_DELAYED_GCODE ID=_ercf_start_carthome DURATION=5
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ___ ERCF Boot Home Complete ___ {% endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].test_ercf_load_seq_at_boot %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ___ ERCF Boot Fil Load Test Seq Start ___ {% endif %}
UPDATE_DELAYED_GCODE ID=_ercf_start_loadtest DURATION=15
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ___ ERCF Boot Fil Load Test Seq Complete ___ {% endif %}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ercf_ptr_startup {% endif %}
printer.configfile.config['gcode_macro _ercf_ptr_startup'].description : gcodes that are called during printer startup
printer.configfile.config['gcode_macro T6'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T6 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T6 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=6
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T6 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T6 {% endif %}
printer.configfile.config['gcode_macro clean_nozzle'].variable_purge_len : 10
printer.configfile.config['gcode_macro clean_nozzle'].variable_bucket_left_width : 92
printer.configfile.config['gcode_macro clean_nozzle'].variable_prep_spd_z : 3000
printer.configfile.config['gcode_macro clean_nozzle'].variable_wipe_qty : 3
printer.configfile.config['gcode_macro clean_nozzle'].variable_bucket_pos : 1
printer.configfile.config['gcode_macro clean_nozzle'].variable_brush_depth : 0
printer.configfile.config['gcode_macro clean_nozzle'].variable_location_bucket_rear : True
printer.configfile.config['gcode_macro clean_nozzle'].variable_enable_purge : False
printer.configfile.config['gcode_macro clean_nozzle'].variable_clearance_z : 5
printer.configfile.config['gcode_macro clean_nozzle'].variable_ooze_dwell : 2
printer.configfile.config['gcode_macro clean_nozzle'].variable_brush_front : 0
printer.configfile.config['gcode_macro clean_nozzle'].variable_bucket_start : 0
printer.configfile.config['gcode_macro clean_nozzle'].variable_purge_ret : 2
printer.configfile.config['gcode_macro clean_nozzle'].variable_brush_width : 34
printer.configfile.config['gcode_macro clean_nozzle'].variable_bucket_right_width : 40
printer.configfile.config['gcode_macro clean_nozzle'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=clean_nozzle func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _scrub_vars"].scrub_verb_codeflow %} M118 >>> clean_nozzle Start <<<  {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"scrubbing"'
{% if printer["gcode_macro _scrub_vars"].scrub_verb_status %}  M118 >>> scrubbing <<< {% endif %}
{% set svv = printer.save_variables.variables %}
{% set doneX = params.DX|default(-9999999)|float %}
{% set doneY = params.DY|default(-9999999)|float %}
{% set doneZ = params.DZ|default(-9999999)|float %}
{% if printer["gcode_macro _scrub_vars"].scrub_verb_info %}  M118 >>> clean_nozzle params:  DX:{params.DX} DY:{params.DY} DZ:{params.DZ} <<< {% endif %}
{% set x_entry = printer.toolhead.position.x|float %}
{% set y_entry = printer.toolhead.position.y|float %}
{% set z_entry = printer.toolhead.position.z|float %}
{% if printer["gcode_macro _scrub_vars"].scrub_verb_info %}  M118 >>> clean_nozzle Entry from:  X:{x_entry}  Y:{y_entry}  Z:{z_entry} <<< {% endif %}
; {% set exit_z = [svv.maxz|float,doneZ|float,z_entry|float]|max|float %}
{% set exit_z = z_entry|float %}
{% if printer["gcode_macro _scrub_vars"].scrub_verb_info %}  M118 >>> clean_nozzle exit_z: {exit_z} (max of svv.maxz {svv.maxz}  |  doneZ {doneZ}  |  z_entry: {z_entry} ) <<< {% endif %}
{% if "xyz" in printer.toolhead.homed_axes %}
SAVE_GCODE_STATE NAME=clean_nozzle
go_absolute
{% set Ry = printer.configfile.config["stepper_y"]["position_max"]|float %}
{% if enable_purge %}
SET_GCODE_VARIABLE MACRO=clean_nozzle VARIABLE=bucket_pos VALUE={(range(2) | random)}
G1 Z{brush_top + clearance_z} F{prep_spd_z}
{% if location_bucket_rear %}
G1 Y{Ry} F{prep_spd_xy}
{% else %}
G1 Y{brush_front + (brush_depth / 2)} F{prep_spd_xy}
{% endif %}
G1 X{bucket_start + (bucket_left_width / (2 - bucket_pos)) + (bucket_pos * bucket_gap) + (bucket_pos * (bucket_right_width / 2))}
{% if printer.extruder.temperature >= purge_temp_min %}
{% if verbose %} M118 CLEAN_NOZZLE - {"Purging " + purge_len + "mm @ " + purge_spd + "mm/min..."} {% endif %}
go_relative
G1 E{purge_len} F{purge_spd}
G1 E-{purge_ret} F{purge_spd * 5}
G4 P{ooze_dwell * 1000}
go_absolute
_reset_extruder
{% else %}
{% if verbose %} M118 CLEAN_NOZZLE - No Purge due to Low Temp... {% endif %}
{% endif %}
{% else %}
{% if verbose %} M118 CLEAN_NOZZLE - Purge Disabled... {% endif %}
{% endif %}
go_relative
G1 Z+10 F{prep_spd_z}
go_absolute
G1 X{brush_start + (brush_width * bucket_pos)} Y{Ry} F{prep_spd_xy}
G1 Z{brush_top + clearance_z} F{prep_spd_z}
G1 Z{brush_top} F{prep_spd_z}
{% for wipes in range(1, (wipe_qty + 1)) %}
G1 X{brush_start + (brush_width * (1 - bucket_pos))} F{wipe_spd_xy}
G1 X{brush_start + (brush_width * bucket_pos)} F{wipe_spd_xy}
{% endfor %}
M117 Cleaned!
G1 Z{exit_z} F{prep_spd_z}
G1 X{x_entry} Y{y_entry} F{prep_spd_xy}
; {% if doneX != -9999999.0 %}
; {% if doneY != -9999999.0 %}
; {% if printer["gcode_macro _scrub_vars"].scrub_verb_info %}  M118 >>> both doneX/doneY asserted - restoring to doneX:{doneX}/doneY:{doneY} <<< {% endif %}
; G1 X{doneX} Y{doneY} F{prep_spd_xy}
; {% else %}
; {% if printer["gcode_macro _scrub_vars"].scrub_verb_info %}  M118 >>> only doneX asserted - restoring to doneX:{doneX}/Y_entry:{y_entry} <<< {% endif %}
; G1 X{doneX} Y{y_entry}F{prep_spd_xy}
; {% endif %}
; {% else %}
; {% if doneY != -9999999.0 %}
; {% if printer["gcode_macro _scrub_vars"].scrub_verb_info %}  M118 >>> only doneY asserted - restoring to X_entry:{x_entry}/doneY:{doneY} <<< {% endif %}
; G1 X{x_entry} Y{doneY} F{prep_spd_xy}
; {% else %}
; {% if printer["gcode_macro _scrub_vars"].scrub_verb_info %}  M118 >>> no done asserted - restoring to X_entry:{x_entry}/Y_entry:{y_entry} <<< {% endif %}
; G1 X{x_entry} Y{y_entry} F{prep_spd_xy}
; {% endif %}
; {% endif %}
RESTORE_GCODE_STATE NAME=clean_nozzle
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"scrubbed"'
{% if printer["gcode_macro _scrub_vars"].scrub_verb_status %}  M118 >>> scrubbed <<< {% endif %}
{% else %}
{% if printer["gcode_macro _scrub_vars"].scrub_verb_error %}  M118 >>> Not Homed <<< {% endif %}
M117 Please home first!
{action_raise_error("Please home your axes.") }
{% endif %}
{% if printer["gcode_macro _scrub_vars"].scrub_verb_codeflow %} M118 >>> clean_nozzle End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=clean_nozzle {% endif %}
printer.configfile.config['gcode_macro clean_nozzle'].variable_purge_spd : 150
printer.configfile.config['gcode_macro clean_nozzle'].variable_brush_start : 84
printer.configfile.config['gcode_macro clean_nozzle'].variable_brush_top : 4
printer.configfile.config['gcode_macro clean_nozzle'].variable_bucket_gap : 22
printer.configfile.config['gcode_macro clean_nozzle'].variable_wipe_spd_xy : 15000
printer.configfile.config['gcode_macro clean_nozzle'].variable_verbose : False
printer.configfile.config['gcode_macro clean_nozzle'].variable_prep_spd_xy : 15000
printer.configfile.config['gcode_macro clean_nozzle'].variable_purge_temp_min : 180
printer.configfile.config['gcode_macro Z_Calibrate'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=Z_Calibrate func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Z_Calibrate <<< {% endif %}
_ENSURE_QGL
CALIBRATE_Z
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=Z_Calibrate {% endif %}
printer.configfile.config['gcode_macro Z_Calibrate'].description : Automatically calibrates the nozzles offset to the print surface (used in Print_Start)
printer.configfile.config['gcode_macro corexy_gantry_speed_test'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=corexy_gantry_speed_test func_params='"{rawparams|string}"'  {% endif %}
{% set axialrate_multiplier = 1.414166667|float  %}
{% set max_x = printer.toolhead.axis_maximum.x|int %}
{% set max_y = printer.toolhead.axis_maximum.y|int %}
{% set max_frxy = printer.toolhead.max_velocity|int * 60 %}
{% set min_x_test = 10|int %}
{% set min_y_test = 10|int %}
{% set max_x_test = max_x - 10|int %}
{% set max_y_test = max_y - 10|int %}
{% set test_x_origin = max_x_test|int %}
{% set test_Y_origin = max_y_test|int %}
{% set test_preprateidx = 1|int %}
{% set spdidx = params.SPDIDX|default(4)|float %}
{% if spdidx >= 50.0 %}
{% set spdidx = (spdidx/50.0) %}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
M118 corexy_gantry_speed_test params: {rawparams}
{% endif %}
{% set spdidx_min = 1|int %}
{% set spdidx_max = 20|int %}
{% if spdidx < spdidx_min or spdidx > spdidx_max %}
M118 Passed spdidx parameter out of bounds - aborting
{ action_raise_error("Bounds: 1.0>=spdidx>=20.0  OR  50.0>=spdidx>=1000.0") }
{% endif %}
{% set test_axialfr = (spdidx*3000*axialrate_multiplier)|int %}
{% set test_angularfr = (spdidx*3000)|int %}
M118 {'PrinterMaxFeedrate:\t' + max_frxy|int|string + ' mm/min  |  ' + (max_frxy/60)|int|string  + ' mm/s' }
M118 {'TestAxialFeedrate:\t' + test_axialfr|int|string + ' mm/min  |  ' + (test_axialfr/60)|int|string  + ' mm/s' }
M118 {'TestAngularFeedrate:\t' + test_angularfr|int|string + ' mm/min  |  ' + (test_angularfr/60)|int|string  + ' mm/s' }
{% if test_axialfr > max_frxy %}
{ action_raise_error("Passed spdidx parameter imputes a speed exceedance - aborting") }
{% endif %}
{% set test_preprate = 3000|int %}
go_absolute
_ENSURE_HOMED
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %}
M118 corexy_gantry_speed_test Commencing
{% endif %}
G0 X{test_x_origin} Y{test_Y_origin} F{test_preprate}
G4 P500
GET_POSITION
G0 X{max_x_test} Y{min_y_test} F{test_axialfr}
G0 X{min_x_test} Y{max_y_test} F{test_angularfr}
G0 X{max_x_test} Y{min_y_test} F{test_angularfr}
G0 X{min_x_test} Y{min_y_test} F{test_axialfr}
G0 X{max_x_test} Y{max_y_test} F{test_angularfr}
G0 X{min_x_test} Y{min_y_test} F{test_angularfr}
G0 X{min_x_test} Y{max_y_test} F{test_axialfr}
G0 X{max_x_test} Y{max_y_test} F{test_axialfr}
G0 X{min_x_test} Y{min_y_test} F{test_angularfr}
G0 X{max_x_test} Y{max_y_test} F{test_angularfr}
G0 X{min_x_test} Y{max_y_test} F{test_axialfr}
G0 X{max_x_test} Y{min_y_test} F{test_angularfr}
G0 X{min_x_test} Y{max_y_test} F{test_angularfr}
G0 X{min_x_test} Y{min_y_test} F{test_axialfr}
G0 X{max_x_test} Y{min_y_test} F{test_axialfr}
G0 X{max_x_test} Y{max_y_test} F{test_axialfr}
G0 X{test_x_origin} Y{test_Y_origin} F{test_preprate}
G4 P500
GET_POSITION
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %}
M118 corexy_gantry_speed_test Complete
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=corexy_gantry_speed_test {% endif %}
printer.configfile.config['gcode_macro corexy_gantry_speed_test'].description : ~MHz's CoreXY Speed Test [spdidx=float 1.0 to 20.0] 1 is slow, 6 is fast, >10 PPE advised...
printer.configfile.config['tmc2209 manual_stepper selector_stepper'].sense_resistor : 0.110
printer.configfile.config['tmc2209 manual_stepper selector_stepper'].uart_address : 1
printer.configfile.config['tmc2209 manual_stepper selector_stepper'].interpolate : False
printer.configfile.config['tmc2209 manual_stepper selector_stepper'].uart_pin : ercf:PA8
printer.configfile.config['tmc2209 manual_stepper selector_stepper'].run_current : 0.6
printer.configfile.config['tmc2209 manual_stepper selector_stepper'].stealthchop_threshold : 0
printer.configfile.config['tmc2209 manual_stepper selector_stepper'].hold_current : 0.1
printer.configfile.config['gcode_macro _start_bounds_alarm'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_start_bounds_alarm func_params='"{rawparams|string}"'  {% endif %}
M118 H2O cooling parameters Exceedance ALERT
_fire_warble_alarm
UPDATE_DELAYED_GCODE ID=_recursive_bounds_alarm DURATION={printer["gcode_macro _bounds_vars"].bounds_alarm_recurse_period|float}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_start_bounds_alarm {% endif %}
printer.configfile.config['gcode_macro _start_bounds_alarm'].description : Alert and then set recursive reentry
printer.configfile.config.bed_mesh.mesh_pps : 2,2
printer.configfile.config.bed_mesh.horizontal_move_z : 15
printer.configfile.config.bed_mesh.mesh_min : 40, 40
printer.configfile.config.bed_mesh.algorithm : bicubic
printer.configfile.config.bed_mesh.mesh_max : 330, 330
printer.configfile.config.bed_mesh.fade_start : 1.0
printer.configfile.config.bed_mesh.bicubic_tension : .2
printer.configfile.config.bed_mesh.fade_end : 10.0
printer.configfile.config.bed_mesh.probe_count : 5,5
printer.configfile.config.bed_mesh.speed : 250
printer.configfile.config.bed_mesh.relative_reference_index : 12
printer.configfile.config['gcode_macro _PrintLED_Off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_PrintLED_Off func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _PrintLED_Off <<< {% endif %}
SET_PIN PIN=_sw_red_led VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_PrintLED_Off {% endif %}
printer.configfile.config['gcode_macro _PrintLED_Off'].description : Extinguish the Halo Sw Red LED
printer.configfile.config['gcode_macro _fire_warble_alarm'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_fire_warble_alarm func_params='"{rawparams|string}"'  {% endif %}
SET_PIN PIN=_Alarm_pin VALUE=1
G4 P{printer["gcode_macro _bounds_vars"].bounds_alarm_duration}
SET_PIN PIN=_Alarm_pin VALUE=0
M118
M118 ___ H2O Cooling Exceedance Alert Alarm ___
M118
M118 run  _stop_bounds_alarm      to cancel Exceedance Alert Alarm once issue is resolved
M118 or   _stop_bounds_checking   to defeat automatic H2O parameter checking entirely
M118 and  _start_bounds_checking  to reenable automatic H2O parameter checking when appropriate
M118
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_fire_warble_alarm {% endif %}
printer.configfile.config['gcode_macro _fire_warble_alarm'].description : 
printer.configfile.config['output_pin _sw_blu_led'].shutdown_value : 0
printer.configfile.config['output_pin _sw_blu_led'].pin : pico:gpio13
printer.configfile.config['output_pin _sw_blu_led'].value : 1
printer.configfile.config['output_pin _hourmeter'].shutdown_value : 0
printer.configfile.config['output_pin _hourmeter'].pwm : false
printer.configfile.config['output_pin _hourmeter'].pin : PB11
printer.configfile.config['output_pin _hourmeter'].value : 0
printer.configfile.config['gcode_macro _clear_HE_heating_indication'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_clear_HE_heating_indication func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _clear_HE_heating_indication Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF Heated {% endif %}
{% if printer.save_variables.variables.module_ledeff_loaded %}
; _set_ledeff_mode CHAIN=ercf_lights EFFECT=off
{% else %}
; ERCFLts_off
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _clear_HE_heating_indication End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_clear_HE_heating_indication {% endif %}
printer.configfile.config['gcode_macro _clear_HE_heating_indication'].description : deannunciate heating
printer.configfile.config['gcode_macro DBLts_Normal'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=DBLts_Normal {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=dash_lights RED=0.5 GREEN=0.5 BLUE=0.5
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=DBLts_Normal {% endif %}
printer.configfile.config['bed_mesh 120_MAGPROBE'].tension : 0.2
printer.configfile.config['bed_mesh 120_MAGPROBE'].min_x : 40.0
printer.configfile.config['bed_mesh 120_MAGPROBE'].min_y : 40.0
printer.configfile.config['bed_mesh 120_MAGPROBE'].y_count : 5
printer.configfile.config['bed_mesh 120_MAGPROBE'].mesh_y_pps : 2
printer.configfile.config['bed_mesh 120_MAGPROBE'].x_count : 5
printer.configfile.config['bed_mesh 120_MAGPROBE'].points : 
0.072344, 0.080781, 0.059531, 0.050000, 0.092656
-0.000312, 0.005313, -0.015156, -0.017969, 0.021406
0.018281, 0.020781, 0.000000, -0.006719, 0.027656
0.023594, 0.035469, 0.021562, 0.000156, 0.040625
0.098594, 0.130625, 0.104375, 0.088594, 0.120937
printer.configfile.config['bed_mesh 120_MAGPROBE'].version : 1
printer.configfile.config['bed_mesh 120_MAGPROBE'].algo : bicubic
printer.configfile.config['bed_mesh 120_MAGPROBE'].mesh_x_pps : 2
printer.configfile.config['bed_mesh 120_MAGPROBE'].max_x : 330.0
printer.configfile.config['bed_mesh 120_MAGPROBE'].max_y : 330.0
printer.configfile.config['gcode_macro stop_pause_alarm'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=stop_pause_alarm func_params='"{rawparams|string}"'  {% endif %}
UPDATE_DELAYED_GCODE ID=pause_alarm DURATION=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=stop_pause_alarm {% endif %}
printer.configfile.config['temperature_sensor Host'].min_temp : 10
printer.configfile.config['temperature_sensor Host'].sensor_type : temperature_host
printer.configfile.config['temperature_sensor Host'].gcode_id : Host
printer.configfile.config['temperature_sensor Host'].max_temp : 100
printer.configfile.config['gcode_macro M3001'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M3001 {% endif %}
{% set S = params.S|default(1000)|int %}
{% set P = params.P|default(100)|int %}
{% if S > 0 %}
SET_PIN PIN=_BEEPER_pin VALUE=0.5 cycle_time={1.0/(S|float)}
{% endif %}
G4 P{P}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M3001 {% endif %}
printer.configfile.config['manual_stepper selector_stepper'].position_endstop : 0
printer.configfile.config['manual_stepper selector_stepper'].full_steps_per_rotation : 200
printer.configfile.config['manual_stepper selector_stepper'].endstop_pin : ^ercf:PB9
printer.configfile.config['manual_stepper selector_stepper'].rotation_distance : 40
printer.configfile.config['manual_stepper selector_stepper'].accel : 300
printer.configfile.config['manual_stepper selector_stepper'].step_pin : ercf:PA9
printer.configfile.config['manual_stepper selector_stepper'].homing_speed : 100
printer.configfile.config['manual_stepper selector_stepper'].microsteps : 16
printer.configfile.config['manual_stepper selector_stepper'].velocity : 100
printer.configfile.config['manual_stepper selector_stepper'].dir_pin : ercf:PB8
printer.configfile.config['manual_stepper selector_stepper'].enable_pin : !ercf:PA11
printer.configfile.config['gcode_macro _gcodeproc_vars'].variable_dynamic_extrate_enable : 0
printer.configfile.config['gcode_macro _gcodeproc_vars'].description : module variables
printer.configfile.config['gcode_macro _gcodeproc_vars'].variable_gcodeproc_verb_error : 1
printer.configfile.config['gcode_macro _gcodeproc_vars'].variable_gcodeproc_verb_info : 0
printer.configfile.config['gcode_macro _gcodeproc_vars'].variable_gcodeproc_verb_debug : 0
printer.configfile.config['gcode_macro _gcodeproc_vars'].variable_gcodeproc_verb_codeflow : 0
printer.configfile.config['gcode_macro _gcodeproc_vars'].variable_gcodeproc_verb_status : 0
printer.configfile.config['gcode_macro _gcodeproc_vars'].variable_dynamic_spdrate_enable : 0
printer.configfile.config['gcode_macro _gcodeproc_vars'].gcode : 
printer.configfile.config['gcode_macro LcdLts_Red'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=LcdLts_Red {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=lcd_lights RED=0.5 GREEN=0 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=LcdLts_Red {% endif %}
printer.configfile.config['gcode_macro _SetSlicerVar'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_SetSlicerVar func_params='"{rawparams|string}"'  {% endif %}
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _gcodeproc_vars"].gcodeproc_verb_codeflow %}  M118 >>> _SetSlicerVar Start <<< {% endif %}
{% if params.VARIABLE|string == "TYPE" %}
{% set mesh_name = params.VALUE|string %}
{% if svv.module_linadv_loaded %}
{% if printer["gcode_macro _linadv_vars"].dynamic_pa_enable %}
_SetDynamicPA MESH={mesh_name}
{% else %}
{% endif %}
{% endif %}
{% if printer["gcode_macro _gcodeproc_vars"].dynamic_extrate_enable %}
_SetDynamicExtRate MESH={mesh_name}
{% else %}
{% endif %}
{% if printer["gcode_macro _gcodeproc_vars"].dynamic_spdrate_enable %}
_SetDynamicSpdRate MESH={mesh_name}
{% else %}
{% endif %}
{% endif %}
{% if params.VARIABLE|string == "maxz" %}
{% set svv_VALUE = params.VALUE|replace("\"","")|float %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
M118 >>> maxz raw:{params.VALUE} val:{svv_VALUE} <<<
{% endif %}
{% if svv.maxz|float < svv_VALUE|float %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
M118 >>> SAVING MAXZ:{svv.maxz|float} THIS:{svv_VALUE|float} <<<
{% endif %}
SAVE_VARIABLE VARIABLE={params.VARIABLE|string} VALUE={svv_VALUE|float}
{% else %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
M118 >>> SKIPPED MAXZ UPDATE - SAVED:{svv.maxz|float} THIS:{params.VALUE|float} <<<
{% endif %}
{% endif %}
{% else %}
{% if params.VALUE|replace("\"","")|int|string == params.VALUE|replace("\"","")|string %}
{% set svv_VALUE = params.VALUE|replace("\"","")|int %}
SAVE_VARIABLE VARIABLE={params.VARIABLE|string} VALUE={svv_VALUE}
{% elif params.VALUE|replace("\"","")|float|string == params.VALUE|replace("\"","")|string %}
{% set svv_VALUE = params.VALUE|replace("\"","")|float %}
SAVE_VARIABLE VARIABLE={params.VARIABLE|string} VALUE={svv_VALUE}
{% else %}
{% set svv_VALUE = "'\"" + params.VALUE|string + "\"'" %}
SAVE_VARIABLE {rawparams}
{% endif %}
{% endif %}
{% if printer["gcode_macro _gcodeproc_vars"].gcodeproc_verb_codeflow %}  M118 >>> _SetSlicerVar End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_SetSlicerVar {% endif %}
printer.configfile.config['gcode_macro _SetSlicerVar'].description : Used to runtime set slicer variables contained in gcode (done at slice time w/ regex post processing)
printer.configfile.config['gcode_macro ERCF_MOTORS_OFF'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_MOTORS_OFF func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_MOTORS_OFF Start ... {% endif %}
SET_GCODE_VARIABLE MACRO=ERCF_HOME VARIABLE=home VALUE=-1
MANUAL_STEPPER STEPPER=gear_stepper ENABLE=0
MANUAL_STEPPER STEPPER=selector_stepper ENABLE=0
_ERCF_SERVO_UP
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_MOTORS_OFF End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_MOTORS_OFF {% endif %}
printer.configfile.config['gcode_macro ERCF_MOTORS_OFF'].description : Turn off both ERCF motors and raise the servo up, unhome,
printer.configfile.config['gcode_macro system_shutdown'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=system_shutdown func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> system_shutdown <<< {% endif %}
RUN_SHELL_COMMAND CMD=backup_configs
RUN_SHELL_COMMAND CMD=power_off_printer
RUN_SHELL_COMMAND CMD=system_shutdown
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=system_shutdown {% endif %}
printer.configfile.config['gcode_macro system_shutdown'].description : Power off the entire system (printer AND host)
printer.configfile.config['gcode_macro sng_cena'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_cena {% endif %}
M117 Cena
M3001 s2800 p300
M3001 s2900 p100
M3001 s2400 p250
M3001 s2700 p1500
M3001 s3000 p300
M3001 s2900 p100
M3001 s2400 p250
M3001 s2700 p1500
M3001 s2800 p300
M3001 s2900 p100
M3001 s2400 p250
M3001 s2700 p1500
M3001 s3000 p300
M3001 s2900 p100
M3001 s2400 p250
M3001 s2700 p1500
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_cena {% endif %}
printer.configfile.config['gcode_macro _HOURMETER_OFF'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_HOURMETER_OFF func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _HOURMETER_OFF <<< {% endif %}
SET_PIN PIN=_hourmeter VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_HOURMETER_OFF {% endif %}
printer.configfile.config['gcode_macro _HOURMETER_OFF'].description : Turn Hour Meter Off
printer.configfile.config['gcode_macro _cart_move_dwell'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_cart_move_dwell func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _cart_move_dwell Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 >>> _cart_move_dwell {printer["gcode_macro _ERCF_VAR"].ercf_cart_move_dwell|int}mS <<< {% endif %}
G4 P{printer["gcode_macro _ERCF_VAR"].ercf_cart_move_dwell|int}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _cart_move_dwell End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_cart_move_dwell {% endif %}
printer.configfile.config['gcode_macro _cart_move_dwell'].description : impute a dwell time to allow for the stepper movement to complete
printer.configfile.config['gcode_macro RESUME'].rename_existing : _RESUME_STOCK
printer.configfile.config['gcode_macro RESUME'].description : Resume the actual running print - adapted for ERCF
printer.configfile.config['gcode_macro RESUME'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=RESUME func_params='"{rawparams|string}"'  {% endif %}
{% set resume_flag = 0|int %}
{% if svv.module_ercf_loaded %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int != 0 %}
M118 You can't resume the print without unlocking the ERCF first.
M118 Run ERCF_UNLOCK and solve any issue before hitting Resume again
{% else %}
{% set resume_flag = 1|int %}
{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
{% endif %}
{% endif %}
{% else %}
{% set resume_flag = 1|int %}
{% endif %}
{% if resume_flag %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Resuming <<< {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_resuming"'
M118 RESUME @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}
snd_PrintResume
_HOURMETER_ON
_PrintLED_On
{% if svv.module_ledeff_loaded %}
_set_ledeff_mode CHAIN=chamber_lights	EFFECT=normal	RESET=1
_set_ledeff_mode CHAIN=lcd_lights 	EFFECT=normal	RESET=1
{% else %}
ChLts_Normal
LcdLts_Normal
{% endif %}
go_absolute REASON="forcing absolute before restoring gcode state"
{% if svv.pause_ercf_error %}
RESTORE_GCODE_STATE NAME=ERCF_state MOVE=1 MOVE_SPEED=300.0000
{% else %}
RESTORE_GCODE_STATE NAME=State_Save_Pause MOVE=1 MOVE_SPEED=300.0000
{% endif %}
{% set e = params.E|default(printer["gcode_macro _printer_vars"].pause_retract_default|float)|float %}
{% if 'VELOCITY' in params|upper %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_debug %} M118 >>> RESUME | Velocity param passed <<< {% endif %}
{% set get_params = ('VELOCITY=' ~ params.VELOCITY)  %}
{%else %}
{% set get_params = "" %}
{% endif %}
{% if printer.extruder.can_extrude|lower == 'true' %}
go_relative REASON="resume extruder deretract"
G1 E{e} F2100 REASON="resume deretract"
{% else %}
M118 No Resume Deretract as Extruder not hot enough
{% endif %}
go_absolute REASON="in case we are relative for deretract"
stop_pause_alarm
M300 P10 S1000
M300 P10 S2000
{% if printer["gcode_macro _printer_vars"].ptr_verb_debug %} M118 >>> RESUME | _RESUME_STOCK {rawparams} <<< {% endif %}
M118 _RESUME_STOCK @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}
_RESUME_STOCK {get_params}
CLEAR_PAUSE
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_resumed"'
_start_bounds_checking
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Resumed <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=RESUME {% endif %}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=RESUME {% endif %}
printer.configfile.config['gcode_macro _disable_gmove_debug'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_disable_gmove_debug func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _disable_gmove_debug <<<<< {% endif %}
SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=gmove_debug VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_disable_gmove_debug {% endif %}
printer.configfile.config['gcode_macro _disable_gmove_debug'].description : used to disable gmove debug
printer.configfile.config['gcode_macro _disable_trace_debug'].gcode : 
{% set entry_trace_enabled_flag = printer["gcode_macro _printer_vars"].ptr_verb_codeflow|default(1)|int  %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_disable_trace_debug func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _disable_trace_debug <<<<< {% endif %}
SET_GCODE_VARIABLE MACRO=_printer_vars VARIABLE=ptr_verb_codeflow VALUE=0
_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_disable_trace_debug {% endif %}
{% if entry_trace_enabled_flag %}
_proc_end function=_disable_trace_debug FORCE=1
M118
M118
{% endif %}
printer.configfile.config['gcode_macro _disable_trace_debug'].description : sets codeflow verbosity flag and inits depth counter
printer.configfile.config['gcode_macro TH_filsw_prs'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=TH_filsw_prs {% endif %}
M118 TH_filsw_prs
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=TH_filsw_prs {% endif %}
printer.configfile.config['gcode_macro TH_filsw_prs'].description : called when the th fil sw toggles closed
printer.configfile.config['delayed_gcode printer_startup'].gcode : 
{% set svv = printer.save_variables.variables %}
; {% if svv.module_debug_loaded %} _enable_trace_debug REASON='"Startup Testing"' {% endif %}
; {% if svv.module_debug_loaded %} _enable_gmove_debug REASON='"Startup Testing"' {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=printer_startup func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"starting"'
SAVE_VARIABLE VARIABLE=last_spd_fact VALUE=1.0
{% if svv.module_ercf_loaded %}
_ERCF_SERVO_UP
{% endif %}
{% if svv.module_ledeff_loaded %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %}
M118 >>> LED CONTROL: LED_EFFECT <<<
{% endif %}
STOP_LED_EFFECTS
_set_ledeff_mode CHAIN=chamber_lights 	EFFECT=normal 	RESET=1
_set_ledeff_mode CHAIN=lcd_lights 		EFFECT=normal	RESET=1
_set_ledeff_mode CHAIN=ercf_lights 		EFFECT=off		RESET=1
_set_ledeff_mode CHAIN=dash_lights 		EFFECT=off		RESET=1
{% else %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %}
M118 >>> LED CONTROL: KLIPPER <<<
{% endif %}
ChLts_Normal
LcdLts_Normal
; ERCFLts_off
; DBLts_off
{% endif %}
printer_config_restore
M106 S26
UPDATE_DELAYED_GCODE ID=welcome_msg DURATION=5
sng_startup
_IdleLED_On
_PwrLED_Off
{% if printer["gcode_macro set_startup_bedtemp"].heat_on_start %}
set_startup_bedtemp
{% endif %}
RUN_SHELL_COMMAND CMD=set_cam_config
{% if svv.module_ercf_loaded %} _ercf_ptr_startup {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=printer_startup {% endif %}
_start_bounds_checking
; {% if svv.module_debug_loaded %} _disable_gmove_debug {% endif %}
; {% if svv.module_debug_loaded %} _disable_trace_debug {% endif %}
{% if svv.debug_err_flag 	== 0 and
svv.ercf_err_flag 	== 0 and
svv.klicky_err_flag 	== 0 and
svv.ledeff_err_flag 	== 0 and
svv.linadv_err_flag 	== 0 and
svv.gcodeproc_err_flag == 0 and
svv.scrub_err_flag 	== 0 		%}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"started"'
M118 Printer state: Ready
{% else %}
M118 Printer state: NOT Ready - an error is asserted:
M118 - svv.debug_err_flag: {svv.debug_err_flag}
M118 - svv.ercf_err_flag: {svv.ercf_err_flag}
M118 - svv.klicky_err_flag: {svv.klicky_err_flag}
M118 - svv.ledeff_err_flag: {svv.ledeff_err_flag}
M118 - svv.linadv_err_flag: {svv.linadv_err_flag}
M118 - svv.gcodeproc_err_flag: {svv.gcodeproc_err_flag}
M118 - svv.scrub_err_flag: {svv.scrub_err_flag}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"error"'
{% endif %}
printer.configfile.config['delayed_gcode printer_startup'].initial_duration : 1.0
printer.configfile.config['tmc2209 stepper_z'].sense_resistor : 0.110
printer.configfile.config['tmc2209 stepper_z'].interpolate : False
printer.configfile.config['tmc2209 stepper_z'].uart_pin : PC6
printer.configfile.config['tmc2209 stepper_z'].run_current : 1.2
printer.configfile.config['tmc2209 stepper_z'].stealthchop_threshold : 1
printer.configfile.config['tmc2209 stepper_z'].hold_current : 0.8
printer.configfile.config['tmc2209 stepper_x'].uart_pin : PC4
printer.configfile.config['tmc2209 stepper_x'].stealthchop_threshold : 0
printer.configfile.config['tmc2209 stepper_x'].interpolate : False
printer.configfile.config['tmc2209 stepper_x'].run_current : 1.414
printer.configfile.config['tmc2209 stepper_x'].sense_resistor : 0.110
printer.configfile.config['tmc2209 stepper_y'].uart_pin : PD11
printer.configfile.config['tmc2209 stepper_y'].stealthchop_threshold : 0
printer.configfile.config['tmc2209 stepper_y'].interpolate : False
printer.configfile.config['tmc2209 stepper_y'].run_current : 1.414
printer.configfile.config['tmc2209 stepper_y'].sense_resistor : 0.110
printer.configfile.config['filament_motion_sensor encoder_sensor'].detection_length : 4.0
printer.configfile.config['filament_motion_sensor encoder_sensor'].switch_pin : ^ercf:PA6
printer.configfile.config['filament_motion_sensor encoder_sensor'].event_delay : 0.1
printer.configfile.config['filament_motion_sensor encoder_sensor'].insert_gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=encoder_sensor_insert {% endif %}
fil_ecdr_prs
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=encoder_sensor_insert {% endif %}
printer.configfile.config['filament_motion_sensor encoder_sensor'].runout_gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=encoder_sensor_runout {% endif %}
fil_ecdr_rel
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=encoder_sensor_runout {% endif %}
printer.configfile.config['filament_motion_sensor encoder_sensor'].pause_on_runout : False
printer.configfile.config['filament_motion_sensor encoder_sensor'].pause_delay : 0.5
printer.configfile.config['filament_motion_sensor encoder_sensor'].extruder : extruder
printer.configfile.config['delayed_gcode _ercf_module_start'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_module_start func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _ercf_module_start Start <<< {% endif %}
SAVE_VARIABLE VARIABLE=module_ercf_loaded VALUE=1
save_variable VARIABLE=ercf_err_flag VALUE=0
SET_GCODE_VARIABLE MACRO=ERCF_HOME VARIABLE=home VALUE=-1
{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _ercf_module_start End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ercf_module_start {% endif %}
printer.configfile.config['delayed_gcode _ercf_module_start'].initial_duration : 0.5
printer.configfile.config['gcode_macro ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING Start ... {% endif %}
{% set ercf_params = printer.save_variables.variables %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
_ercf_set_eject_temp
{% if printer.extruder.temperature > printer["gcode_macro _ERCF_VAR"].min_temp_extruder %}
{% if printer["gcode_macro ERCF_SELECT_TOOL"].tool_selected|int == -1 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Forming filament tip and Unloading Filament... {% endif %}
go_relative
ERCF_FORM_TIP_STANDALONE
G1 E-4.00 F1200.0
G1 E-15.00 F2000
ERCF_HOME_EXTRUDER
{% if params.RATIO|string != "" %}
ERCF_SET_STEPS RATIO={params.RATIO|float}
{% elif ercf_params['ercf_calib_%s' % (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|string)]|string == "" %}
ERCF_SET_STEPS RATIO=1.0
{% else %}
ERCF_SET_STEPS RATIO={ercf_params['ercf_calib_%s' % (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|string)]|float}
{% endif %}
_ERCF_SERVO_DOWN
_ercf_syncd_th_load_unload RETRACT=1 MODIFIER={printer["gcode_macro _ERCF_VAR"].ercf_dual_unload_mod|float}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Filament out of TH throat {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %}
M118 Tool selected, UNSELECT it
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_debug %} M118 Tool selected, UNSELECT it {% endif %}
{% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=1
_ERCF_PAUSE
{% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Extruder too cold {% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=1
_ERCF_PAUSE
{% endif %}
_ercf_restore_he_temp
{% else %}
save_variable VARIABLE=ercf_err_flag VALUE=1
_alert_ercf_is_paused
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING {% endif %}
printer.configfile.config['gcode_macro ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING'].description : Unload filament from the nozzle to the toolhead entrance using generic tip forming macro
printer.configfile.config['gcode_macro TH_filsw_rel'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=TH_filsw_rel {% endif %}
M118 TH_filsw_rel
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=TH_filsw_rel {% endif %}
printer.configfile.config['gcode_macro TH_filsw_rel'].description : called when the th fil sw toggles open
printer.configfile.config['gcode_macro HOURMETER_TOGGLE'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=HOURMETER_TOGGLE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> HOURMETER_TOGGLE <<< {% endif %}
{% if printer["output_pin _hourmeter"].value == 1 %}
_HOURMETER_OFF
{% else %}
_HOURMETER_ON
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=HOURMETER_TOGGLE {% endif %}
printer.configfile.config['gcode_macro HOURMETER_TOGGLE'].description : Toggle Hour Meter
printer.configfile.config['gcode_macro _enable_save_var_debug'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_enable_save_var_debug func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _enable_save_var_debug <<<<< {% endif %}
SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=save_var_debug VALUE=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_enable_save_var_debug {% endif %}
printer.configfile.config['gcode_macro _enable_save_var_debug'].description : used to enable save_var debug
printer.configfile.config['gcode_macro M122'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M122 func_params='"{rawparams|string}"'  {% endif %}
M118
M118 >>>> M122 TMC Debug Start <<<<
M118
M118 >>> stepper_x <<<
M118
DUMP_TMC STEPPER=stepper_x
M118
M118 >>> stepper_y <<<
M118
DUMP_TMC STEPPER=stepper_y
M118
M118 >>> stepper_z <<<
M118
DUMP_TMC STEPPER=stepper_z
M118
M118 >>> stepper_z1 <<<
M118
DUMP_TMC STEPPER=stepper_z1
M118
M118 >>> stepper_z2 <<<
M118
DUMP_TMC STEPPER=stepper_z2
M118
M118 >>> stepper_z3 <<<
M118
DUMP_TMC STEPPER=stepper_z3
M118
M118 >>> extruder <<<
M118
DUMP_TMC STEPPER=extruder
M118
M118 >>> selector_stepper <<<
M118
DUMP_TMC STEPPER=selector_stepper
M118
M118 >>> gear_stepper <<<
M118
DUMP_TMC STEPPER=gear_stepper
M118
M118 >>>> M122 TMC Debug End <<<<
M118
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M122 {% endif %}
printer.configfile.config['gcode_macro M122'].description : dumps tmc_stepper status stuffs
printer.configfile.config['gcode_macro ERCF_UNLOAD'].rename_existing : _ERCF_UNLOAD_STOCK
printer.configfile.config['gcode_macro ERCF_UNLOAD'].description : wrapper for ERCF.py fw proc to handle error conditions, verbosity, and adds a dwell
printer.configfile.config['gcode_macro ERCF_UNLOAD'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_UNLOAD func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_UNLOAD Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > ERCF_UNLOAD Skipped - an error condition is asserted < {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_loadunload %} M118 ^^^ ERCF_UNLOAD {rawparams} {% endif %}
_ERCF_UNLOAD_STOCK {rawparams}
_load_unload_dwell
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_UNLOAD End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_UNLOAD {% endif %}
printer.configfile.config['thermistor Duct'].beta : 3950
printer.configfile.config['thermistor Duct'].temperature1 : 25
printer.configfile.config['thermistor Duct'].resistance1 : 10000
printer.configfile.config['gcode_macro ERCF_TEST_SERVO'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_TEST_SERVO func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_TEST_SERVO Start ... {% endif %}
SET_SERVO SERVO=ercf_servo ANGLE={params.VALUE|float}
_servo_move_dwell
SET_SERVO SERVO=ercf_servo WIDTH=0.0
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_TEST_SERVO End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_TEST_SERVO {% endif %}
printer.configfile.config['gcode_macro ERCF_TEST_SERVO'].description : Test the servo angle
printer.configfile.config['tmc2209 extruder'].sense_resistor : 0.110
printer.configfile.config['tmc2209 extruder'].interpolate : False
printer.configfile.config['tmc2209 extruder'].uart_pin : PE1
printer.configfile.config['tmc2209 extruder'].run_current : 0.85
printer.configfile.config['tmc2209 extruder'].stealthchop_threshold : 0
printer.configfile.config['tmc2209 extruder'].hold_current : 0.05
printer.configfile.config.force_move.enable_force_move : True
printer.configfile.config['gcode_macro ERCFLts_Normal'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCFLts_Normal {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=ercf_lights RED=0.5 GREEN=0.5 BLUE=0.5
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCFLts_Normal {% endif %}
printer.configfile.config['gcode_macro ChLts_Full'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ChLts_Full {% endif %}
SET_LED LED=chamber_lights RED=1 GREEN=1 BLUE=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ChLts_Full {% endif %}
printer.configfile.config['gcode_macro SET_SERVO'].rename_existing : _SET_SERVO_STOCK
printer.configfile.config['gcode_macro SET_SERVO'].description : wrapper for FW proc to handle error conditions, verbosity, and conditionally dwell
printer.configfile.config['gcode_macro SET_SERVO'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=SET_SERVO func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> SET_SERVO Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag and params.WIDTH|default(1)|int %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > SET_SERVO Skipped - an error condition is asserted < {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 >>> SET_SERVO {rawparams} <<< {% endif %}
_SET_SERVO_STOCK {rawparams}
{% if params.ANGLE|default("")|string != "" or params.WIDTH|default("0.0")|string != "0.0" %}
_servo_move_dwell
{% endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... SET_SERVO End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=SET_SERVO {% endif %}
printer.configfile.config['delayed_gcode _ercf_start_loadtest'].gcode : 
ERCF_TEST_LOAD_SEQ LOOP=1
printer.configfile.config['delayed_gcode _ercf_start_loadtest'].initial_duration : 0.0
printer.configfile.config['gcode_macro LcdLts_Orange'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=LcdLts_Orange {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=lcd_lights RED=0.3 GREEN=0.1 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=LcdLts_Orange {% endif %}
printer.configfile.config['gcode_macro DBLts_Full'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=DBLts_Full {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=dash_lights RED=1 GREEN=1 BLUE=1
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=DBLts_Full {% endif %}
printer.configfile.config['gcode_shell_command set_cam_config'].command : sh /home/pi/klipper_config/cfg_noz_cam.sh
printer.configfile.config['gcode_shell_command set_cam_config'].verbose : false
printer.configfile.config['gcode_shell_command set_cam_config'].timeout : 2
printer.configfile.config['gcode_macro _User_Variables'].variable_ztravel_speed : 50
printer.configfile.config['gcode_macro _User_Variables'].variable_park_toolhead : False
printer.configfile.config['gcode_macro _User_Variables'].variable_z_drop_speed : 5
printer.configfile.config['gcode_macro _User_Variables'].variable_umbilical : False
printer.configfile.config['gcode_macro _User_Variables'].variable_docklocation_y : 350.0
printer.configfile.config['gcode_macro _User_Variables'].variable_docklocation_x : 319.0
printer.configfile.config['gcode_macro _User_Variables'].variable_docklocation_z : -128
printer.configfile.config['gcode_macro _User_Variables'].variable_safe_z : 15
printer.configfile.config['gcode_macro _User_Variables'].variable_xyrelease_speed : 75
printer.configfile.config['gcode_macro _User_Variables'].variable_attachmove_z : 0
printer.configfile.config['gcode_macro _User_Variables'].variable_attachmove_y : 30
printer.configfile.config['gcode_macro _User_Variables'].variable_attachmove_x : 0
printer.configfile.config['gcode_macro _User_Variables'].variable_enable_z_hop : True
printer.configfile.config['gcode_macro _User_Variables'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_User_Variables func_params='"{rawparams|string}"'  {% endif %}
{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
{% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
{% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
{% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}
{% if home_z_height|default(0) != 0 %}
SET_GCODE_VARIABLE MACRO=_USER_Variables VARIABLE=safe_z VALUE={ home_z_height }
{% endif %}
{% if z_endstop_x != 0 or z_endstop_y != 0 %}
SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }
{% else %}
SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_User_Variables {% endif %}
printer.configfile.config['gcode_macro _User_Variables'].variable_verbose : False
printer.configfile.config['gcode_macro _User_Variables'].variable_xytravel_speed : 250
printer.configfile.config['gcode_macro _User_Variables'].variable_zrelease_speed : 5
printer.configfile.config['gcode_macro _User_Variables'].variable_xydock_speed : 50
printer.configfile.config['gcode_macro _User_Variables'].variable_parkposition_y : 350
printer.configfile.config['gcode_macro _User_Variables'].variable_umbilical_x : 15
printer.configfile.config['gcode_macro _User_Variables'].variable_umbilical_y : 15
printer.configfile.config['gcode_macro _User_Variables'].variable_parkposition_x : 175
printer.configfile.config['gcode_macro _User_Variables'].variable_version : 1
printer.configfile.config['gcode_macro _User_Variables'].variable_parkposition_z : 15
printer.configfile.config['gcode_macro _User_Variables'].variable_z_endstop_x : 231.3
printer.configfile.config['gcode_macro _User_Variables'].variable_dockmove_z : 0
printer.configfile.config['gcode_macro _User_Variables'].variable_zdock_speed : 5
printer.configfile.config['gcode_macro _User_Variables'].variable_dockmove_x : -88
printer.configfile.config['gcode_macro _User_Variables'].variable_z_endstop_y : 349.0
printer.configfile.config['gcode_macro _User_Variables'].variable_max_bed_x : 350.0
printer.configfile.config['gcode_macro _User_Variables'].variable_max_bed_y : 350.0
printer.configfile.config['gcode_macro _User_Variables'].variable_dockmove_y : 0
printer.configfile.config['gcode_macro SAVE_VARIABLE'].rename_existing : _SAVE_VARIABLE_STOCK
printer.configfile.config['gcode_macro SAVE_VARIABLE'].description : SAVE_VARIABLE, with console echo if so enabled
printer.configfile.config['gcode_macro SAVE_VARIABLE'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=SAVE_VARIABLE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _debug_vars"].save_var_debug %} M118 ___SAVE_VARIABLE {rawparams}___ {% endif %}
_SAVE_VARIABLE_STOCK {rawparams}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=SAVE_VARIABLE {% endif %}
printer.configfile.config['mcu ercf'].restart_method : command
printer.configfile.config['mcu ercf'].serial : /dev/serial/by-id/usb-Klipper_samd21g18a_80D0BB084134555020312E30202C18FF-if00
printer.configfile.config['gcode_macro sng_empire'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_empire {% endif %}
M117 Empire
M3001 S392 P436
M3001 S0 P109
M3001 S392 P436
M3001 S0 P109
M3001 S392 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S392 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S392 P872
M3001 S0 P218
M3001 S587 P436
M3001 S0 P109
M3001 S587 P436
M3001 S0 P109
M3001 S587 P436
M3001 S0 P109
M3001 S622 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S370 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S392 P872
M3001 S0 P218
M3001 S784 P436
M3001 S0 P109
M3001 S392 P326
M3001 S0 P81
M3001 S392 P108
M3001 S0 P27
M3001 S784 P436
M3001 S0 P109
M3001 S740 P326
M3001 S0 P81
M3001 S698 P108
M3001 S0 P27
M3001 S659 P108
M3001 S0 P27
M3001 S622 P108
M3001 S0 P27
M3001 S659 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S415 P217
M3001 S0 P54
M3001 S554 P436
M3001 S0 P109
M3001 S523 P326
M3001 S0 P81
M3001 S494 P108
M3001 S0 P27
M3001 S466 P108
M3001 S0 P27
M3001 S440 P108
M3001 S0 P27
M3001 S466 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S311 P217
M3001 S0 P54
M3001 S370 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S370 P108
M3001 S0 P27
M3001 S466 P436
M3001 S0 P109
M3001 S392 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S587 P872
M3001 S0 P218
M3001 S784 P436
M3001 S0 P109
M3001 S392 P326
M3001 S0 P81
M3001 S392 P108
M3001 S0 P27
M3001 S784 P436
M3001 S0 P109
M3001 S740 P326
M3001 S0 P81
M3001 S698 P108
M3001 S0 P27
M3001 S659 P108
M3001 S0 P27
M3001 S622 P108
M3001 S0 P27
M3001 S659 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S415 P217
M3001 S0 P54
M3001 S554 P436
M3001 S0 P109
M3001 S523 P326
M3001 S0 P81
M3001 S494 P108
M3001 S0 P27
M3001 S466 P108
M3001 S0 P27
M3001 S440 P108
M3001 S0 P27
M3001 S466 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S311 P217
M3001 S0 P54
M3001 S370 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S392 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S392 P872
M3001 S0 P218
M3001 S392 P436
M3001 S0 P109
M3001 S392 P436
M3001 S0 P109
M3001 S392 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S392 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S392 P872
M3001 S0 P218
M3001 S587 P436
M3001 S0 P109
M3001 S587 P436
M3001 S0 P109
M3001 S587 P436
M3001 S0 P109
M3001 S622 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S370 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S392 P872
M3001 S0 P218
M3001 S784 P436
M3001 S0 P109
M3001 S392 P326
M3001 S0 P81
M3001 S392 P108
M3001 S0 P27
M3001 S784 P436
M3001 S0 P109
M3001 S740 P326
M3001 S0 P81
M3001 S698 P108
M3001 S0 P27
M3001 S659 P108
M3001 S0 P27
M3001 S622 P108
M3001 S0 P27
M3001 S659 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S415 P217
M3001 S0 P54
M3001 S554 P436
M3001 S0 P109
M3001 S523 P326
M3001 S0 P81
M3001 S494 P108
M3001 S0 P27
M3001 S466 P108
M3001 S0 P27
M3001 S440 P108
M3001 S0 P27
M3001 S466 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S311 P217
M3001 S0 P54
M3001 S370 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S392 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S392 P872
M3001 S0 P218
M3001 S0 P436
M3001 S0 P109
M3001 S294 P217
M3001 S0 P54
M3001 S311 P217
M3001 S0 P54
M3001 S262 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S466 P217
M3001 S0 P54
M3001 S440 P217
M3001 S0 P54
M3001 S370 P217
M3001 S0 P54
M3001 S587 P217
M3001 S0 P54
M3001 S554 P217
M3001 S0 P54
M3001 S440 P217
M3001 S0 P54
M3001 S523 P217
M3001 S0 P54
M3001 S466 P217
M3001 S0 P54
M3001 S370 P217
M3001 S0 P54
M3001 S311 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S294 P217
M3001 S0 P54
M3001 S311 P217
M3001 S0 P54
M3001 S262 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S466 P217
M3001 S0 P54
M3001 S440 P217
M3001 S0 P54
M3001 S370 P217
M3001 S0 P54
M3001 S784 P217
M3001 S0 P54
M3001 S587 P217
M3001 S0 P54
M3001 S466 P217
M3001 S0 P54
M3001 S415 P217
M3001 S0 P54
M3001 S311 P217
M3001 S0 P54
M3001 S247 P217
M3001 S0 P54
M3001 S208 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S294 P217
M3001 S0 P54
M3001 S311 P217
M3001 S0 P54
M3001 S262 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S466 P217
M3001 S0 P54
M3001 S440 P217
M3001 S0 P54
M3001 S370 P217
M3001 S0 P54
M3001 S587 P217
M3001 S0 P54
M3001 S554 P217
M3001 S0 P54
M3001 S440 P217
M3001 S0 P54
M3001 S523 P217
M3001 S0 P54
M3001 S466 P217
M3001 S0 P54
M3001 S370 P217
M3001 S0 P54
M3001 S311 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S311 P217
M3001 S0 P54
M3001 S330 P217
M3001 S0 P54
M3001 S277 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S494 P217
M3001 S0 P54
M3001 S466 P217
M3001 S0 P54
M3001 S392 P217
M3001 S0 P54
M3001 S831 P217
M3001 S0 P54
M3001 S622 P217
M3001 S0 P54
M3001 S494 P217
M3001 S0 P54
M3001 S440 P217
M3001 S0 P54
M3001 S330 P217
M3001 S0 P54
M3001 S262 P217
M3001 S0 P54
M3001 S220 P217
M3001 S0 P54
M3001 S440 P436
M3001 S0 P109
M3001 S440 P436
M3001 S0 P109
M3001 S440 P436
M3001 S0 P109
M3001 S349 P326
M3001 S0 P81
M3001 S523 P108
M3001 S0 P27
M3001 S440 P436
M3001 S0 P109
M3001 S349 P326
M3001 S0 P81
M3001 S523 P108
M3001 S0 P27
M3001 S440 P872
M3001 S0 P218
M3001 S659 P436
M3001 S0 P109
M3001 S659 P436
M3001 S0 P109
M3001 S659 P436
M3001 S0 P109
M3001 S698 P326
M3001 S0 P81
M3001 S523 P108
M3001 S0 P27
M3001 S415 P436
M3001 S0 P109
M3001 S349 P326
M3001 S0 P81
M3001 S523 P108
M3001 S0 P27
M3001 S440 P872
M3001 S0 P218
M3001 S880 P436
M3001 S0 P109
M3001 S440 P326
M3001 S0 P81
M3001 S440 P108
M3001 S0 P27
M3001 S880 P436
M3001 S0 P109
M3001 S831 P326
M3001 S0 P81
M3001 S784 P108
M3001 S0 P27
M3001 S740 P108
M3001 S0 P27
M3001 S698 P108
M3001 S0 P27
M3001 S740 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S466 P217
M3001 S0 P54
M3001 S622 P436
M3001 S0 P109
M3001 S587 P326
M3001 S0 P81
M3001 S554 P108
M3001 S0 P27
M3001 S523 P108
M3001 S0 P27
M3001 S494 P108
M3001 S0 P27
M3001 S523 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S349 P217
M3001 S0 P54
M3001 S415 P436
M3001 S0 P109
M3001 S349 P326
M3001 S0 P81
M3001 S523 P108
M3001 S0 P27
M3001 S440 P436
M3001 S0 P109
M3001 S349 P326
M3001 S0 P81
M3001 S523 P108
M3001 S0 P27
M3001 S440 P872
M3001 S0 P218
M3001 S880 P436
M3001 S0 P109
M3001 S440 P326
M3001 S0 P81
M3001 S440 P108
M3001 S0 P27
M3001 S880 P436
M3001 S0 P109
M3001 S831 P326
M3001 S0 P81
M3001 S784 P108
M3001 S0 P27
M3001 S740 P108
M3001 S0 P27
M3001 S698 P108
M3001 S0 P27
M3001 S740 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S466 P217
M3001 S0 P54
M3001 S622 P436
M3001 S0 P109
M3001 S587 P326
M3001 S0 P81
M3001 S554 P108
M3001 S0 P27
M3001 S523 P108
M3001 S0 P27
M3001 S494 P108
M3001 S0 P27
M3001 S523 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S349 P217
M3001 S0 P54
M3001 S415 P436
M3001 S0 P109
M3001 S349 P326
M3001 S0 P81
M3001 S523 P108
M3001 S0 P27
M3001 S440 P436
M3001 S0 P109
M3001 S349 P326
M3001 S0 P81
M3001 S523 P108
M3001 S0 P27
M3001 S440 P653
M3001 S0 P163
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_empire {% endif %}
printer.configfile.config['gcode_macro SET_HEATER_TEMPERATURE'].rename_existing : _SET_HEATER_TEMPERATURE_STOCK
printer.configfile.config['gcode_macro SET_HEATER_TEMPERATURE'].description : capture and set target bed temp, waiting for temp attainment
printer.configfile.config['gcode_macro SET_HEATER_TEMPERATURE'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=SET_HEATER_TEMPERATURE func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE={params.HEATER|string}_temp_setting VALUE={params.TARGET|int}
_SET_HEATER_TEMPERATURE_STOCK {rawparams}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=SET_HEATER_TEMPERATURE {% endif %}
printer.configfile.config['gcode_macro _emit_hho_parameters'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_emit_hho_parameters func_params='"{rawparams|string}"'  {% endif %}
{% set H2O_Flow_RPM = printer['heater_fan H2O_Flow'].rpm %}
{% set H2O_Pump_RPM = printer['heater_fan H2O_Pump'].rpm %}
{% set H2O_RadFan_RPM = printer['heater_fan H2O_RadFan'].rpm %}
{% set H2O_Temp = printer['temperature_sensor Hotend_H2O'].temperature %}
M118
M118 H2O Cooling Parameters:
M118 H2O_Flow_RPM: {printer["gcode_macro _bounds_vars"].h2o_flow_rpm_min|int} <= {H2O_Flow_RPM|int} <= {printer["gcode_macro _bounds_vars"].h2o_flow_rpm_max|int}
M118 H2O_Pump_RPM: {printer["gcode_macro _bounds_vars"].h2o_pump_rpm_min|int} <= {H2O_Pump_RPM|int} <= {printer["gcode_macro _bounds_vars"].h2o_pump_rpm_max|int}
M118 H2O_RadFan_RPM: {printer["gcode_macro _bounds_vars"].h2o_radfan_rpm_min|int} <= {H2O_RadFan_RPM|int} <= {printer["gcode_macro _bounds_vars"].h2o_radfan_rpm_max|int}
M118 H2O_Temp: {printer["gcode_macro _bounds_vars"].h2o_temp_min|int} <= {H2O_Temp|int} <= {printer["gcode_macro _bounds_vars"].h2o_temp_max|int}
M118
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_emit_hho_parameters {% endif %}
printer.configfile.config['gcode_macro _emit_hho_parameters'].description : emits H2O Cooling Parameters and Bounds on same to console
printer.configfile.config['gcode_macro M190'].rename_existing : M190.1
printer.configfile.config['gcode_macro M190'].description : capture and set target heater_bed temp, waiting for temp attainment
printer.configfile.config['gcode_macro M190'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M190 func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=heater_bed_temp_setting VALUE={params.S|int}
M190.1 {rawparams}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M190 {% endif %}
printer.configfile.config['output_pin _BEEPER_pin'].shutdown_value : 0
printer.configfile.config['output_pin _BEEPER_pin'].pwm : True
printer.configfile.config['output_pin _BEEPER_pin'].cycle_time : 0.024
printer.configfile.config['output_pin _BEEPER_pin'].pin : PE8
printer.configfile.config['output_pin _BEEPER_pin'].value : 0
printer.configfile.config['gcode_shell_command wcv2_irled_off'].command : curl -d value=0 http://10.0.0.61:8081/api/ir_led
printer.configfile.config['gcode_shell_command wcv2_irled_off'].verbose : false
printer.configfile.config['gcode_shell_command wcv2_irled_off'].timeout : 2
printer.configfile.config.printer.square_corner_velocity : 20.0
printer.configfile.config.printer.max_accel : 4000
printer.configfile.config.printer.max_z_accel : 350
printer.configfile.config.printer.max_velocity : 400
printer.configfile.config.printer.max_z_velocity : 50
printer.configfile.config.printer.kinematics : corexy
printer.configfile.config.printer.max_accel_to_decel : 3000
printer.configfile.config['gcode_macro ERCF_SERVO_DOWN'].gcode : 
_ERCF_SERVO_DOWN {rawparams}
printer.configfile.config['gcode_macro ERCF_SERVO_DOWN'].description : for macro purposes
printer.configfile.config['gcode_macro M900'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M900 func_params='"{rawparams|string}"'  {% endif %}
{% if 'K' in params %}
{% if printer["gcode_macro _linadv_vars"].linadv_verb_info %}
M118 M900 - {'PA:' + params.K|float|string + ' ST:' + printer.extruder.smooth_time|float|string}
{% endif %}
SET_PRESSURE_ADVANCE ADVANCE={params.K|float}
{% else %}
{% if printer["gcode_macro _linadv_vars"].linadv_verb_error %}
M118 >>> M900: No PA K-factor passed... <<<
{% endif %}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M900 {% endif %}
printer.configfile.config['gcode_macro M900'].description : Set Pressure Advance - Param K=K-Factor|float, other params are ignored
printer.configfile.config['gcode_macro _SetDynamicExtRate'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_SetDynamicExtRate func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _gcodeproc_vars"].dynamic_extrate_enable %}
{% if printer["gcode_macro _gcodeproc_vars"].gcodeproc_verb_codeflow %}  M118 >>> _SetDynamicExtRate Start <<< {% endif %}
{% set this1 = namespace(pa_unset=true) %}
{% set this2 = namespace(matches=0) %}
{% for mesh_idx in range(printer["gcode_macro _SetDynamicExtRate"].mesh_name|length) %}
{% if params.MESH|string|lower == printer["gcode_macro _SetDynamicExtRate"].mesh_name[mesh_idx|int]|string|lower %}
M221 S{(printer["gcode_macro _SetDynamicExtRate"].mesh_extrate[mesh_idx|int]|float * 100)|int}
{% set this1.pa_unset = false %}
{% set this2.matches = this2.matches + 1 %}
{% endif %}
{% endfor %}
{% if this1.pa_unset %}
{% if printer["gcode_macro _gcodeproc_vars"].gcodeproc_verb_error %}
M118 >>> _SetDynamicExtRate|UNKNOWN MESH: {params.MESH|string|lower} <<<
{% endif %}
M300 S200 P50
{% endif %}
{% if this2.matches > 1 %}
{% if printer["gcode_macro _gcodeproc_vars"].gcodeproc_verb_error %}
M118 >>> _SetDynamicExtRate|Multiple matches on MESH: {params.MESH|string|lower} - matched {this2.matches} times <<<
{% endif %}
M300 S200 P50
{% endif %}
{% if printer["gcode_macro _gcodeproc_vars"].gcodeproc_verb_codeflow %}  M118 >>> _SetDynamicExtRate End <<< {% endif %}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_SetDynamicExtRate {% endif %}
printer.configfile.config['gcode_macro _SetDynamicExtRate'].variable_mesh_extrate : [1.0,			1.0,			1.0,						1.0,					1.0,			1.0,			1.0,				1.0,		1.0,				1.0,			1.0,			1.0,				1.0,							1.0,			1.0,		1.0	]
printer.configfile.config['gcode_macro _SetDynamicExtRate'].variable_mesh_name : ["Unknown",	"Perimeter",	"External perimeter",	"Overhang perimeter",	"Internal infill",	"Solid infill",	"Top solid infill",	"Ironing",	"Bridge infill",	"Gap fill",		"Skirt/Brim",	"Support material",	"Support material interface",	"Wipe tower",	"Custom",	"Mixed"		]
printer.configfile.config['gcode_macro _SetDynamicExtRate'].description : Used to set klipper's Extrusion Rate Multiplier based on specific mesh types passed in gcode
printer.configfile.config['gcode_macro go_relative'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=go_relative func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> RELATIVE <<< {% endif %}
G91
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=go_relative {% endif %}
printer.configfile.config['gcode_macro go_relative'].description : does a G91 - just for readability's sake
printer.configfile.config['gcode_macro _HOURMETER_ON'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_HOURMETER_ON func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _HOURMETER_ON <<< {% endif %}
SET_PIN PIN=_hourmeter VALUE=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_HOURMETER_ON {% endif %}
printer.configfile.config['gcode_macro _HOURMETER_ON'].description : Turn Hour Meter On
printer.configfile.config['gcode_macro _park_head'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_park_head func_params='"{rawparams|string}"'  {% endif %}
{% set th = printer.toolhead %}
{% set entry_ptr_state = params.ENTRY|string %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_debug %} M118 _____ _park_head | entry_ptr_state:{entry_ptr_state} _____ {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
M118 >>> _park_head - entry_ptr_state: {entry_ptr_state} <<<
{% endif %}
{% set x_park = th.axis_maximum.x//2|float %}
{% set y_park = th.axis_maximum.y|float %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_debug %} M118 _____ _park_head | x_park:{x_park} y_park:{y_park} _____ {% endif %}
{% set max_z = th.axis_maximum.z|float %}
{% set act_z = th.position.z|float %}
{% if act_z < (max_z - 20.0) %}
{% set max_deltaz = 20.0 %}
{% else %}
{% set max_deltaz = max_z - act_z %}
{% endif %}
{% set tgt_deltaz = svv.maxz|float + 15.0 - act_z %}
{% set min_deltaz = svv.maxz|float + 10.0 - act_z %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_debug %}
M118 >>> MaxZ: {svv.maxz} MaxDeltaZ: {max_deltaz} TgtDeltaZ: {tgt_deltaz} MinDeltaZ: {min_deltaz} <<<
{% endif %}
{% if tgt_deltaz > max_deltaz %}
{% set final_deltaz = min_deltaz %}
{% else %}
{% set final_deltaz = tgt_deltaz %}
{% endif %}
{% if entry_ptr_state|string == "print_paused" %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_debug %} M118 _____ _park_head print_paused | G0 X{x_park} Y{y_park} F15000 _____ {% endif %}
G0 X{x_park} Y{y_park} F15000
{% endif %}
go_relative
G1 Z{final_deltaz} F900
go_absolute
{% if entry_ptr_state|string == "print_ending" or entry_ptr_state|string == "print_started" or entry_ptr_state|string == "print_resumed" or entry_ptr_state|string == "print_cancelling" %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_debug %} M118 _____ _park_head B | G0 X{x_park} Y{y_park} F15000 _____ {% endif %}
G0 X{x_park} Y{y_park} F15000
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_park_head {% endif %}
printer.configfile.config['gcode_macro _park_head'].description : procs for post canx/end parking of heads
printer.configfile.config['temperature_fan Exhaust'].control : watermark
printer.configfile.config['temperature_fan Exhaust'].sensor_pin : PF6
printer.configfile.config['temperature_fan Exhaust'].target_temp : 60.0
printer.configfile.config['temperature_fan Exhaust'].pin : PD14
printer.configfile.config['temperature_fan Exhaust'].off_below : 0.0
printer.configfile.config['temperature_fan Exhaust'].shutdown_speed : 0.0
printer.configfile.config['temperature_fan Exhaust'].sensor_type : Chamber
printer.configfile.config['temperature_fan Exhaust'].max_speed : 1.0
printer.configfile.config['temperature_fan Exhaust'].max_power : 1.0
printer.configfile.config['temperature_fan Exhaust'].kick_start_time : 0.1
printer.configfile.config['temperature_fan Exhaust'].hardware_pwm : False
printer.configfile.config['temperature_fan Exhaust'].min_temp : 10
printer.configfile.config['temperature_fan Exhaust'].gcode_id : Exhaust
printer.configfile.config['temperature_fan Exhaust'].max_temp : 90
printer.configfile.config['gcode_macro ChLts_Normal'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ChLts_Normal {% endif %}
SET_LED LED=chamber_lights RED=0.5 GREEN=0.5 BLUE=0.5
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ChLts_Normal {% endif %}
printer.configfile.config.probe.samples_tolerance_retries : 3
printer.configfile.config.probe.samples : 3
printer.configfile.config.probe.pin : ^PG11
printer.configfile.config.probe.samples_result : median
printer.configfile.config.probe.sample_retract_dist : 2.0
printer.configfile.config.probe.samples_tolerance : 0.01
printer.configfile.config.probe.y_offset : 19.75
printer.configfile.config.probe.x_offset : 0
printer.configfile.config.probe.z_offset : 6.42
printer.configfile.config.probe.speed : 8.0
printer.configfile.config['gcode_macro PROBE_Z_ACCURACY'].variable_entryexit_zrate : 900
printer.configfile.config['gcode_macro PROBE_Z_ACCURACY'].rename_existing : _PROBE_Z_ACCURACY_STOCK
printer.configfile.config['gcode_macro PROBE_Z_ACCURACY'].variable_entryexit_z : 15
printer.configfile.config['gcode_macro PROBE_Z_ACCURACY'].description : adapts an undocumented FW routine to test z_endstop accuracy
printer.configfile.config['gcode_macro PROBE_Z_ACCURACY'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PROBE_Z_ACCURACY func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"pza'g"'
{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> pza'g <<< {% endif %}
_ENSURE_QGL
M117 PROBE_Z_ACCURACY
G0 Z{entryexit_z} F{entryexit_zrate}
_PROBE_Z_ACCURACY_STOCK {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
G0 Z{entryexit_z} F{entryexit_zrate}
M117
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"pza'd"'
{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>>  PZA'd <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PROBE_Z_ACCURACY {% endif %}
printer.configfile.config['heater_fan H2O_Flow'].tachometer_pin : ^pico:gpio21
printer.configfile.config['heater_fan H2O_Flow'].heater : extruder
printer.configfile.config['heater_fan H2O_Flow'].pin : pico:gpio17
printer.configfile.config['heater_fan H2O_Flow'].tachometer_poll_interval : 0.005
printer.configfile.config['heater_fan H2O_Flow'].heater_temp : 50.0
printer.configfile.config['heater_fan H2O_Flow'].fan_speed : 1.0
printer.configfile.config['heater_fan H2O_Flow'].max_power : 1.0
printer.configfile.config['heater_fan H2O_Flow'].kick_start_time : 0.1
printer.configfile.config['heater_fan H2O_Flow'].tachometer_ppr : 1
printer.configfile.config['delayed_gcode pause_alarm'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=pause_alarm func_params='"{rawparams|string}"'  {% endif %}
_PrintLED_Off
M300 P100 S3000
M300 P100 S3000
M300 P100 S3000
_PrintLED_On
UPDATE_DELAYED_GCODE ID=pause_alarm DURATION=30
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=pause_alarm {% endif %}
printer.configfile.config['delayed_gcode pause_alarm'].initial_duration : 0
printer.configfile.config['gcode_macro ERCFLts_Blue'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCFLts_Blue {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=ercf_lights RED=0 GREEN=0 BLUE=0.5
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCFLts_Blue {% endif %}
printer.configfile.config['gcode_shell_command restore_configs'].command : sh /home/pi/klipper_config/config_pull.sh
printer.configfile.config['gcode_shell_command restore_configs'].verbose : false
printer.configfile.config['gcode_shell_command restore_configs'].timeout : 600
printer.configfile.config['temperature_fan Chamber'].control : watermark
printer.configfile.config['temperature_fan Chamber'].sensor_pin : PF5
printer.configfile.config['temperature_fan Chamber'].target_temp : 40
printer.configfile.config['temperature_fan Chamber'].pin : PD15
printer.configfile.config['temperature_fan Chamber'].off_below : 0.0
printer.configfile.config['temperature_fan Chamber'].shutdown_speed : 0.0
printer.configfile.config['temperature_fan Chamber'].sensor_type : Duct
printer.configfile.config['temperature_fan Chamber'].max_speed : 1.0
printer.configfile.config['temperature_fan Chamber'].max_power : 1.0
printer.configfile.config['temperature_fan Chamber'].kick_start_time : 0.1
printer.configfile.config['temperature_fan Chamber'].hardware_pwm : False
printer.configfile.config['temperature_fan Chamber'].min_temp : 10
printer.configfile.config['temperature_fan Chamber'].gcode_id : Chamber
printer.configfile.config['temperature_fan Chamber'].max_temp : 90
printer.configfile.config['gcode_macro M300'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M300 {% endif %}
{% set S = params.S|default(1000)|int %}
{% set P = params.P|default(100)|int %}
{% if S > 0 %}
SET_PIN PIN=_BEEPER_pin VALUE=0.5 cycle_time={1.0/(S|float)}
{% endif %}
G4 P{P}
SET_PIN PIN=_BEEPER_pin VALUE=0.0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M300 {% endif %}
printer.configfile.config['gcode_macro _ercf_park_n_home'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_park_n_home func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ercf_park_n_home start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > _ercf_park_n_home Skipped - an error condition is asserted < {% endif %}
{% else %}
{% if printer["gcode_macro ERCF_HOME"].home == -1 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 _ ERCF not homed, home & park filament... _ {% endif %}
ERCF_HOME
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 _ ERCF homed, park filament _ {% endif %}
ERCF_EJECT_UNKNOW_STATE
_ERCF_UNSELECT_TOOL
{% set selector_axis_pos = printer["gcode_macro _ERCF_VAR"].colorselector[0]|float %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 >>> _ercf_park_n_home cart position -> {selector_axis_pos}mm <<< {% endif %}
MANUAL_STEPPER STEPPER=selector_stepper MOVE={selector_axis_pos} SPEED=100
{% endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ercf_park_n_home End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ercf_park_n_home {% endif %}
printer.configfile.config['gcode_macro _ercf_park_n_home'].description : unload and home
printer.configfile.config.duplicate_pin_override.pins : ercf:PA6, PG15
printer.configfile.config['gcode_macro ERCFLts_Full'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCFLts_Full {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=ercf_lights RED=1 GREEN=1 BLUE=1
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCFLts_Full {% endif %}
printer.configfile.config['filament_switch_sensor toolhead_sensor'].switch_pin : ^!PG15
printer.configfile.config['filament_switch_sensor toolhead_sensor'].event_delay : 0.1
printer.configfile.config['filament_switch_sensor toolhead_sensor'].insert_gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=toolhead_sensor_insert {% endif %}
M118 --> TH_filsw_prs
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=toolhead_sensor_insert {% endif %}
printer.configfile.config['filament_switch_sensor toolhead_sensor'].runout_gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=toolhead_sensor_runout {% endif %}
M118 --> TH_filsw_rel
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=toolhead_sensor_runout {% endif %}
printer.configfile.config['filament_switch_sensor toolhead_sensor'].pause_on_runout : False
printer.configfile.config['filament_switch_sensor toolhead_sensor'].pause_delay : 0.5
printer.configfile.config['gcode_macro ERCF_CLOG_OR_RUNOUT'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CLOG_OR_RUNOUT func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CLOG_OR_RUNOUT Start ... {% endif %}
{% if printer.ercf.encoder_pos|float != 0 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Clog detected, please check the ERCF and the printer {% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=1
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Runout detected... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].endless_spool_mode|int == 1 %}
{% if printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int >= (printer["gcode_macro _ERCF_VAR"].colorselector|length -1) %}
{% set nexttool = 0 %}
{% else %}
{% set nexttool = (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int + 1) %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Loading tool {nexttool|int} {% endif %}
SAVE_GCODE_STATE NAME=ERCF_Pre_Brush_init
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Forming filament tip and Unloading Filament... {% endif %}
go_relative
ERCF_FORM_TIP_STANDALONE
ERCF_HOME_EXTRUDER TOTAL_LENGTH={printer["gcode_macro _ERCF_VAR"].sensor_to_nozzle} STEP_LENGTH=2.0
_ERCF_SERVO_DOWN
_ercf_syncd_th_load_unload RETRACT=1
{% set ercf_params = printer.save_variables.variables %}
ERCF_SET_STEPS RATIO={ercf_params['ercf_calib_%s' % (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|string)]}
ERCF_UNLOAD LENGTH={ercf_params.ercf_calib_ref|float - printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + printer["gcode_macro _ERCF_VAR"].unload_modifier|float}
_ERCF_UNSELECT_TOOL
ERCF_LOAD_TOOL TOOL={nexttool|int}
ERCF_CHECK_IF_RESUME
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 EndlessSpool mode not enabled, please do something {% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=1
{% endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CLOG_OR_RUNOUT End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CLOG_OR_RUNOUT {% endif %}
printer.configfile.config['gcode_macro ERCF_CLOG_OR_RUNOUT'].description : Actions taken if a clog or a runout is detected by the ERCF encoder
printer.configfile.config['gcode_macro snd_'].gcode : 
printer.configfile.config['gcode_macro ChLts_Off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ChLts_Off {% endif %}
SET_LED LED=chamber_lights RED=0 GREEN=0 BLUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ChLts_Off {% endif %}
printer.configfile.config['delayed_gcode _ercf_start_carthome'].gcode : 
_ercf_park_n_home
printer.configfile.config['delayed_gcode _ercf_start_carthome'].initial_duration : 0.0
printer.configfile.config['gcode_macro ChLts_Green'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ChLts_Green {% endif %}
SET_LED LED=chamber_lights RED=0 GREEN=0.5 BLUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ChLts_Green {% endif %}
printer.configfile.config['gcode_macro wcnightmode'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=wcnightmode func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> wcnightmode <<< {% endif %}
RUN_SHELL_COMMAND CMD=wcv2_ircut_off
RUN_SHELL_COMMAND CMD=wcv2_irled_on
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=wcnightmode {% endif %}
printer.configfile.config['gcode_macro wcnightmode'].description : Enable IR LEDs/Stow IR Filter
printer.configfile.config['gcode_macro wcdaymode'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=wcdaymode func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> wcdaymode <<< {% endif %}
RUN_SHELL_COMMAND CMD=wcv2_ircut_on
RUN_SHELL_COMMAND CMD=wcv2_irled_off
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=wcdaymode {% endif %}
printer.configfile.config['gcode_macro wcdaymode'].description : Kill IR LEDs/Deploy IR Filter
printer.configfile.config.respond.default_type : command
printer.configfile.config['gcode_macro _check_bounds'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_check_bounds func_params='"{rawparams|string}"'  {% endif %}
{% set H2O_Flow_RPM = printer['heater_fan H2O_Flow'].rpm %}
{% set H2O_Pump_RPM = printer['heater_fan H2O_Pump'].rpm %}
{% set H2O_RadFan_RPM = printer['heater_fan H2O_RadFan'].rpm %}
{% set H2O_Temp = printer['temperature_sensor Hotend_H2O'].temperature %}
{% if printer.extruder.target > 0 and (
(H2O_Flow_RPM 	>	printer["gcode_macro _bounds_vars"].h2o_flow_rpm_max)		or
(H2O_Flow_RPM 	<	printer["gcode_macro _bounds_vars"].h2o_flow_rpm_min)		or
(H2O_Pump_RPM 	>	printer["gcode_macro _bounds_vars"].h2o_pump_rpm_max)		or
(H2O_Pump_RPM 	<	printer["gcode_macro _bounds_vars"].h2o_pump_rpm_min)		or
(H2O_RadFan_RPM	>	printer["gcode_macro _bounds_vars"].h2o_radfan_rpm_max)		or
(H2O_RadFan_RPM	<	printer["gcode_macro _bounds_vars"].h2o_radfan_rpm_min)		or
(H2O_Temp		>	printer["gcode_macro _bounds_vars"].h2o_temp_max)			or
(H2O_Temp		<	printer["gcode_macro _bounds_vars"].h2o_temp_min)
) %}
M118 ... H2O cooling parameters Exceedance ALERT
_emit_hho_parameters
_start_bounds_alarm
M118 Pausing to enable resolution of H2O cooling parameters Exceedance
pause
{% else %}
M118 ... H2O cooling parameters OK
{% if params.REPORT|default(0) %}
_emit_hho_parameters
{% endif %}
_stop_bounds_alarm
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_check_bounds {% endif %}
printer.configfile.config['gcode_macro _check_bounds'].description : runtime (during printing) proc to check various parameters and initiate a pause & bound_alarm on an exceedence
printer.configfile.config['gcode_macro reset_noz_cam'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=reset_noz_cam {% endif %}
RUN_SHELL_COMMAND CMD=set_cam_config
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=reset_noz_cam {% endif %}
printer.configfile.config['gcode_macro sng_imperialmarch'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_imperialmarch {% endif %}
M117 Imperial March
M3001 S195.998 P250
M3001 S195.998 P250
M3001 S195.998 P250
M3001 S155.563 P125
G4 P62.5
M3001 S233.082 P62.5
M3001 S195.998 P250
M3001 S155.563 P125
G4 P62.5
M3001 S233.082 P62.5
M3001 S195.998 P500
M3001 S293.665 P250
M3001 S293.665 P250
M3001 S293.665 P250
M3001 S311.127 P125
G4 P62.5
M3001 S246.942 P62.5
M3001 S184.997 P250
M3001 S155.563 P125
G4 P62.5
M3001 S233.082 P62.5
M3001 S195.998 P500
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_imperialmarch {% endif %}
printer.configfile.config.virtual_sdcard.path : /home/pi/gcode_files
printer.configfile.config['gcode_macro _scrub_vars'].variable_scrub_verb_codeflow : 0
printer.configfile.config['gcode_macro _scrub_vars'].description : nozzle scrub vars macro
printer.configfile.config['gcode_macro _scrub_vars'].variable_scrub_err_flag : 0
printer.configfile.config['gcode_macro _scrub_vars'].variable_scrub_verb_debug : 0
printer.configfile.config['gcode_macro _scrub_vars'].variable_scrub_verb_error : 1
printer.configfile.config['gcode_macro _scrub_vars'].variable_scrub_verb_status : 0
printer.configfile.config['gcode_macro _scrub_vars'].variable_scrub_verb_info : 0
printer.configfile.config['gcode_macro _scrub_vars'].gcode : 
printer.configfile.config['gcode_macro snd_PrintPause'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_PrintPause {% endif %}
sng_startup
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_PrintPause {% endif %}
printer.configfile.config['gcode_shell_command wcv2_ircut_on'].command : curl -d value=1 http://10.0.0.61:8081/api/ir_cut
printer.configfile.config['gcode_shell_command wcv2_ircut_on'].verbose : false
printer.configfile.config['gcode_shell_command wcv2_ircut_on'].timeout : 2
printer.configfile.config['neopixel lcd_lights'].pin : EXP1_6
printer.configfile.config['neopixel lcd_lights'].chain_count : 3
printer.configfile.config['neopixel lcd_lights'].initial_red : 0.5
printer.configfile.config['neopixel lcd_lights'].initial_green : 0.5
printer.configfile.config['neopixel lcd_lights'].initial_blue : 0.5
printer.configfile.config['neopixel lcd_lights'].color_order : RGB
printer.configfile.config['gcode_macro fil_ecdr_prs'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=fil_ecdr_prs {% endif %}
M118 fil_ecdr_prs
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=fil_ecdr_prs {% endif %}
printer.configfile.config['gcode_macro fil_ecdr_prs'].description : called when the fil encoder toggles closed
printer.configfile.config['delayed_gcode _scrub_module_start'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_scrub_module_start func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _scrub_module_start Start <<< {% endif %}
SAVE_VARIABLE VARIABLE=module_scrub_loaded VALUE=1
SAVE_VARIABLE VARIABLE=scrub_err_flag VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _scrub_module_start End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_scrub_module_start {% endif %}
printer.configfile.config['delayed_gcode _scrub_module_start'].initial_duration : 0.5
printer.configfile.config['gcode_macro ERCFLts_Test'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCFLts_Test {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=ercf_lights RED=0.1 GREEN=0.1 BLUE=0.5
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCFLts_Test {% endif %}
printer.configfile.config['gcode_macro _IdleLED_Off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_IdleLED_Off func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _IdleLED_Off <<< {% endif %}
SET_PIN PIN=_sw_grn_led VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_IdleLED_Off {% endif %}
printer.configfile.config['gcode_macro _IdleLED_Off'].description : Extinguish the Halo Sw Greeen LED
printer.configfile.config['gcode_macro LcdLts_Green'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=LcdLts_Green {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=lcd_lights RED=0 GREEN=0.5 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=LcdLts_Green {% endif %}
printer.configfile.config['gcode_macro ERCF_HOME_ONLY'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_HOME_ONLY func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_HOME_ONLY Start ... {% endif %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Test load filament in cart 0 {% endif %}
; ERCF_SELECT_TOOL TOOL=0
ERCF_SELECT_TOOL_dbg TOOL=0
ERCF_SET_STEPS RATIO=1.0
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Loading filament to ERCF... {% endif %}
ERCF_LOAD LENGTH={printer["gcode_macro _ERCF_VAR"].ercf_cart_load_length}
ERCF_UNLOAD LENGTH={printer["gcode_macro _ERCF_VAR"].ercf_cart_unload_length}
_ERCF_UNSELECT_TOOL
SET_GCODE_VARIABLE MACRO=ERCF_HOME VARIABLE=home VALUE=1
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Homing ERCF ended ... {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Homing ERCF failed, ERCF is paused, run "ERCF_UNLOCK" to unlock it ... {% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=1
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_HOME_ONLY End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_HOME_ONLY {% endif %}
printer.configfile.config['gcode_macro _set_HE_heating_indication'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_set_HE_heating_indication func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _set_HE_heating_indication Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF Heating {% endif %}
{% if printer.save_variables.variables.module_ledeff_loaded %}
; _set_ledeff_mode CHAIN=ercf_lights EFFECT=he_temp
{% else %}
; ERCFLts_red
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _set_HE_heating_indication End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_set_HE_heating_indication {% endif %}
printer.configfile.config['gcode_macro _set_HE_heating_indication'].description : annunciate heating taking place
printer.configfile.config['gcode_macro _klicky_check_variables_version'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_klicky_check_variables_version func_params='"{rawparams|string}"'  {% endif %}
{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}
{% if version != 1 %}
{ action_raise_error("Please update your klicky variables, there are some functionality changes") }
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_klicky_check_variables_version {% endif %}
printer.configfile.config['gcode_macro _ERCF_SERVO_DOWN'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ERCF_SERVO_DOWN func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ERCF_SERVO_DOWN Start ... {% endif %}
MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
MANUAL_STEPPER STEPPER=gear_stepper MOVE=0.5 SPEED=25 ACCEL=0 SYNC=0 NODWELL=1
SET_SERVO SERVO=ercf_servo ANGLE={printer["gcode_macro _ERCF_VAR"].servo_down_angle}
MANUAL_STEPPER STEPPER=gear_stepper MOVE=0.0 SPEED=25 ACCEL=0 SYNC=0
MANUAL_STEPPER STEPPER=gear_stepper MOVE=-0.5 SPEED=25 ACCEL=0 SYNC=0
MANUAL_STEPPER STEPPER=gear_stepper MOVE=0.0 SPEED=25 ACCEL=0 NODWELL=1
SET_SERVO SERVO=ercf_servo WIDTH=0.0
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ERCF_SERVO_DOWN End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ERCF_SERVO_DOWN {% endif %}
printer.configfile.config['gcode_macro _ERCF_SERVO_DOWN'].description : Engage the ERCF gear & do a wiggle, then a buzz to ensure drive/idler gear tooth meshing
printer.configfile.config['bed_mesh COLD_KLICKY'].tension : 0.2
printer.configfile.config['bed_mesh COLD_KLICKY'].min_x : 40.0
printer.configfile.config['bed_mesh COLD_KLICKY'].min_y : 40.0
printer.configfile.config['bed_mesh COLD_KLICKY'].y_count : 5
printer.configfile.config['bed_mesh COLD_KLICKY'].mesh_y_pps : 2
printer.configfile.config['bed_mesh COLD_KLICKY'].x_count : 5
printer.configfile.config['bed_mesh COLD_KLICKY'].points : 
0.003281, 0.035625, 0.063438, 0.025781, -0.020937
-0.007344, 0.030469, 0.021719, -0.021094, -0.020000
-0.035156, 0.006406, 0.000000, -0.013906, -0.055625
-0.013750, 0.044375, 0.014375, -0.021875, -0.044375
-0.032813, 0.016875, -0.002188, -0.035781, -0.036250
printer.configfile.config['bed_mesh COLD_KLICKY'].version : 1
printer.configfile.config['bed_mesh COLD_KLICKY'].algo : bicubic
printer.configfile.config['bed_mesh COLD_KLICKY'].mesh_x_pps : 2
printer.configfile.config['bed_mesh COLD_KLICKY'].max_x : 330.0
printer.configfile.config['bed_mesh COLD_KLICKY'].max_y : 330.0
printer.configfile.config['gcode_macro snd_PrintStart'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_PrintStart {% endif %}
sng_mario
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_PrintStart {% endif %}
printer.configfile.config['gcode_macro BED_MESH_CALIBRATE'].rename_existing : _BED_MESH_CALIBRATE_STOCK
printer.configfile.config['gcode_macro BED_MESH_CALIBRATE'].description : Perform Mesh Bed Leveling with klicky automount
printer.configfile.config['gcode_macro BED_MESH_CALIBRATE'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=BED_MESH_CALIBRATE func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"bed_meshing"'
{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> bed_meshing <<< {% endif %}
{% if printer["gcode_macro _User_Variables"].verbose %} M118 Bed Mesh Calibrate {% endif %}
_ENSURE_QGL
_CheckProbe action=query
Attach_Probe
{% if printer["gcode_macro _klicky_vars"].klicky_verb_info %} M118 >>> ____ BED_MESH_CALIBRATE_STOCK {rawparams} <<< {% endif %}
_BED_MESH_CALIBRATE_STOCK {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
Dock_Probe
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"bed_meshed"'
{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> bed_meshed <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=BED_MESH_CALIBRATE {% endif %}
printer.configfile.config['gcode_macro _ercf_start_Cold_temp'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_start_Cold_temp func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ercf_start_Cold_temp Start ... {% endif %}
M104 S0
_clear_HE_heating_indication
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ercf_start_Cold_temp End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ercf_start_Cold_temp {% endif %}
printer.configfile.config['gcode_macro _ercf_start_Cold_temp'].description : set he temp to 0 and carry on (no wait)
printer.configfile.config['gcode_macro power_off_printer'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=power_off_printer func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> RUN_SHELL_COMMAND CMD=power_off_printer <<< {% endif %}
RUN_SHELL_COMMAND CMD=power_off_printer
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=power_off_printer {% endif %}
printer.configfile.config['gcode_macro power_off_printer'].description : Power off the printer
printer.configfile.config['gcode_macro _proc_end'].gcode : 
{% set svv = printer.save_variables.variables %}
{% set this1 = namespace(depth_indent = "`") %}
_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE={svv.proc_depth - 1|int}
{% if svv.proc_depth|int < 0 %}
_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow or params.FORCE|default(0)|int %}
{% for iter in range(svv.proc_depth - 1|int) %}
{% set this1.depth_indent = this1.depth_indent ~ "`" %}
{% endfor %}
{% if printer["gcode_macro _printer_vars"].show_proc_exit %}
{% if params.FUNCTION|string != "" and printer["gcode_macro _printer_vars"].show_proc_exit_details %}
M118 {this1.depth_indent ~ " [" ~ params.FUNCTION|lower ~ "] done"}
{% else %}
M118 {this1.depth_indent}
{% endif %}
{% endif %}
{% endif %}
printer.configfile.config['gcode_macro _proc_end'].description : for trace debug purposes - presents depth as leading back-tics
printer.configfile.config['gcode_macro _ERCF_UNSELECT_TOOL'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ERCF_UNSELECT_TOOL func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ERCF_UNSELECT_TOOL Start ... {% endif %}
{% set unselect_color = params.FORCED|default(1)|int %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
{% if printer["gcode_macro ERCF_HOME"].home != -1 %}
_ERCF_SERVO_UP
SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=tool_selected VALUE=-1
{% if unselect_color == 1 %}
SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=color_selected VALUE=-1
{% endif %}
ERCF_SET_STEPS RATIO=1.0
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Tool Unselected, Servo Raised {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Could not unselect tool, ERCF is not homed {% endif %}
{% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> _ERCF_UNSELECT_TOOL | _ERCF_PAUSE.is_paused = 1 <<< {% endif %}
_alert_ercf_is_paused
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ERCF_UNSELECT_TOOL End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ERCF_UNSELECT_TOOL {% endif %}
printer.configfile.config['gcode_macro _ERCF_UNSELECT_TOOL'].description : Unselect tool_selected (set to -1) and, if FORCED=1, also unselects color_selected (sets to -1) (FORCED defaults to 1 if not passed)
printer.configfile.config['gcode_macro ERCF_HOME'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_HOME func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_HOME Start ... {% endif %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
SET_GCODE_VARIABLE MACRO=ERCF_HOME VARIABLE=home VALUE=1
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 1 %}
ERCF_UNLOCK
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Homing ERCF {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} QUERY_ENDSTOPS {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_EJECT_UNKNOW_STATE <<< {% endif %}
ERCF_EJECT_UNKNOW_STATE
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_HOME_SELECTOR <<< {% endif %}
ERCF_HOME_SELECTOR
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_HOME_ONLY <<< {% endif %}
ERCF_HOME_ONLY
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_HOME End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_HOME {% endif %}
printer.configfile.config['gcode_macro ERCF_HOME'].description : Home the ERCF
printer.configfile.config['gcode_macro ERCF_HOME'].variable_home : -1
printer.configfile.config['thermistor PS'].beta : 3950
printer.configfile.config['thermistor PS'].temperature1 : 25
printer.configfile.config['thermistor PS'].resistance1 : 100000
printer.configfile.config['gcode_macro ERCFLts_Off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCFLts_Off {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=ercf_lights RED=0 GREEN=0 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCFLts_Off {% endif %}
printer.configfile.config['gcode_macro _enable_gmove_debug'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_enable_gmove_debug func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _enable_gmove_debug <<<<< {% endif %}
SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=gmove_debug VALUE=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_enable_gmove_debug {% endif %}
printer.configfile.config['gcode_macro _enable_gmove_debug'].description : used to enable gmove debug
printer.configfile.config['delayed_gcode _klicky_module_start'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_klicky_module_start func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _klicky_module_start Start <<< {% endif %}
SAVE_VARIABLE VARIABLE=module_klicky_loaded VALUE=1
SAVE_VARIABLE VARIABLE=klicky_err_flag VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _klicky_module_start End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_klicky_module_start {% endif %}
printer.configfile.config['delayed_gcode _klicky_module_start'].initial_duration : 0.5
printer.configfile.config['gcode_macro M1170'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M1170 func_params='"{rawparams|string}"'  {% endif %}
M117 L:{(params.L|int + 1)|int}/{params.T|int}|{(printer.virtual_sdcard.progress*100)|round(2,'common')}%
{% set layer_chg_msg = "L:" ~ (params.L|int + 1)|int ~ "/" ~ params.T|int ~ "|" ~ printer.virtual_sdcard.file_position ~ " | " ~ (printer.virtual_sdcard.progress*100)|round(2,'common') ~ "%: X:" ~ printer.toolhead.position.x|round(3,'common') ~ " Y:" ~ printer.toolhead.position.y|round(3,'common') ~ " Z:" ~ printer.toolhead.position.z|round(3,'common') %}
M118 {layer_chg_msg}
Save_Variable VARIABLE=last_layer_chg_msg VALUE='"{layer_chg_msg}"'
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M1170 {% endif %}
printer.configfile.config['gcode_macro M1170'].description : workaround for fixing a zero-based layer display - slicer is zero-based, gray matter is 1-based...
printer.configfile.config['gcode_macro ERCF_ENDLESSSPOOL_UNLOAD'].rename_existing : _ERCF_ENDLESSSPOOL_UNLOAD_STOCK
printer.configfile.config['gcode_macro ERCF_ENDLESSSPOOL_UNLOAD'].description : wrapper for ERCF.py fw proc to handle error conditions, verbosity
printer.configfile.config['gcode_macro ERCF_ENDLESSSPOOL_UNLOAD'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_ENDLESSSPOOL_UNLOAD func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_ENDLESSSPOOL_UNLOAD Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > ERCF_ENDLESSSPOOL_UNLOAD Skipped - an error condition is asserted < {% endif %}
{% else %}
_ERCF_ENDLESSSPOOL_UNLOAD_STOCK {rawparams}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_ENDLESSSPOOL_UNLOAD End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_ENDLESSSPOOL_UNLOAD {% endif %}
printer.configfile.config['gcode_macro sng_reveille'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_reveille {% endif %}
M117 Reveille Bitch
M3001 P125 S392
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S659
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S659
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S523
M3001 P250 S659
M3001 P125 S523
M3001 P125 S392
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S659
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S659
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S392
M3001 P333 S523
M3001 P42 S0
M3001 P125 S659
M3001 P125 S659
M3001 P125 S659
M3001 P125 S659
M3001 P125 S659
M3001 P250 S784
M3001 P125 S659
M3001 P125 S523
M3001 P125 S659
M3001 P125 S523
M3001 P125 S659
M3001 P125 S523
M3001 P250 S659
M3001 P125 S523
M3001 P125 S659
M3001 P125 S659
M3001 P125 S659
M3001 P125 S659
M3001 P125 S659
M3001 P250 S784
M3001 P125 S659
M3001 P125 S523
M3001 P125 S659
M3001 P125 S523
M3001 P125 S392
M3001 P125 S392
M3001 P333 S523
M3001 P42 S0
M3001 P125 S392
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S659
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S659
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S523
M3001 P250 S659
M3001 P125 S523
M3001 P125 S392
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S659
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S659
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S392
M3001 P333 S523
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_reveille {% endif %}
printer.configfile.config['gcode_macro PrintLED_Off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PrintLED_Off func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> PrintLED_Off <<< {% endif %}
_PrintLED_Off
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PrintLED_Off {% endif %}
printer.configfile.config['heater_fan H2O_Pump'].tachometer_pin : ^pico:gpio19
printer.configfile.config['heater_fan H2O_Pump'].heater : extruder
printer.configfile.config['heater_fan H2O_Pump'].pin : pico:gpio20
printer.configfile.config['heater_fan H2O_Pump'].tachometer_poll_interval : 0.003
printer.configfile.config['heater_fan H2O_Pump'].heater_temp : 50.0
printer.configfile.config['heater_fan H2O_Pump'].fan_speed : 1.0
printer.configfile.config['heater_fan H2O_Pump'].max_power : 1.0
printer.configfile.config['heater_fan H2O_Pump'].kick_start_time : 0.1
printer.configfile.config['heater_fan H2O_Pump'].tachometer_ppr : 2
printer.configfile.config['gcode_macro snd_PrintCancel'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_PrintCancel {% endif %}
sng_bethovene
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_PrintCancel {% endif %}
printer.configfile.config['gcode_shell_command power_on_printer'].command : curl "http://10.0.0.25/cm?cmnd=Backlog%3BDelay%200%3BPower%20ON"
printer.configfile.config['gcode_shell_command power_on_printer'].verbose : false
printer.configfile.config['gcode_shell_command power_on_printer'].timeout : 2
printer.configfile.config['gcode_macro Dock_Probe'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=Dock_Probe func_params='"{rawparams|string}"'  {% endif %}
{% set goback  = params.back|default(0) %}
{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed * 60 %}
{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed * 60 %}
{% set xydock_feedrate = printer["gcode_macro _User_Variables"].xydock_speed * 60 %}
{% set zdock_feedrate = printer["gcode_macro _User_Variables"].zdock_speed * 60 %}
{% set xyrelease_feedrate = printer["gcode_macro _User_Variables"].xyrelease_speed * 60 %}
{% set zrelease_feedrate = printer["gcode_macro _User_Variables"].zrelease_speed * 60 %}
{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
{% endif %}
{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
{% endif %}
{% if not 'xyz' in printer.toolhead.homed_axes %}
{ action_raise_error("Must Home X, Y and Z Axis First!") }
{% endif %}
_entry_point function=Dock_Probe
{% if probe_attached and not probe_lock %}
{% if verbose %} M118 Docking Probe {% endif %}
{% if printer.toolhead.position.z < safe_z %}
G0 Z{safe_z} F{z_drop_feedrate}
{% endif %}
_Umbilical_Path
{% if printer.toolhead.position.y > (docklocation_y|float - attachmove_y|float) %}
G0 Y{docklocation_y|float - attachmove_y|float} F{xytravel_feedrate}
G0 X{docklocation_x|float - attachmove_x|float} F{xytravel_feedrate}
{% else %}
G0 X{docklocation_x|float - attachmove_x|float} Y{docklocation_y|float - attachmove_y|float} F{xytravel_feedrate}
{% endif %}
{% if docklocation_z != -128 %}
G0 Z{docklocation_z|float - attachmove_z|float} F{zdock_feedrate}
{% endif %}
G0 X{docklocation_x} Y{docklocation_y} F{xydock_feedrate}
{% if docklocation_z != -128 %}
G0 Z{docklocation_z} F{zdock_feedrate}
{% endif %}
{% if docklocation_z != -128 %}
G0 Z{docklocation_z|float + dockmove_z|float} F{zrelease_feedrate}
{% endif %}
G0 X{docklocation_x|float + dockmove_x|float} Y{docklocation_y|float + dockmove_y|float} F{xyrelease_feedrate}
{% if printer.toolhead.position.z < safe_z %}
G0 Z{safe_z} F{z_drop_feedrate}
{% endif %}
_Park_Toolhead
G4 P1000
_CheckProbe action=dock
{% elif probe_lock %}
{% if verbose %} M118 Probe locked {% endif %}
_CheckProbe action=query
{% else %}
{% if verbose %} M118 Probe already docked {% endif %}
_CheckProbe action=query
{% endif %}
_exit_point function=Dock_Probe move={goback}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=Dock_Probe {% endif %}
printer.configfile.config['gcode_macro Dock_Probe'].description : Docks Klicky Probe
printer.configfile.config['gcode_macro _Probe_Lock'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_Probe_Lock func_params='"{rawparams|string}"'  {% endif %}
SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_Probe_Lock {% endif %}
printer.configfile.config['gcode_macro _Probe_Lock'].description : Locks Klicky Probe state
printer.configfile.config['gcode_macro sng_taps'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_taps {% endif %}
M117 Taps
M3001 P643 S294
M3001 P214 S294
M3001 P2571 S392
M3001 P643 S294
M3001 P214 S392
M3001 P2571 S494
M3001 P643 S294
M3001 P214 S392
M3001 P857 S494
M3001 P643 S294
M3001 P214 S392
M3001 P857 S494
M3001 P643 S294
M3001 P214 S392
M3001 P2571 S494
M3001 P643 S392
M3001 P214 S494
M3001 P1714 S587
M3001 P1714 S494
M3001 P1714 S392
M3001 P4286 S294
M3001 P643 S294
M3001 P214 S294
M3001 P6000 S392
M3001 P643 S294
M3001 P214 S294
M3001 P2571 S392
M3001 P643 S294
M3001 P214 S392
M3001 P2571 S494
M3001 P643 S294
M3001 P214 S392
M3001 P857 S494
M3001 P643 S294
M3001 P214 S392
M3001 P857 S494
M3001 P643 S294
M3001 P214 S392
M3001 P2571 S494
M3001 P643 S392
M3001 P214 S494
M3001 P1714 S587
M3001 P1714 S494
M3001 P1714 S392
M3001 P4286 S294
M3001 P643 S294
M3001 P214 S294
M3001 P6000 S392
M3001 P643 S294
M3001 P214 S294
M3001 P857 S392
M3001 P643 S294
M3001 P214 S294
M3001 P857 S392
M3001 P643 S294
M3001 P214 S392
M3001 P857 S494
M3001 P643 S294
M3001 P214 S392
M3001 P857 S494
M3001 P643 S294
M3001 P214 S392
M3001 P857 S494
M3001 P643 S294
M3001 P214 S392
M3001 P857 S494
M3001 P643 S294
M3001 P214 S392
M3001 P2571 S494
M3001 P643 S392
M3001 P214 S494
M3001 P1714 S587
M3001 P1714 S494
M3001 P1714 S392
M3001 P4286 S294
M3001 P643 S294
M3001 P214 S294
M3001 P5991 S392
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_taps {% endif %}
printer.configfile.config['gcode_macro PAUSE'].rename_existing : _PAUSE_STOCK
printer.configfile.config['gcode_macro PAUSE'].description : Pause the actual running print
printer.configfile.config['gcode_macro PAUSE'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PAUSE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Pausing <<< {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_pausing"'
{% if svv.ercf_err_flag %}
save_variable VARIABLE=pause_ercf_error VALUE=1
{% else %}
SAVE_GCODE_STATE NAME=State_Save_Pause
save_variable VARIABLE=pause_ercf_error VALUE=0
{% endif %}
_HOURMETER_OFF
_PrintLED_Off
{% if printer.save_variables.variables.module_ledeff_loaded %}
_set_ledeff_mode CHAIN=chamber_lights	EFFECT=normal	RESET=1
_set_ledeff_mode CHAIN=lcd_lights 	EFFECT=normal	RESET=1
; _set_ledeff_mode CHAIN=ercf_lights	EFFECT=off		RESET=1
; _set_ledeff_mode CHAIN=dash_lights	EFFECT=off		RESET=1
{% else %}
ChLts_Normal
LcdLts_Normal
; ERCFLts_off
; DBLts_off
{% endif %}
{% set max_x = printer.toolhead.axis_maximum.x|float %}
{% set max_y = printer.toolhead.axis_maximum.y|float %}
{% set x = params.X|default(max_x//2)|float %}
{% set y = params.Y|default(0)|float %}
{% set z = params.Z|default(20)|float %}
{% set e = params.E|default(printer["gcode_macro _printer_vars"].pause_retract_default|float)|float %}
{% set max_z = printer.toolhead.axis_maximum.z|float %}
{% set act_z = printer.toolhead.position.z|float %}
{% set lift_z = z|abs %}
{% if act_z < (max_z - lift_z) %}
{% set z_safe = lift_z %}
{% else %}
{% set z_safe = max_z - act_z %}
{% endif %}
M118 _PAUSE_STOCK @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}
_PAUSE_STOCK
go_relative	REASON="Pause Extruder Retract and Z Lift"
{% if printer.extruder.can_extrude|lower == 'true' %}
G1 E-{e} F2100 REASON="resume deretract"
{% else %}
M118 No Pause Retract as Extruder not hot enough
{% endif %}
{% if "xyz" in printer.toolhead.homed_axes %}
G1 Z{z_safe}
go_absolute	REASON="Extruder and Z Lift done, going abs for X/Y parking"
G1 X{x} Y{y} F6000
{% else %}
M118 Printer not homed
{% endif %}
go_absolute REASON="All Pause relative stuff done"
snd_PrintPause
start_pause_alarm
M118 PAUSE @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Paused <<< {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_paused"'
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PAUSE {% endif %}
printer.configfile.config['gcode_macro DBLts_Test'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=DBLts_Test {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=dash_lights RED=0.1 GREEN=0.1 BLUE=0.5
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=DBLts_Test {% endif %}
printer.configfile.config['gcode_macro _Home_Z'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_Home_Z func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"z_homing"'
{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> z_homing <<< {% endif %}
{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}
{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}
{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed * 60 %}
{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed * 60 %}
{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
_entry_point function=Home_Z
{% if not 'xy' in printer.toolhead.homed_axes %}
{ action_raise_error("Must Home X and Y Axis First!") }
{% else %}
{% if not 'z' in printer.toolhead.homed_axes %}
{% if verbose %} M118 Resetting Z position to zero {% endif %}
SET_KINEMATIC_POSITION Z=0
{% endif %}
G0 X{z_endstop_x} Y{z_endstop_y} F{xytravel_feedrate}
G28 Z0
G0 Z{safe_z} F{z_drop_feedrate}
{% endif %}
_exit_point function=Home_Z
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"z_homed"'
{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> z_homed <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_Home_Z {% endif %}
printer.configfile.config['gcode_macro save_conf'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=save_conf func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> save_conf <<< {% endif %}
SAVE_CONFIG
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=save_conf {% endif %}
printer.configfile.config['gcode_macro save_conf'].description : Execute a Save Configuration
printer.configfile.config.mcu.restart_method : command
printer.configfile.config.mcu.serial : /dev/serial/by-id/usb-Klipper_stm32f446xx_26001F00115053424E363620-if00
printer.configfile.config['gcode_macro ERCF_TEST_MOVE_GEAR'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_TEST_MOVE_GEAR func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_TEST_MOVE_GEAR Start ... {% endif %}
{% set move_length = params.LENGTH|default(0.0)|float %}
{% set move_speed = params.SPEED|default(30.0)|float %}
{% set move_accel = params.ACCEL|default(200.0)|float %}
MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
MANUAL_STEPPER STEPPER=gear_stepper MOVE={move_length|float} SPEED={move_speed|float} ACCEL={move_accel|float}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_TEST_MOVE_GEAR End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_TEST_MOVE_GEAR {% endif %}
printer.configfile.config['gcode_macro ERCF_TEST_MOVE_GEAR'].description : Move the ERCF gear
printer.configfile.config['tmc2209 stepper_z2'].sense_resistor : 0.110
printer.configfile.config['tmc2209 stepper_z2'].interpolate : False
printer.configfile.config['tmc2209 stepper_z2'].uart_pin : PF2
printer.configfile.config['tmc2209 stepper_z2'].run_current : 1.2
printer.configfile.config['tmc2209 stepper_z2'].stealthchop_threshold : 1
printer.configfile.config['tmc2209 stepper_z2'].hold_current : 0.8
printer.configfile.config['gcode_macro sng_startup'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_startup {% endif %}
M117 Startup
M3001 S1174 P125
M3001 S1174 P125
M3001 S2349 P125
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_startup {% endif %}
printer.configfile.config['gcode_macro ERCF_HOME_SELECTOR'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_HOME_SELECTOR func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_HOME_SELECTOR Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> Homing selector <<< {% endif %}
_ERCF_SERVO_UP
{% set number_of_chan=printer["gcode_macro _ERCF_VAR"].colorselector|length %}
{% set selector_length=(20.0 + 12*21.0 + (number_of_chan/3)*5.0) %}
MANUAL_STEPPER STEPPER=selector_stepper SET_POSITION=0
MANUAL_STEPPER STEPPER=selector_stepper SPEED=100 MOVE=-{selector_length|float} STOP_ON_ENDSTOP=1
MANUAL_STEPPER STEPPER=selector_stepper SET_POSITION=0
MANUAL_STEPPER STEPPER=selector_stepper SPEED=100 MOVE=5.0
MANUAL_STEPPER STEPPER=selector_stepper SPEED=10 MOVE=-10.0 STOP_ON_ENDSTOP=1
MANUAL_STEPPER STEPPER=selector_stepper SET_POSITION=0
SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=tool_selected VALUE=-1
SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=color_selected VALUE=-1
SAVE_VARIABLE VARIABLE=ercf_selector_homed VALUE=1
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_HOME_SELECTOR End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_HOME_SELECTOR {% endif %}
printer.configfile.config['gcode_macro ERCF_HOME_SELECTOR'].description : Home the ERCF selector
printer.configfile.config['gcode_macro _ENSURE_HOMED'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ENSURE_HOMED func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> ENSURING HOMED <<< {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"checking_home"'
{% if "z" not in printer.toolhead.homed_axes %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 Homing {% endif %}
G28
SAVE_VARIABLE VARIABLE=z_axis_cal VALUE=0
{% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"home_checked"'
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> ENSURED HOMED <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ENSURE_HOMED {% endif %}
printer.configfile.config['gcode_macro _ENSURE_HOMED'].description : Home only if needed - no wasted cycles/power
printer.configfile.config.extruder.control : pid
printer.configfile.config.extruder.max_extrude_only_velocity : 7200
printer.configfile.config.extruder.rotation_distance : 34.2060721875
printer.configfile.config.extruder.max_extrude_only_distance : 200
printer.configfile.config.extruder.sensor_type : PT1000
printer.configfile.config.extruder.min_temp : 0
printer.configfile.config.extruder.enable_pin : !PD4
printer.configfile.config.extruder.pressure_advance : 0.035
printer.configfile.config.extruder.max_extrude_cross_section : 50.0
printer.configfile.config.extruder.dir_pin : PE3
printer.configfile.config.extruder.pid_kp : 17.665
printer.configfile.config.extruder.full_steps_per_rotation : 200
printer.configfile.config.extruder.heater_pin : PA2
printer.configfile.config.extruder.pid_kd : 88.107
printer.configfile.config.extruder.pid_ki : 0.885
printer.configfile.config.extruder.filament_diameter : 1.75
printer.configfile.config.extruder.gear_ratio : 7.5:1
printer.configfile.config.extruder.sensor_pin : PF4
printer.configfile.config.extruder.nozzle_diameter : 0.400
printer.configfile.config.extruder.pressure_advance_smooth_time : 0.040
printer.configfile.config.extruder.step_pin : PE2
printer.configfile.config.extruder.max_power : 1.0
printer.configfile.config.extruder.microsteps : 16
printer.configfile.config.extruder.min_extrude_temp : 170
printer.configfile.config.extruder.max_extrude_only_accel : 800
printer.configfile.config.extruder.max_temp : 375
printer.configfile.config.board_pins.aliases : 
EXP1_1=PE8, EXP1_2=PE7,
EXP1_3=PE9, EXP1_4=PE10,
EXP1_5=PE12, EXP1_6=PE13,
EXP1_7=PE14, EXP1_8=PE15,
EXP1_9=<GND>, EXP1_10=<5V>,
EXP2_1=PA6, EXP2_2=PA5,
EXP2_3=PB1, EXP2_4=PA4,
EXP2_5=PB2, EXP2_6=PA7,
EXP2_7=PC15, EXP2_8=<RST>,
EXP2_9=<GND>, EXP2_10=<5V>
printer.configfile.config['gcode_macro snd_PrintEnd'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_PrintEnd {% endif %}
sng_bethovene
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_PrintEnd {% endif %}
printer.configfile.config.adxl345.cs_pin : pico:gpio1
printer.configfile.config['gcode_macro ERCF_CALIBRATE_SINGLE'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CALIBRATE_SINGLE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CALIBRATE_SINGLE Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
{% if params.TOOL|int >= 0 and params.TOOL|int < printer["gcode_macro _ERCF_VAR"].colorselector|length %}
{% if printer["gcode_macro ERCF_HOME"].home == -1 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Homing the ERCF... {% endif %}
ERCF_HOME
{% endif %}
; ERCF_SELECT_TOOL TOOL={params.TOOL}
ERCF_SELECT_TOOL_dbg TOOL={params.TOOL}
ERCF_SET_STEPS RATIO=1.0
{% if params.TOOL|int == 0 %}
_ercf_set_eject_temp
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Calibrating reference tool {params.TOOL} {% endif %}
ERCF_LOAD LENGTH={printer["gcode_macro _ERCF_VAR"].min_bowden_length}
ERCF_HOME_EXTRUDER TOTAL_LENGTH=400 STEP_LENGTH=0.5
ERCF_CALIB_SAVE_VAR TOOL={params.TOOL}
_ercf_syncd_th_load_unload RETRACT=1 MODIFIER={printer["gcode_macro _ERCF_VAR"].ercf_dual_unload_mod|float}
ERCF_CALIB_UNLOAD
ERCF_BUZZ_GEAR_MOTOR
ERCF_IS_FILAMENT_STUCK_IN_ERCF
; _ercf_restore_he_temp
_ercf_start_Cold_temp
_ERCF_UNSELECT_TOOL
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Calibrating tool {params.TOOL} {% endif %}
ERCF_LOAD LENGTH={printer["gcode_macro _ERCF_VAR"].min_bowden_length|float - 100.0}
ERCF_CALIB_SAVE_VAR tool={params.TOOL}
ERCF_CALIB_UNLOAD LENGTH={printer["gcode_macro _ERCF_VAR"].min_bowden_length|float - 100.0 + 27.0}
{% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Tool out of range {% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=1
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CALIBRATE_SINGLE End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CALIBRATE_SINGLE {% endif %}
printer.configfile.config['gcode_macro ERCF_CALIBRATE_SINGLE'].description : Calibration of a single ERCF Tool
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_min_temp_extruder : 180
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_timeout_pause : 72000
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_ercf_verb_status : 0
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_endless_spool_mode : 0
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_ercf_verb_codeflow : 0
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_ercf_gear_move_dwell : 100
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_servo_up_angle : 30
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_ercf_verb_error : 1
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_ercf_verb_debug : 0
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_ercf_verb_motors : 0
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_servo_down_angle : 80
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_sensor_to_nozzle : 41.5
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_test_ercf_load_seq_at_print : 0
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_ercf_cart_unload_length : 68
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_sync_accel : 0
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_ercf_cart_load_length : 45
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_end_of_bowden_to_sensor : 47
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_test_ercf_load_seq_at_boot : 0
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_ercf_load_unload_dwell : 50
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_ercf_test_load_seq_len : 100
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_ercf_extruder_move_dwell : 100
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_ercf_servo_move_dwell : 200
printer.configfile.config['gcode_macro _ERCF_VAR'].gcode : 
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_ercf_verb_loadunload : 0
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_home_ercf_at_boot : 0
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_colorselector : [2.0,23.0,44.15,   70.5, 91.5, 112.0,   138.6, 159.5, 180.0,    206.5, 227.5, 248.5]
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_min_bowden_length : 945.0
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_disable_heater : 600
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_ercf_verb_info : 0
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_clog_detection : 0
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_extruder_eject_temp : 240
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_sync_feedrate : 1500
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_ercf_dual_unload_mod : 20
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_ercf_th_load_len_mod : 0
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_ercf_cart_move_dwell : 100
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_unload_modifier : 9.0
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_ercf_eject_unknow_state_len_mod : 50
printer.configfile.config['gcode_macro _ERCF_VAR'].variable_sync_speed : 25
printer.configfile.config['servo ercf_servo'].minimum_pulse_width : 0.0005
printer.configfile.config['servo ercf_servo'].maximum_pulse_width : 0.0025
printer.configfile.config['servo ercf_servo'].pin : ercf:PA5
printer.configfile.config['servo ercf_servo'].maximum_servo_angle : 150
printer.configfile.config['delayed_gcode delayed_printer_off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=delayed_printer_off func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> delayed_printer_off <<< {% endif %}
{% if printer.idle_timeout.state == "Idle" %}
RUN_SHELL_COMMAND CMD=backup_configs
RUN_SHELL_COMMAND CMD=power_off_printer
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=delayed_printer_off {% endif %}
printer.configfile.config['delayed_gcode delayed_printer_off'].initial_duration : 0.
printer.configfile.config['temperature_sensor Hotend_H2O'].min_temp : 10
printer.configfile.config['temperature_sensor Hotend_H2O'].sensor_type : H2O
printer.configfile.config['temperature_sensor Hotend_H2O'].gcode_id : H2O
printer.configfile.config['temperature_sensor Hotend_H2O'].sensor_pin : pico:gpio26
printer.configfile.config['temperature_sensor Hotend_H2O'].max_temp : 120
printer.configfile.config['gcode_macro M118'].rename_existing : M118.1
printer.configfile.config['gcode_macro M118'].description : To trap/wrap FW M118 w/ action_respond_info vs. FW's implementation (supports numeric/special char starts)
printer.configfile.config['gcode_macro M118'].gcode : 
{ action_respond_info(rawparams) }
printer.configfile.config['gcode_macro SEARCH_VARS'].gcode : 
{ action_respond_info("-------------------------------------------------------") }
{ action_respond_info("-------------------------------------------------------") }
{ action_respond_info("-------------------------------------------------------") }
{% set search = params.S|lower %}
{% set ns = namespace() %}
{% for item in printer  %}
{% if ' ' in item %}
{% set ns.path = ['printer', "['%s']" % (item), ''] %}
{% else %}
{% set ns.path = ['printer.', item, ''] %}
{% endif %}
{% if search in ns.path|lower %}
{ action_respond_info(ns.path|join) }
{% endif %}
{% if printer[item].items() %}
{% for childkey, child in printer[item].items() recursive %}
{% set ns.path = ns.path[:loop.depth|int + 1] %}
{% if ' ' in childkey %}
{% set null = ns.path.append("['%s']" % (childkey)) %}
{% else %}
{% set null = ns.path.append(".%s" % (childkey)) %}
{% endif %}
{% if child is mapping  %}
{ loop(child.items()) }
{% else %}
{% if search in ns.path|lower %}
{ action_respond_info("%s : %s" % (ns.path|join, child)) }
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
{ action_respond_info("-------------------------------------------------------") }
{ action_respond_info("-------------------------------------------------------") }
{ action_respond_info("-------------------------------------------------------") }
printer.configfile.config['gcode_macro ERCF_IS_FILAMENT_IN_EXTRUDER'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_IS_FILAMENT_IN_EXTRUDER func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_IS_FILAMENT_IN_EXTRUDER Start ... {% endif %}
{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Filament is in extruder {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Filament not in extruder {% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=1
_ERCF_PAUSE
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_IS_FILAMENT_IN_EXTRUDER End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_IS_FILAMENT_IN_EXTRUDER {% endif %}
printer.configfile.config['output_pin _sw_grn_led'].shutdown_value : 0
printer.configfile.config['output_pin _sw_grn_led'].pin : pico:gpio12
printer.configfile.config['output_pin _sw_grn_led'].value : 0
printer.configfile.config['bed_mesh HOT_KLICKY'].tension : 0.2
printer.configfile.config['bed_mesh HOT_KLICKY'].min_x : 40.0
printer.configfile.config['bed_mesh HOT_KLICKY'].min_y : 40.0
printer.configfile.config['bed_mesh HOT_KLICKY'].y_count : 5
printer.configfile.config['bed_mesh HOT_KLICKY'].mesh_y_pps : 2
printer.configfile.config['bed_mesh HOT_KLICKY'].x_count : 5
printer.configfile.config['bed_mesh HOT_KLICKY'].points : 
0.115938, 0.114063, 0.075000, 0.093594, 0.175313
0.097500, 0.040938, -0.007344, 0.026875, 0.090625
0.040313, 0.013750, 0.000000, 0.019687, 0.044062
0.098750, 0.049687, 0.012812, 0.045000, 0.078750
0.157812, 0.171719, 0.125000, 0.133594, 0.200312
printer.configfile.config['bed_mesh HOT_KLICKY'].version : 1
printer.configfile.config['bed_mesh HOT_KLICKY'].algo : bicubic
printer.configfile.config['bed_mesh HOT_KLICKY'].mesh_x_pps : 2
printer.configfile.config['bed_mesh HOT_KLICKY'].max_x : 330.0
printer.configfile.config['bed_mesh HOT_KLICKY'].max_y : 330.0
printer.configfile.config.idle_timeout.gcode : 
M84
TURN_OFF_HEATERS
UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=60
printer.configfile.config.idle_timeout.timeout : 18000
printer.configfile.config['delayed_gcode clear_display'].gcode : 
M117
printer.configfile.config['gcode_macro _SetDynamicSpdRate'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_SetDynamicSpdRate func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _gcodeproc_vars"].dynamic_spdrate_enable %}
{% if printer["gcode_macro _gcodeproc_vars"].gcodeproc_verb_codeflow %}  M118 >>> _SetDynamicSpdRate Start <<< {% endif %}
{% set this1 = namespace(pa_unset=true) %}
{% set this2 = namespace(matches=0) %}
{% for mesh_idx in range(printer["gcode_macro _SetDynamicSpdRate"].mesh_name|length) %}
{% if params.MESH|string|lower == printer["gcode_macro _SetDynamicSpdRate"].mesh_name[mesh_idx|int]|string|lower %}
M220 S{(printer["gcode_macro _SetDynamicSpdRate"].mesh_spdrate[mesh_idx|int]|float * 100)|int}
{% set this1.pa_unset = false %}
{% set this2.matches = this2.matches + 1 %}
{% endif %}
{% endfor %}
{% if this1.pa_unset %}
{% if printer["gcode_macro _gcodeproc_vars"].gcodeproc_verb_error %}
M118 >>> _SetDynamicSpdRate|UNKNOWN MESH: {params.MESH|string|lower} <<<
{% endif %}
M300 S200 P50
{% endif %}
{% if this2.matches > 1 %}
{% if printer["gcode_macro _gcodeproc_vars"].gcodeproc_verb_error %}
M118 >>> _SetDynamicSpdRate|Multiple matches on MESH: {params.MESH|string|lower} - matched {this2.matches} times <<<
{% endif %}
M300 S200 P50
{% endif %}
{% if printer["gcode_macro _gcodeproc_vars"].gcodeproc_verb_codeflow %}  M118 >>> _SetDynamicSpdRate End <<< {% endif %}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_SetDynamicSpdRate {% endif %}
printer.configfile.config['gcode_macro _SetDynamicSpdRate'].variable_mesh_name : ["Unknown",	"Perimeter",	"External perimeter",	"Overhang perimeter",	"Internal infill",	"Solid infill",	"Top solid infill",	"Ironing",	"Bridge infill",	"Gap fill",		"Skirt/Brim",	"Support material",	"Support material interface",	"Wipe tower",	"Custom",	"Mixed"		]
printer.configfile.config['gcode_macro _SetDynamicSpdRate'].description : Used to set klipper's Speed Rate Multiplier based on specific mesh types passed in gcode
printer.configfile.config['gcode_macro _SetDynamicSpdRate'].variable_mesh_spdrate : [1.0,			1.0,			1.0,						1.0,					1.0,			1.0,			1.0,				1.0,		1.0,				1.0,			1.0,			1.0,				1.0,							1.0,			1.0,		1.0	]
printer.configfile.config['gcode_macro PROBE_CALIBRATE'].rename_existing : _PROBE_CALIBRATE_STOCK
printer.configfile.config['gcode_macro PROBE_CALIBRATE'].description : Calibrate the probes z_offset with klicky automount
printer.configfile.config['gcode_macro PROBE_CALIBRATE'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PROBE_CALIBRATE func_params='"{rawparams|string}"'  {% endif %}
{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed * 60 %}
{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed * 60 %}
{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
{% if not 'xyz' in printer.toolhead.homed_axes %}
{ action_raise_error("Must Home X, Y and Z Axis First!") }
{% endif %}
{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
or printer['gcode_move'].position.y < probe_offset_y
or printer['gcode_move'].position.x > (max_x - probe_offset_x)
or printer['gcode_move'].position.x < probe_offset_x %}
{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED!") }
{% endif%}
_entry_point function=PROBE_CALIBRATE
_CheckProbe action=query
Attach_Probe back=1
_PROBE_CALIBRATE_STOCK {% for p in params
%}{'%s=%s ' % (p, params[p])}{%
endfor %}
Dock_Probe back=1
_exit_point function=PROBE_CALIBRATE move=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PROBE_CALIBRATE {% endif %}
printer.configfile.config['gcode_macro _Probe_Variables'].variable_z_endstop_x : 0
printer.configfile.config['gcode_macro _Probe_Variables'].variable_z_endstop_y : 0
printer.configfile.config['gcode_macro _Probe_Variables'].variable_probe_state : False
printer.configfile.config['gcode_macro _Probe_Variables'].variable_probe_attached : False
printer.configfile.config['gcode_macro _Probe_Variables'].variable_probe_lock : False
printer.configfile.config['gcode_macro _Probe_Variables'].gcode : 
printer.configfile.config['gcode_macro testmacro'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=testmacro func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> testmacro <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_info %} M118 sonoff_ipaddr:{ printer.save_variables.variables.sonoff_ipaddr } {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=testmacro {% endif %}
printer.configfile.config['gcode_macro testmacro'].description : testing jinja2 operations & :expressions
printer.configfile.config['gcode_macro ERCF_SELECT_TOOL'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_SELECT_TOOL func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_SELECT_TOOL Start ... {% endif %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_SELECT_TOOL | _ERCF_PAUSE.is_paused = 0 <<< {% endif %}
{% if printer["gcode_macro ERCF_HOME"].home != -1 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Select Tool {params.TOOL} ... {% endif %}
_ERCF_SERVO_UP
MANUAL_STEPPER STEPPER=selector_stepper MOVE={printer["gcode_macro _ERCF_VAR"].colorselector[params.TOOL|int]}
SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=tool_selected VALUE={params.TOOL}
SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=color_selected VALUE={params.TOOL}
_ERCF_SERVO_DOWN
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Tool {params.TOOL} Enabled {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Could not select tool, ERCF is not homed {% endif %}
{% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_SELECT_TOOL | Could not select tool, _ERCF_PAUSE.is_paused = 1 <<< {% endif %}
_alert_ercf_is_paused
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_SELECT_TOOL End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_SELECT_TOOL {% endif %}
printer.configfile.config['gcode_macro ERCF_SELECT_TOOL'].variable_color_selected : -1
printer.configfile.config['gcode_macro ERCF_SELECT_TOOL'].description : Raise servo, move the selector to params.TOOL, Lower servo, save color_/tool_selected
printer.configfile.config['gcode_macro ERCF_SELECT_TOOL'].variable_tool_selected : -1
printer.configfile.config['gcode_macro ERCF_BUZZ_GEAR_MOTOR'].rename_existing : _ERCF_BUZZ_GEAR_MOTOR_STOCK
printer.configfile.config['gcode_macro ERCF_BUZZ_GEAR_MOTOR'].description : wrapper for ERCF.py fw proc to handle error conditions, verbosity, and adds a dwell
printer.configfile.config['gcode_macro ERCF_BUZZ_GEAR_MOTOR'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_BUZZ_GEAR_MOTOR func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_BUZZ_GEAR_MOTOR Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > ERCF_BUZZ_GEAR_MOTOR Skipped - an error condition is asserted < {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 > ERCF_BUZZ_GEAR_MOTOR {rawparams} < {% endif %}
_ERCF_BUZZ_GEAR_MOTOR_STOCK {rawparams}
_gear_move_dwell
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_BUZZ_GEAR_MOTOR End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_BUZZ_GEAR_MOTOR {% endif %}
printer.configfile.config['gcode_macro ERCF_LOAD'].rename_existing : _ERCF_LOAD_STOCK
printer.configfile.config['gcode_macro ERCF_LOAD'].description : wrapper for ERCF.py fw proc to handle error conditions, verbosity, and adds a dwell
printer.configfile.config['gcode_macro ERCF_LOAD'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_LOAD func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_LOAD Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > ERCF_LOAD Skipped - an error condition is asserted < {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_loadunload %} M118 vvv ERCF_LOAD {rawparams} {% endif %}
_ERCF_LOAD_STOCK {rawparams}
_load_unload_dwell
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_LOAD End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_LOAD {% endif %}
printer.configfile.config['gcode_macro LcdLts_Normal'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=LcdLts_Normal {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=lcd_lights RED=0.5 GREEN=0.5 BLUE=0.5
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=LcdLts_Normal {% endif %}
printer.configfile.config['gcode_macro ERCF_CHANGE_TOOL_SLICER'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CHANGE_TOOL_SLICER func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CHANGE_TOOL_SLICER Start ... {% endif %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
{% if printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int != params.TOOL|int %}
save_variable VARIABLE=ercf_swaps VALUE={svv.ercf_swaps + 1}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Tower Swaps: {svv.ercf_swaps|int} {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 >>> ERCF_CHANGE_TOOL_SLICER Change Tool T{params.TOOL|int} <<< {% endif %}
M117 Change Tool T{params.TOOL|int}
ERCF_UNLOAD_TOOL
ERCF_LOAD_TOOL TOOL={params.TOOL|int}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
{% endif %}
{% else %}
_alert_ercf_is_paused
{% endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CHANGE_TOOL_SLICER End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CHANGE_TOOL_SLICER {% endif %}
printer.configfile.config['gcode_macro ERCF_CHANGE_TOOL_SLICER'].description : Perform a tool swap during a print
printer.configfile.config['gcode_macro ERCF_CALIBRATE_ENCODER'].rename_existing : _ERCF_CALIBRATE_ENCODER_STOCK
printer.configfile.config['gcode_macro ERCF_CALIBRATE_ENCODER'].description : wrapper for ERCF.py fw proc to handle error conditions, verbosity
printer.configfile.config['gcode_macro ERCF_CALIBRATE_ENCODER'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CALIBRATE_ENCODER func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CALIBRATE_ENCODER Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > ERCF_CALIBRATE_ENCODER Skipped - an error condition is asserted < {% endif %}
{% else %}
_ERCF_CALIBRATE_ENCODER_STOCK {rawparams}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CALIBRATE_ENCODER End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CALIBRATE_ENCODER {% endif %}
printer.configfile.config['gcode_macro _bounds_vars'].variable_h2o_flow_rpm_max : 1500
printer.configfile.config['gcode_macro _bounds_vars'].variable_h2o_radfan_rpm_min : 1000
printer.configfile.config['gcode_macro _bounds_vars'].description : vars for bounds checking
printer.configfile.config['gcode_macro _bounds_vars'].variable_bounds_alarm_recurse_period : 1800
printer.configfile.config['gcode_macro _bounds_vars'].gcode : 
printer.configfile.config['gcode_macro _bounds_vars'].variable_h2o_pump_rpm_min : 1500
printer.configfile.config['gcode_macro _bounds_vars'].variable_h2o_flow_rpm_min : 375
printer.configfile.config['gcode_macro _bounds_vars'].variable_bounds_check_period : 60
printer.configfile.config['gcode_macro _bounds_vars'].variable_h2o_pump_rpm_max : 4500
printer.configfile.config['gcode_macro _bounds_vars'].variable_h2o_temp_max : 100
printer.configfile.config['gcode_macro _bounds_vars'].variable_h2o_temp_min : 10
printer.configfile.config['gcode_macro _bounds_vars'].variable_bounds_alarm_duration : 1000
printer.configfile.config['gcode_macro _bounds_vars'].variable_h2o_radfan_rpm_max : 3000
printer.configfile.config['gcode_macro ERCF_GET_SELECTOR_POS'].rename_existing : _ERCF_GET_SELECTOR_POS_STOCK
printer.configfile.config['gcode_macro ERCF_GET_SELECTOR_POS'].description : wrapper for ERCF.py fw proc to handle error conditions, verbosity
printer.configfile.config['gcode_macro ERCF_GET_SELECTOR_POS'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_GET_SELECTOR_POS func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_GET_SELECTOR_POS Start ... {% endif %}
_ERCF_GET_SELECTOR_POS_STOCK {rawparams}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_GET_SELECTOR_POS End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_GET_SELECTOR_POS {% endif %}
printer.configfile.config['gcode_macro power_on_printer'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=power_on_printer func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> RUN_SHELL_COMMAND CMD=power_on_printer <<< {% endif %}
RUN_SHELL_COMMAND CMD=power_on_printer
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> RUN_SHELL_COMMAND CMD=restore_configs <<< {% endif %}
RUN_SHELL_COMMAND CMD=restore_configs
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=power_on_printer {% endif %}
printer.configfile.config['gcode_macro power_on_printer'].description : Power on the printer
printer.configfile.config['gcode_macro ChLts_Orange'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ChLts_Orange {% endif %}
SET_LED LED=chamber_lights RED=0.9 GREEN=0.3 BLUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ChLts_Orange {% endif %}
printer.configfile.config['gcode_macro ChLts_Test'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ChLts_Test {% endif %}
SET_LED LED=chamber_lights RED=0.5 GREEN=0.5 BLUE=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ChLts_Test {% endif %}
printer.configfile.config['gcode_macro Attach_Probe_Lock'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=Attach_Probe_Lock func_params='"{rawparams|string}"'  {% endif %}
Attach_Probe
_Probe_Lock
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=Attach_Probe_Lock {% endif %}
printer.configfile.config['gcode_macro Attach_Probe_Lock'].description : Attaches Klicky Probe, can only be docked after unlocking
printer.configfile.config['bed_mesh 110_Soaked_Klicky'].tension : 0.2
printer.configfile.config['bed_mesh 110_Soaked_Klicky'].min_x : 40.0
printer.configfile.config['bed_mesh 110_Soaked_Klicky'].min_y : 40.0
printer.configfile.config['bed_mesh 110_Soaked_Klicky'].y_count : 5
printer.configfile.config['bed_mesh 110_Soaked_Klicky'].mesh_y_pps : 2
printer.configfile.config['bed_mesh 110_Soaked_Klicky'].x_count : 5
printer.configfile.config['bed_mesh 110_Soaked_Klicky'].points : 
0.050000, 0.050000, 0.082500, 0.080000, 0.117500
-0.032500, 0.030000, 0.015000, 0.017500, 0.075000
-0.007500, -0.007500, 0.000000, 0.035000, 0.060000
0.010000, 0.040000, 0.050000, 0.045000, 0.070000
0.052500, 0.092500, 0.077500, 0.052500, 0.080000
printer.configfile.config['bed_mesh 110_Soaked_Klicky'].version : 1
printer.configfile.config['bed_mesh 110_Soaked_Klicky'].algo : bicubic
printer.configfile.config['bed_mesh 110_Soaked_Klicky'].mesh_x_pps : 2
printer.configfile.config['bed_mesh 110_Soaked_Klicky'].max_x : 330.0
printer.configfile.config['bed_mesh 110_Soaked_Klicky'].max_y : 330.0
printer.configfile.config['dotstar chamber_lights'].data_pin : pico:gpio11
printer.configfile.config['dotstar chamber_lights'].chain_count : 231
printer.configfile.config['dotstar chamber_lights'].initial_red : 0.0
printer.configfile.config['dotstar chamber_lights'].initial_green : 0.0
printer.configfile.config['dotstar chamber_lights'].clock_pin : pico:gpio10
printer.configfile.config['dotstar chamber_lights'].initial_blue : 0.0
printer.configfile.config['tmc2209 stepper_z1'].sense_resistor : 0.110
printer.configfile.config['tmc2209 stepper_z1'].interpolate : False
printer.configfile.config['tmc2209 stepper_z1'].uart_pin : PC7
printer.configfile.config['tmc2209 stepper_z1'].run_current : 1.2
printer.configfile.config['tmc2209 stepper_z1'].stealthchop_threshold : 1
printer.configfile.config['tmc2209 stepper_z1'].hold_current : 0.8
printer.configfile.config['tmc2209 stepper_z3'].sense_resistor : 0.110
printer.configfile.config['tmc2209 stepper_z3'].interpolate : False
printer.configfile.config['tmc2209 stepper_z3'].uart_pin : PE4
printer.configfile.config['tmc2209 stepper_z3'].run_current : 1.2
printer.configfile.config['tmc2209 stepper_z3'].stealthchop_threshold : 1
printer.configfile.config['tmc2209 stepper_z3'].hold_current : 0.8
printer.configfile.config['gcode_macro DBLts_Off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=DBLts_Off {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=dash_lights RED=0 GREEN=0 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=DBLts_Off {% endif %}
printer.configfile.config['gcode_macro _Umbilical_Path'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_Umbilical_Path func_params='"{rawparams|string}"'  {% endif %}
{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}
{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}
{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}
{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed * 60 %}
{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed * 60 %}
{% if umbilical %}
_entry_point function=Umbilical_Path
G0 X{umbilical_x} Y{umbilical_y} F{xytravel_feedrate}
G0 Z{safe_z} F{ztravel_feedrate}
_exit_point function=Umbilical_Path
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_Umbilical_Path {% endif %}
printer.configfile.config['gcode_macro ERCF_CALIB_SELECTOR'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CALIB_SELECTOR func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CALIB_SELECTOR Start ... {% endif %}
_ERCF_SERVO_UP
{% set move_length=(20.0 + (params.TOOL|int + 1)*21.0 + ((params.TOOL|int + 1)/3)*5.0) %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Measuring the selector position for tool {params.TOOL} {% endif %}
ERCF_GET_SELECTOR_POS REF={move_length|int}
ERCF_MOTORS_OFF
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CALIB_SELECTOR End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CALIB_SELECTOR {% endif %}
printer.configfile.config['gcode_macro ERCF_CALIB_SELECTOR'].description : Calibration of the selector position for a defined Tool
printer.configfile.config['thermistor Chamber'].beta : 3950
printer.configfile.config['thermistor Chamber'].temperature1 : 25
printer.configfile.config['thermistor Chamber'].resistance1 : 100000
printer.configfile.config['gcode_macro ERCF_FORM_TIP_STANDALONE'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_FORM_TIP_STANDALONE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_FORM_TIP_STANDALONE Start ... {% endif %}
{% set COOLING_TUBE_LENGTH = params.COOLING_TUBE_LENGTH|default(10) %}
{% set COOLING_TUBE_RETRACTION = params.COOLING_TUBE_RETRACTION|default(30) %}
{% set INITIAL_COOLING_SPEED = params.INITIAL_COOLING_SPEED|default(10) %}
{% set FINAL_COOLING_SPEED = params.FINAL_COOLING_SPEED|default(50) %}
{% set COOLING_MOVES = params.COOLING_MOVES|default(5) %}
{% set TOOLCHANGE_TEMP = params.TOOLCHANGE_TEMP|default(0) %}
{% set USE_SKINNYDIP = params.USE_SKINNYDIP|default(1) %}
{% set USE_FAST_SKINNYDIP = params.USE_FAST_SKINNYDIP|default(1) %}
{% set SKINNYDIP_DISTANCE = params.SKINNYDIP_DISTANCE|default(26) %}
{% set DIP_INSERTION_SPEED = params.DIP_INSERTION_SPEED|default(33) %}
{% set DIP_EXTRACTION_SPEED = params.DIP_EXTRACTION_SPEED|default(70) %}
{% set MELT_ZONE_PAUSE = params.MELT_ZONE_PAUSE|default(0) %}
{% set COOLING_ZONE_PAUSE = params.COOLING_ZONE_PAUSE|default(0) %}
{% set UNLOADING_SPEED_START = params.UNLOADING_SPEED_START|default(199) %}
{% set UNLOADING_SPEED = params.UNLOADING_SPEED|default(20) %}
{% set RAMMING_VOLUME = params.RAMMING_VOLUME|default(0) %}
{% set INITIAL_RETRACT = params.INITIAL_RETRACT|default(0) %}
{% set FINAL_EJECT = params.FINAL_EJECT|default(0) %}
go_relative
_reset_extruder
SET_PRESSURE_ADVANCE ADVANCE=0
{% set OLD_TEMP = printer.extruder.target %}
{% if INITIAL_RETRACT|int == 1 %}
G1 E-8.5000 F3000
{% endif %}
{% set RATIO = (RAMMING_VOLUME|float) /23.0 %}
G1 E{0.5784 * RATIO|float} F299
G1 E{0.5834 * RATIO|float} F302
G1 E{0.5918 * RATIO|float} F306
G1 E{0.6169 * RATIO|float} F319
G1 E{0.3393 * RATIO|float} F350
G1 E{0.3363 * RATIO|float} F350
G1 E{0.7577 * RATIO|float} F392
G1 E{0.8382 * RATIO|float} F434
G1 E{0.7776 * RATIO|float} F469
G1 E{0.1293 * RATIO|float} F469
G1 E{0.9673 * RATIO|float} F501
G1 E{1.0176 * RATIO|float} F527
G1 E{0.5956 * RATIO|float} F544
G1 E{0.4555 * RATIO|float} F544
G1 E{1.0662 * RATIO|float} F552
{% if TOOLCHANGE_TEMP|float > 0 and USE_FAST_SKINNYDIP|int == 0 %}
_ercf_wait_he_temp TEMP={TOOLCHANGE_TEMP}
{% endif %}
{% set TOTAL_RETRACTION_DISTANCE = COOLING_TUBE_RETRACTION|float + COOLING_TUBE_LENGTH|float / 2 - 15 %}
G1 E-15 F{1.0 * UNLOADING_SPEED_START|float * 60}
G1 E-{0.7 * TOTAL_RETRACTION_DISTANCE} F{1.0 * UNLOADING_SPEED|float * 60}
G1 E-{0.2 * TOTAL_RETRACTION_DISTANCE} F{0.5 * UNLOADING_SPEED|float * 60}
G1 E-{0.1 * TOTAL_RETRACTION_DISTANCE} F{0.3 * UNLOADING_SPEED|float * 60}
{% if TOOLCHANGE_TEMP|float > 0 and USE_FAST_SKINNYDIP|int == 1 %}
_ercf_start_he_temp TEMP={TOOLCHANGE_TEMP}
{% endif %}
{% set SPEED_INC = (FINAL_COOLING_SPEED|float - INITIAL_COOLING_SPEED|float) / (2 * COOLING_MOVES|float - 1) %}
{% for move in range(COOLING_MOVES|int) %}
G1 E{COOLING_TUBE_LENGTH} F{(INITIAL_COOLING_SPEED|float + SPEED_INC*move*2) * 60}
G1 E-{COOLING_TUBE_LENGTH} F{(INITIAL_COOLING_SPEED|float + SPEED_INC*(move*2+1)) * 60}
{% endfor %}
{% if TOOLCHANGE_TEMP|float > 0 and USE_FAST_SKINNYDIP|int == 0 %}
_ercf_wait_he_temp TEMP={TOOLCHANGE_TEMP}
{% endif %}
{% if USE_SKINNYDIP|int == 1 %}
G1 E{SKINNYDIP_DISTANCE} F{DIP_INSERTION_SPEED|float * 60}
G4 P{MELT_ZONE_PAUSE}
G1 E-{SKINNYDIP_DISTANCE} F{DIP_EXTRACTION_SPEED|float * 60}
G4 P{COOLING_ZONE_PAUSE}
{% endif %}
{% if TOOLCHANGE_TEMP|float > 0 %}
_ercf_start_he_temp TEMP={OLD_TEMP}
{% endif %}
{% if FINAL_EJECT|int == 1 %}
_reset_extruder
G1 E-80 F3000
{% endif %}
_reset_extruder
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_FORM_TIP_STANDALONE End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_FORM_TIP_STANDALONE {% endif %}
printer.configfile.config['gcode_macro ERCF_FORM_TIP_STANDALONE'].description : Generic tip forming macro - mocking ss, presumably
printer.configfile.config['gcode_macro _ercf_restore_he_temp'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_restore_he_temp func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ercf_restore_he_temp Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_he_temp_restore_val %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> _ercf_restore_he_temp: {svv.ercf_he_temp_restore_val} <<< {% endif %}
_ercf_wait_he_temp TEMP={svv.ercf_he_temp_restore_val}
save_variable variable=ercf_he_temp_restore_val value=0
{% else %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ercf_restore_he_temp End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ercf_restore_he_temp {% endif %}
printer.configfile.config['gcode_macro _ercf_restore_he_temp'].description : restore extruder temp after a load/unload raise to eject temp
printer.configfile.config['gcode_macro _ENSURE_QGL'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ENSURE_QGL func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _ENSURE_QGL <<< {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"checking_qgl"'
_ENSURE_HOMED
{% if not printer.quad_gantry_level.applied %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 QGL'g {% endif %}
QUAD_GANTRY_LEVEL
SAVE_VARIABLE VARIABLE=z_axis_cal VALUE=0
{% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"qgl_checked"'
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 qgl_checked {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ENSURE_QGL {% endif %}
printer.configfile.config['gcode_macro _ENSURE_QGL'].description : QGL only if needed - no wasted cycles/power
printer.configfile.config['gcode_macro _ercf_set_eject_temp'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_set_eject_temp func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ercf_set_eject_temp Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if printer.extruder.temperature < printer["gcode_macro _ERCF_VAR"].extruder_eject_temp %}
{% if svv.ercf_he_temp_restore_val %}
{% else %}
save_variable variable=ercf_he_temp_restore_val value={svv.extruder_temp_setting}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_CHANGE_TOOL HE Temp raise to eject temp <<< {% endif %}
_ercf_wait_he_temp TEMP={printer["gcode_macro _ERCF_VAR"].extruder_eject_temp}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ercf_set_eject_temp End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ercf_set_eject_temp {% endif %}
printer.configfile.config['gcode_macro _ercf_set_eject_temp'].description : set extruder to eject temp before load/unload
printer.configfile.config['gcode_macro M1181'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if params.CE|int < 0  %}
M118 Swap {svv.ercf_swaps + 1} (Initial Load): T{params.NE|int} @ {printer.virtual_sdcard.file_position} | {(printer.virtual_sdcard.progress*100)|round(2,'common')}%
{% elif params.CE == params.NE %}
{% else %}
M118 Swap {svv.ercf_swaps + 1}: T{params.CE|int} -> T{params.NE|int} @ {printer.virtual_sdcard.file_position} | {(printer.virtual_sdcard.progress*100)|round(2,'common')}%
{% endif %}
printer.configfile.config['gcode_macro M1181'].description : To implement a more expressive tool change notification (called at tool change start, hence the +1 on swaps)
printer.configfile.config['neopixel ercf_lights'].pin : pico:gpio22
printer.configfile.config['neopixel ercf_lights'].chain_count : 8
printer.configfile.config['neopixel ercf_lights'].initial_red : 0.0
printer.configfile.config['neopixel ercf_lights'].initial_green : 0.0
printer.configfile.config['neopixel ercf_lights'].initial_blue : 0.0
printer.configfile.config['neopixel ercf_lights'].color_order : GRB
printer.configfile.config['gcode_macro snd_MeshStart'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_MeshStart {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_MeshStart {% endif %}
printer.configfile.config['gcode_macro _IdleLED_On'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_IdleLED_On func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _IdleLED_On <<< {% endif %}
SET_PIN PIN=_sw_grn_led VALUE=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_IdleLED_On {% endif %}
printer.configfile.config['gcode_macro _IdleLED_On'].description : Illuminate the Halo Sw Green LED
printer.configfile.config['gcode_macro LcdLts_Full'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=LcdLts_Full {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=lcd_lights RED=1 GREEN=1 BLUE=1
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=LcdLts_Full {% endif %}
printer.configfile.config['output_pin _Alarm_pin'].shutdown_value : 0
printer.configfile.config['output_pin _Alarm_pin'].pwm : False
printer.configfile.config['output_pin _Alarm_pin'].pin : pico:gpio18
printer.configfile.config['output_pin _Alarm_pin'].value : 0
printer.configfile.config['gcode_macro _Probe_Unlock'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_Probe_Unlock func_params='"{rawparams|string}"'  {% endif %}
SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_Probe_Unlock {% endif %}
printer.configfile.config['gcode_macro _Probe_Unlock'].description : Unlocks Klicky Probe state
printer.configfile.config.pause_resume.recover_velocity : 300.0
printer.configfile.config['gcode_macro snd_PowerOn'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_PowerOn {% endif %}
sng_startup
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_PowerOn {% endif %}
printer.configfile.config['gcode_macro sng_mario'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_mario {% endif %}
M117 Mario
M3001 S1046 P150
M3001 S1318 P150
M3001 S1567 P150
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_mario {% endif %}
printer.configfile.config['thermistor H2O'].beta : 3950
printer.configfile.config['thermistor H2O'].temperature1 : 25
printer.configfile.config['thermistor H2O'].resistance1 : 10000
printer.configfile.config['gcode_macro ERCF_RESET_ENCODER_COUNTS'].rename_existing : _ERCF_RESET_ENCODER_COUNTS_STOCK
printer.configfile.config['gcode_macro ERCF_RESET_ENCODER_COUNTS'].description : wrapper for ERCF.py fw proc to handle error conditions, verbosity
printer.configfile.config['gcode_macro ERCF_RESET_ENCODER_COUNTS'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_RESET_ENCODER_COUNTS func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_RESET_ENCODER_COUNTS Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
_ERCF_RESET_ENCODER_COUNTS_STOCK {rawparams}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_RESET_ENCODER_COUNTS End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_RESET_ENCODER_COUNTS {% endif %}
printer.configfile.config['delayed_gcode _ercf_temp_ind_check_cycle'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_temp_ind_check_cycle func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ercf_temp_ind_check_cycle Start ... {% endif %}
{% if printer.extruder.target|int != printer.extruder.temperature|int %}
_set_HE_heating_indication
UPDATE_DELAYED_GCODE ID=_ercf_temp_ind_check_cycle DURATION=3
{% else %}
UPDATE_DELAYED_GCODE ID=_ercf_temp_ind_check_cycle DURATION=0
_clear_HE_heating_indication
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ercf_temp_ind_check_cycle End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ercf_temp_ind_check_cycle {% endif %}
printer.configfile.config['delayed_gcode _ercf_temp_ind_check_cycle'].initial_duration : 0
printer.configfile.config['gcode_macro _SetProbeState'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_SetProbeState func_params='"{rawparams|string}"'  {% endif %}
{% set query_probe_triggered = printer.probe.last_query %}
{% set action  = params.ACTION|default('') %}
{% if query_probe_triggered %}
SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
{% else %}
SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
{% endif %}
{% if action == 'query' %}
SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
{% endif %}
{% if not query_probe_triggered and action == 'dock' %}
{ action_raise_error("Probe dock failed!") }
{% endif %}
{% if query_probe_triggered and action == 'attach' %}
{ action_raise_error("Probe attach failed!") }
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_SetProbeState {% endif %}
printer.configfile.config['gcode_macro sng_badboys'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_badboys {% endif %}
M117 wutchyagonnadue?
M3001 P20 S100
M3001 P147 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P121 S622
M3001 P50 S0
M3001 P170 S587
M3001 P114 S523
M3001 P57 S0
M3001 P170 S587
M3001 P103 S523
M3001 P67 S0
M3001 P170 S440
M3001 P121 S523
M3001 P50 S0
M3001 P170 S440
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P662 S0
M3001 P341 S311
M3001 P170 S294
M3001 P170 S262
M3001 P170 S294
M3001 P170 S262
M3001 P341 S220
M3001 P341 S196
M3001 P341 S208
M3001 P522 S220
M3001 P160 S0
M3001 P53 S196
M3001 P117 S0
M3001 P60 S196
M3001 P281 S0
M3001 P67 S196
M3001 P103 S0
M3001 P64 S196
M3001 P107 S0
M3001 P82 S196
M3001 P430 S0
M3001 P67 S220
M3001 P103 S0
M3001 P67 S220
M3001 P273 S0
M3001 P60 S220
M3001 P110 S0
M3001 P85 S220
M3001 P85 S0
M3001 P75 S220
M3001 P437 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P124 S110
M3001 P46 S0
M3001 P20 S100
M3001 P150 S0
M3001 P170 S82
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P170 S220
M3001 P170 S196
M3001 P170 S165
M3001 P170 S196
M3001 P170 S220
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P170 S330
M3001 P92 S65
M3001 P78 S0
M3001 P170 S294
M3001 P170 S262
M3001 P170 S294
M3001 P170 S262
M3001 P170 S220
M3001 P121 S196
M3001 P50 S0
M3001 P170 S392
M3001 P92 S49
M3001 P78 S0
M3001 P170 S415
M3001 P20 S100
M3001 P150 S0
M3001 P170 S440
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P117 S110
M3001 P53 S0
M3001 P20 S100
M3001 P150 S0
M3001 P170 S82
M3001 P20 S100
M3001 P150 S0
M3001 P110 S440
M3001 P60 S0
M3001 P170 S523
M3001 P96 S622
M3001 P75 S0
M3001 P103 S587
M3001 P67 S0
M3001 P170 S587
M3001 P78 S98
M3001 P92 S0
M3001 P170 S523
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P146 S62
M3001 P25 S0
M3001 P89 S65
M3001 P82 S0
M3001 P78 S65
M3001 P92 S0
M3001 P89 S65
M3001 P82 S0
M3001 P85 S65
M3001 P85 S0
M3001 P89 S65
M3001 P82 S0
M3001 P60 S65
M3001 P110 S0
M3001 P78 S65
M3001 P92 S0
M3001 P170 S196
M3001 P85 S49
M3001 P85 S0
M3001 P170 S208
M3001 P20 S100
M3001 P150 S0
M3001 P170 S220
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P124 S110
M3001 P46 S0
M3001 P20 S100
M3001 P150 S0
M3001 P170 S82
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P149 S247
M3001 P21 S0
M3001 P170 S220
M3001 P170 S196
M3001 P170 S165
M3001 P170 S196
M3001 P170 S220
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P170 S330
M3001 P92 S65
M3001 P78 S0
M3001 P149 S294
M3001 P21 S0
M3001 P138 S262
M3001 P32 S0
M3001 P170 S294
M3001 P170 S262
M3001 P170 S220
M3001 P78 S65
M3001 P92 S0
M3001 P170 S196
M3001 P85 S49
M3001 P85 S0
M3001 P170 S208
M3001 P20 S100
M3001 P150 S0
M3001 P170 S220
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P149 S0
M3001 P2 S100
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_badboys {% endif %}
printer.configfile.config['gcode_macro LcdLts_Blue'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=LcdLts_Blue {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=lcd_lights RED=0 GREEN=0 BLUE=0.5
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=LcdLts_Blue {% endif %}
printer.configfile.config['gcode_macro _entry_point'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_entry_point func_params='"{rawparams|string}"'  {% endif %}
{% set function  = 'pre_' ~ params.FUNCTION %}
{% if printer["gcode_macro _klicky_vars"].klicky_verb_info %} M118 >>> _____ENTERING {function} <<< {% endif %}
M400
SAVE_GCODE_STATE NAME={function}
SET_GCODE_OFFSET Z=0
go_absolute
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_entry_point {% endif %}
printer.configfile.config['gcode_macro MANUAL_STEPPER'].rename_existing : _MANUAL_STEPPER_STOCK
printer.configfile.config['gcode_macro MANUAL_STEPPER'].description : wrapper for FW proc to handle error conditions, verbosity, and conditionally dwell
printer.configfile.config['gcode_macro MANUAL_STEPPER'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=MANUAL_STEPPER func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> MANUAL_STEPPER Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag and params.ENABLE|default(1)|int %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > MANUAL_STEPPER Skipped - an error condition is asserted < {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 >>> MANUAL_STEPPER {rawparams} <<< {% endif %}
_MANUAL_STEPPER_STOCK {rawparams}
{% if params.SET_POSITION|default("")|string != "" or params.ENABLE|default(1)|int == 0 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %}
M118 >>> No motor dwell: SET_POSITION:{params.SET_POSITION|default("")|string} ENABLE:{params.ENABLE|default(1)|int} SYNC:{params.SYNC|default(1)|int} <<<
{% endif %}
{% elif params.STEPPER|string|lower == "selector_stepper" and params.NODWELL|default(0)|int == 0 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 >>> a cart move cmd <<< {% endif %}
_cart_move_dwell
{% elif params.STEPPER|string|lower == "gear_stepper" and params.NODWELL|default(0)|int == 0 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 >>> a gear move cmd <<< {% endif %}
_gear_move_dwell
{% elif params.NODWELL|default(0)|int != 0 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 >>> a NODWELL cmd <<< {% endif %}
{% else %}
M118 ___ unexpected command: manual_stepper {rawparams} ___
{%endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... MANUAL_STEPPER End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=MANUAL_STEPPER {% endif %}
printer.configfile.config['gcode_macro set_startup_bedtemp'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=set_startup_bedtemp func_params='"{rawparams|string}"' {% endif %}
M140 S{printer["gcode_macro set_startup_bedtemp"].ptrstartup_bedtemp|int}
G4 P500
M300 S659.255 P125
{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
M118 Heating Bed to {printer["gcode_macro set_startup_bedtemp"].ptrstartup_bedtemp|int}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=set_startup_bedtemp {% endif %}
printer.configfile.config['gcode_macro set_startup_bedtemp'].variable_ptrstartup_bedtemp : 120
printer.configfile.config['gcode_macro set_startup_bedtemp'].variable_heat_on_start : 0
printer.configfile.config['gcode_macro set_startup_bedtemp'].description : Set bed temp at startup
printer.configfile.config['gcode_macro _ERCF_PAUSE'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ERCF_PAUSE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ERCF_PAUSE Start ... {% endif %}
SET_GCODE_VARIABLE MACRO=_ERCF_PAUSE VARIABLE=extruder_temp VALUE={printer.extruder.target}
SET_GCODE_VARIABLE MACRO=_ERCF_PAUSE VARIABLE=is_paused VALUE=1
SET_IDLE_TIMEOUT TIMEOUT={printer["gcode_macro _ERCF_VAR"].timeout_pause}
UPDATE_DELAYED_GCODE ID=disable_heater DURATION={printer["gcode_macro _ERCF_VAR"].disable_heater}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %}
M118 An issue with the ERCF has been detected and the ERCF has been PAUSED
M118 When you intervene to fix the issue, first call the "ERCF_UNLOCK" Gcode
M118 Refer to the manual before resuming the print
{% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=1
SAVE_GCODE_STATE NAME=ERCF_state
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
M118 _ERCF_Pause @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}
PAUSE
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ERCF_PAUSE End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ERCF_PAUSE {% endif %}
printer.configfile.config['gcode_macro _ERCF_PAUSE'].variable_extruder_temp : 0
printer.configfile.config['gcode_macro _ERCF_PAUSE'].description : Pause the current print and lock the ERCF operations
printer.configfile.config['gcode_macro _ERCF_PAUSE'].variable_is_paused : 0
printer.configfile.config['gcode_macro PRINT_END'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PRINT_END func_params='"{rawparams|string}"'  {% endif %}
{% set th = printer.toolhead %}
{% set entry_ptr_state = svv.last_ptr_state %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
M118 >>> Print Ending - svv.maxz:{svv.maxz} th.z:{th.position.z|float} <<<
{% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_ending"'
{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
{% set z_safe = [(th.position.z|float + 1), th.axis_maximum.z|float]|min %}
SAVE_GCODE_STATE NAME=STATE_PRINT_END
_reset_extruder
{% if printer.extruder.temperature|int >= retract_temp_min|int %}
G1 E-0.4 F3600
{% else %}
M118 No print_end retract due to Low Temp...
{% endif %}
G0 X{x_safe} Y{y_safe} Z{z_safe} F15000
M400
_park_head ENTRY='print_ending'
{% if params.UNLOAD|default(0)|int %}
ERCF_EJECT FINAL=1
{% endif %}
; {% if print_end_scrub or params.SCRUB|default(0)|int %}
;
; G0 Z15 F1500
; CLEAN_NOZZLE DX={th.axis_maximum.x//2|float}  DY={th.axis_maximum.y|float}  DZ=15.0
; {% endif %}
M107
_HOURMETER_OFF
_PrintLED_Off
RESTORE_GCODE_STATE NAME=STATE_PRINT_END
M117 Print Completed
M220 S100
M221 S100
M106 S26
M141 S40
TURN_OFF_HEATERS
CLEAR_PAUSE
M118 PRINT_END @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}
M300 P10 S1000
M300 P10 S2000
M300 P10 S3000
{% if svv.module_ledeff_loaded %}
_set_ledeff_mode CHAIN=chamber_lights	EFFECT=normal	RESET=1
_set_ledeff_mode CHAIN=lcd_lights 	EFFECT=normal	RESET=1
; _set_ledeff_mode CHAIN=ercf_lights	EFFECT=off		RESET=1
; _set_ledeff_mode CHAIN=dash_lights	EFFECT=off		RESET=1
{% else %}
ChLts_Normal
LcdLts_Normal
; ERCFLts_off
; DBLts_off
{% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_ended"'
SAVE_VARIABLE VARIABLE=final_maxz VALUE={svv.maxz}
SAVE_VARIABLE VARIABLE=maxz VALUE=0.0
SAVE_VARIABLE VARIABLE=has_wipe_tower VALUE=-1
SAVE_VARIABLE VARIABLE=v2_2526_slicer_check VALUE='"NULL"'
SAVE_VARIABLE VARIABLE=last_saved_gcode_state VALUE='"NULL"'
{% if 1 %}
{% if svv.module_ercf_loaded %}
{% if svv.ercf_swaps > 1 %}
M118 { ">>> Print Complete - " ~ svv.ercf_swaps ~ " swaps. <<<" }
M117 Done - {svv.ercf_swaps} swaps.
{% else %}
M118 { ">>> Print Complete - " ~ svv.ercf_swaps ~ " swap. <<<" }
M117 Done - {svv.ercf_swaps} swap.
{% endif %}
{% else %}
M118 >>> Print Complete <<<
M117 Print Complete
{% endif %}
{% endif %}
SAVE_VARIABLE VARIABLE=ercf_swaps_last_complete_print VALUE={svv.ercf_swaps}
SAVE_VARIABLE VARIABLE=ercf_swaps VALUE=0
printer_config_backup
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PRINT_END {% endif %}
printer.configfile.config['gcode_macro PRINT_END'].variable_print_end_scrub : False
printer.configfile.config['gcode_macro PRINT_END'].variable_retract_temp_min : 180
printer.configfile.config['gcode_macro _extruder_move_dwell'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_extruder_move_dwell func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _extruder_move_dwell Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 >>> _extruder_move_dwell {printer["gcode_macro _ERCF_VAR"].ercf_extruder_move_dwell|int}mS <<< {% endif %}
G4 P{printer["gcode_macro _ERCF_VAR"].ercf_extruder_move_dwell|int}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _extruder_move_dwell End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_extruder_move_dwell {% endif %}
printer.configfile.config['gcode_macro _extruder_move_dwell'].description : impute a dwell time to allow for the extruder movement to complete
printer.configfile.config['gcode_macro Dock_Probe_Unlock'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=Dock_Probe_Unlock func_params='"{rawparams|string}"'  {% endif %}
_Probe_Unlock
Dock_Probe
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=Dock_Probe_Unlock {% endif %}
printer.configfile.config['gcode_macro Dock_Probe_Unlock'].description : Docks Klicky Probe even if it was locked
printer.configfile.config['gcode_macro _ERCF_SERVO_UP'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ERCF_SERVO_UP func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ERCF_SERVO_UP Start ... {% endif %}
SET_SERVO SERVO=ercf_servo ANGLE={printer["gcode_macro _ERCF_VAR"].servo_up_angle}
SET_SERVO SERVO=ercf_servo WIDTH=0.0
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ERCF_SERVO_UP End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ERCF_SERVO_UP {% endif %}
printer.configfile.config['gcode_macro _ERCF_SERVO_UP'].description : Disengage the ERCF gear and disabled after raised (won't fall) to prevent power stalling
printer.configfile.config['gcode_macro _SetDynamicPA'].variable_mesh_smtm : [0.040,			0.040,			0.040,						0.040,					0.040,			0.040,			0.040,				0.040,		0.040,				0.040,			0.040,			0.040,				0.040,							0.040,			0.040,		0.040	]
printer.configfile.config['gcode_macro _SetDynamicPA'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_SetDynamicPA func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _linadv_vars"].dynamic_pa_enable %}
{% if printer["gcode_macro _linadv_vars"].linadv_verb_codeflow %}  M118 >>> _SetDynamicPA Start <<< {% endif %}
{% set sdpa = namespace(pa_unset=true) %}
{% set sdpb = namespace(matches=0) %}
{% for mesh_idx in range(printer["gcode_macro _SetDynamicPA"].mesh_name|length) %}
{% if params.MESH|string|lower == printer["gcode_macro _SetDynamicPA"].mesh_name[mesh_idx|int]|string|lower %}
SET_PRESSURE_ADVANCE ADVANCE={printer["gcode_macro _SetDynamicPA"].mesh_kval[mesh_idx|int]|float} SMOOTH_TIME={printer["gcode_macro _SetDynamicPA"].mesh_smtm[mesh_idx|int]|float}
{% set sdpa.pa_unset = false %}
{% set sdpb.matches = sdpb.matches + 1 %}
{% endif %}
{% endfor %}
{% if sdpa.pa_unset %}
{% if printer["gcode_macro _linadv_vars"].linadv_verb_error %}
M118 >>> _SetDynamicPA|UNKNOWN MESH: {params.MESH|string|lower} <<<
{% endif %}
M300 S200 P50
{% endif %}
{% if sdpb.matches > 1 %}
{% if printer["gcode_macro _linadv_vars"].linadv_verb_error %}
M118 >>> _SetDynamicPA|Multiple matches on MESH: {params.MESH|string|lower} - matched {sdpb.matches} times <<<
{% endif %}
M300 S200 P50
{% endif %}
{% if printer["gcode_macro _linadv_vars"].linadv_verb_codeflow %}  M118 >>> _SetDynamicPA End <<< {% endif %}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_SetDynamicPA {% endif %}
printer.configfile.config['gcode_macro _SetDynamicPA'].variable_mesh_name : ["Unknown",	"Perimeter",	"External perimeter",	"Overhang perimeter",	"Internal infill",	"Solid infill",	"Top solid infill",	"Ironing",	"Bridge infill",	"Gap fill",		"Skirt/Brim",	"Support material",	"Support material interface",	"Wipe tower",	"Custom",	"Mixed"		]
printer.configfile.config['gcode_macro _SetDynamicPA'].description : Used to set klipper's PA based on specific mesh types passed in gcode
printer.configfile.config['gcode_macro _SetDynamicPA'].variable_mesh_kval : [0.0,			0.0,			0.0,						0.0,					0.0,			0.0,			0.0,				0.0,		0.0,				0.0,			0.0,			0.0,				0.0,							0.0,			0.0,		0.0	]
printer.configfile.config['gcode_macro sng_mch'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_mch {% endif %}
M117 MCH
M3001 P229 S294
M3001 P214 S370
M3001 P8 S440
M3001 P201 S73
M3001 P16 S110
M3001 P5 S294
M3001 P125 S370
M3001 P104 S0
M3001 P214 S440
M3001 P10 S370
M3001 P3 S110
M3001 P3 S147
M3001 P5 S220
M3001 P211 S294
M3001 P8 S110
M3001 P201 S440
M3001 P8 S165
M3001 P10 S220
M3001 P10 S330
M3001 P125 S277
M3001 P76 S0
M3001 P211 S440
M3001 P5 S139
M3001 P3 S165
M3001 P3 S220
M3001 P5 S277
M3001 P229 S330
M3001 P5 S73
M3001 P203 S440
M3001 P3 S110
M3001 P3 S147
M3001 P5 S294
M3001 P417 S370
M3001 P16 S587
M3001 P5 S110
M3001 P203 S147
M3001 P5 S370
M3001 P10 S440
M3001 P375 S294
M3001 P21 S0
M3001 P16 S370
M3001 P8 S147
M3001 P201 S92
M3001 P214 S392
M3001 P219 S440
M3001 P3 S165
M3001 P13 S220
M3001 P5 S277
M3001 P198 S330
M3001 P201 S440
M3001 P3 S165
M3001 P16 S220
M3001 P10 S330
M3001 P198 S139
M3001 P13 S110
M3001 P206 S392
M3001 P3 S277
M3001 P10 S330
M3001 P13 S165
M3001 P125 S220
M3001 P260 S0
M3001 P5 S139
M3001 P3 S165
M3001 P219 S220
M3001 P8 S73
M3001 P193 S294
M3001 P5 S110
M3001 P250 S147
M3001 P169 S0
M3001 P3 S92
M3001 P5 S110
M3001 P232 S147
M3001 P404 S73
M3001 P3 S110
M3001 P8 S147
M3001 P10 S294
M3001 P203 S92
M3001 P229 S370
M3001 P5 S73
M3001 P198 S440
M3001 P3 S110
M3001 P13 S147
M3001 P5 S220
M3001 P3 S294
M3001 P219 S370
M3001 P211 S440
M3001 P5 S110
M3001 P3 S147
M3001 P3 S220
M3001 P5 S294
M3001 P232 S370
M3001 P8 S440
M3001 P188 S110
M3001 P5 S165
M3001 P10 S220
M3001 P16 S330
M3001 P198 S277
M3001 P201 S440
M3001 P13 S220
M3001 P5 S139
M3001 P3 S165
M3001 P3 S277
M3001 P224 S330
M3001 P3 S73
M3001 P195 S440
M3001 P3 S110
M3001 P8 S147
M3001 P10 S370
M3001 P411 S294
M3001 P21 S587
M3001 P5 S110
M3001 P10 S147
M3001 P193 S92
M3001 P5 S73
M3001 P5 S294
M3001 P5 S370
M3001 P391 S440
M3001 P5 S110
M3001 P3 S147
M3001 P216 S370
M3001 P203 S392
M3001 P10 S440
M3001 P182 S110
M3001 P21 S165
M3001 P3 S220
M3001 P13 S277
M3001 P141 S330
M3001 P57 S0
M3001 P193 S440
M3001 P5 S165
M3001 P29 S220
M3001 P8 S139
M3001 P161 S330
M3001 P26 S0
M3001 P5 S110
M3001 P193 S392
M3001 P10 S330
M3001 P3 S220
M3001 P250 S277
M3001 P154 S0
M3001 P3 S165
M3001 P125 S220
M3001 P104 S0
M3001 P8 S73
M3001 P198 S294
M3001 P10 S147
M3001 P125 S110
M3001 P286 S0
M3001 P5 S92
M3001 P3 S110
M3001 P29 S147
M3001 P5 S185
M3001 P195 S220
M3001 P393 S73
M3001 P5 S587
M3001 P5 S110
M3001 P198 S147
M3001 P219 S554
M3001 P5 S98
M3001 P188 S494
M3001 P5 S147
M3001 P65 S196
M3001 P167 S0
M3001 P8 S294
M3001 P182 S392
M3001 P5 S147
M3001 P10 S196
M3001 P242 S123
M3001 P8 S98
M3001 P177 S494
M3001 P203 S196
M3001 P16 S392
M3001 P159 S294
M3001 P10 S147
M3001 P10 S196
M3001 P125 S123
M3001 P122 S0
M3001 P10 S440
M3001 P167 S147
M3001 P10 S185
M3001 P250 S220
M3001 P156 S0
M3001 P3 S185
M3001 P10 S494
M3001 P206 S220
M3001 P5 S440
M3001 P391 S147
M3001 P3 S185
M3001 P3 S220
M3001 P195 S587
M3001 P221 S554
M3001 P8 S98
M3001 P185 S494
M3001 P3 S147
M3001 P221 S196
M3001 P5 S294
M3001 P172 S392
M3001 P5 S147
M3001 P10 S196
M3001 P221 S123
M3001 P10 S98
M3001 P164 S494
M3001 P229 S587
M3001 P10 S196
M3001 P3 S123
M3001 P125 S147
M3001 P34 S0
M3001 P10 S147
M3001 P125 S196
M3001 P120 S0
M3001 P10 S440
M3001 P188 S110
M3001 P5 S220
M3001 P5 S277
M3001 P250 S330
M3001 P151 S0
M3001 P10 S277
M3001 P5 S165
M3001 P3 S220
M3001 P206 S330
M3001 P336 S110
M3001 P29 S0
M3001 P3 S220
M3001 P10 S294
M3001 P8 S139
M3001 P172 S165
M3001 P227 S370
M3001 P8 S440
M3001 P193 S73
M3001 P5 S110
M3001 P3 S147
M3001 P10 S370
M3001 P8 S220
M3001 P198 S294
M3001 P208 S440
M3001 P5 S92
M3001 P5 S110
M3001 P3 S147
M3001 P3 S220
M3001 P5 S294
M3001 P219 S370
M3001 P10 S440
M3001 P193 S110
M3001 P5 S165
M3001 P3 S220
M3001 P8 S277
M3001 P198 S330
M3001 P182 S440
M3001 P8 S220
M3001 P8 S139
M3001 P3 S165
M3001 P3 S277
M3001 P206 S330
M3001 P8 S73
M3001 P188 S440
M3001 P3 S110
M3001 P3 S294
M3001 P10 S370
M3001 P125 S147
M3001 P234 S0
M3001 P21 S587
M3001 P5 S110
M3001 P214 S147
M3001 P3 S73
M3001 P8 S294
M3001 P354 S440
M3001 P21 S0
M3001 P5 S110
M3001 P10 S370
M3001 P125 S147
M3001 P73 S0
M3001 P195 S392
M3001 P10 S440
M3001 P174 S110
M3001 P3 S165
M3001 P29 S220
M3001 P13 S277
M3001 P185 S330
M3001 P198 S440
M3001 P10 S277
M3001 P5 S165
M3001 P174 S330
M3001 P39 S0
M3001 P172 S392
M3001 P206 S330
M3001 P13 S220
M3001 P172 S165
M3001 P125 S139
M3001 P109 S0
M3001 P18 S294
M3001 P177 S73
M3001 P3 S185
M3001 P10 S220
M3001 P5 S110
M3001 P125 S147
M3001 P242 S0
M3001 P3 S110
M3001 P16 S147
M3001 P3 S185
M3001 P206 S220
M3001 P5 S92
M3001 P16 S147
M3001 P250 S73
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_mch {% endif %}
printer.configfile.config['gcode_macro ERCF_UNLOCK'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_UNLOCK func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_UNLOCK Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Unlock the ERCF {% endif %}
stop_pause_alarm
SET_GCODE_VARIABLE MACRO=_ERCF_PAUSE VARIABLE=is_paused VALUE=0
UPDATE_DELAYED_GCODE ID=disable_heater DURATION=0
{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == False %}
_ERCF_UNSELECT_TOOL
{% else %}
_ERCF_UNSELECT_TOOL FORCED=0
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Heating to {printer["gcode_macro _ERCF_PAUSE"].extruder_temp} {% endif %}
_ercf_wait_he_temp TEMP={printer["gcode_macro _ERCF_PAUSE"].extruder_temp}
RESTORE_GCODE_STATE NAME=ERCF_state
save_variable VARIABLE=last_saved_gcode_state VALUE='"ERCF_state"'
save_variable VARIABLE=ercf_err_flag VALUE=0
M118 _ERCF_Unlock @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Refer to the manual before resuming the print {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_UNLOCK End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_UNLOCK {% endif %}
printer.configfile.config['gcode_macro ERCF_UNLOCK'].description : Unlock ERCF operations
printer.configfile.config['gcode_macro snd_MeshFail'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_MeshFail {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_MeshFail {% endif %}
printer.configfile.config['neopixel dash_lights'].pin : PB0
printer.configfile.config['neopixel dash_lights'].chain_count : 8
printer.configfile.config['neopixel dash_lights'].initial_red : 0.0
printer.configfile.config['neopixel dash_lights'].initial_green : 0.0
printer.configfile.config['neopixel dash_lights'].initial_blue : 0.0
printer.configfile.config['neopixel dash_lights'].color_order : GRB
printer.configfile.config['gcode_macro sng_auldlangsyne'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_auldlangsyne {% endif %}
M117 Auld Lang Syne
M3001 S578 P800
M3001 S783 P1200
M3001 S783 P400
M3001 S783 P800
M3001 S987 P800
M3001 S880 P1200
M3001 S783 P400
M3001 S880 P800
M3001 S987 P800
M3001 S783 P1200
M3001 S783 P400
M3001 S987 P800
M3001 S1174 P800
M3001 S1318 P1600
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_auldlangsyne {% endif %}
printer.configfile.config.firmware_retraction.retract_length : 0.4
printer.configfile.config.firmware_retraction.unretract_extra_length : 0
printer.configfile.config.firmware_retraction.unretract_speed : 22.5
printer.configfile.config.firmware_retraction.retract_speed : 45
printer.configfile.config['gcode_macro ERCF_CHANGE_TOOL_STANDALONE'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CHANGE_TOOL_STANDALONE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CHANGE_TOOL_STANDALONE Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% set th = printer.toolhead %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
_ercf_set_eject_temp
{% if printer["gcode_macro ERCF_HOME"].home == -1 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF not homed, homing it... {% endif %}
ERCF_HOME
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 >>> ERCF_CHANGE_TOOL_STANDALONE Change Tool T{params.TOOL|int} <<< {% endif %}
M117 Change Tool T{params.TOOL|int}
ERCF_LOAD_TOOL TOOL={params.TOOL|int}
{% if printer.idle_timeout.state == "Printing" and svv.has_wipe_tower == 0 %}
save_variable VARIABLE=ercf_swaps VALUE={svv.ercf_swaps + 1}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Non-Tower Swaps: {svv.ercf_swaps|int} {% endif %}
{% endif %}
{% elif printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int != params.TOOL|int %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 >>> ERCF_CHANGE_TOOL_STANDALONE Change Tool T{params.TOOL|int} <<< {% endif %}
M117 Change Tool T{params.TOOL|int}
{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_CHANGE_TOOL_STANDALONE Unloading current filament <<< {% endif %}
ERCF_EJECT
{% endif %}
ERCF_LOAD_TOOL TOOL={params.TOOL|int}
{% if printer.idle_timeout.state == "Printing" and svv.has_wipe_tower == 0 %}
save_variable VARIABLE=ercf_swaps VALUE={svv.ercf_swaps + 1}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Non-Tower Swaps: {svv.ercf_swaps|int} {% endif %}
{% endif %}
{% else %}
{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == False %}
ERCF_LOAD_TOOL TOOL={params.TOOL|int}
{% if printer.idle_timeout.state == "Printing" and svv.has_wipe_tower == 0 %}
save_variable VARIABLE=ercf_swaps VALUE={svv.ercf_swaps + 1}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Non-Tower Swaps: {svv.ercf_swaps|int} {% endif %}
{% endif %}
{% endif %}
{% endif %}
_ercf_restore_he_temp
{% if printer.idle_timeout.state == "Printing" and svv.has_wipe_tower == 0 %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
{% endif %}
{% else %}
_alert_ercf_is_paused
{% endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CHANGE_TOOL_STANDALONE End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CHANGE_TOOL_STANDALONE {% endif %}
printer.configfile.config['gcode_macro ERCF_CHANGE_TOOL_STANDALONE'].description : Perform a tool swap out of a print (... or in print if no wipe tower (MHz))
printer.configfile.config['gcode_macro snd_PrintResume'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_PrintResume {% endif %}
sng_startup
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_PrintResume {% endif %}
printer.configfile.config['gcode_macro ERCF_ENCODER_MOTION_ISSUE'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_ENCODER_MOTION_ISSUE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_ENCODER_MOTION_ISSUE Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Issue on tool {printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int} {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Checking if this is a clog or a runout... {% endif %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
_ERCF_SERVO_DOWN
ERCF_BUZZ_GEAR_MOTOR
_ERCF_SERVO_UP
ERCF_CLOG_OR_RUNOUT
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_ENCODER_MOTION_ISSUE End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_ENCODER_MOTION_ISSUE {% endif %}
printer.configfile.config['gcode_macro ERCF_ENCODER_MOTION_ISSUE'].description : Perform a test when the encoder sense an issue (check for clog then assumes a runout)
printer.configfile.config['gcode_macro _load_unload_dwell'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_load_unload_dwell func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _load_unload_dwell Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 >>> _load_unload_dwell {printer["gcode_macro _ERCF_VAR"].ercf_load_unload_dwell|int}mS <<< {% endif %}
G4 P{printer["gcode_macro _ERCF_VAR"].ercf_load_unload_dwell|int}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _load_unload_dwell End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_load_unload_dwell {% endif %}
printer.configfile.config['gcode_macro _load_unload_dwell'].description : impute a dwell time to allow for the extruder movement to complete
printer.configfile.config['delayed_gcode _recursive_bounds_alarm'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_recursive_bounds_alarm func_params='"{rawparams|string}"'  {% endif %}
{% if
printer.extruder.target > 0
%}
M118 H2O cooling parameters Exceedance ALERT
_fire_warble_alarm
UPDATE_DELAYED_GCODE ID=_recursive_bounds_alarm DURATION={printer["gcode_macro _bounds_vars"].bounds_alarm_recurse_period|float}
{% else %}
M118 H2O cooling parameters Exceedance Alert CANCELED
_stop_bounds_alarm
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_recursive_bounds_alarm {% endif %}
printer.configfile.config['delayed_gcode _recursive_bounds_alarm'].initial_duration : 0
printer.configfile.config['thermistor MHz_B3950'].resistance2 : 1366.2
printer.configfile.config['thermistor MHz_B3950'].resistance3 : 168.6
printer.configfile.config['thermistor MHz_B3950'].resistance1 : 103180.0
printer.configfile.config['thermistor MHz_B3950'].temperature2 : 150.0
printer.configfile.config['thermistor MHz_B3950'].temperature3 : 250.0
printer.configfile.config['thermistor MHz_B3950'].temperature1 : 25.0
printer.configfile.config['gcode_macro _ercf_start_he_temp'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_start_he_temp func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ercf_start_he_temp Start ... {% endif %}
M104 S{params.TEMP|int}
_ercf_temp_ind_check_cycle
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ercf_start_he_temp End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ercf_start_he_temp {% endif %}
printer.configfile.config['gcode_macro _ercf_start_he_temp'].description : set he temp to passed TEMP (int) parameter and carry on (no wait)
printer.configfile.config['delayed_gcode check_bounds'].gcode : 
M118 H2O cooling automatic parameter check...
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=check_bounds func_params='"{rawparams|string}"'  {% endif %}
_check_bounds
UPDATE_DELAYED_GCODE ID=check_bounds DURATION={printer["gcode_macro _bounds_vars"].bounds_check_period|int}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=check_bounds {% endif %}
printer.configfile.config['delayed_gcode check_bounds'].initial_duration : 0
printer.configfile.config['gcode_shell_command wcv2_ircut_off'].command : curl -d value=0 http://10.0.0.61:8081/api/ir_cut
printer.configfile.config['gcode_shell_command wcv2_ircut_off'].verbose : false
printer.configfile.config['gcode_shell_command wcv2_ircut_off'].timeout : 2
printer.configfile.config['gcode_macro ERCF_TEST_LOAD_SEQUENCE'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_TEST_LOAD_SEQUENCE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_TEST_LOAD_SEQUENCE Start ... {% endif %}
{% set loop_number = params.LOOP|default(1)|int %}
{% set use_rand = params.RAND|default(0)|int %}
{% for iteration in range(loop_number|int) %}
{% for load in range((printer["gcode_macro _ERCF_VAR"].colorselector|length)|int) %}
{% if use_rand|int == 1 %}
{% set rand_tool = range(0, printer["gcode_macro _ERCF_VAR"].colorselector|length)|random %}
M118 Test Load on Cart {rand_tool|int}
; ERCF_SELECT_TOOL TOOL={rand_tool|int}
ERCF_SELECT_TOOL_dbg TOOL={rand_tool|int}
{% else %}
M118 Test Load on Cart {load|int}
; ERCF_SELECT_TOOL TOOL={load|int}
ERCF_SELECT_TOOL_dbg TOOL={load|int}
{% endif %}
ERCF_LOAD LENGTH={printer["gcode_macro _ERCF_VAR"].ercf_test_load_seq_len}
ERCF_UNLOAD LENGTH={printer["gcode_macro _ERCF_VAR"].ercf_test_load_seq_len}
_ERCF_UNSELECT_TOOL
{% endfor %}
{% endfor %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_TEST_LOAD_SEQUENCE End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_TEST_LOAD_SEQUENCE {% endif %}
printer.configfile.config['gcode_macro ERCF_TEST_LOAD_SEQUENCE'].description : Stock - Test sequence  (wrapper proc added: ERCF_TEST_LOAD_SEQ - see _ercf_software_mods.cfg)
printer.configfile.config['gcode_macro DBLts_Orange'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=DBLts_Orange {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=dash_lights RED=0.3 GREEN=0.1 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=DBLts_Orange {% endif %}
printer.configfile.config.quad_gantry_level.retries : 3
printer.configfile.config.quad_gantry_level.horizontal_move_z : 15
printer.configfile.config.quad_gantry_level.retry_tolerance : 0.0075
printer.configfile.config.quad_gantry_level.gantry_corners : 
-60,-10
410,420
printer.configfile.config.quad_gantry_level.points : 
50,25
50,275
300,275
300,25
printer.configfile.config.quad_gantry_level.speed : 250
printer.configfile.config.quad_gantry_level.max_adjust : 4
printer.configfile.config.display.a0_pin : EXP1_4
printer.configfile.config.display.cs_pin : EXP1_3
printer.configfile.config.display.spi_software_sclk_pin : EXP2_2
printer.configfile.config.display.encoder_pins : ^EXP2_5, ^EXP2_3
printer.configfile.config.display.lcd_type : uc1701
printer.configfile.config.display.spi_software_miso_pin : EXP2_1
printer.configfile.config.display.contrast : 63
printer.configfile.config.display.spi_software_mosi_pin : EXP2_6
printer.configfile.config.display.rst_pin : EXP1_5
printer.configfile.config.display.click_pin : ^!EXP1_2
printer.configfile.config['gcode_macro sng_classical'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_classical {% endif %}
M117 Classical
M3001 S659.255 P125
M3001 S622.254 P125
M3001 S659.255 P125
M3001 S622.254 P125
M3001 S659.255 P125
M3001 S493.883 P125
M3001 S587.33 P125
M3001 S523.251 P125
M3001 S440 P500
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_classical {% endif %}
printer.configfile.config['gcode_macro _reset_extruder'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_reset_extruder func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _reset_extruder <<< {% endif %}
G92 E0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_reset_extruder {% endif %}
printer.configfile.config['gcode_macro _reset_extruder'].description : for readability - execute G92 E0
printer.configfile.config.z_calibration.max_deviation : 1.5
printer.configfile.config.z_calibration.samples_tolerance_retries : 3
printer.configfile.config.z_calibration.start_gcode : Dock_Probe_Unlock
printer.configfile.config.z_calibration.probe_switch_x : 226
printer.configfile.config.z_calibration.probe_switch_y : 330.5
printer.configfile.config.z_calibration.probe_bed_x : 175
printer.configfile.config.z_calibration.probe_bed_y : 175
printer.configfile.config.z_calibration.before_switch_gcode : Attach_Probe
printer.configfile.config.z_calibration.lift_speed : 25
printer.configfile.config.z_calibration.switch_offset : 0.675
printer.configfile.config.z_calibration.samples_tolerance : 0.01
printer.configfile.config.z_calibration.probe_nozzle_x : 231.3
printer.configfile.config.z_calibration.probe_nozzle_y : 349.0
printer.configfile.config.z_calibration.probing_retract_dist : 2
printer.configfile.config.z_calibration.samples : 5
printer.configfile.config.z_calibration.probing_first_fast : true
printer.configfile.config.z_calibration.end_gcode : Dock_Probe
printer.configfile.config.z_calibration.samples_result : median
printer.configfile.config.z_calibration.speed : 250
printer.configfile.config.z_calibration.clearance : 5
printer.configfile.config['gcode_macro _PwrLED_On'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_PwrLED_On func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _PwrLED_On <<< {% endif %}
SET_PIN PIN=_sw_blu_led VALUE=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_PwrLED_On {% endif %}
printer.configfile.config['gcode_macro _PwrLED_On'].description : Illuminate the Halo Sw Blue LED
printer.configfile.config['bed_mesh default'].tension : 0.2
printer.configfile.config['bed_mesh default'].min_x : 40.0
printer.configfile.config['bed_mesh default'].min_y : 40.0
printer.configfile.config['bed_mesh default'].y_count : 5
printer.configfile.config['bed_mesh default'].mesh_y_pps : 2
printer.configfile.config['bed_mesh default'].x_count : 5
printer.configfile.config['bed_mesh default'].points : 
0.137500, 0.090000, 0.082500, 0.122500, 0.170000
0.055000, 0.040000, 0.005000, 0.047500, 0.102500
0.052500, 0.017500, 0.000000, 0.017500, 0.090000
0.082500, 0.055000, 0.020000, 0.020000, 0.072500
0.140000, 0.155000, 0.122500, 0.105000, 0.165000
printer.configfile.config['bed_mesh default'].version : 1
printer.configfile.config['bed_mesh default'].algo : bicubic
printer.configfile.config['bed_mesh default'].mesh_x_pps : 2
printer.configfile.config['bed_mesh default'].max_x : 330.0
printer.configfile.config['bed_mesh default'].max_y : 330.0
printer.configfile.config['gcode_macro ERCF_TEST_GRIP'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_TEST_GRIP func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_TEST_GRIP Start ... {% endif %}
_ERCF_SERVO_DOWN
ERCF_MOTORS_OFF
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_TEST_GRIP End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_TEST_GRIP {% endif %}
printer.configfile.config['gcode_macro ERCF_TEST_GRIP'].description : Test the ERCF grip for a Tool
printer.configfile.config['bed_mesh UberSoaked'].tension : 0.2
printer.configfile.config['bed_mesh UberSoaked'].min_x : 40.0
printer.configfile.config['bed_mesh UberSoaked'].min_y : 40.0
printer.configfile.config['bed_mesh UberSoaked'].y_count : 5
printer.configfile.config['bed_mesh UberSoaked'].mesh_y_pps : 2
printer.configfile.config['bed_mesh UberSoaked'].x_count : 5
printer.configfile.config['bed_mesh UberSoaked'].points : 
0.167500, 0.120000, 0.085000, 0.085000, 0.155000
0.055000, 0.040000, -0.010000, 0.037500, 0.102500
0.070000, 0.010000, 0.000000, 0.027500, 0.077500
0.082500, 0.082500, 0.030000, 0.057500, 0.107500
0.157500, 0.182500, 0.152500, 0.160000, 0.217500
printer.configfile.config['bed_mesh UberSoaked'].version : 1
printer.configfile.config['bed_mesh UberSoaked'].algo : bicubic
printer.configfile.config['bed_mesh UberSoaked'].mesh_x_pps : 2
printer.configfile.config['bed_mesh UberSoaked'].max_x : 330.0
printer.configfile.config['bed_mesh UberSoaked'].max_y : 330.0
printer.configfile.config['heater_fan H2O_RadFan'].tachometer_pin : ^pico:gpio16
printer.configfile.config['heater_fan H2O_RadFan'].heater : extruder
printer.configfile.config['heater_fan H2O_RadFan'].pin : pico:gpio15
printer.configfile.config['heater_fan H2O_RadFan'].tachometer_poll_interval : 0.003
printer.configfile.config['heater_fan H2O_RadFan'].heater_temp : 50.0
printer.configfile.config['heater_fan H2O_RadFan'].fan_speed : 1.0
printer.configfile.config['heater_fan H2O_RadFan'].max_power : 1.0
printer.configfile.config['heater_fan H2O_RadFan'].kick_start_time : 0.1
printer.configfile.config['heater_fan H2O_RadFan'].tachometer_ppr : 2
printer.configfile.config['gcode_macro _print_purge'].variable_purge_len : 30
printer.configfile.config['gcode_macro _print_purge'].description : purge with return to entry position
printer.configfile.config['gcode_macro _print_purge'].variable_ooze_dwell : 1
printer.configfile.config['gcode_macro _print_purge'].variable_purge_spd : 750
printer.configfile.config['gcode_macro _print_purge'].variable_verbose : False
printer.configfile.config['gcode_macro _print_purge'].variable_wipe_zheight : 0.05
printer.configfile.config['gcode_macro _print_purge'].variable_purge_ret : 0.2
printer.configfile.config['gcode_macro _print_purge'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_print_purge func_params='"{rawparams|string}"'  {% endif %}
{% set svv = printer.save_variables.variables %}
{% set th = printer.toolhead %}
{% set z_entry = th.position.z|float %}
save_gcode_state NAME=print_purge_entry
{% if ( printer['filament_switch_sensor toolhead_sensor'].filament_detected == True and printer.extruder.temperature >= purge_temp_min ) or printer['filament_switch_sensor toolhead_sensor'].filament_detected == False %}
go_relative
G1 Z5.0 F3000
go_absolute
G1 X{range(6,70)|random} Y350 F20000
G1 Z{wipe_zheight} F3000
go_relative
M400
{% if verbose %} M118 {"Purging " ~ purge_len ~ "mm @ " ~ purge_spd ~ "mm/min..."} {% endif %}
G1 E{purge_len} F{purge_spd}
go_absolute
_reset_extruder
G1 Y340
G0 Z15
CLEAN_NOZZLE
{% else %}
M118 No Purge due to Low Temp...
{% endif %}
G0 Z{z_entry}
restore_gcode_state NAME=print_purge_entry MOVE=1 MOVE_SPEED=250
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_print_purge {% endif %}
printer.configfile.config['gcode_macro _print_purge'].variable_purge_temp_min : 180
printer.configfile.config['gcode_macro _gear_move_dwell'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_gear_move_dwell func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _gear_move_dwell Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 >>> _gear_move_dwell {printer["gcode_macro _ERCF_VAR"].ercf_gear_move_dwell|int}mS <<< {% endif %}
G4 P{printer["gcode_macro _ERCF_VAR"].ercf_gear_move_dwell|int}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _gear_move_dwell End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_gear_move_dwell {% endif %}
printer.configfile.config['gcode_macro _gear_move_dwell'].description : impute a dwell time to allow for the stepper movement to complete
printer.configfile.config['gcode_macro M104'].rename_existing : M104.1
printer.configfile.config['gcode_macro M104'].description : capture and set target HE temp
printer.configfile.config['gcode_macro M104'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M104 func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=extruder_temp_setting VALUE={params.S|int}
M104.1 {rawparams}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M104 {% endif %}
printer.configfile.config['gcode_macro M109'].rename_existing : M109.1
printer.configfile.config['gcode_macro M109'].description : capture and set target HE temp, waiting for temp attainment
printer.configfile.config['gcode_macro M109'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M109 func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=extruder_temp_setting VALUE={params.S|int}
M109.1 {rawparams}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M109 {% endif %}
printer.configfile.config['gcode_macro start_pause_alarm'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=start_pause_alarm func_params='"{rawparams|string}"'  {% endif %}
UPDATE_DELAYED_GCODE ID=pause_alarm DURATION=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=start_pause_alarm {% endif %}
printer.configfile.config['delayed_gcode _debug_module_start'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_debug_module_start func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _debug_module_start Start <<< {% endif %}
SAVE_VARIABLE VARIABLE=module_debug_loaded VALUE=1
SAVE_VARIABLE VARIABLE=debug_err_flag VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _debug_module_start End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_debug_module_start {% endif %}
printer.configfile.config['delayed_gcode _debug_module_start'].initial_duration : 0.5
printer.configfile.config['gcode_macro CANCEL_PRINT'].rename_existing : _CANCEL_PRINT_STOCK
printer.configfile.config['gcode_macro CANCEL_PRINT'].description : Cancel the actual running or paused print
printer.configfile.config['gcode_macro CANCEL_PRINT'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=CANCEL_PRINT func_params='"{rawparams|string}"'  {% endif %}
{% set th = printer.toolhead %}
{% set canx_entry_ptr_state = svv.last_ptr_state %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_debug %} M118 _____ CANCEL_PRINT | canx_entry_ptr_state: {canx_entry_ptr_state} _____ {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %}
M118 >>> Canceling Print <<<
{% endif %}
M118 CANCEL_PRINT @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_canceling"'
stop_pause_alarm
M300 P10 S3000
M300 P10 S2000
M300 P10 S1000
M106 S26
{% if svv.module_ercf_loaded %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
ERCF_EJECT FINAL=1
{% endif %}
{% endif %}
{% if svv.module_ledeff_loaded %}
_set_ledeff_mode CHAIN=chamber_lights	EFFECT=normal
_set_ledeff_mode CHAIN=lcd_lights 	EFFECT=normal
{% else %}
ChLts_Normal
LcdLts_Normal
{% endif %}
TURN_OFF_HEATERS
CLEAR_PAUSE
SDCARD_RESET_FILE
_park_head ENTRY='{canx_entry_ptr_state|string}'
_CANCEL_PRINT_STOCK
_HOURMETER_OFF
_PrintLED_Off
SAVE_VARIABLE VARIABLE=final_maxz VALUE={svv.maxz}
SAVE_VARIABLE VARIABLE=maxz VALUE=0.0
SAVE_VARIABLE VARIABLE=has_wipe_tower VALUE=-1
SAVE_VARIABLE VARIABLE=v2_2526_slicer_check VALUE='"NULL"'
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_canceled"'
SAVE_VARIABLE VARIABLE=last_saved_gcode_state VALUE='"NULL"'
{% if 1 %}
{% if svv.module_ercf_loaded %}
M118 { ">>> Print canceled after " ~ svv.ercf_swaps ~ " swaps. <<<" }
M117 Canx - {svv.ercf_swaps} swaps.
{% else %}
M118 >>> Print Canceled <<<
M117 Print Canceled
{% endif %}
{% endif %}
snd_PrintCancel
SAVE_VARIABLE VARIABLE=ercf_swaps_last_canx_print VALUE={svv.ercf_swaps}
SAVE_VARIABLE VARIABLE=ercf_swaps VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=CANCEL_PRINT {% endif %}
printer.configfile.config['gcode_macro ChLts_Blue'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ChLts_Blue {% endif %}
SET_LED LED=chamber_lights RED=0 GREEN=0 BLUE=0.5
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ChLts_Blue {% endif %}
printer.configfile.config['bed_mesh NoSoak'].tension : 0.2
printer.configfile.config['bed_mesh NoSoak'].min_x : 40.0
printer.configfile.config['bed_mesh NoSoak'].min_y : 40.0
printer.configfile.config['bed_mesh NoSoak'].y_count : 5
printer.configfile.config['bed_mesh NoSoak'].mesh_y_pps : 2
printer.configfile.config['bed_mesh NoSoak'].x_count : 5
printer.configfile.config['bed_mesh NoSoak'].points : 
-0.080000, -0.057500, -0.070000, -0.115000, -0.157500
-0.072500, -0.027500, -0.040000, -0.040000, -0.082500
-0.020000, -0.000000, 0.000000, -0.007500, -0.025000
-0.027500, 0.035000, 0.010000, 0.007500, -0.010000
-0.052500, 0.037500, 0.032500, 0.002500, -0.020000
printer.configfile.config['bed_mesh NoSoak'].version : 1
printer.configfile.config['bed_mesh NoSoak'].algo : bicubic
printer.configfile.config['bed_mesh NoSoak'].mesh_x_pps : 2
printer.configfile.config['bed_mesh NoSoak'].max_x : 330.0
printer.configfile.config['bed_mesh NoSoak'].max_y : 330.0
printer.configfile.config['gcode_macro disable_steppers'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=disable_steppers func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> disable_steppers <<< {% endif %}
SAVE_VARIABLE VARIABLE=z_axis_cal VALUE=0
SAVE_VARIABLE VARIABLE=ercf_selector_homed VALUE=0
SAVE_VARIABLE VARIABLE=maxz VALUE=0.0
M18
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=disable_steppers {% endif %}
printer.configfile.config['gcode_macro disable_steppers'].description : Disable Stepper Motors
printer.configfile.config['gcode_macro Z_Probe_Calibrate'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=Z_Probe_Calibrate func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Z_Probe_Calibrate <<< {% endif %}
_ENSURE_QGL
PROBE_CALIBRATE
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=Z_Probe_Calibrate {% endif %}
printer.configfile.config['gcode_macro Z_Probe_Calibrate'].description : hmm - just found another probe thing in klickyp-probe
printer.configfile.config['gcode_macro ERCF_HOME_EXTRUDER'].rename_existing : _ERCF_HOME_EXTRUDER_STOCK
printer.configfile.config['gcode_macro ERCF_HOME_EXTRUDER'].description : wrapper of a ERCF.py fw proc
printer.configfile.config['gcode_macro ERCF_HOME_EXTRUDER'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_HOME_EXTRUDER func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_HOME_EXTRUDER Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > ERCF_HOME_EXTRUDER Skipped - an error condition is asserted < {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_loadunload %} M118 ERCF_HOME_EXTRUDER {rawparams} {% endif %}
_ERCF_HOME_EXTRUDER_STOCK {rawparams}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_HOME_EXTRUDER End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_HOME_EXTRUDER {% endif %}
printer.configfile.config['gcode_shell_command backup_configs'].command : sh /home/pi/klipper_config/config_push.sh
printer.configfile.config['gcode_shell_command backup_configs'].verbose : false
printer.configfile.config['gcode_shell_command backup_configs'].timeout : 600
printer.configfile.config['gcode_macro _ercf_wait_he_temp'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_wait_he_temp func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ercf_wait_he_temp Start ... {% endif %}
_set_HE_heating_indication
M109 S{params.TEMP|int}
_clear_HE_heating_indication
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ercf_wait_he_temp End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ercf_wait_he_temp {% endif %}
printer.configfile.config['gcode_macro _ercf_wait_he_temp'].description : set he temp to passed TEMP (int) parameter and wait
printer.configfile.config['gcode_macro RESTORE_GCODE_STATE'].rename_existing : _RESTORE_GCODE_STATE_STOCK
printer.configfile.config['gcode_macro RESTORE_GCODE_STATE'].description : for debug purposes
printer.configfile.config['gcode_macro RESTORE_GCODE_STATE'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=RESTORE_GCODE_STATE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _debug_vars"].gcode_state_debug %} M118 >>>>> RESTORE_GCODE_STATE {rawparams} <<<<< {% endif %}
save_variable VARIABLE=last_restored_gcode_state VALUE='"{params.NAME}"'
{% if params.NAME != "PAUSE_STATE" %}
_RESTORE_GCODE_STATE_STOCK {rawparams}
{% else %}
{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 _RESTORE_GCODE_STATE_STOCK SKIPPED {% endif %}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=RESTORE_GCODE_STATE {% endif %}
printer.configfile.config['gcode_macro ERCF_TEST_LOAD_SEQ'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_TEST_LOAD_SEQ func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_TEST_LOAD_SEQ Start ... {% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=0
_ercf_park_n_home
ERCF_TEST_LOAD_SEQUENCE {rawparams}
ercf_move_cart C=0
save_variable VARIABLE=ercf_err_flag VALUE=0
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_TEST_LOAD_SEQ End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_TEST_LOAD_SEQ {% endif %}
printer.configfile.config['gcode_macro ERCF_TEST_LOAD_SEQ'].description : wrapper code for ERCF_TEST_LOAD_SEQUENCE - homes at start, homes at end
printer.configfile.settings['temperature_fan ps_fan'].control : pid
printer.configfile.settings['temperature_fan ps_fan'].pullup_resistor : 4700.0
printer.configfile.settings['temperature_fan ps_fan'].pin : PD13
printer.configfile.settings['temperature_fan ps_fan'].sensor_type : PS
printer.configfile.settings['temperature_fan ps_fan'].hardware_pwm : False
printer.configfile.settings['temperature_fan ps_fan'].min_temp : 10.0
printer.configfile.settings['temperature_fan ps_fan'].gcode_id : PS
printer.configfile.settings['temperature_fan ps_fan'].target_temp : 35.0
printer.configfile.settings['temperature_fan ps_fan'].min_speed : 0.0
printer.configfile.settings['temperature_fan ps_fan'].pid_kp : 40.0
printer.configfile.settings['temperature_fan ps_fan'].off_below : 0.1
printer.configfile.settings['temperature_fan ps_fan'].max_speed : 1.0
printer.configfile.settings['temperature_fan ps_fan'].pid_deriv_time : 2.0
printer.configfile.settings['temperature_fan ps_fan'].pid_kd : 0.1
printer.configfile.settings['temperature_fan ps_fan'].pid_ki : 0.2
printer.configfile.settings['temperature_fan ps_fan'].cycle_time : 0.01
printer.configfile.settings['temperature_fan ps_fan'].sensor_pin : PF7
printer.configfile.settings['temperature_fan ps_fan'].shutdown_speed : 1.0
printer.configfile.settings['temperature_fan ps_fan'].inline_resistor : 0.0
printer.configfile.settings['temperature_fan ps_fan'].max_power : 1.0
printer.configfile.settings['temperature_fan ps_fan'].kick_start_time : 0.1
printer.configfile.settings['temperature_fan ps_fan'].max_temp : 90.0
printer.configfile.settings['mcu ercf'].baud : 250000
printer.configfile.settings['mcu ercf'].restart_method : command
printer.configfile.settings['mcu ercf'].max_stepper_error : 2.5e-05
printer.configfile.settings['mcu ercf'].serial : /dev/serial/by-id/usb-Klipper_samd21g18a_80D0BB084134555020312E30202C18FF-if00
printer.configfile.settings.mcu.baud : 250000
printer.configfile.settings.mcu.restart_method : command
printer.configfile.settings.mcu.max_stepper_error : 2.5e-05
printer.configfile.settings.mcu.serial : /dev/serial/by-id/usb-Klipper_stm32f446xx_26001F00115053424E363620-if00
printer.configfile.settings['gcode_macro ercf_change_tool_standalone'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CHANGE_TOOL_STANDALONE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CHANGE_TOOL_STANDALONE Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% set th = printer.toolhead %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
_ercf_set_eject_temp
{% if printer["gcode_macro ERCF_HOME"].home == -1 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF not homed, homing it... {% endif %}
ERCF_HOME
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 >>> ERCF_CHANGE_TOOL_STANDALONE Change Tool T{params.TOOL|int} <<< {% endif %}
M117 Change Tool T{params.TOOL|int}
ERCF_LOAD_TOOL TOOL={params.TOOL|int}
{% if printer.idle_timeout.state == "Printing" and svv.has_wipe_tower == 0 %}
save_variable VARIABLE=ercf_swaps VALUE={svv.ercf_swaps + 1}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Non-Tower Swaps: {svv.ercf_swaps|int} {% endif %}
{% endif %}
{% elif printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int != params.TOOL|int %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 >>> ERCF_CHANGE_TOOL_STANDALONE Change Tool T{params.TOOL|int} <<< {% endif %}
M117 Change Tool T{params.TOOL|int}
{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_CHANGE_TOOL_STANDALONE Unloading current filament <<< {% endif %}
ERCF_EJECT
{% endif %}
ERCF_LOAD_TOOL TOOL={params.TOOL|int}
{% if printer.idle_timeout.state == "Printing" and svv.has_wipe_tower == 0 %}
save_variable VARIABLE=ercf_swaps VALUE={svv.ercf_swaps + 1}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Non-Tower Swaps: {svv.ercf_swaps|int} {% endif %}
{% endif %}
{% else %}
{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == False %}
ERCF_LOAD_TOOL TOOL={params.TOOL|int}
{% if printer.idle_timeout.state == "Printing" and svv.has_wipe_tower == 0 %}
save_variable VARIABLE=ercf_swaps VALUE={svv.ercf_swaps + 1}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Non-Tower Swaps: {svv.ercf_swaps|int} {% endif %}
{% endif %}
{% endif %}
{% endif %}
_ercf_restore_he_temp
{% if printer.idle_timeout.state == "Printing" and svv.has_wipe_tower == 0 %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
{% endif %}
{% else %}
_alert_ercf_is_paused
{% endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CHANGE_TOOL_STANDALONE End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CHANGE_TOOL_STANDALONE {% endif %}
printer.configfile.settings['gcode_macro ercf_change_tool_standalone'].description : Perform a tool swap out of a print (... or in print if no wipe tower (MHz))
printer.configfile.settings['gcode_macro _ercf_start_cold_temp'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_start_Cold_temp func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ercf_start_Cold_temp Start ... {% endif %}
M104 S0
_clear_HE_heating_indication
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ercf_start_Cold_temp End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ercf_start_Cold_temp {% endif %}
printer.configfile.settings['gcode_macro _ercf_start_cold_temp'].description : set he temp to 0 and carry on (no wait)
printer.configfile.settings['gcode_macro _proc_start'].gcode : 
{% set svv = printer.save_variables.variables %}
_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE={svv.proc_depth + 1|int}
{% set this1 = namespace(depth_indent = "`") %}
{% for iter in range(svv.proc_depth|int) %}
{% set this1.depth_indent = this1.depth_indent + "`" %}
{% endfor %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %}
{% set new_params = rawparams|replace("function=", "") %}
{% set new_params = new_params|replace("func_params=", "") %}
{% set new_params = new_params|replace("'", "") %}
{% set new_params = new_params|replace("\"", "") %}
M118 {this1.depth_indent ~ " " ~ new_params|upper}
{% endif %}
printer.configfile.settings['gcode_macro _proc_start'].description : for trace debug purposes - presents depth as leading back-tics
printer.configfile.settings.stepper_z.homing_positive_dir : False
printer.configfile.settings.stepper_z.homing_retract_dist : 2.0
printer.configfile.settings.stepper_z.position_endstop : 0.705
printer.configfile.settings.stepper_z.full_steps_per_rotation : 200
printer.configfile.settings.stepper_z.endstop_pin : PG10
printer.configfile.settings.stepper_z.rotation_distance : 40.0
printer.configfile.settings.stepper_z.gear_ratio : ((80.0, 16.0),)
printer.configfile.settings.stepper_z.second_homing_speed : 10.0
printer.configfile.settings.stepper_z.step_pin : PF11
printer.configfile.settings.stepper_z.position_min : -5.0
printer.configfile.settings.stepper_z.microsteps : 16
printer.configfile.settings.stepper_z.homing_speed : 15.0
printer.configfile.settings.stepper_z.dir_pin : PG3
printer.configfile.settings.stepper_z.position_max : 300.0
printer.configfile.settings.stepper_z.homing_retract_speed : 25.0
printer.configfile.settings.stepper_z.enable_pin : !PG5
printer.configfile.settings.stepper_y.homing_positive_dir : True
printer.configfile.settings.stepper_y.homing_retract_dist : 5.0
printer.configfile.settings.stepper_y.position_endstop : 350.0
printer.configfile.settings.stepper_y.full_steps_per_rotation : 400
printer.configfile.settings.stepper_y.endstop_pin : PG9
printer.configfile.settings.stepper_y.rotation_distance : 40.0
printer.configfile.settings.stepper_y.gear_ratio : ()
printer.configfile.settings.stepper_y.second_homing_speed : 50.0
printer.configfile.settings.stepper_y.step_pin : PG0
printer.configfile.settings.stepper_y.homing_speed : 100.0
printer.configfile.settings.stepper_y.microsteps : 16
printer.configfile.settings.stepper_y.position_min : 0.0
printer.configfile.settings.stepper_y.dir_pin : PG1
printer.configfile.settings.stepper_y.position_max : 350.05
printer.configfile.settings.stepper_y.homing_retract_speed : 100.0
printer.configfile.settings.stepper_y.enable_pin : !PF15
printer.configfile.settings.stepper_x.homing_positive_dir : True
printer.configfile.settings.stepper_x.homing_retract_dist : 5.0
printer.configfile.settings.stepper_x.position_endstop : 350.0
printer.configfile.settings.stepper_x.full_steps_per_rotation : 400
printer.configfile.settings.stepper_x.endstop_pin : PG6
printer.configfile.settings.stepper_x.rotation_distance : 40.0
printer.configfile.settings.stepper_x.gear_ratio : ()
printer.configfile.settings.stepper_x.second_homing_speed : 50.0
printer.configfile.settings.stepper_x.step_pin : PF13
printer.configfile.settings.stepper_x.position_min : 0.0
printer.configfile.settings.stepper_x.microsteps : 16
printer.configfile.settings.stepper_x.homing_speed : 100.0
printer.configfile.settings.stepper_x.position_max : 350.05
printer.configfile.settings.stepper_x.dir_pin : PF12
printer.configfile.settings.stepper_x.homing_retract_speed : 100.0
printer.configfile.settings.stepper_x.enable_pin : !PF14
printer.configfile.settings.input_shaper.damping_ratio_x : 0.1
printer.configfile.settings.input_shaper.damping_ratio_y : 0.1
printer.configfile.settings.input_shaper.shaper_type_x : 2hump_ei
printer.configfile.settings.input_shaper.shaper_type_y : mzv
printer.configfile.settings.input_shaper.shaper_freq_x : 62.2
printer.configfile.settings.input_shaper.shaper_freq_y : 34.4
printer.configfile.settings.input_shaper.shaper_type : mzv
printer.configfile.settings['gcode_macro ercf_home_extruder'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_HOME_EXTRUDER func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_HOME_EXTRUDER Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > ERCF_HOME_EXTRUDER Skipped - an error condition is asserted < {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_loadunload %} M118 ERCF_HOME_EXTRUDER {rawparams} {% endif %}
_ERCF_HOME_EXTRUDER_STOCK {rawparams}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_HOME_EXTRUDER End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_HOME_EXTRUDER {% endif %}
printer.configfile.settings['gcode_macro ercf_home_extruder'].description : wrapper of a ERCF.py fw proc
printer.configfile.settings['gcode_macro ercf_home_extruder'].rename_existing : _ERCF_HOME_EXTRUDER_STOCK
printer.configfile.settings['gcode_macro ercf_select_tool_dbg'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_SELECT_TOOL_dbg func_params='"{rawparams|string}"'  {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > ERCF_SELECT_TOOL {rawparams} Skipped - an error condition is asserted < {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 > ERCF_SELECT_TOOL TOOL={params.TOOL|int} < {% endif %}
ERCF_SELECT_TOOL {rawparams}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_SELECT_TOOL_dbg {% endif %}
printer.configfile.settings['gcode_macro ercf_select_tool_dbg'].description : wrapper around ercf lib proc for error check so seq test procs can not run on blindly if an error exists.
printer.configfile.settings['gcode_macro ercf_move_cart'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ercf_move_cart func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ercf_move_cart start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > ercf_move_cart Skipped - an error condition is asserted < {% endif %}
{% else %}
_ercf_park_n_home
{% set selector_axis_pos = printer["gcode_macro _ERCF_VAR"].colorselector[params.C|default(0)|int]|float %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 >>> ERCF_CART:{params.C|default(0)|int} -> {selector_axis_pos} <<< {% endif %}
MANUAL_STEPPER STEPPER=selector_stepper MOVE={selector_axis_pos} SPEED=100
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ercf_move_cart End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ercf_move_cart {% endif %}
printer.configfile.settings['gcode_macro ercf_move_cart'].description : move ercf cart to param C
printer.configfile.settings['gcode_macro print_start_purge'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=print_start_purge func_params='"{rawparams|string}"'  {% endif %}
{% if params.TOWER|default(0)|int %} _print_purge {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=print_start_purge {% endif %}
printer.configfile.settings['gcode_macro print_start_purge'].description : purge at start of print, if param.TOWER
printer.configfile.settings['gcode_macro ercflts_orange'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCFLts_Orange {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=ercf_lights RED=0.3 GREEN=0.1 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCFLts_Orange {% endif %}
printer.configfile.settings['gcode_macro ercflts_orange'].description : G-Code macro
printer.configfile.settings['gcode_macro ercf_motors_off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_MOTORS_OFF func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_MOTORS_OFF Start ... {% endif %}
SET_GCODE_VARIABLE MACRO=ERCF_HOME VARIABLE=home VALUE=-1
MANUAL_STEPPER STEPPER=gear_stepper ENABLE=0
MANUAL_STEPPER STEPPER=selector_stepper ENABLE=0
_ERCF_SERVO_UP
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_MOTORS_OFF End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_MOTORS_OFF {% endif %}
printer.configfile.settings['gcode_macro ercf_motors_off'].description : Turn off both ERCF motors and raise the servo up, unhome,
printer.configfile.settings['gcode_macro ercf_calibrate_encoder'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CALIBRATE_ENCODER func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CALIBRATE_ENCODER Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > ERCF_CALIBRATE_ENCODER Skipped - an error condition is asserted < {% endif %}
{% else %}
_ERCF_CALIBRATE_ENCODER_STOCK {rawparams}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CALIBRATE_ENCODER End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CALIBRATE_ENCODER {% endif %}
printer.configfile.settings['gcode_macro ercf_calibrate_encoder'].description : wrapper for ERCF.py fw proc to handle error conditions, verbosity
printer.configfile.settings['gcode_macro ercf_calibrate_encoder'].rename_existing : _ERCF_CALIBRATE_ENCODER_STOCK
printer.configfile.settings.fan.cycle_time : 0.01
printer.configfile.settings.fan.pin : PA8
printer.configfile.settings.fan.off_below : 0.1
printer.configfile.settings.fan.shutdown_speed : 0.0
printer.configfile.settings.fan.max_power : 1.0
printer.configfile.settings.fan.kick_start_time : 0.1
printer.configfile.settings.fan.hardware_pwm : False
printer.configfile.settings.gcode_arcs.resolution : 1.0
printer.configfile.settings['gcode_macro _alert_ercf_is_paused'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_alert_ercf_is_paused func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _alert_ercf_is_paused Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 ERCF is paused, run "ERCF_UNLOCK" to unlock it ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _alert_ercf_is_paused End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_alert_ercf_is_paused {% endif %}
printer.configfile.settings['gcode_macro _alert_ercf_is_paused'].description : alerts user that ERCF is Paused and needs to be Unlocked
printer.configfile.settings['gcode_macro ercf_servo_down'].gcode : 
_ERCF_SERVO_DOWN {rawparams}
printer.configfile.settings['gcode_macro ercf_servo_down'].description : for macro purposes
printer.configfile.settings.stepper_z1.full_steps_per_rotation : 200
printer.configfile.settings.stepper_z1.rotation_distance : 40.0
printer.configfile.settings.stepper_z1.gear_ratio : ((80.0, 16.0),)
printer.configfile.settings.stepper_z1.step_pin : PG4
printer.configfile.settings.stepper_z1.microsteps : 16
printer.configfile.settings.stepper_z1.dir_pin : !PC1
printer.configfile.settings.stepper_z1.enable_pin : !PA0
printer.configfile.settings['gcode_macro g4'].rename_existing : G4.1
printer.configfile.settings['gcode_macro g4'].description : G4, with console echo if enabled
printer.configfile.settings['gcode_macro g4'].gcode : 
{% if printer["gcode_macro _debug_vars"].gmove_debug %} M118 G4 {rawparams|upper} {% endif %}
G4.1 {rawparams}
printer.configfile.settings['gcode_macro ercflts_blue'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCFLts_Blue {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=ercf_lights RED=0 GREEN=0 BLUE=0.5
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCFLts_Blue {% endif %}
printer.configfile.settings['gcode_macro ercflts_blue'].description : G-Code macro
printer.configfile.settings['gcode_shell_command power_off_printer'].command : curl "http://10.0.0.25/cm?cmnd=Backlog%3BDelay%200%3BPower%20OFF"
printer.configfile.settings['gcode_shell_command power_off_printer'].verbose : False
printer.configfile.settings['gcode_shell_command power_off_printer'].timeout : 2.0
printer.configfile.settings['delayed_gcode welcome_msg'].gcode : 
M117 Welcome!
UPDATE_DELAYED_GCODE ID=clear_display DURATION=10
printer.configfile.settings['delayed_gcode welcome_msg'].initial_duration : 0.0
printer.configfile.settings['gcode_macro ercf_form_tip_standalone'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_FORM_TIP_STANDALONE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_FORM_TIP_STANDALONE Start ... {% endif %}
{% set COOLING_TUBE_LENGTH = params.COOLING_TUBE_LENGTH|default(10) %}
{% set COOLING_TUBE_RETRACTION = params.COOLING_TUBE_RETRACTION|default(30) %}
{% set INITIAL_COOLING_SPEED = params.INITIAL_COOLING_SPEED|default(10) %}
{% set FINAL_COOLING_SPEED = params.FINAL_COOLING_SPEED|default(50) %}
{% set COOLING_MOVES = params.COOLING_MOVES|default(5) %}
{% set TOOLCHANGE_TEMP = params.TOOLCHANGE_TEMP|default(0) %}
{% set USE_SKINNYDIP = params.USE_SKINNYDIP|default(1) %}
{% set USE_FAST_SKINNYDIP = params.USE_FAST_SKINNYDIP|default(1) %}
{% set SKINNYDIP_DISTANCE = params.SKINNYDIP_DISTANCE|default(26) %}
{% set DIP_INSERTION_SPEED = params.DIP_INSERTION_SPEED|default(33) %}
{% set DIP_EXTRACTION_SPEED = params.DIP_EXTRACTION_SPEED|default(70) %}
{% set MELT_ZONE_PAUSE = params.MELT_ZONE_PAUSE|default(0) %}
{% set COOLING_ZONE_PAUSE = params.COOLING_ZONE_PAUSE|default(0) %}
{% set UNLOADING_SPEED_START = params.UNLOADING_SPEED_START|default(199) %}
{% set UNLOADING_SPEED = params.UNLOADING_SPEED|default(20) %}
{% set RAMMING_VOLUME = params.RAMMING_VOLUME|default(0) %}
{% set INITIAL_RETRACT = params.INITIAL_RETRACT|default(0) %}
{% set FINAL_EJECT = params.FINAL_EJECT|default(0) %}
go_relative
_reset_extruder
SET_PRESSURE_ADVANCE ADVANCE=0
{% set OLD_TEMP = printer.extruder.target %}
{% if INITIAL_RETRACT|int == 1 %}
G1 E-8.5000 F3000
{% endif %}
{% set RATIO = (RAMMING_VOLUME|float) /23.0 %}
G1 E{0.5784 * RATIO|float} F299
G1 E{0.5834 * RATIO|float} F302
G1 E{0.5918 * RATIO|float} F306
G1 E{0.6169 * RATIO|float} F319
G1 E{0.3393 * RATIO|float} F350
G1 E{0.3363 * RATIO|float} F350
G1 E{0.7577 * RATIO|float} F392
G1 E{0.8382 * RATIO|float} F434
G1 E{0.7776 * RATIO|float} F469
G1 E{0.1293 * RATIO|float} F469
G1 E{0.9673 * RATIO|float} F501
G1 E{1.0176 * RATIO|float} F527
G1 E{0.5956 * RATIO|float} F544
G1 E{0.4555 * RATIO|float} F544
G1 E{1.0662 * RATIO|float} F552
{% if TOOLCHANGE_TEMP|float > 0 and USE_FAST_SKINNYDIP|int == 0 %}
_ercf_wait_he_temp TEMP={TOOLCHANGE_TEMP}
{% endif %}
{% set TOTAL_RETRACTION_DISTANCE = COOLING_TUBE_RETRACTION|float + COOLING_TUBE_LENGTH|float / 2 - 15 %}
G1 E-15 F{1.0 * UNLOADING_SPEED_START|float * 60}
G1 E-{0.7 * TOTAL_RETRACTION_DISTANCE} F{1.0 * UNLOADING_SPEED|float * 60}
G1 E-{0.2 * TOTAL_RETRACTION_DISTANCE} F{0.5 * UNLOADING_SPEED|float * 60}
G1 E-{0.1 * TOTAL_RETRACTION_DISTANCE} F{0.3 * UNLOADING_SPEED|float * 60}
{% if TOOLCHANGE_TEMP|float > 0 and USE_FAST_SKINNYDIP|int == 1 %}
_ercf_start_he_temp TEMP={TOOLCHANGE_TEMP}
{% endif %}
{% set SPEED_INC = (FINAL_COOLING_SPEED|float - INITIAL_COOLING_SPEED|float) / (2 * COOLING_MOVES|float - 1) %}
{% for move in range(COOLING_MOVES|int) %}
G1 E{COOLING_TUBE_LENGTH} F{(INITIAL_COOLING_SPEED|float + SPEED_INC*move*2) * 60}
G1 E-{COOLING_TUBE_LENGTH} F{(INITIAL_COOLING_SPEED|float + SPEED_INC*(move*2+1)) * 60}
{% endfor %}
{% if TOOLCHANGE_TEMP|float > 0 and USE_FAST_SKINNYDIP|int == 0 %}
_ercf_wait_he_temp TEMP={TOOLCHANGE_TEMP}
{% endif %}
{% if USE_SKINNYDIP|int == 1 %}
G1 E{SKINNYDIP_DISTANCE} F{DIP_INSERTION_SPEED|float * 60}
G4 P{MELT_ZONE_PAUSE}
G1 E-{SKINNYDIP_DISTANCE} F{DIP_EXTRACTION_SPEED|float * 60}
G4 P{COOLING_ZONE_PAUSE}
{% endif %}
{% if TOOLCHANGE_TEMP|float > 0 %}
_ercf_start_he_temp TEMP={OLD_TEMP}
{% endif %}
{% if FINAL_EJECT|int == 1 %}
_reset_extruder
G1 E-80 F3000
{% endif %}
_reset_extruder
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_FORM_TIP_STANDALONE End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_FORM_TIP_STANDALONE {% endif %}
printer.configfile.settings['gcode_macro ercf_form_tip_standalone'].description : Generic tip forming macro - mocking ss, presumably
printer.configfile.settings['gcode_macro sng_startup'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_startup {% endif %}
M117 Startup
M3001 S1174 P125
M3001 S1174 P125
M3001 S2349 P125
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_startup {% endif %}
printer.configfile.settings['gcode_macro sng_startup'].description : G-Code macro
printer.configfile.settings['gcode_macro dblts_normal'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=DBLts_Normal {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=dash_lights RED=0.5 GREEN=0.5 BLUE=0.5
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=DBLts_Normal {% endif %}
printer.configfile.settings['gcode_macro dblts_normal'].description : G-Code macro
printer.configfile.settings['gcode_shell_command wcv2_irled_on'].command : curl -d value=1 http://10.0.0.61:8081/api/ir_led
printer.configfile.settings['gcode_shell_command wcv2_irled_on'].verbose : False
printer.configfile.settings['gcode_shell_command wcv2_irled_on'].timeout : 2.0
printer.configfile.settings['gcode_macro sng_simpons'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_simpons {% endif %}
M117 The Simpons
M3001 S0 P46
M3001 S1046 P562
M3001 S1317 P375
M3001 S1480 P375
M3001 S1760 P187
M3001 S1566 P562
M3001 S1319 P375
M3001 S1046 P375
M3001 S880 P187
M3001 S740 P187
M3001 S740 P187
M3001 S740 P187
M3001 S784 P750
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_simpons {% endif %}
printer.configfile.settings['gcode_macro sng_simpons'].description : G-Code macro
printer.configfile.settings['gcode_shell_command hello_world'].command : echo hello world
printer.configfile.settings['gcode_shell_command hello_world'].verbose : True
printer.configfile.settings['gcode_shell_command hello_world'].timeout : 2.0
printer.configfile.settings['tmc2209 manual_stepper gear_stepper'].driver_pwm_ofs : 36
printer.configfile.settings['tmc2209 manual_stepper gear_stepper'].driver_hstrt : 5
printer.configfile.settings['tmc2209 manual_stepper gear_stepper'].driver_toff : 3
printer.configfile.settings['tmc2209 manual_stepper gear_stepper'].sense_resistor : 0.11
printer.configfile.settings['tmc2209 manual_stepper gear_stepper'].uart_address : 0
printer.configfile.settings['tmc2209 manual_stepper gear_stepper'].driver_pwm_reg : 8
printer.configfile.settings['tmc2209 manual_stepper gear_stepper'].driver_iholddelay : 8
printer.configfile.settings['tmc2209 manual_stepper gear_stepper'].interpolate : True
printer.configfile.settings['tmc2209 manual_stepper gear_stepper'].uart_pin : ercf:PA8
printer.configfile.settings['tmc2209 manual_stepper gear_stepper'].hold_current : 0.1
printer.configfile.settings['tmc2209 manual_stepper gear_stepper'].driver_tbl : 2
printer.configfile.settings['tmc2209 manual_stepper gear_stepper'].driver_pwm_autograd : True
printer.configfile.settings['tmc2209 manual_stepper gear_stepper'].driver_pwm_grad : 14
printer.configfile.settings['tmc2209 manual_stepper gear_stepper'].run_current : 0.8
printer.configfile.settings['tmc2209 manual_stepper gear_stepper'].driver_hend : 0
printer.configfile.settings['tmc2209 manual_stepper gear_stepper'].stealthchop_threshold : 0.0
printer.configfile.settings['tmc2209 manual_stepper gear_stepper'].driver_pwm_autoscale : True
printer.configfile.settings['tmc2209 manual_stepper gear_stepper'].driver_tpowerdown : 20
printer.configfile.settings['tmc2209 manual_stepper gear_stepper'].driver_pwm_freq : 1
printer.configfile.settings['tmc2209 manual_stepper gear_stepper'].driver_pwm_lim : 12
printer.configfile.settings['tmc2209 manual_stepper gear_stepper'].driver_sgthrs : 0
printer.configfile.settings['gcode_macro set_heater_temperature'].rename_existing : _SET_HEATER_TEMPERATURE_STOCK
printer.configfile.settings['gcode_macro set_heater_temperature'].description : capture and set target bed temp, waiting for temp attainment
printer.configfile.settings['gcode_macro set_heater_temperature'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=SET_HEATER_TEMPERATURE func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE={params.HEATER|string}_temp_setting VALUE={params.TARGET|int}
_SET_HEATER_TEMPERATURE_STOCK {rawparams}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=SET_HEATER_TEMPERATURE {% endif %}
printer.configfile.settings['gcode_macro ercflts_green'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCFLts_Green {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=ercf_lights RED=0 GREEN=0.5 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCFLts_Green {% endif %}
printer.configfile.settings['gcode_macro ercflts_green'].description : G-Code macro
printer.configfile.settings['gcode_macro ercf_change_tool_slicer'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CHANGE_TOOL_SLICER func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CHANGE_TOOL_SLICER Start ... {% endif %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
{% if printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int != params.TOOL|int %}
save_variable VARIABLE=ercf_swaps VALUE={svv.ercf_swaps + 1}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Tower Swaps: {svv.ercf_swaps|int} {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 >>> ERCF_CHANGE_TOOL_SLICER Change Tool T{params.TOOL|int} <<< {% endif %}
M117 Change Tool T{params.TOOL|int}
ERCF_UNLOAD_TOOL
ERCF_LOAD_TOOL TOOL={params.TOOL|int}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
{% endif %}
{% else %}
_alert_ercf_is_paused
{% endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CHANGE_TOOL_SLICER End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CHANGE_TOOL_SLICER {% endif %}
printer.configfile.settings['gcode_macro ercf_change_tool_slicer'].description : Perform a tool swap during a print
printer.configfile.settings['gcode_macro _start_bounds_checking'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_start_bounds_checking func_params='"{rawparams|string}"'  {% endif %}
_stop_bounds_alarm
M118 H2O cooling automatic parameter check Enabled
UPDATE_DELAYED_GCODE ID=check_bounds DURATION=0.1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_start_bounds_checking {% endif %}
printer.configfile.settings['gcode_macro _start_bounds_checking'].description : G-Code macro
printer.configfile.settings['gcode_macro _debug_vars'].variable_save_var_debug : 0
printer.configfile.settings['gcode_macro _debug_vars'].description : macro for debug variables
printer.configfile.settings['gcode_macro _debug_vars'].variable_debug_verb_debug : 0
printer.configfile.settings['gcode_macro _debug_vars'].gcode : 
printer.configfile.settings['gcode_macro _debug_vars'].variable_gcode_state_debug : 0
printer.configfile.settings['gcode_macro _debug_vars'].variable_debug_verb_info : 0
printer.configfile.settings['gcode_macro _debug_vars'].variable_debug_verb_error : 1
printer.configfile.settings['gcode_macro _debug_vars'].variable_debug_verb_codeflow : 0
printer.configfile.settings['gcode_macro _debug_vars'].variable_gmove_debug : 0
printer.configfile.settings['gcode_macro _debug_vars'].variable_debug_verb_status : 0
printer.configfile.settings['gcode_macro set_pressure_advance'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=SET_PRESSURE_ADVANCE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _linadv_vars"].linadv_verb_codeflow %} M118 >>> SET_PRESSURE_ADVANCE Start ... {% endif %}
_SET_PRESSURE_ADVANCE_STOCK {rawparams}
{% if printer["gcode_macro _linadv_vars"].linadv_verb_codeflow %} M118 ... SET_PRESSURE_ADVANCE End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=SET_PRESSURE_ADVANCE {% endif %}
printer.configfile.settings['gcode_macro set_pressure_advance'].description : wrapper for FW proc
printer.configfile.settings['gcode_macro set_pressure_advance'].rename_existing : _SET_PRESSURE_ADVANCE_STOCK
printer.configfile.settings['temperature_fan exhaust'].control : watermark
printer.configfile.settings['temperature_fan exhaust'].min_temp : 10.0
printer.configfile.settings['temperature_fan exhaust'].pullup_resistor : 4700.0
printer.configfile.settings['temperature_fan exhaust'].cycle_time : 0.01
printer.configfile.settings['temperature_fan exhaust'].kick_start_time : 0.1
printer.configfile.settings['temperature_fan exhaust'].pin : PD14
printer.configfile.settings['temperature_fan exhaust'].max_delta : 2.0
printer.configfile.settings['temperature_fan exhaust'].max_temp : 90.0
printer.configfile.settings['temperature_fan exhaust'].shutdown_speed : 0.0
printer.configfile.settings['temperature_fan exhaust'].off_below : 0.0
printer.configfile.settings['temperature_fan exhaust'].sensor_type : Chamber
printer.configfile.settings['temperature_fan exhaust'].target_temp : 60.0
printer.configfile.settings['temperature_fan exhaust'].inline_resistor : 0.0
printer.configfile.settings['temperature_fan exhaust'].min_speed : 0.3
printer.configfile.settings['temperature_fan exhaust'].max_speed : 1.0
printer.configfile.settings['temperature_fan exhaust'].hardware_pwm : False
printer.configfile.settings['temperature_fan exhaust'].sensor_pin : PF6
printer.configfile.settings['temperature_fan exhaust'].gcode_id : Exhaust
printer.configfile.settings['temperature_fan exhaust'].max_power : 1.0
printer.configfile.settings['gcode_macro printer_config_restore'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=printer_config_restore func_params='"{rawparams|string}"'  {% endif %}
RUN_SHELL_COMMAND CMD=restore_configs
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Printer config updated from git repo <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=printer_config_restore {% endif %}
printer.configfile.settings['gcode_macro printer_config_restore'].description : Restore local configs from the git repo and restart klipper if updated
printer.configfile.settings['gcode_macro _idleled_off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_IdleLED_Off func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _IdleLED_Off <<< {% endif %}
SET_PIN PIN=_sw_grn_led VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_IdleLED_Off {% endif %}
printer.configfile.settings['gcode_macro _idleled_off'].description : Extinguish the Halo Sw Greeen LED
printer.configfile.settings['gcode_macro _servo_move_dwell'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_servo_move_dwell func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _servo_move_dwell Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 >>> _servo_move_dwell {printer["gcode_macro _ERCF_VAR"].ercf_servo_move_dwell|int}mS <<< {% endif %}
G4 P{printer["gcode_macro _ERCF_VAR"].ercf_servo_move_dwell|int}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _servo_move_dwell End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_servo_move_dwell {% endif %}
printer.configfile.settings['gcode_macro _servo_move_dwell'].description : impute a dwell time to allow for the servo movement to complete
printer.configfile.settings['servo ercf_servo'].initial_pulse_width : 0.0
printer.configfile.settings['servo ercf_servo'].minimum_pulse_width : 0.0005
printer.configfile.settings['servo ercf_servo'].maximum_pulse_width : 0.0025
printer.configfile.settings['servo ercf_servo'].pin : ercf:PA5
printer.configfile.settings['servo ercf_servo'].maximum_servo_angle : 150.0
printer.configfile.settings['gcode_macro ercf_set_steps'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_SET_STEPS func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_SET_STEPS Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
_ERCF_SET_STEPS_STOCK {rawparams}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_SET_STEPS End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_SET_STEPS {% endif %}
printer.configfile.settings['gcode_macro ercf_set_steps'].description : wrapper for ERCF.py fw proc to handle error conditions, verbosity
printer.configfile.settings['gcode_macro ercf_set_steps'].rename_existing : _ERCF_SET_STEPS_STOCK
printer.configfile.settings['gcode_macro pwrled_on'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PwrLED_On func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> PwrLED_On <<< {% endif %}
_PwrLED_On
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PwrLED_On {% endif %}
printer.configfile.settings['gcode_macro pwrled_on'].description : G-Code macro
printer.configfile.settings['mcu pico'].baud : 250000
printer.configfile.settings['mcu pico'].restart_method : command
printer.configfile.settings['mcu pico'].serial : /dev/serial/by-id/usb-Klipper_rp2040_E66058388326382F-if00
printer.configfile.settings['mcu pico'].max_stepper_error : 2.5e-05
printer.configfile.settings['gcode_macro ercflts_test'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCFLts_Test {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=ercf_lights RED=0.1 GREEN=0.1 BLUE=0.5
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCFLts_Test {% endif %}
printer.configfile.settings['gcode_macro ercflts_test'].description : G-Code macro
printer.configfile.settings['gcode_macro chlts_red'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ChLts_Red {% endif %}
SET_LED LED=chamber_lights RED=0.5 GREEN=0 BLUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ChLts_Red {% endif %}
printer.configfile.settings['gcode_macro chlts_red'].description : G-Code macro
printer.configfile.settings['gcode_macro pwrled_off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PwrLED_Off func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> PwrLED_Off <<< {% endif %}
_PwrLED_Off
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PwrLED_Off {% endif %}
printer.configfile.settings['gcode_macro pwrled_off'].description : G-Code macro
printer.configfile.settings['gcode_macro _park_toolhead'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_Park_Toolhead func_params='"{rawparams|string}"'  {% endif %}
{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}
{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed * 60 %}
{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed * 60 %}
{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
_entry_point function=Park_Toolhead
{% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
{% if verbose %} M118 Parking Toolhead {% endif %}
G0 X{parkposition_x} Y{parkposition_y} F{xytravel_feedrate}
G0 Z{parkposition_z} F{ztravel_feedrate}
{% else %}
{% if verbose %} M118 Toolhead Parking Disabled... {% endif %}
{% endif %}
_exit_point function=Park_Toolhead
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_Park_Toolhead {% endif %}
printer.configfile.settings['gcode_macro _park_toolhead'].description : G-Code macro
printer.configfile.settings['gcode_macro ercf_load'].rename_existing : _ERCF_LOAD_STOCK
printer.configfile.settings['gcode_macro ercf_load'].description : wrapper for ERCF.py fw proc to handle error conditions, verbosity, and adds a dwell
printer.configfile.settings['gcode_macro ercf_load'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_LOAD func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_LOAD Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > ERCF_LOAD Skipped - an error condition is asserted < {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_loadunload %} M118 vvv ERCF_LOAD {rawparams} {% endif %}
_ERCF_LOAD_STOCK {rawparams}
_load_unload_dwell
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_LOAD End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_LOAD {% endif %}
printer.configfile.settings['gcode_macro ercf_eject_unknow_state'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_EJECT_UNKNOW_STATE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_EJECT_UNKNOW_STATE Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% set ercf_params = printer.save_variables.variables %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF_EJECT_UNKNOW_STATE {% endif %}
{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
_ercf_set_eject_temp
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Filament in extruder, trying to eject it .. {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Calling ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING {% endif %}
{% set unload_ratio = ercf_params['ercf_calib_%s' % (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|string)] %}
{% if unload_ratio|string == "" %}
{% set unload_ratio = 1.0 %}
{% endif %}
ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING RATIO={unload_ratio}
ERCF_UNLOAD LENGTH={printer["gcode_macro _ERCF_VAR"].min_bowden_length - printer["gcode_macro _ERCF_VAR"].ercf_eject_unknow_state_len_mod - printer["gcode_macro _ERCF_VAR"].ercf_dual_unload_mod|float} UNKNOWN=1
_ercf_restore_he_temp
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 No filament detected in TH, calling _ERCF_SERVO_DOWN {% endif %}
_ERCF_SERVO_DOWN
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF_BUZZ_GEAR_MOTOR {% endif %}
ERCF_BUZZ_GEAR_MOTOR
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF_EJECT_FROM_BOWDEN {% endif %}
ERCF_EJECT_FROM_BOWDEN
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_EJECT_UNKNOW_STATE End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_EJECT_UNKNOW_STATE {% endif %}
printer.configfile.settings['gcode_macro ercf_eject_unknow_state'].description : Unload filament from an unknown position
printer.configfile.settings.ercf.encoder_resolution : 1.343183
printer.configfile.settings.ercf.long_moves_speed : 50.0
printer.configfile.settings.ercf.short_moves_speed : 25.0
printer.configfile.settings.ercf.short_moves_accel : 200.0
printer.configfile.settings.ercf.long_moves_accel : 200.0
printer.configfile.settings.ercf.encoder_pin : ^ercf:PA6
printer.configfile.settings.save_variables.filename : ~/klipper_config/_globals.pvar
printer.configfile.settings['gcode_macro chlts_blue'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ChLts_Blue {% endif %}
SET_LED LED=chamber_lights RED=0 GREEN=0 BLUE=0.5
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ChLts_Blue {% endif %}
printer.configfile.settings['gcode_macro chlts_blue'].description : G-Code macro
printer.configfile.settings['gcode_macro dock_probe_unlock'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=Dock_Probe_Unlock func_params='"{rawparams|string}"'  {% endif %}
_Probe_Unlock
Dock_Probe
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=Dock_Probe_Unlock {% endif %}
printer.configfile.settings['gcode_macro dock_probe_unlock'].description : Docks Klicky Probe even if it was locked
printer.configfile.settings['gcode_macro snd_poweron'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_PowerOn {% endif %}
sng_startup
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_PowerOn {% endif %}
printer.configfile.settings['gcode_macro snd_poweron'].description : G-Code macro
printer.configfile.settings['gcode_macro ercf_home'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_HOME func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_HOME Start ... {% endif %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
SET_GCODE_VARIABLE MACRO=ERCF_HOME VARIABLE=home VALUE=1
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 1 %}
ERCF_UNLOCK
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Homing ERCF {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} QUERY_ENDSTOPS {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_EJECT_UNKNOW_STATE <<< {% endif %}
ERCF_EJECT_UNKNOW_STATE
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_HOME_SELECTOR <<< {% endif %}
ERCF_HOME_SELECTOR
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_HOME_ONLY <<< {% endif %}
ERCF_HOME_ONLY
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_HOME End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_HOME {% endif %}
printer.configfile.settings['gcode_macro ercf_home'].description : Home the ERCF
printer.configfile.settings['gcode_macro ercf_home'].variable_home : -1
printer.configfile.settings['gcode_macro _printer_vars'].variable_ptr_verb_codeflow : 0
printer.configfile.settings['gcode_macro _printer_vars'].variable_ptr_verb_status : 0
printer.configfile.settings['gcode_macro _printer_vars'].description : G-Code macro
printer.configfile.settings['gcode_macro _printer_vars'].gcode : 
printer.configfile.settings['gcode_macro _printer_vars'].variable_ptr_verb_debug : 0
printer.configfile.settings['gcode_macro _printer_vars'].variable_ptr_verb_error : 1
printer.configfile.settings['gcode_macro _printer_vars'].variable_pause_retract_default : 1.0
printer.configfile.settings['gcode_macro _printer_vars'].variable_show_proc_exit_details : 1
printer.configfile.settings['gcode_macro _printer_vars'].variable_show_proc_exit : 1
printer.configfile.settings['gcode_macro _printer_vars'].variable_ptr_verb_info : 0
printer.configfile.settings['gcode_macro _printer_vars'].variable_ptr_verb_modload : 0
printer.configfile.settings['delayed_gcode _startup_var_init'].gcode : 
_SAVE_VARIABLE_STOCK VARIABLE=proc_depth	VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_startup_var_init func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"initializing"'
SAVE_VARIABLE VARIABLE=module_ledeff_loaded VALUE=0
SAVE_VARIABLE VARIABLE=module_ercf_loaded VALUE=0
SAVE_VARIABLE VARIABLE=module_debug_loaded VALUE=0
SAVE_VARIABLE VARIABLE=module_linadv_loaded VALUE=0
SAVE_VARIABLE VARIABLE=module_scrub_loaded VALUE=0
SAVE_VARIABLE VARIABLE=module_klicky_loaded VALUE=0
SAVE_VARIABLE VARIABLE=module_gcodeproc_loaded VALUE=0
SAVE_VARIABLE VARIABLE=extruder_temp_setting VALUE=0
SAVE_VARIABLE VARIABLE=heater_bed_temp_setting VALUE=0
SAVE_VARIABLE VARIABLE=ercf_he_temp_restore_val VALUE=0
SAVE_VARIABLE VARIABLE=maxz VALUE=0.0
SAVE_VARIABLE VARIABLE=has_wipe_tower VALUE=-1
SAVE_VARIABLE VARIABLE=z_axis_cal VALUE=0
SAVE_VARIABLE VARIABLE=v2_2526_slicer_check VALUE='"NULL"'
SAVE_VARIABLE VARIABLE=last_saved_gcode_state VALUE='"NULL"'
SAVE_VARIABLE VARIABLE=ercf_selector_homed	VALUE=0
SAVE_VARIABLE VARIABLE=ercf_he_temp_restore_val	VALUE=0
; SAVE_VARIABLE VARIABLE=ercf_gear_direction	VALUE=0
; SAVE_VARIABLE VARIABLE=ercf_encoder_count	VALUE=0
SAVE_VARIABLE VARIABLE=last_chamber_lights_effect	VALUE='"off"'
SAVE_VARIABLE VARIABLE=last_dash_lights_effect		VALUE='"off"'
SAVE_VARIABLE VARIABLE=last_ercf_lights_effect		VALUE='"off"'
SAVE_VARIABLE VARIABLE=last_lcd_lights_effect		VALUE='"off"'
save_variable VARIABLE=total_toolchanges 			VALUE=0
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"initialized"'
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_startup_var_init {% endif %}
printer.configfile.settings['delayed_gcode _startup_var_init'].initial_duration : 0.1
printer.configfile.settings['gcode_macro ercf_test_move_gear'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_TEST_MOVE_GEAR func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_TEST_MOVE_GEAR Start ... {% endif %}
{% set move_length = params.LENGTH|default(0.0)|float %}
{% set move_speed = params.SPEED|default(30.0)|float %}
{% set move_accel = params.ACCEL|default(200.0)|float %}
MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
MANUAL_STEPPER STEPPER=gear_stepper MOVE={move_length|float} SPEED={move_speed|float} ACCEL={move_accel|float}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_TEST_MOVE_GEAR End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_TEST_MOVE_GEAR {% endif %}
printer.configfile.settings['gcode_macro ercf_test_move_gear'].description : Move the ERCF gear
printer.configfile.settings['gcode_macro pause'].rename_existing : _PAUSE_STOCK
printer.configfile.settings['gcode_macro pause'].description : Pause the actual running print
printer.configfile.settings['gcode_macro pause'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PAUSE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Pausing <<< {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_pausing"'
{% if svv.ercf_err_flag %}
save_variable VARIABLE=pause_ercf_error VALUE=1
{% else %}
SAVE_GCODE_STATE NAME=State_Save_Pause
save_variable VARIABLE=pause_ercf_error VALUE=0
{% endif %}
_HOURMETER_OFF
_PrintLED_Off
{% if printer.save_variables.variables.module_ledeff_loaded %}
_set_ledeff_mode CHAIN=chamber_lights	EFFECT=normal	RESET=1
_set_ledeff_mode CHAIN=lcd_lights 	EFFECT=normal	RESET=1
; _set_ledeff_mode CHAIN=ercf_lights	EFFECT=off		RESET=1
; _set_ledeff_mode CHAIN=dash_lights	EFFECT=off		RESET=1
{% else %}
ChLts_Normal
LcdLts_Normal
; ERCFLts_off
; DBLts_off
{% endif %}
{% set max_x = printer.toolhead.axis_maximum.x|float %}
{% set max_y = printer.toolhead.axis_maximum.y|float %}
{% set x = params.X|default(max_x//2)|float %}
{% set y = params.Y|default(0)|float %}
{% set z = params.Z|default(20)|float %}
{% set e = params.E|default(printer["gcode_macro _printer_vars"].pause_retract_default|float)|float %}
{% set max_z = printer.toolhead.axis_maximum.z|float %}
{% set act_z = printer.toolhead.position.z|float %}
{% set lift_z = z|abs %}
{% if act_z < (max_z - lift_z) %}
{% set z_safe = lift_z %}
{% else %}
{% set z_safe = max_z - act_z %}
{% endif %}
M118 _PAUSE_STOCK @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}
_PAUSE_STOCK
go_relative	REASON="Pause Extruder Retract and Z Lift"
{% if printer.extruder.can_extrude|lower == 'true' %}
G1 E-{e} F2100 REASON="resume deretract"
{% else %}
M118 No Pause Retract as Extruder not hot enough
{% endif %}
{% if "xyz" in printer.toolhead.homed_axes %}
G1 Z{z_safe}
go_absolute	REASON="Extruder and Z Lift done, going abs for X/Y parking"
G1 X{x} Y{y} F6000
{% else %}
M118 Printer not homed
{% endif %}
go_absolute REASON="All Pause relative stuff done"
snd_PrintPause
start_pause_alarm
M118 PAUSE @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Paused <<< {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_paused"'
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PAUSE {% endif %}
printer.configfile.settings['gcode_macro attach_probe'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=Attach_Probe func_params='"{rawparams|string}"'  {% endif %}
{% set goback  = params.BACK|default(0) %}
{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed * 60 %}
{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed * 60 %}
{% set xydock_feedrate = printer["gcode_macro _User_Variables"].xydock_speed * 60 %}
{% set zdock_feedrate = printer["gcode_macro _User_Variables"].zdock_speed * 60 %}
{% set xyrelease_feedrate = printer["gcode_macro _User_Variables"].xyrelease_speed * 60 %}
{% set zrelease_feedrate = printer["gcode_macro _User_Variables"].zrelease_speed * 60 %}
{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
_entry_point function=Attach_Probe
{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
{% endif %}
{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
{% endif %}
{% if not 'xy' in printer.toolhead.homed_axes %}
{ action_raise_error("Must Home X and Y Axis First!") }
{% elif not probe_attached and not probe_lock %}
{% if verbose %} M118 Attaching Probe {% endif %}
{% if not 'z' in printer.toolhead.homed_axes %}
{% if verbose %} M118 Resetting Z position to zero {% endif %}
SET_KINEMATIC_POSITION Z=0
{% if not enable_z_hop %}
{% set safe_z = 0 %}
{% endif %}
{% endif %}
{% if printer.toolhead.position.z < safe_z %}
{% if verbose %} M118 moving to a safe Z height {% endif %}
G0 Z{safe_z} F{z_drop_feedrate}
{% endif %}
{% if not 'z' in printer.toolhead.homed_axes %}
{% if verbose %} M118 Resetting Z position to zero {% endif %}
SET_KINEMATIC_POSITION Z=0
{% endif %}
{% if printer.toolhead.position.z < safe_z %}
G0 Z{safe_z} F{z_drop_feedrate}
{% endif %}
_Umbilical_Path
_entry_point function=Attach_Probe_intern
G0 X{docklocation_x|float - attachmove_x|float} Y{docklocation_y|float - attachmove_y|float} F{xytravel_feedrate}
{% if docklocation_z != -128 %}
G0 Z{docklocation_z|float - attachmove_z|float} F{zdock_feedrate}
{% endif %}
{% if docklocation_z != -128 %}
G0 Z{docklocation_z} F{zdock_feedrate}
{% endif %}
G0 X{docklocation_x} Y{docklocation_y} F{xydock_feedrate}
{% if docklocation_z != -128 %}
G0 Z{docklocation_z|float - attachmove_z|float} F{z_drop_feedrate}
{% endif %}
G0 X{docklocation_x|float - attachmove_x|float} Y{docklocation_y|float - attachmove_y|float} F{xyrelease_feedrate}
{% if printer.toolhead.position.z < safe_z %}
G0 Z{safe_z} F{z_drop_feedrate}
{% endif %}
_Park_Toolhead
_CheckProbe action=attach
_exit_point function=Attach_Probe_intern move={goback}
{% elif probe_lock %}
{% if verbose %} M118 Probe locked! {% endif %}
_CheckProbe action=query
{% else %}
{% if verbose %} M118 Probe already attached! {% endif %}
_CheckProbe action=query
{% endif %}
_exit_point function=Attach_Probe move={goback}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=Attach_Probe {% endif %}
printer.configfile.settings['gcode_macro attach_probe'].description : Attaches Klicky Probe
printer.configfile.settings['gcode_macro dblts_red'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=DBLts_Red {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=dash_lights RED=0.5 GREEN=0 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=DBLts_Red {% endif %}
printer.configfile.settings['gcode_macro dblts_red'].description : G-Code macro
printer.configfile.settings['gcode_macro quad_gantry_level'].rename_existing : _QUAD_GANTRY_LEVEL_STOCK
printer.configfile.settings['gcode_macro quad_gantry_level'].description : Conform a moving, twistable gantry to the shape of a stationary bed with klicky automount - rehomez z thereafter
printer.configfile.settings['gcode_macro quad_gantry_level'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=QUAD_GANTRY_LEVEL func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"qgling"'
{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> QGL'g <<< {% endif %}
{% set V = printer["gcode_macro _User_Variables"].verbose %}
{% if V %}
M118 QG Level
{% endif %}
_ENSURE_HOMED
_CheckProbe action=query
Attach_Probe
{% if printer["gcode_macro _klicky_vars"].klicky_verb_info %} M118 >>> ____ QUAD_GANTRY_LEVEL_STOCK {rawparams} <<< {% endif %}
_QUAD_GANTRY_LEVEL_STOCK {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
G28 Z
Dock_Probe
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"qgled"'
{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> QGL'd <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=QUAD_GANTRY_LEVEL {% endif %}
printer.configfile.settings.adxl345.axes_map : ('x', 'y', 'z')
printer.configfile.settings.adxl345.cs_pin : pico:gpio1
printer.configfile.settings.adxl345.rate : 3200
printer.configfile.settings.adxl345.spi_speed : 5000000
printer.configfile.settings['gcode_macro init_gbl_vars'].gcode : 
printer.configfile.settings['gcode_macro init_gbl_vars'].description : testing use of marcro variables
printer.configfile.settings['gcode_macro _stop_bounds_alarm'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_stop_bounds_alarm func_params='"{rawparams|string}"'  {% endif %}
UPDATE_DELAYED_GCODE ID=_recursive_bounds_alarm DURATION=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_stop_bounds_alarm {% endif %}
printer.configfile.settings['gcode_macro _stop_bounds_alarm'].description : cancels the bound exceedance alarm
printer.configfile.settings.stepper_z2.full_steps_per_rotation : 200
printer.configfile.settings.stepper_z2.rotation_distance : 40.0
printer.configfile.settings.stepper_z2.gear_ratio : ((80.0, 16.0),)
printer.configfile.settings.stepper_z2.step_pin : PF9
printer.configfile.settings.stepper_z2.microsteps : 16
printer.configfile.settings.stepper_z2.dir_pin : PF10
printer.configfile.settings.stepper_z2.enable_pin : !PG2
printer.configfile.settings['gcode_macro ercf_test_servo'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_TEST_SERVO func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_TEST_SERVO Start ... {% endif %}
SET_SERVO SERVO=ercf_servo ANGLE={params.VALUE|float}
_servo_move_dwell
SET_SERVO SERVO=ercf_servo WIDTH=0.0
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_TEST_SERVO End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_TEST_SERVO {% endif %}
printer.configfile.settings['gcode_macro ercf_test_servo'].description : Test the servo angle
printer.configfile.settings['gcode_macro chlts_full'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ChLts_Full {% endif %}
SET_LED LED=chamber_lights RED=1 GREEN=1 BLUE=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ChLts_Full {% endif %}
printer.configfile.settings['gcode_macro chlts_full'].description : G-Code macro
printer.configfile.settings['bed_mesh cold_klicky'].tension : 0.2
printer.configfile.settings['bed_mesh cold_klicky'].min_x : 40.0
printer.configfile.settings['bed_mesh cold_klicky'].min_y : 40.0
printer.configfile.settings['bed_mesh cold_klicky'].y_count : 5
printer.configfile.settings['bed_mesh cold_klicky'].mesh_y_pps : 2
printer.configfile.settings['bed_mesh cold_klicky'].x_count : 5
printer.configfile.settings['bed_mesh cold_klicky'].points : ((0.003281, 0.035625, 0.063438, 0.025781, -0.020937), (-0.007344, 0.030469, 0.021719, -0.021094, -0.02), (-0.035156, 0.006406, 0.0, -0.013906, -0.055625), (-0.01375, 0.044375, 0.014375, -0.021875, -0.044375), (-0.032813, 0.016875, -0.002188, -0.035781, -0.03625))
printer.configfile.settings['bed_mesh cold_klicky'].algo : bicubic
printer.configfile.settings['bed_mesh cold_klicky'].mesh_x_pps : 2
printer.configfile.settings['bed_mesh cold_klicky'].version : 1
printer.configfile.settings['bed_mesh cold_klicky'].max_x : 330.0
printer.configfile.settings['bed_mesh cold_klicky'].max_y : 330.0
printer.configfile.settings['gcode_macro ercf_move_selector'].rename_existing : _ERCF_MOVE_SELECTOR_STOCK
printer.configfile.settings['gcode_macro ercf_move_selector'].description : wrapper for ERCF.py fw proc to handle error conditions, verbosity
printer.configfile.settings['gcode_macro ercf_move_selector'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_MOVE_SELECTOR func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_MOVE_SELECTOR Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > ERCF_MOVE_SELECTOR Skipped - an error condition is asserted < {% endif %}
{% else %}
_ERCF_MOVE_SELECTOR_STOCK {rawparams}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_MOVE_SELECTOR End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_MOVE_SELECTOR {% endif %}
printer.configfile.settings['gcode_macro _enable_trace_debug'].gcode : 
{% set entry_trace_enabled_flag = printer["gcode_macro _printer_vars"].ptr_verb_codeflow|default(0)|int %}
SET_GCODE_VARIABLE MACRO=_printer_vars VARIABLE=ptr_verb_codeflow VALUE=1
{% if entry_trace_enabled_flag == 0 %}
M118
M118
{% endif %}
_proc_start function=_enable_trace_debug func_params='"{rawparams|string}"'
_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE=1
{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _enable_trace_debug <<<<< {% endif %}
_proc_end function=_enable_trace_debug
printer.configfile.settings['gcode_macro _enable_trace_debug'].description : sets codeflow verbosity flag and inits depth counter
printer.configfile.settings['gcode_macro _disable_gcode_state_debug'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_disable_gcode_state_debug func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _disable_save_var_debug <<<<< {% endif %}
SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=gcode_state_debug VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_disable_gcode_state_debug {% endif %}
printer.configfile.settings['gcode_macro _disable_gcode_state_debug'].description : used to disable save_var debug
printer.configfile.settings['delayed_gcode disable_heater'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=disable_heater func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> disable_heater Start ... {% endif %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int != 0 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Disable extruder heater (_ERCF_PAUSE timeout...) {% endif %}
M104 S0
_clear_HE_heating_indication
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... disable_heater End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=disable_heater {% endif %}
printer.configfile.settings['delayed_gcode disable_heater'].initial_duration : 0.0
printer.configfile.settings['gcode_macro print_end'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PRINT_END func_params='"{rawparams|string}"'  {% endif %}
{% set th = printer.toolhead %}
{% set entry_ptr_state = svv.last_ptr_state %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
M118 >>> Print Ending - svv.maxz:{svv.maxz} th.z:{th.position.z|float} <<<
{% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_ending"'
{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
{% set z_safe = [(th.position.z|float + 1), th.axis_maximum.z|float]|min %}
SAVE_GCODE_STATE NAME=STATE_PRINT_END
_reset_extruder
{% if printer.extruder.temperature|int >= retract_temp_min|int %}
G1 E-0.4 F3600
{% else %}
M118 No print_end retract due to Low Temp...
{% endif %}
G0 X{x_safe} Y{y_safe} Z{z_safe} F15000
M400
_park_head ENTRY='print_ending'
{% if params.UNLOAD|default(0)|int %}
ERCF_EJECT FINAL=1
{% endif %}
; {% if print_end_scrub or params.SCRUB|default(0)|int %}
;
; G0 Z15 F1500
; CLEAN_NOZZLE DX={th.axis_maximum.x//2|float}  DY={th.axis_maximum.y|float}  DZ=15.0
; {% endif %}
M107
_HOURMETER_OFF
_PrintLED_Off
RESTORE_GCODE_STATE NAME=STATE_PRINT_END
M117 Print Completed
M220 S100
M221 S100
M106 S26
M141 S40
TURN_OFF_HEATERS
CLEAR_PAUSE
M118 PRINT_END @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}
M300 P10 S1000
M300 P10 S2000
M300 P10 S3000
{% if svv.module_ledeff_loaded %}
_set_ledeff_mode CHAIN=chamber_lights	EFFECT=normal	RESET=1
_set_ledeff_mode CHAIN=lcd_lights 	EFFECT=normal	RESET=1
; _set_ledeff_mode CHAIN=ercf_lights	EFFECT=off		RESET=1
; _set_ledeff_mode CHAIN=dash_lights	EFFECT=off		RESET=1
{% else %}
ChLts_Normal
LcdLts_Normal
; ERCFLts_off
; DBLts_off
{% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_ended"'
SAVE_VARIABLE VARIABLE=final_maxz VALUE={svv.maxz}
SAVE_VARIABLE VARIABLE=maxz VALUE=0.0
SAVE_VARIABLE VARIABLE=has_wipe_tower VALUE=-1
SAVE_VARIABLE VARIABLE=v2_2526_slicer_check VALUE='"NULL"'
SAVE_VARIABLE VARIABLE=last_saved_gcode_state VALUE='"NULL"'
{% if 1 %}
{% if svv.module_ercf_loaded %}
{% if svv.ercf_swaps > 1 %}
M118 { ">>> Print Complete - " ~ svv.ercf_swaps ~ " swaps. <<<" }
M117 Done - {svv.ercf_swaps} swaps.
{% else %}
M118 { ">>> Print Complete - " ~ svv.ercf_swaps ~ " swap. <<<" }
M117 Done - {svv.ercf_swaps} swap.
{% endif %}
{% else %}
M118 >>> Print Complete <<<
M117 Print Complete
{% endif %}
{% endif %}
SAVE_VARIABLE VARIABLE=ercf_swaps_last_complete_print VALUE={svv.ercf_swaps}
SAVE_VARIABLE VARIABLE=ercf_swaps VALUE=0
printer_config_backup
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PRINT_END {% endif %}
printer.configfile.settings['gcode_macro print_end'].variable_print_end_scrub : False
printer.configfile.settings['gcode_macro print_end'].description : G-Code macro
printer.configfile.settings['gcode_macro print_end'].variable_retract_temp_min : 180
printer.configfile.settings['delayed_gcode _gcodeproc_module_start'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_gcodeproc_module_start func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %}  M118 >>> _gcodeproc_module_start Start <<< {% endif %}
SAVE_VARIABLE VARIABLE=module_gcodeproc_loaded VALUE=1
SAVE_VARIABLE VARIABLE=gcodeproc_err_flag VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %}  M118 >>> _gcodeproc_module_start End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_gcodeproc_module_start {% endif %}
printer.configfile.settings['delayed_gcode _gcodeproc_module_start'].initial_duration : 0.5
printer.configfile.settings['gcode_macro m104'].rename_existing : M104.1
printer.configfile.settings['gcode_macro m104'].description : capture and set target HE temp
printer.configfile.settings['gcode_macro m104'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M104 func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=extruder_temp_setting VALUE={params.S|int}
M104.1 {rawparams}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M104 {% endif %}
printer.configfile.settings['gcode_macro m109'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M109 func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=extruder_temp_setting VALUE={params.S|int}
M109.1 {rawparams}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M109 {% endif %}
printer.configfile.settings['gcode_macro m109'].description : capture and set target HE temp, waiting for temp attainment
printer.configfile.settings['gcode_macro m109'].rename_existing : M109.1
printer.configfile.settings['output_pin _sw_red_led'].pin : pico:gpio28
printer.configfile.settings['output_pin _sw_red_led'].shutdown_value : 0.0
printer.configfile.settings['output_pin _sw_red_led'].pwm : False
printer.configfile.settings['output_pin _sw_red_led'].maximum_mcu_duration : 0.0
printer.configfile.settings['output_pin _sw_red_led'].value : 0.0
printer.configfile.settings['gcode_macro probe_calibrate'].rename_existing : _PROBE_CALIBRATE_STOCK
printer.configfile.settings['gcode_macro probe_calibrate'].description : Calibrate the probes z_offset with klicky automount
printer.configfile.settings['gcode_macro probe_calibrate'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PROBE_CALIBRATE func_params='"{rawparams|string}"'  {% endif %}
{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed * 60 %}
{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed * 60 %}
{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
{% if not 'xyz' in printer.toolhead.homed_axes %}
{ action_raise_error("Must Home X, Y and Z Axis First!") }
{% endif %}
{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
or printer['gcode_move'].position.y < probe_offset_y
or printer['gcode_move'].position.x > (max_x - probe_offset_x)
or printer['gcode_move'].position.x < probe_offset_x %}
{ action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED!") }
{% endif%}
_entry_point function=PROBE_CALIBRATE
_CheckProbe action=query
Attach_Probe back=1
_PROBE_CALIBRATE_STOCK {% for p in params
%}{'%s=%s ' % (p, params[p])}{%
endfor %}
Dock_Probe back=1
_exit_point function=PROBE_CALIBRATE move=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PROBE_CALIBRATE {% endif %}
printer.configfile.settings['gcode_macro _pwrled_on'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_PwrLED_On func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _PwrLED_On <<< {% endif %}
SET_PIN PIN=_sw_blu_led VALUE=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_PwrLED_On {% endif %}
printer.configfile.settings['gcode_macro _pwrled_on'].description : Illuminate the Halo Sw Blue LED
printer.configfile.settings['gcode_macro _hourmeter_on'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_HOURMETER_ON func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _HOURMETER_ON <<< {% endif %}
SET_PIN PIN=_hourmeter VALUE=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_HOURMETER_ON {% endif %}
printer.configfile.settings['gcode_macro _hourmeter_on'].description : Turn Hour Meter On
printer.configfile.settings['temperature_fan chamber'].control : watermark
printer.configfile.settings['temperature_fan chamber'].max_speed : 1.0
printer.configfile.settings['temperature_fan chamber'].min_temp : 10.0
printer.configfile.settings['temperature_fan chamber'].pullup_resistor : 4700.0
printer.configfile.settings['temperature_fan chamber'].gcode_id : Chamber
printer.configfile.settings['temperature_fan chamber'].pin : PD15
printer.configfile.settings['temperature_fan chamber'].off_below : 0.0
printer.configfile.settings['temperature_fan chamber'].sensor_pin : PF5
printer.configfile.settings['temperature_fan chamber'].shutdown_speed : 0.0
printer.configfile.settings['temperature_fan chamber'].max_delta : 2.0
printer.configfile.settings['temperature_fan chamber'].sensor_type : Duct
printer.configfile.settings['temperature_fan chamber'].target_temp : 40.0
printer.configfile.settings['temperature_fan chamber'].inline_resistor : 0.0
printer.configfile.settings['temperature_fan chamber'].min_speed : 0.3
printer.configfile.settings['temperature_fan chamber'].kick_start_time : 0.1
printer.configfile.settings['temperature_fan chamber'].hardware_pwm : False
printer.configfile.settings['temperature_fan chamber'].cycle_time : 0.01
printer.configfile.settings['temperature_fan chamber'].max_temp : 90.0
printer.configfile.settings['temperature_fan chamber'].max_power : 1.0
printer.configfile.settings['gcode_macro idleled_off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=IdleLED_Off func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> IdleLED_Off <<< {% endif %}
_IdleLED_Off
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=IdleLED_Off {% endif %}
printer.configfile.settings['gcode_macro idleled_off'].description : G-Code macro
printer.configfile.settings.stepper_z3.full_steps_per_rotation : 200
printer.configfile.settings.stepper_z3.rotation_distance : 40.0
printer.configfile.settings.stepper_z3.gear_ratio : ((80.0, 16.0),)
printer.configfile.settings.stepper_z3.step_pin : PC13
printer.configfile.settings.stepper_z3.microsteps : 16
printer.configfile.settings.stepper_z3.dir_pin : !PF0
printer.configfile.settings.stepper_z3.enable_pin : !PF1
printer.configfile.settings.heater_bed.control : pid
printer.configfile.settings.heater_bed.pid_kp : 37.631
printer.configfile.settings.heater_bed.pullup_resistor : 4700.0
printer.configfile.settings.heater_bed.sensor_pin : PF3
printer.configfile.settings.heater_bed.heater_pin : PA1
printer.configfile.settings.heater_bed.max_power : 1.0
printer.configfile.settings.heater_bed.min_extrude_temp : 170.0
printer.configfile.settings.heater_bed.sensor_type : MHz_B3950
printer.configfile.settings.heater_bed.inline_resistor : 0.0
printer.configfile.settings.heater_bed.smooth_time : 1.0
printer.configfile.settings.heater_bed.pwm_cycle_time : 0.01666
printer.configfile.settings.heater_bed.pid_ki : 1.28
printer.configfile.settings.heater_bed.min_temp : 0.0
printer.configfile.settings.heater_bed.max_temp : 125.0
printer.configfile.settings.heater_bed.pid_kd : 276.59
printer.configfile.settings['gcode_macro ercf_reset_encoder_counts'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_RESET_ENCODER_COUNTS func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_RESET_ENCODER_COUNTS Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
_ERCF_RESET_ENCODER_COUNTS_STOCK {rawparams}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_RESET_ENCODER_COUNTS End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_RESET_ENCODER_COUNTS {% endif %}
printer.configfile.settings['gcode_macro ercf_reset_encoder_counts'].description : wrapper for ERCF.py fw proc to handle error conditions, verbosity
printer.configfile.settings['gcode_macro ercf_reset_encoder_counts'].rename_existing : _ERCF_RESET_ENCODER_COUNTS_STOCK
printer.configfile.settings['gcode_macro lcdlts_normal'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=LcdLts_Normal {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=lcd_lights RED=0.5 GREEN=0.5 BLUE=0.5
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=LcdLts_Normal {% endif %}
printer.configfile.settings['gcode_macro lcdlts_normal'].description : G-Code macro
printer.configfile.settings['gcode_macro host_shutdown'].gcode : 
{action_call_remote_method("shutdown_machine")}
printer.configfile.settings['gcode_macro host_shutdown'].description : G-Code macro
printer.configfile.settings['gcode_macro ercf_test_grip'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_TEST_GRIP func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_TEST_GRIP Start ... {% endif %}
_ERCF_SERVO_DOWN
ERCF_MOTORS_OFF
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_TEST_GRIP End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_TEST_GRIP {% endif %}
printer.configfile.settings['gcode_macro ercf_test_grip'].description : Test the ERCF grip for a Tool
printer.configfile.settings['gcode_shell_command system_shutdown'].command : sudo shutdown now
printer.configfile.settings['gcode_shell_command system_shutdown'].verbose : False
printer.configfile.settings['gcode_shell_command system_shutdown'].timeout : 2.0
printer.configfile.settings['gcode_macro fil_ecdr_rel'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=fil_ecdr_rel {% endif %}
M118 fil_ecdr_rel
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=fil_ecdr_rel {% endif %}
printer.configfile.settings['gcode_macro fil_ecdr_rel'].description : called when the fil encoder toggles open
printer.configfile.settings['gcode_macro m1170'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M1170 func_params='"{rawparams|string}"'  {% endif %}
M117 L:{(params.L|int + 1)|int}/{params.T|int}|{(printer.virtual_sdcard.progress*100)|round(2,'common')}%
{% set layer_chg_msg = "L:" ~ (params.L|int + 1)|int ~ "/" ~ params.T|int ~ "|" ~ printer.virtual_sdcard.file_position ~ " | " ~ (printer.virtual_sdcard.progress*100)|round(2,'common') ~ "%: X:" ~ printer.toolhead.position.x|round(3,'common') ~ " Y:" ~ printer.toolhead.position.y|round(3,'common') ~ " Z:" ~ printer.toolhead.position.z|round(3,'common') %}
M118 {layer_chg_msg}
Save_Variable VARIABLE=last_layer_chg_msg VALUE='"{layer_chg_msg}"'
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M1170 {% endif %}
printer.configfile.settings['gcode_macro m1170'].description : workaround for fixing a zero-based layer display - slicer is zero-based, gray matter is 1-based...
printer.configfile.settings['gcode_macro sng_scom'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_scom {% endif %}
M117 SCOM
M3001 S294 P200
M3001 S588 P200
M3001 S440 P200
M3001 S392 P200
M3001 S784 P200
M3001 S440 P200
M3001 S740 P200
M3001 S440 P200
M3001 S294 P200
M3001 S588 P200
M3001 S440 P200
M3001 S392 P200
M3001 S784 P200
M3001 S440 P200
M3001 S740 P200
M3001 S440 P200
M3001 S330 P200
M3001 S588 P200
M3001 S440 P200
M3001 S392 P200
M3001 S784 P200
M3001 S440 P200
M3001 S740 P200
M3001 S440 P200
M3001 S330 P200
M3001 S588 P200
M3001 S440 P200
M3001 S392 P200
M3001 S784 P200
M3001 S440 P200
M3001 S740 P200
M3001 S440 P200
M3001 S392 P200
M3001 S588 P200
M3001 S440 P200
M3001 S392 P200
M3001 S784 P200
M3001 S440 P200
M3001 S740 P200
M3001 S440 P200
M3001 S392 P200
M3001 S588 P200
M3001 S440 P200
M3001 S392 P200
M3001 S784 P200
M3001 S440 P200
M3001 S740 P200
M3001 S440 P200
M3001 S294 P800
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_scom {% endif %}
printer.configfile.settings['gcode_macro sng_scom'].description : G-Code macro
printer.configfile.settings['gcode_macro _enable_gcode_state_debug'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_enable_gcode_state_debug func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _enable_save_var_debug <<<<< {% endif %}
SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=gcode_state_debug VALUE=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_enable_gcode_state_debug {% endif %}
printer.configfile.settings['gcode_macro _enable_gcode_state_debug'].description : used to enable save_var debug
printer.configfile.settings['gcode_macro _klicky_vars'].description : G-Code macro
printer.configfile.settings['gcode_macro _klicky_vars'].gcode : 
printer.configfile.settings['gcode_macro _klicky_vars'].variable_klicky_verb_error : 1
printer.configfile.settings['gcode_macro _klicky_vars'].variable_klicky_verb_debug : 0
printer.configfile.settings['gcode_macro _klicky_vars'].variable_klicky_verb_status : 0
printer.configfile.settings['gcode_macro _klicky_vars'].variable_klicky_verb_codeflow : 0
printer.configfile.settings['gcode_macro _klicky_vars'].variable_klicky_verb_info : 0
printer.configfile.settings['menu __main __filament __clean'].gcode : 
clean_nozzle
printer.configfile.settings['menu __main __filament __clean'].enable : True
printer.configfile.settings['menu __main __filament __clean'].type : command
printer.configfile.settings['menu __main __filament __clean'].name : Clean Nozzle
printer.configfile.settings['gcode_macro z_calibrate'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=Z_Calibrate func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Z_Calibrate <<< {% endif %}
_ENSURE_QGL
CALIBRATE_Z
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=Z_Calibrate {% endif %}
printer.configfile.settings['gcode_macro z_calibrate'].description : Automatically calibrates the nozzles offset to the print surface (used in Print_Start)
printer.configfile.settings['gcode_macro ercf_calibrate_single'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CALIBRATE_SINGLE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CALIBRATE_SINGLE Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
{% if params.TOOL|int >= 0 and params.TOOL|int < printer["gcode_macro _ERCF_VAR"].colorselector|length %}
{% if printer["gcode_macro ERCF_HOME"].home == -1 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Homing the ERCF... {% endif %}
ERCF_HOME
{% endif %}
; ERCF_SELECT_TOOL TOOL={params.TOOL}
ERCF_SELECT_TOOL_dbg TOOL={params.TOOL}
ERCF_SET_STEPS RATIO=1.0
{% if params.TOOL|int == 0 %}
_ercf_set_eject_temp
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Calibrating reference tool {params.TOOL} {% endif %}
ERCF_LOAD LENGTH={printer["gcode_macro _ERCF_VAR"].min_bowden_length}
ERCF_HOME_EXTRUDER TOTAL_LENGTH=400 STEP_LENGTH=0.5
ERCF_CALIB_SAVE_VAR TOOL={params.TOOL}
_ercf_syncd_th_load_unload RETRACT=1 MODIFIER={printer["gcode_macro _ERCF_VAR"].ercf_dual_unload_mod|float}
ERCF_CALIB_UNLOAD
ERCF_BUZZ_GEAR_MOTOR
ERCF_IS_FILAMENT_STUCK_IN_ERCF
; _ercf_restore_he_temp
_ercf_start_Cold_temp
_ERCF_UNSELECT_TOOL
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Calibrating tool {params.TOOL} {% endif %}
ERCF_LOAD LENGTH={printer["gcode_macro _ERCF_VAR"].min_bowden_length|float - 100.0}
ERCF_CALIB_SAVE_VAR tool={params.TOOL}
ERCF_CALIB_UNLOAD LENGTH={printer["gcode_macro _ERCF_VAR"].min_bowden_length|float - 100.0 + 27.0}
{% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Tool out of range {% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=1
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CALIBRATE_SINGLE End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CALIBRATE_SINGLE {% endif %}
printer.configfile.settings['gcode_macro ercf_calibrate_single'].description : Calibration of a single ERCF Tool
printer.configfile.settings['gcode_macro ercflts_off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCFLts_Off {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=ercf_lights RED=0 GREEN=0 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCFLts_Off {% endif %}
printer.configfile.settings['gcode_macro ercflts_off'].description : G-Code macro
printer.configfile.settings['gcode_macro chlts_green'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ChLts_Green {% endif %}
SET_LED LED=chamber_lights RED=0 GREEN=0.5 BLUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ChLts_Green {% endif %}
printer.configfile.settings['gcode_macro chlts_green'].description : G-Code macro
printer.configfile.settings['gcode_macro snd_meshstart'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_MeshStart {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_MeshStart {% endif %}
printer.configfile.settings['gcode_macro snd_meshstart'].description : G-Code macro
printer.configfile.settings['gcode_macro t9'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T9 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T9 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=9
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T9 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T9 {% endif %}
printer.configfile.settings['gcode_macro t9'].description : G-Code macro
printer.configfile.settings['gcode_macro t8'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T8 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T8 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=8
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T8 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T8 {% endif %}
printer.configfile.settings['gcode_macro t8'].description : G-Code macro
printer.configfile.settings['gcode_macro ercf_eject_from_bowden'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_EJECT_FROM_BOWDEN func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_EJECT_FROM_BOWDEN Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
_ercf_wait_eject_temp
{% endif %}
{% if printer.ercf.encoder_pos|float != 0 %}
ERCF_UNLOAD HOMING=1
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Filament ejected {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Filament already ejected {% endif %}
{% endif %}
_ERCF_SERVO_UP
_ercf_restore_he_temp
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_EJECT_FROM_BOWDEN End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_EJECT_FROM_BOWDEN {% endif %}
printer.configfile.settings['gcode_macro ercf_eject_from_bowden'].description : Unload filament from the reverse bowden - set/wait for HE temp, if filament detected in TH
printer.configfile.settings['gcode_macro t5'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T5 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T5 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=5
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T5 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T5 {% endif %}
printer.configfile.settings['gcode_macro t5'].description : G-Code macro
printer.configfile.settings['gcode_macro t4'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T4 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T4 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=4
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T4 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T4 {% endif %}
printer.configfile.settings['gcode_macro t4'].description : G-Code macro
printer.configfile.settings['gcode_macro t7'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T7 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T7 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=7
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T7 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T7 {% endif %}
printer.configfile.settings['gcode_macro t7'].description : G-Code macro
printer.configfile.settings['gcode_macro t6'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T6 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T6 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=6
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T6 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T6 {% endif %}
printer.configfile.settings['gcode_macro t6'].description : G-Code macro
printer.configfile.settings['gcode_macro t1'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T1 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T1 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=1
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T1 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T1 {% endif %}
printer.configfile.settings['gcode_macro t1'].description : G-Code macro
printer.configfile.settings['gcode_macro ercf_home_selector'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_HOME_SELECTOR func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_HOME_SELECTOR Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> Homing selector <<< {% endif %}
_ERCF_SERVO_UP
{% set number_of_chan=printer["gcode_macro _ERCF_VAR"].colorselector|length %}
{% set selector_length=(20.0 + 12*21.0 + (number_of_chan/3)*5.0) %}
MANUAL_STEPPER STEPPER=selector_stepper SET_POSITION=0
MANUAL_STEPPER STEPPER=selector_stepper SPEED=100 MOVE=-{selector_length|float} STOP_ON_ENDSTOP=1
MANUAL_STEPPER STEPPER=selector_stepper SET_POSITION=0
MANUAL_STEPPER STEPPER=selector_stepper SPEED=100 MOVE=5.0
MANUAL_STEPPER STEPPER=selector_stepper SPEED=10 MOVE=-10.0 STOP_ON_ENDSTOP=1
MANUAL_STEPPER STEPPER=selector_stepper SET_POSITION=0
SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=tool_selected VALUE=-1
SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=color_selected VALUE=-1
SAVE_VARIABLE VARIABLE=ercf_selector_homed VALUE=1
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_HOME_SELECTOR End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_HOME_SELECTOR {% endif %}
printer.configfile.settings['gcode_macro ercf_home_selector'].description : Home the ERCF selector
printer.configfile.settings['gcode_macro t3'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T3 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T3 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=3
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T3 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T3 {% endif %}
printer.configfile.settings['gcode_macro t3'].description : G-Code macro
printer.configfile.settings['gcode_macro t2'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T2 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T2 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=2
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T2 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T2 {% endif %}
printer.configfile.settings['gcode_macro t2'].description : G-Code macro
printer.configfile.settings['gcode_macro _stop_bounds_checking'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_stop_bounds_checking func_params='"{rawparams|string}"'  {% endif %}
UPDATE_DELAYED_GCODE ID=check_bounds DURATION=0
M118 H2O cooling automatic parameter check Disabled
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_stop_bounds_checking {% endif %}
printer.configfile.settings['gcode_macro _stop_bounds_checking'].description : G-Code macro
printer.configfile.settings['gcode_macro sng_bethovene'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_bethovene {% endif %}
M117 Bethoven
M3001 S988 P400
M3001 S988 P400
M3001 S1047 P400
M3001 S1175 P400
M3001 S1175 P400
M3001 S1047 P400
M3001 S988 P400
M3001 S880 P400
M3001 S784 P400
M3001 S784 P400
M3001 S880 P400
M3001 S988 P400
M3001 S988 P600
M3001 S880 P200
M3001 S880 P800
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_bethovene {% endif %}
printer.configfile.settings['gcode_macro sng_bethovene'].description : G-Code macro
printer.configfile.settings['gcode_macro print_start'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PRINT_START func_params='"{rawparams|string}"'  {% endif %}
{% set th = printer.toolhead %}
SAVE_VARIABLE VARIABLE=maxz VALUE=0.0
SAVE_VARIABLE VARIABLE=ercf_swaps VALUE=0
M220 S100
M221 S100
M104 S{params.EXTRUDER|int}
M140 S{params.BED|int}
{% if svv.module_ercf_loaded|int %}
{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
{% endif %}
{% if svv.module_linadv_loaded %}
{% if printer["gcode_macro _linadv_vars"].dynamic_pa_enable %}
M118 -- Mesh-Specific Dynamic PA Enabled --
{% else %}
M118 -- Mesh-Specific Dynamic PA DISABLED --
{% endif %}
{% endif %}
{% if svv.module_gcodeproc_loaded %}
{% if printer["gcode_macro _gcodeproc_vars"].dynamic_extrate_enable %}
M118 -- Mesh-Specific Dynamic ExtRate Enabled --
{% else %}
M118 -- Mesh-Specific Dynamic ExtRate DISABLED --
{% endif %}
{% endif %}
{% if svv.module_gcodeproc_loaded %}
{% if printer["gcode_macro _gcodeproc_vars"].dynamic_spdrate_enable %}
M118 -- Mesh-Specific Dynamic SpdRate Enabled --
{% else %}
M118 -- Mesh-Specific Dynamic SpdRate DISABLED --
{% endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].test_ercf_load_seq_at_print %}
M118 PrintStart ERCF Fil Load Test Seq Starting
ERCF_TEST_LOAD_SEQUENCE LOOP=1
M118 PrintStart ERCF Fil Load Test Seq Completed
{% endif %}
{% endif %}
{% if svv.v2_2526_slicer_check != "mhz_cura"  and svv.v2_2526_slicer_check != "mhz_ps" %}
M117 Houston, We have a problem...
SAVE_VARIABLE VARIABLE=v2_2526_slicer_check VALUE='"NULL"'
{action_raise_error("WRONG SLICER AND/OR CONFIGURATION USED: " + svv.v2_2526_slicer_check|string) }
{% else %}
M118 { "Slicer Check Passed: " ~ svv.v2_2526_slicer_check }
{% endif %}
{% if svv.module_ledeff_loaded %}
_set_ledeff_mode CHAIN=chamber_lights	EFFECT=normal	RESET=1
_set_ledeff_mode CHAIN=lcd_lights 	EFFECT=normal	RESET=1
; _set_ledeff_mode CHAIN=ercf_lights	EFFECT=off		RESET=1
; _set_ledeff_mode CHAIN=dash_lights	EFFECT=off		RESET=1
{% else %}
ChLts_Normal
LcdLts_Normal
; ERCFLts_off
; DBLts_off
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Print Starting <<< {% endif %}
{% if svv.module_debug_loaded %} _disable_save_var_debug {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_starting"'
snd_PrintStart
{% if svv.module_ercf_loaded %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 1 %}
UPDATE_DELAYED_GCODE ID=disable_heater DURATION=0
SET_GCODE_VARIABLE MACRO=_ERCF_PAUSE VARIABLE=is_paused VALUE=0
{% endif %}
{% endif %}
reset_noz_cam
CLEAR_PAUSE
_HOURMETER_ON
_PrintLED_On
M106 S26
M141 S60
go_absolute
G0 F15000
_ENSURE_QGL
CLEAN_NOZZLE
G28 Z
{% if svv.v2_2526_slicer_check == "mhz_ps" %}
M109 S{params.EXTRUDER|int}
{% endif %}
{% if svv.v2_2526_slicer_check != "mhz_ps" %}
{% if svv.module_ercf_loaded and printer['filament_switch_sensor toolhead_sensor'].filament_detected != False %}
{% else %}
_print_purge
{% endif %}
{% endif %}
{% if svv.v2_2526_slicer_check == "mhz_ps" %}
M190 S{params.BED|int}
{% endif %}
{% if svv.module_ercf_loaded %}
{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
{% endif %}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Temps are up - Printing <<< {% endif %}
M118 PRINT_START @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}
M117 Printing
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_started"'
_start_bounds_checking
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PRINT_START {% endif %}
printer.configfile.settings['gcode_macro print_start'].description : G-Code macro
printer.configfile.settings['gcode_macro _ercf_unselect_tool'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ERCF_UNSELECT_TOOL func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ERCF_UNSELECT_TOOL Start ... {% endif %}
{% set unselect_color = params.FORCED|default(1)|int %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
{% if printer["gcode_macro ERCF_HOME"].home != -1 %}
_ERCF_SERVO_UP
SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=tool_selected VALUE=-1
{% if unselect_color == 1 %}
SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=color_selected VALUE=-1
{% endif %}
ERCF_SET_STEPS RATIO=1.0
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Tool Unselected, Servo Raised {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Could not unselect tool, ERCF is not homed {% endif %}
{% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> _ERCF_UNSELECT_TOOL | _ERCF_PAUSE.is_paused = 1 <<< {% endif %}
_alert_ercf_is_paused
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ERCF_UNSELECT_TOOL End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ERCF_UNSELECT_TOOL {% endif %}
printer.configfile.settings['gcode_macro _ercf_unselect_tool'].description : Unselect tool_selected (set to -1) and, if FORCED=1, also unselects color_selected (sets to -1) (FORCED defaults to 1 if not passed)
printer.configfile.settings['gcode_macro _homing_variables'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_Homing_Variables func_params='"{rawparams|string}"'  {% endif %}
{% set reset  = params.RESET|default(0) %}
{% if reset %}
SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_Homing_Variables {% endif %}
printer.configfile.settings['gcode_macro _homing_variables'].description : G-Code macro
printer.configfile.settings['gcode_macro ercf_servo_up'].gcode : 
_ERCF_SERVO_UP {rawparams}
printer.configfile.settings['gcode_macro ercf_servo_up'].description : for macro purposes
printer.configfile.settings['gcode_macro sng_mch2'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_mch2 {% endif %}
M117 MCH2
M3001 P229 S294
M3001 P214 S370
M3001 P8 S440
M3001 P201 S73
M3001 P16 S110
M3001 P5 S294
M3001 P125 S370
M3001 P104 S0
M3001 P214 S440
M3001 P10 S370
M3001 P3 S110
M3001 P3 S147
M3001 P5 S220
M3001 P211 S294
M3001 P8 S110
M3001 P201 S440
M3001 P8 S165
M3001 P10 S220
M3001 P10 S330
M3001 P125 S277
M3001 P76 S0
M3001 P211 S440
M3001 P5 S139
M3001 P3 S165
M3001 P3 S220
M3001 P5 S277
M3001 P229 S330
M3001 P5 S73
M3001 P203 S440
M3001 P3 S110
M3001 P3 S147
M3001 P5 S294
M3001 P417 S370
M3001 P16 S587
M3001 P5 S110
M3001 P203 S147
M3001 P5 S370
M3001 P10 S440
M3001 P375 S294
M3001 P21 S0
M3001 P16 S370
M3001 P8 S147
M3001 P201 S92
M3001 P214 S392
M3001 P219 S440
M3001 P3 S165
M3001 P13 S220
M3001 P5 S277
M3001 P198 S330
M3001 P201 S440
M3001 P3 S165
M3001 P16 S220
M3001 P10 S330
M3001 P198 S139
M3001 P13 S110
M3001 P206 S392
M3001 P3 S277
M3001 P10 S330
M3001 P13 S165
M3001 P125 S220
M3001 P260 S0
M3001 P5 S139
M3001 P3 S165
M3001 P219 S220
M3001 P8 S73
M3001 P193 S294
M3001 P5 S110
M3001 P250 S147
M3001 P169 S0
M3001 P3 S92
M3001 P5 S110
M3001 P232 S147
M3001 P404 S73
M3001 P3 S110
M3001 P8 S147
M3001 P10 S294
M3001 P203 S92
M3001 P229 S370
M3001 P5 S73
M3001 P198 S440
M3001 P3 S110
M3001 P13 S147
M3001 P5 S220
M3001 P3 S294
M3001 P219 S370
M3001 P211 S440
M3001 P5 S110
M3001 P3 S147
M3001 P3 S220
M3001 P5 S294
M3001 P232 S370
M3001 P8 S440
M3001 P188 S110
M3001 P5 S165
M3001 P10 S220
M3001 P16 S330
M3001 P198 S277
M3001 P201 S440
M3001 P13 S220
M3001 P5 S139
M3001 P3 S165
M3001 P3 S277
M3001 P224 S330
M3001 P3 S73
M3001 P195 S440
M3001 P3 S110
M3001 P8 S147
M3001 P10 S370
M3001 P411 S294
M3001 P21 S587
M3001 P5 S110
M3001 P10 S147
M3001 P193 S92
M3001 P5 S73
M3001 P5 S294
M3001 P5 S370
M3001 P391 S440
M3001 P5 S110
M3001 P3 S147
M3001 P216 S370
M3001 P203 S392
M3001 P10 S440
M3001 P182 S110
M3001 P21 S165
M3001 P3 S220
M3001 P13 S277
M3001 P141 S330
M3001 P57 S0
M3001 P193 S440
M3001 P5 S165
M3001 P29 S220
M3001 P8 S139
M3001 P161 S330
M3001 P26 S0
M3001 P5 S110
M3001 P193 S392
M3001 P10 S330
M3001 P3 S220
M3001 P250 S277
M3001 P154 S0
M3001 P3 S165
M3001 P125 S220
M3001 P104 S0
M3001 P8 S73
M3001 P198 S294
M3001 P10 S147
M3001 P125 S110
M3001 P286 S0
M3001 P5 S92
M3001 P3 S110
M3001 P29 S147
M3001 P5 S185
M3001 P195 S220
M3001 P393 S73
M3001 P5 S587
M3001 P5 S110
M3001 P198 S147
M3001 P219 S554
M3001 P5 S98
M3001 P188 S494
M3001 P5 S147
M3001 P65 S196
M3001 P167 S0
M3001 P8 S294
M3001 P182 S392
M3001 P5 S147
M3001 P10 S196
M3001 P242 S123
M3001 P8 S98
M3001 P177 S494
M3001 P203 S196
M3001 P16 S392
M3001 P159 S294
M3001 P10 S147
M3001 P10 S196
M3001 P125 S123
M3001 P122 S0
M3001 P10 S440
M3001 P167 S147
M3001 P10 S185
M3001 P250 S220
M3001 P156 S0
M3001 P3 S185
M3001 P10 S494
M3001 P206 S220
M3001 P5 S440
M3001 P391 S147
M3001 P3 S185
M3001 P3 S220
M3001 P195 S587
M3001 P221 S554
M3001 P8 S98
M3001 P185 S494
M3001 P3 S147
M3001 P221 S196
M3001 P5 S294
M3001 P172 S392
M3001 P5 S147
M3001 P10 S196
M3001 P221 S123
M3001 P10 S98
M3001 P164 S494
M3001 P229 S587
M3001 P10 S196
M3001 P3 S123
M3001 P125 S147
M3001 P34 S0
M3001 P10 S147
M3001 P125 S196
M3001 P120 S0
M3001 P10 S440
M3001 P188 S110
M3001 P5 S220
M3001 P5 S277
M3001 P250 S330
M3001 P151 S0
M3001 P10 S277
M3001 P5 S165
M3001 P3 S220
M3001 P206 S330
M3001 P336 S110
M3001 P29 S0
M3001 P3 S220
M3001 P10 S294
M3001 P8 S139
M3001 P172 S165
M3001 P227 S370
M3001 P8 S440
M3001 P193 S73
M3001 P5 S110
M3001 P3 S147
M3001 P10 S370
M3001 P8 S220
M3001 P198 S294
M3001 P208 S440
M3001 P5 S92
M3001 P5 S110
M3001 P3 S147
M3001 P3 S220
M3001 P5 S294
M3001 P219 S370
M3001 P10 S440
M3001 P193 S110
M3001 P5 S165
M3001 P3 S220
M3001 P8 S277
M3001 P198 S330
M3001 P182 S440
M3001 P8 S220
M3001 P8 S139
M3001 P3 S165
M3001 P3 S277
M3001 P206 S330
M3001 P8 S73
M3001 P188 S440
M3001 P3 S110
M3001 P3 S294
M3001 P10 S370
M3001 P125 S147
M3001 P234 S0
M3001 P21 S587
M3001 P5 S110
M3001 P214 S147
M3001 P3 S73
M3001 P8 S294
M3001 P354 S440
M3001 P21 S0
M3001 P5 S110
M3001 P10 S370
M3001 P125 S147
M3001 P73 S0
M3001 P195 S392
M3001 P10 S440
M3001 P174 S110
M3001 P3 S165
M3001 P29 S220
M3001 P13 S277
M3001 P185 S330
M3001 P198 S440
M3001 P10 S277
M3001 P5 S165
M3001 P174 S330
M3001 P39 S0
M3001 P172 S392
M3001 P206 S330
M3001 P13 S220
M3001 P172 S165
M3001 P125 S139
M3001 P109 S0
M3001 P18 S294
M3001 P177 S73
M3001 P3 S185
M3001 P10 S220
M3001 P5 S110
M3001 P125 S147
M3001 P242 S0
M3001 P3 S110
M3001 P16 S147
M3001 P3 S185
M3001 P206 S220
M3001 P5 S92
M3001 P16 S147
M3001 P250 S73
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_mch2 {% endif %}
printer.configfile.settings['gcode_macro sng_mch2'].description : G-Code macro
printer.configfile.settings['gcode_macro ercflts_full'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCFLts_Full {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=ercf_lights RED=1 GREEN=1 BLUE=1
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCFLts_Full {% endif %}
printer.configfile.settings['gcode_macro ercflts_full'].description : G-Code macro
printer.configfile.settings['gcode_macro sng_'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_ {% endif %}
M117 Playing ___
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_ {% endif %}
printer.configfile.settings['gcode_macro sng_'].description : G-Code macro
printer.configfile.settings.resonance_tester.min_freq : 5.0
printer.configfile.settings.resonance_tester.probe_points : ((175.0, 175.0, 20.0),)
printer.configfile.settings.resonance_tester.move_speed : 50.0
printer.configfile.settings.resonance_tester.hz_per_sec : 1.0
printer.configfile.settings.resonance_tester.max_freq : 133.333333333
printer.configfile.settings.resonance_tester.accel_per_hz : 75.0
printer.configfile.settings.resonance_tester.accel_chip : adxl345
printer.configfile.settings['gcode_macro _setdynamicextrate'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_SetDynamicExtRate func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _gcodeproc_vars"].dynamic_extrate_enable %}
{% if printer["gcode_macro _gcodeproc_vars"].gcodeproc_verb_codeflow %}  M118 >>> _SetDynamicExtRate Start <<< {% endif %}
{% set this1 = namespace(pa_unset=true) %}
{% set this2 = namespace(matches=0) %}
{% for mesh_idx in range(printer["gcode_macro _SetDynamicExtRate"].mesh_name|length) %}
{% if params.MESH|string|lower == printer["gcode_macro _SetDynamicExtRate"].mesh_name[mesh_idx|int]|string|lower %}
M221 S{(printer["gcode_macro _SetDynamicExtRate"].mesh_extrate[mesh_idx|int]|float * 100)|int}
{% set this1.pa_unset = false %}
{% set this2.matches = this2.matches + 1 %}
{% endif %}
{% endfor %}
{% if this1.pa_unset %}
{% if printer["gcode_macro _gcodeproc_vars"].gcodeproc_verb_error %}
M118 >>> _SetDynamicExtRate|UNKNOWN MESH: {params.MESH|string|lower} <<<
{% endif %}
M300 S200 P50
{% endif %}
{% if this2.matches > 1 %}
{% if printer["gcode_macro _gcodeproc_vars"].gcodeproc_verb_error %}
M118 >>> _SetDynamicExtRate|Multiple matches on MESH: {params.MESH|string|lower} - matched {this2.matches} times <<<
{% endif %}
M300 S200 P50
{% endif %}
{% if printer["gcode_macro _gcodeproc_vars"].gcodeproc_verb_codeflow %}  M118 >>> _SetDynamicExtRate End <<< {% endif %}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_SetDynamicExtRate {% endif %}
printer.configfile.settings['gcode_macro _setdynamicextrate'].variable_mesh_extrate : [1.0,			1.0,			1.0,						1.0,					1.0,			1.0,			1.0,				1.0,		1.0,				1.0,			1.0,			1.0,				1.0,							1.0,			1.0,		1.0	]
printer.configfile.settings['gcode_macro _setdynamicextrate'].variable_mesh_name : ["Unknown",	"Perimeter",	"External perimeter",	"Overhang perimeter",	"Internal infill",	"Solid infill",	"Top solid infill",	"Ironing",	"Bridge infill",	"Gap fill",		"Skirt/Brim",	"Support material",	"Support material interface",	"Wipe tower",	"Custom",	"Mixed"		]
printer.configfile.settings['gcode_macro _setdynamicextrate'].description : Used to set klipper's Extrusion Rate Multiplier based on specific mesh types passed in gcode
printer.configfile.settings['gcode_macro lcdlts_orange'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=LcdLts_Orange {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=lcd_lights RED=0.3 GREEN=0.1 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=LcdLts_Orange {% endif %}
printer.configfile.settings['gcode_macro lcdlts_orange'].description : G-Code macro
printer.configfile.settings['gcode_macro _exit_point'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_exit_point func_params='"{rawparams|string}"'  {% endif %}
{% set move_speed = printer["gcode_macro _User_Variables"].xytravel_speed %}
{% set function  = 'pre_' ~ params.FUNCTION %}
{% set move  = params.MOVE|default(0) %}
{% if printer["gcode_macro _klicky_vars"].klicky_verb_info %} M118 >>> _____EXITING {function} MOVE={move} <<< {% endif %}
M400
RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={move_speed}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_exit_point {% endif %}
printer.configfile.settings['gcode_macro _exit_point'].description : G-Code macro
printer.configfile.settings['bed_mesh ubersoaked'].tension : 0.2
printer.configfile.settings['bed_mesh ubersoaked'].min_x : 40.0
printer.configfile.settings['bed_mesh ubersoaked'].min_y : 40.0
printer.configfile.settings['bed_mesh ubersoaked'].y_count : 5
printer.configfile.settings['bed_mesh ubersoaked'].mesh_y_pps : 2
printer.configfile.settings['bed_mesh ubersoaked'].x_count : 5
printer.configfile.settings['bed_mesh ubersoaked'].version : 1
printer.configfile.settings['bed_mesh ubersoaked'].algo : bicubic
printer.configfile.settings['bed_mesh ubersoaked'].mesh_x_pps : 2
printer.configfile.settings['bed_mesh ubersoaked'].max_y : 330.0
printer.configfile.settings['bed_mesh ubersoaked'].max_x : 330.0
printer.configfile.settings['bed_mesh ubersoaked'].points : ((0.1675, 0.12, 0.085, 0.085, 0.155), (0.055, 0.04, -0.01, 0.0375, 0.1025), (0.07, 0.01, 0.0, 0.0275, 0.0775), (0.0825, 0.0825, 0.03, 0.0575, 0.1075), (0.1575, 0.1825, 0.1525, 0.16, 0.2175))
printer.configfile.settings.homing_override.gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=homing_override func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"homing"'
{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> homing <<< {% endif %}
_User_Variables
{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
_klicky_check_variables_version
{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
{ action_raise_error("No attachmove location!") }
{% endif %}
_CheckProbe action=query
{% set home_x, home_y, home_z = False, False, False %}
{% if not 'X' in params
and not 'Y' in params
and not 'Z' in params %}
{% set home_x, home_y, home_z = True, True, True %}
{% else %}
{% if 'X' in params %}
{% set home_x = True %}
{% endif %}
{% if 'Y' in params %}
{% set home_y = True %}
{% endif %}
{% if 'Z' in params %}
{% set home_z = True %}
{% endif %}
{% if 'X' in params
and 'Y' in params
and 'Z' in params %}
_Homing_Variables reset=1
{% endif %}
{% endif %}
_entry_point function=homing_override
{% if 'z' not in printer.toolhead.homed_axes %}
{% if not enable_z_hop %}
{% set safe_z = 0 %}
{% endif %}
{% endif %}
{% if home_z %}
{% if 'z' in printer.toolhead.homed_axes %}
{% if printer.toolhead.position.z < safe_z %}
{% if verbose %} M118 Z too low, performing ZHOP {% endif %}
G0 Z{safe_z} F{z_drop_feedrate}
{% endif %}
{% else %}
{% if verbose %} M118 Z not homed, forcing full G28 {% endif %}
SET_KINEMATIC_POSITION X=0 Y=0 Z=0
G0 Z{safe_z} F{z_drop_feedrate}
{% set home_x, home_y, home_z = True, True, True %}
{% endif %}
{% endif %}
{% if attachmove_y == 0 %}
{% if home_y %}
{% if verbose %} M118 Homing Y {% endif %}
G28 Y0
{% endif %}
{% set home_y = False %}
{% endif %}
{% if home_x %}
{% if verbose %} M118 Homing X {% endif %}
G28 X0
{% endif %}
{% if home_y %}
{% if verbose %} M118 Homing Y {% endif %}
G28 Y0
{% endif %}
{% if home_z %}
{% if verbose %} M118 Homing Z {% endif %}
{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
Attach_Probe
{% else %}
Dock_Probe
{% endif %}
_Home_Z
{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
Dock_Probe
{% endif %}
{% endif %}
_CheckProbe action=query
_Park_Toolhead
_exit_point function=homing_override
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"homed"'
{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> homed <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=homing_override {% endif %}
printer.configfile.settings.homing_override.axes : xyz
printer.configfile.settings['gcode_macro _ercf_ptr_startup'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_ptr_startup func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].home_ercf_at_boot %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ___ ERCF Boot Home Start ___ {% endif %}
UPDATE_DELAYED_GCODE ID=_ercf_start_carthome DURATION=5
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ___ ERCF Boot Home Complete ___ {% endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].test_ercf_load_seq_at_boot %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ___ ERCF Boot Fil Load Test Seq Start ___ {% endif %}
UPDATE_DELAYED_GCODE ID=_ercf_start_loadtest DURATION=15
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ___ ERCF Boot Fil Load Test Seq Complete ___ {% endif %}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ercf_ptr_startup {% endif %}
printer.configfile.settings['gcode_macro _ercf_ptr_startup'].description : gcodes that are called during printer startup
printer.configfile.settings['temperature_fan mcu_fan'].control : pid
printer.configfile.settings['temperature_fan mcu_fan'].pid_kp : 40.0
printer.configfile.settings['temperature_fan mcu_fan'].min_temp : 10.0
printer.configfile.settings['temperature_fan mcu_fan'].max_speed : 1.0
printer.configfile.settings['temperature_fan mcu_fan'].gcode_id : MCU
printer.configfile.settings['temperature_fan mcu_fan'].pin : PD12
printer.configfile.settings['temperature_fan mcu_fan'].off_below : 0.1
printer.configfile.settings['temperature_fan mcu_fan'].pid_deriv_time : 2.0
printer.configfile.settings['temperature_fan mcu_fan'].max_power : 1.0
printer.configfile.settings['temperature_fan mcu_fan'].shutdown_speed : 1.0
printer.configfile.settings['temperature_fan mcu_fan'].sensor_type : temperature_mcu
printer.configfile.settings['temperature_fan mcu_fan'].target_temp : 40.0
printer.configfile.settings['temperature_fan mcu_fan'].sensor_mcu : mcu
printer.configfile.settings['temperature_fan mcu_fan'].min_speed : 0.0
printer.configfile.settings['temperature_fan mcu_fan'].kick_start_time : 0.1
printer.configfile.settings['temperature_fan mcu_fan'].hardware_pwm : False
printer.configfile.settings['temperature_fan mcu_fan'].pid_ki : 0.2
printer.configfile.settings['temperature_fan mcu_fan'].cycle_time : 0.01
printer.configfile.settings['temperature_fan mcu_fan'].max_temp : 90.0
printer.configfile.settings['temperature_fan mcu_fan'].pid_kd : 0.1
printer.configfile.settings['gcode_macro clean_nozzle'].variable_purge_len : 10
printer.configfile.settings['gcode_macro clean_nozzle'].variable_bucket_left_width : 92
printer.configfile.settings['gcode_macro clean_nozzle'].variable_brush_width : 34
printer.configfile.settings['gcode_macro clean_nozzle'].variable_wipe_qty : 3
printer.configfile.settings['gcode_macro clean_nozzle'].variable_bucket_pos : 1
printer.configfile.settings['gcode_macro clean_nozzle'].variable_brush_depth : 0
printer.configfile.settings['gcode_macro clean_nozzle'].variable_location_bucket_rear : True
printer.configfile.settings['gcode_macro clean_nozzle'].variable_enable_purge : False
printer.configfile.settings['gcode_macro clean_nozzle'].variable_clearance_z : 5
printer.configfile.settings['gcode_macro clean_nozzle'].variable_ooze_dwell : 2
printer.configfile.settings['gcode_macro clean_nozzle'].variable_brush_front : 0
printer.configfile.settings['gcode_macro clean_nozzle'].variable_bucket_start : 0
printer.configfile.settings['gcode_macro clean_nozzle'].variable_purge_ret : 2
printer.configfile.settings['gcode_macro clean_nozzle'].description : G-Code macro
printer.configfile.settings['gcode_macro clean_nozzle'].variable_bucket_right_width : 40
printer.configfile.settings['gcode_macro clean_nozzle'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=clean_nozzle func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _scrub_vars"].scrub_verb_codeflow %} M118 >>> clean_nozzle Start <<<  {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"scrubbing"'
{% if printer["gcode_macro _scrub_vars"].scrub_verb_status %}  M118 >>> scrubbing <<< {% endif %}
{% set svv = printer.save_variables.variables %}
{% set doneX = params.DX|default(-9999999)|float %}
{% set doneY = params.DY|default(-9999999)|float %}
{% set doneZ = params.DZ|default(-9999999)|float %}
{% if printer["gcode_macro _scrub_vars"].scrub_verb_info %}  M118 >>> clean_nozzle params:  DX:{params.DX} DY:{params.DY} DZ:{params.DZ} <<< {% endif %}
{% set x_entry = printer.toolhead.position.x|float %}
{% set y_entry = printer.toolhead.position.y|float %}
{% set z_entry = printer.toolhead.position.z|float %}
{% if printer["gcode_macro _scrub_vars"].scrub_verb_info %}  M118 >>> clean_nozzle Entry from:  X:{x_entry}  Y:{y_entry}  Z:{z_entry} <<< {% endif %}
; {% set exit_z = [svv.maxz|float,doneZ|float,z_entry|float]|max|float %}
{% set exit_z = z_entry|float %}
{% if printer["gcode_macro _scrub_vars"].scrub_verb_info %}  M118 >>> clean_nozzle exit_z: {exit_z} (max of svv.maxz {svv.maxz}  |  doneZ {doneZ}  |  z_entry: {z_entry} ) <<< {% endif %}
{% if "xyz" in printer.toolhead.homed_axes %}
SAVE_GCODE_STATE NAME=clean_nozzle
go_absolute
{% set Ry = printer.configfile.config["stepper_y"]["position_max"]|float %}
{% if enable_purge %}
SET_GCODE_VARIABLE MACRO=clean_nozzle VARIABLE=bucket_pos VALUE={(range(2) | random)}
G1 Z{brush_top + clearance_z} F{prep_spd_z}
{% if location_bucket_rear %}
G1 Y{Ry} F{prep_spd_xy}
{% else %}
G1 Y{brush_front + (brush_depth / 2)} F{prep_spd_xy}
{% endif %}
G1 X{bucket_start + (bucket_left_width / (2 - bucket_pos)) + (bucket_pos * bucket_gap) + (bucket_pos * (bucket_right_width / 2))}
{% if printer.extruder.temperature >= purge_temp_min %}
{% if verbose %} M118 CLEAN_NOZZLE - {"Purging " + purge_len + "mm @ " + purge_spd + "mm/min..."} {% endif %}
go_relative
G1 E{purge_len} F{purge_spd}
G1 E-{purge_ret} F{purge_spd * 5}
G4 P{ooze_dwell * 1000}
go_absolute
_reset_extruder
{% else %}
{% if verbose %} M118 CLEAN_NOZZLE - No Purge due to Low Temp... {% endif %}
{% endif %}
{% else %}
{% if verbose %} M118 CLEAN_NOZZLE - Purge Disabled... {% endif %}
{% endif %}
go_relative
G1 Z+10 F{prep_spd_z}
go_absolute
G1 X{brush_start + (brush_width * bucket_pos)} Y{Ry} F{prep_spd_xy}
G1 Z{brush_top + clearance_z} F{prep_spd_z}
G1 Z{brush_top} F{prep_spd_z}
{% for wipes in range(1, (wipe_qty + 1)) %}
G1 X{brush_start + (brush_width * (1 - bucket_pos))} F{wipe_spd_xy}
G1 X{brush_start + (brush_width * bucket_pos)} F{wipe_spd_xy}
{% endfor %}
M117 Cleaned!
G1 Z{exit_z} F{prep_spd_z}
G1 X{x_entry} Y{y_entry} F{prep_spd_xy}
; {% if doneX != -9999999.0 %}
; {% if doneY != -9999999.0 %}
; {% if printer["gcode_macro _scrub_vars"].scrub_verb_info %}  M118 >>> both doneX/doneY asserted - restoring to doneX:{doneX}/doneY:{doneY} <<< {% endif %}
; G1 X{doneX} Y{doneY} F{prep_spd_xy}
; {% else %}
; {% if printer["gcode_macro _scrub_vars"].scrub_verb_info %}  M118 >>> only doneX asserted - restoring to doneX:{doneX}/Y_entry:{y_entry} <<< {% endif %}
; G1 X{doneX} Y{y_entry}F{prep_spd_xy}
; {% endif %}
; {% else %}
; {% if doneY != -9999999.0 %}
; {% if printer["gcode_macro _scrub_vars"].scrub_verb_info %}  M118 >>> only doneY asserted - restoring to X_entry:{x_entry}/doneY:{doneY} <<< {% endif %}
; G1 X{x_entry} Y{doneY} F{prep_spd_xy}
; {% else %}
; {% if printer["gcode_macro _scrub_vars"].scrub_verb_info %}  M118 >>> no done asserted - restoring to X_entry:{x_entry}/Y_entry:{y_entry} <<< {% endif %}
; G1 X{x_entry} Y{y_entry} F{prep_spd_xy}
; {% endif %}
; {% endif %}
RESTORE_GCODE_STATE NAME=clean_nozzle
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"scrubbed"'
{% if printer["gcode_macro _scrub_vars"].scrub_verb_status %}  M118 >>> scrubbed <<< {% endif %}
{% else %}
{% if printer["gcode_macro _scrub_vars"].scrub_verb_error %}  M118 >>> Not Homed <<< {% endif %}
M117 Please home first!
{action_raise_error("Please home your axes.") }
{% endif %}
{% if printer["gcode_macro _scrub_vars"].scrub_verb_codeflow %} M118 >>> clean_nozzle End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=clean_nozzle {% endif %}
printer.configfile.settings['gcode_macro clean_nozzle'].variable_prep_spd_z : 3000
printer.configfile.settings['gcode_macro clean_nozzle'].variable_purge_spd : 150
printer.configfile.settings['gcode_macro clean_nozzle'].variable_brush_start : 84
printer.configfile.settings['gcode_macro clean_nozzle'].variable_brush_top : 4
printer.configfile.settings['gcode_macro clean_nozzle'].variable_bucket_gap : 22
printer.configfile.settings['gcode_macro clean_nozzle'].variable_wipe_spd_xy : 15000
printer.configfile.settings['gcode_macro clean_nozzle'].variable_verbose : False
printer.configfile.settings['gcode_macro clean_nozzle'].variable_prep_spd_xy : 15000
printer.configfile.settings['gcode_macro clean_nozzle'].variable_purge_temp_min : 180
printer.configfile.settings['gcode_macro probe_accuracy'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PROBE_ACCURACY func_params='"{rawparams|string}"'  {% endif %}
{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed %}
{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed %}
{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
{% if not 'xyz' in printer.toolhead.homed_axes %}
{ action_raise_error("Must Home X, Y and Z Axis First!") }
{% endif %}
_entry_point function=PROBE_ACCURACY
{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
or printer['gcode_move'].position.y < probe_offset_y
or printer['gcode_move'].position.x > (max_x - probe_offset_x)
or printer['gcode_move'].position.x < probe_offset_x %}
{ action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!") }
{% endif%}
_CheckProbe action=query
Attach_Probe back=1
_PROBE_ACCURACY_STOCK {% for p in params
%}{'%s=%s ' % (p, params[p])}{%
endfor %}
Dock_Probe back=1
_exit_point function=PROBE_ACCURACY move=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PROBE_ACCURACY {% endif %}
printer.configfile.settings['gcode_macro probe_accuracy'].description : Probe Z-height accuracy at current XY position with klicky automount uses [probe] section configs for non passed vars
printer.configfile.settings['gcode_macro probe_accuracy'].rename_existing : _PROBE_ACCURACY_STOCK
printer.configfile.settings['gcode_macro _setslicervar'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_SetSlicerVar func_params='"{rawparams|string}"'  {% endif %}
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _gcodeproc_vars"].gcodeproc_verb_codeflow %}  M118 >>> _SetSlicerVar Start <<< {% endif %}
{% if params.VARIABLE|string == "TYPE" %}
{% set mesh_name = params.VALUE|string %}
{% if svv.module_linadv_loaded %}
{% if printer["gcode_macro _linadv_vars"].dynamic_pa_enable %}
_SetDynamicPA MESH={mesh_name}
{% else %}
{% endif %}
{% endif %}
{% if printer["gcode_macro _gcodeproc_vars"].dynamic_extrate_enable %}
_SetDynamicExtRate MESH={mesh_name}
{% else %}
{% endif %}
{% if printer["gcode_macro _gcodeproc_vars"].dynamic_spdrate_enable %}
_SetDynamicSpdRate MESH={mesh_name}
{% else %}
{% endif %}
{% endif %}
{% if params.VARIABLE|string == "maxz" %}
{% set svv_VALUE = params.VALUE|replace("\"","")|float %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
M118 >>> maxz raw:{params.VALUE} val:{svv_VALUE} <<<
{% endif %}
{% if svv.maxz|float < svv_VALUE|float %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
M118 >>> SAVING MAXZ:{svv.maxz|float} THIS:{svv_VALUE|float} <<<
{% endif %}
SAVE_VARIABLE VARIABLE={params.VARIABLE|string} VALUE={svv_VALUE|float}
{% else %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
M118 >>> SKIPPED MAXZ UPDATE - SAVED:{svv.maxz|float} THIS:{params.VALUE|float} <<<
{% endif %}
{% endif %}
{% else %}
{% if params.VALUE|replace("\"","")|int|string == params.VALUE|replace("\"","")|string %}
{% set svv_VALUE = params.VALUE|replace("\"","")|int %}
SAVE_VARIABLE VARIABLE={params.VARIABLE|string} VALUE={svv_VALUE}
{% elif params.VALUE|replace("\"","")|float|string == params.VALUE|replace("\"","")|string %}
{% set svv_VALUE = params.VALUE|replace("\"","")|float %}
SAVE_VARIABLE VARIABLE={params.VARIABLE|string} VALUE={svv_VALUE}
{% else %}
{% set svv_VALUE = "'\"" + params.VALUE|string + "\"'" %}
SAVE_VARIABLE {rawparams}
{% endif %}
{% endif %}
{% if printer["gcode_macro _gcodeproc_vars"].gcodeproc_verb_codeflow %}  M118 >>> _SetSlicerVar End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_SetSlicerVar {% endif %}
printer.configfile.settings['gcode_macro _setslicervar'].description : Used to runtime set slicer variables contained in gcode (done at slice time w/ regex post processing)
printer.configfile.settings['gcode_macro corexy_gantry_speed_test'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=corexy_gantry_speed_test func_params='"{rawparams|string}"'  {% endif %}
{% set axialrate_multiplier = 1.414166667|float  %}
{% set max_x = printer.toolhead.axis_maximum.x|int %}
{% set max_y = printer.toolhead.axis_maximum.y|int %}
{% set max_frxy = printer.toolhead.max_velocity|int * 60 %}
{% set min_x_test = 10|int %}
{% set min_y_test = 10|int %}
{% set max_x_test = max_x - 10|int %}
{% set max_y_test = max_y - 10|int %}
{% set test_x_origin = max_x_test|int %}
{% set test_Y_origin = max_y_test|int %}
{% set test_preprateidx = 1|int %}
{% set spdidx = params.SPDIDX|default(4)|float %}
{% if spdidx >= 50.0 %}
{% set spdidx = (spdidx/50.0) %}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
M118 corexy_gantry_speed_test params: {rawparams}
{% endif %}
{% set spdidx_min = 1|int %}
{% set spdidx_max = 20|int %}
{% if spdidx < spdidx_min or spdidx > spdidx_max %}
M118 Passed spdidx parameter out of bounds - aborting
{ action_raise_error("Bounds: 1.0>=spdidx>=20.0  OR  50.0>=spdidx>=1000.0") }
{% endif %}
{% set test_axialfr = (spdidx*3000*axialrate_multiplier)|int %}
{% set test_angularfr = (spdidx*3000)|int %}
M118 {'PrinterMaxFeedrate:\t' + max_frxy|int|string + ' mm/min  |  ' + (max_frxy/60)|int|string  + ' mm/s' }
M118 {'TestAxialFeedrate:\t' + test_axialfr|int|string + ' mm/min  |  ' + (test_axialfr/60)|int|string  + ' mm/s' }
M118 {'TestAngularFeedrate:\t' + test_angularfr|int|string + ' mm/min  |  ' + (test_angularfr/60)|int|string  + ' mm/s' }
{% if test_axialfr > max_frxy %}
{ action_raise_error("Passed spdidx parameter imputes a speed exceedance - aborting") }
{% endif %}
{% set test_preprate = 3000|int %}
go_absolute
_ENSURE_HOMED
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %}
M118 corexy_gantry_speed_test Commencing
{% endif %}
G0 X{test_x_origin} Y{test_Y_origin} F{test_preprate}
G4 P500
GET_POSITION
G0 X{max_x_test} Y{min_y_test} F{test_axialfr}
G0 X{min_x_test} Y{max_y_test} F{test_angularfr}
G0 X{max_x_test} Y{min_y_test} F{test_angularfr}
G0 X{min_x_test} Y{min_y_test} F{test_axialfr}
G0 X{max_x_test} Y{max_y_test} F{test_angularfr}
G0 X{min_x_test} Y{min_y_test} F{test_angularfr}
G0 X{min_x_test} Y{max_y_test} F{test_axialfr}
G0 X{max_x_test} Y{max_y_test} F{test_axialfr}
G0 X{min_x_test} Y{min_y_test} F{test_angularfr}
G0 X{max_x_test} Y{max_y_test} F{test_angularfr}
G0 X{min_x_test} Y{max_y_test} F{test_axialfr}
G0 X{max_x_test} Y{min_y_test} F{test_angularfr}
G0 X{min_x_test} Y{max_y_test} F{test_angularfr}
G0 X{min_x_test} Y{min_y_test} F{test_axialfr}
G0 X{max_x_test} Y{min_y_test} F{test_axialfr}
G0 X{max_x_test} Y{max_y_test} F{test_axialfr}
G0 X{test_x_origin} Y{test_Y_origin} F{test_preprate}
G4 P500
GET_POSITION
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %}
M118 corexy_gantry_speed_test Complete
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=corexy_gantry_speed_test {% endif %}
printer.configfile.settings['gcode_macro corexy_gantry_speed_test'].description : ~MHz's CoreXY Speed Test [spdidx=float 1.0 to 20.0] 1 is slow, 6 is fast, >10 PPE advised...
printer.configfile.settings['gcode_macro _start_bounds_alarm'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_start_bounds_alarm func_params='"{rawparams|string}"'  {% endif %}
M118 H2O cooling parameters Exceedance ALERT
_fire_warble_alarm
UPDATE_DELAYED_GCODE ID=_recursive_bounds_alarm DURATION={printer["gcode_macro _bounds_vars"].bounds_alarm_recurse_period|float}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_start_bounds_alarm {% endif %}
printer.configfile.settings['gcode_macro _start_bounds_alarm'].description : Alert and then set recursive reentry
printer.configfile.settings.bed_mesh.horizontal_move_z : 15.0
printer.configfile.settings.bed_mesh.mesh_pps : (2, 2)
printer.configfile.settings.bed_mesh.algorithm : bicubic
printer.configfile.settings.bed_mesh.mesh_max : (330.0, 330.0)
printer.configfile.settings.bed_mesh.fade_start : 1.0
printer.configfile.settings.bed_mesh.bicubic_tension : 0.2
printer.configfile.settings.bed_mesh.fade_end : 10.0
printer.configfile.settings.bed_mesh.mesh_min : (40.0, 40.0)
printer.configfile.settings.bed_mesh.split_delta_z : 0.025
printer.configfile.settings.bed_mesh.probe_count : (5, 5)
printer.configfile.settings.bed_mesh.move_check_distance : 5.0
printer.configfile.settings.bed_mesh.speed : 250.0
printer.configfile.settings.bed_mesh.relative_reference_index : 12
printer.configfile.settings['gcode_macro ercf_is_filament_stuck_in_ercf'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_IS_FILAMENT_STUCK_IN_ERCF func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_IS_FILAMENT_STUCK_IN_ERCF Start ... {% endif %}
{% if printer.ercf.encoder_pos|float != 0 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Filament stuck in ERCF {% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=1
_ERCF_PAUSE
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Filament not in ERCF {% endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_IS_FILAMENT_STUCK_IN_ERCF End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_IS_FILAMENT_STUCK_IN_ERCF {% endif %}
printer.configfile.settings['gcode_macro ercf_is_filament_stuck_in_ercf'].description : G-Code macro
printer.configfile.settings['gcode_macro m141'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M141 func_params='"{rawparams|string}"'  {% endif %}
{% set ch_tmp_tgt = params.S|default(0)|int %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_info %} M118 >>> M141 S{ch_tmp_tgt} <<< {% endif %}
SET_TEMPERATURE_FAN_TARGET temperature_fan=Exhaust target={ch_tmp_tgt} min_speed=0.0 max_speed=1.0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M141 {% endif %}
printer.configfile.settings['gcode_macro m141'].description : Implement a pseudo chamber heat control
printer.configfile.settings['gcode_macro m140'].rename_existing : M140.1
printer.configfile.settings['gcode_macro m140'].description : capture and set target heater_bed temp
printer.configfile.settings['gcode_macro m140'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M140 func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=heater_bed_temp_setting VALUE={params.S|int}
M140.1 {rawparams}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M140 {% endif %}
printer.configfile.settings['gcode_macro _fire_warble_alarm'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_fire_warble_alarm func_params='"{rawparams|string}"'  {% endif %}
SET_PIN PIN=_Alarm_pin VALUE=1
G4 P{printer["gcode_macro _bounds_vars"].bounds_alarm_duration}
SET_PIN PIN=_Alarm_pin VALUE=0
M118
M118 ___ H2O Cooling Exceedance Alert Alarm ___
M118
M118 run  _stop_bounds_alarm      to cancel Exceedance Alert Alarm once issue is resolved
M118 or   _stop_bounds_checking   to defeat automatic H2O parameter checking entirely
M118 and  _start_bounds_checking  to reenable automatic H2O parameter checking when appropriate
M118
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_fire_warble_alarm {% endif %}
printer.configfile.settings['gcode_macro _fire_warble_alarm'].description : 
printer.configfile.settings['output_pin _sw_blu_led'].value : 1.0
printer.configfile.settings['output_pin _sw_blu_led'].shutdown_value : 0.0
printer.configfile.settings['output_pin _sw_blu_led'].pwm : False
printer.configfile.settings['output_pin _sw_blu_led'].maximum_mcu_duration : 0.0
printer.configfile.settings['output_pin _sw_blu_led'].pin : pico:gpio13
printer.configfile.settings['gcode_macro snd_printcancel'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_PrintCancel {% endif %}
sng_bethovene
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_PrintCancel {% endif %}
printer.configfile.settings['gcode_macro snd_printcancel'].description : G-Code macro
printer.configfile.settings['output_pin _hourmeter'].value : 0.0
printer.configfile.settings['output_pin _hourmeter'].shutdown_value : 0.0
printer.configfile.settings['output_pin _hourmeter'].pwm : False
printer.configfile.settings['output_pin _hourmeter'].maximum_mcu_duration : 0.0
printer.configfile.settings['output_pin _hourmeter'].pin : PB11
printer.configfile.settings['gcode_macro snd_meshfail'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_MeshFail {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_MeshFail {% endif %}
printer.configfile.settings['gcode_macro snd_meshfail'].description : G-Code macro
printer.configfile.settings['gcode_macro stop_pause_alarm'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=stop_pause_alarm func_params='"{rawparams|string}"'  {% endif %}
UPDATE_DELAYED_GCODE ID=pause_alarm DURATION=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=stop_pause_alarm {% endif %}
printer.configfile.settings['gcode_macro stop_pause_alarm'].description : G-Code macro
printer.configfile.settings['manual_stepper selector_stepper'].homing_positive_dir : False
printer.configfile.settings['manual_stepper selector_stepper'].homing_retract_dist : 5.0
printer.configfile.settings['manual_stepper selector_stepper'].position_endstop : 0.0
printer.configfile.settings['manual_stepper selector_stepper'].full_steps_per_rotation : 200
printer.configfile.settings['manual_stepper selector_stepper'].endstop_pin : ^ercf:PB9
printer.configfile.settings['manual_stepper selector_stepper'].rotation_distance : 40.0
printer.configfile.settings['manual_stepper selector_stepper'].accel : 300.0
printer.configfile.settings['manual_stepper selector_stepper'].second_homing_speed : 50.0
printer.configfile.settings['manual_stepper selector_stepper'].step_pin : ercf:PA9
printer.configfile.settings['manual_stepper selector_stepper'].homing_speed : 100.0
printer.configfile.settings['manual_stepper selector_stepper'].microsteps : 16
printer.configfile.settings['manual_stepper selector_stepper'].velocity : 100.0
printer.configfile.settings['manual_stepper selector_stepper'].dir_pin : ercf:PB8
printer.configfile.settings['manual_stepper selector_stepper'].gear_ratio : ()
printer.configfile.settings['manual_stepper selector_stepper'].homing_retract_speed : 100.0
printer.configfile.settings['manual_stepper selector_stepper'].enable_pin : !ercf:PA11
printer.configfile.settings['gcode_macro _gcodeproc_vars'].variable_dynamic_extrate_enable : 0
printer.configfile.settings['gcode_macro _gcodeproc_vars'].description : module variables
printer.configfile.settings['gcode_macro _gcodeproc_vars'].variable_gcodeproc_verb_error : 1
printer.configfile.settings['gcode_macro _gcodeproc_vars'].variable_gcodeproc_verb_info : 0
printer.configfile.settings['gcode_macro _gcodeproc_vars'].variable_gcodeproc_verb_debug : 0
printer.configfile.settings['gcode_macro _gcodeproc_vars'].variable_gcodeproc_verb_codeflow : 0
printer.configfile.settings['gcode_macro _gcodeproc_vars'].variable_gcodeproc_verb_status : 0
printer.configfile.settings['gcode_macro _gcodeproc_vars'].variable_dynamic_spdrate_enable : 0
printer.configfile.settings['gcode_macro _gcodeproc_vars'].gcode : 
printer.configfile.settings['gcode_macro restore_gcode_state'].rename_existing : _RESTORE_GCODE_STATE_STOCK
printer.configfile.settings['gcode_macro restore_gcode_state'].description : for debug purposes
printer.configfile.settings['gcode_macro restore_gcode_state'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=RESTORE_GCODE_STATE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _debug_vars"].gcode_state_debug %} M118 >>>>> RESTORE_GCODE_STATE {rawparams} <<<<< {% endif %}
save_variable VARIABLE=last_restored_gcode_state VALUE='"{params.NAME}"'
{% if params.NAME != "PAUSE_STATE" %}
_RESTORE_GCODE_STATE_STOCK {rawparams}
{% else %}
{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 _RESTORE_GCODE_STATE_STOCK SKIPPED {% endif %}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=RESTORE_GCODE_STATE {% endif %}
printer.configfile.settings['gcode_macro z_probe_accuracy'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=Z_Probe_Accuracy func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Z_Probe_Accuracy <<< {% endif %}
{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
_ENSURE_QGL
{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
or printer['gcode_move'].position.y < probe_offset_y
or printer['gcode_move'].position.x > (max_x - probe_offset_x)
or printer['gcode_move'].position.x < probe_offset_x %}
M118 Z_Probe_Accuracy - PROBE_CALIBRATE requires probe above the BED - moving to bed center...
go_absolute
G0 X{(max_x / 2)} Y{(max_y / 2)} F15000
{% endif%}
PROBE_ACCURACY PROBE_SPEED=10 SAMPLES=5 SAMPLE_RETRACT_DIST=2 LIFT_SPEED=15
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=Z_Probe_Accuracy {% endif %}
printer.configfile.settings['gcode_macro z_probe_accuracy'].description : Test and report Probe accuracy at current location, moving to 175,175 if outside of bed
printer.configfile.settings['gcode_macro _ercf_syncd_th_load_unload'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_syncd_th_load_unload func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ercf_syncd_th_load_unload Start ... {% endif %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > _ercf_syncd_th_load_unload Skipped - an error condition is asserted < {% endif %}
{% else %}
go_relative
_reset_extruder
MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
MANUAL_STEPPER STEPPER=gear_stepper MOVE={"-" if params.RETRACT|default(0)|int else ""}{printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + params.MODIFIER|default(0)|float} SPEED={printer["gcode_macro _ERCF_VAR"].sync_speed|float} ACCEL={printer["gcode_macro _ERCF_VAR"].sync_accel|float} SYNC=0 NODWELL=1
G1 E{"-" if params.RETRACT|default(0)|int else ""}{printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + params.MODIFIER|default(0)|float} F{printer["gcode_macro _ERCF_VAR"].sync_feedrate|float}
_gear_move_dwell
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ercf_syncd_th_load_unload End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ercf_syncd_th_load_unload {% endif %}
printer.configfile.settings['gcode_macro _ercf_syncd_th_load_unload'].description : perform syncronous retract/extrude move of ercf gear motor and extruder motor for unload/load of filament to/from top of th inlet from/to th_sensor
printer.configfile.settings['gcode_macro ercf_eject'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_EJECT func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_EJECT Start ... {% endif %}
{% set ercf_params = printer.save_variables.variables %}
{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
_ercf_set_eject_temp
{% endif %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
{% if printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int != -1 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Unloading tool {printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int} ... {% endif %}
{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
{% set unload_ratio = ercf_params['ercf_calib_%s' % (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|string)] %}
ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING RATIO={unload_ratio}
ERCF_UNLOAD LENGTH={ercf_params.ercf_calib_ref|float - printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + printer["gcode_macro _ERCF_VAR"].unload_modifier|float - printer["gcode_macro _ERCF_VAR"].ercf_dual_unload_mod|float }
_ERCF_UNSELECT_TOOL
{% else %}
ERCF_EJECT_UNKNOW_STATE
{% endif %}
{% else %}
ERCF_EJECT_UNKNOW_STATE
{% endif %}
{% else %}
_alert_ercf_is_paused
{% endif %}
_ercf_restore_he_temp
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_EJECT End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_EJECT {% endif %}
printer.configfile.settings['gcode_macro ercf_eject'].description : Retract from nozzle, form tip, eject, parking filament in cart
printer.configfile.settings['heater_fan h2o_radfan'].tachometer_pin : ^pico:gpio16
printer.configfile.settings['heater_fan h2o_radfan'].heater : ('extruder',)
printer.configfile.settings['heater_fan h2o_radfan'].cycle_time : 0.01
printer.configfile.settings['heater_fan h2o_radfan'].pin : pico:gpio15
printer.configfile.settings['heater_fan h2o_radfan'].off_below : 0.0
printer.configfile.settings['heater_fan h2o_radfan'].tachometer_poll_interval : 0.003
printer.configfile.settings['heater_fan h2o_radfan'].heater_temp : 50.0
printer.configfile.settings['heater_fan h2o_radfan'].shutdown_speed : 1.0
printer.configfile.settings['heater_fan h2o_radfan'].fan_speed : 1.0
printer.configfile.settings['heater_fan h2o_radfan'].max_power : 1.0
printer.configfile.settings['heater_fan h2o_radfan'].kick_start_time : 0.1
printer.configfile.settings['heater_fan h2o_radfan'].tachometer_ppr : 2
printer.configfile.settings['heater_fan h2o_radfan'].hardware_pwm : False
printer.configfile.settings['gcode_macro ercf_check_if_resume'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CHECK_IF_RESUME func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CHECK_IF_RESUME Start ... {% endif %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
RESUME
{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
{% endif %}
{% else %}
_alert_ercf_is_paused
save_variable VARIABLE=ercf_err_flag VALUE=1
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CHECK_IF_RESUME End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CHECK_IF_RESUME {% endif %}
printer.configfile.settings['gcode_macro ercf_check_if_resume'].description : Safety checks before resuming the print after an encoder event
printer.configfile.settings['gcode_macro system_shutdown'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=system_shutdown func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> system_shutdown <<< {% endif %}
RUN_SHELL_COMMAND CMD=backup_configs
RUN_SHELL_COMMAND CMD=power_off_printer
RUN_SHELL_COMMAND CMD=system_shutdown
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=system_shutdown {% endif %}
printer.configfile.settings['gcode_macro system_shutdown'].description : Power off the entire system (printer AND host)
printer.configfile.settings['gcode_macro hello_world'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=HELLO_WORLD {% endif %}
RUN_SHELL_COMMAND CMD=hello_world
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=HELLO_WORLD {% endif %}
printer.configfile.settings['gcode_macro hello_world'].description : G-Code macro
printer.configfile.settings['gcode_macro sng_cena'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_cena {% endif %}
M117 Cena
M3001 s2800 p300
M3001 s2900 p100
M3001 s2400 p250
M3001 s2700 p1500
M3001 s3000 p300
M3001 s2900 p100
M3001 s2400 p250
M3001 s2700 p1500
M3001 s2800 p300
M3001 s2900 p100
M3001 s2400 p250
M3001 s2700 p1500
M3001 s3000 p300
M3001 s2900 p100
M3001 s2400 p250
M3001 s2700 p1500
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_cena {% endif %}
printer.configfile.settings['gcode_macro sng_cena'].description : G-Code macro
printer.configfile.settings['gcode_macro _setprobestate'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_SetProbeState func_params='"{rawparams|string}"'  {% endif %}
{% set query_probe_triggered = printer.probe.last_query %}
{% set action  = params.ACTION|default('') %}
{% if query_probe_triggered %}
SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
{% else %}
SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
{% endif %}
{% if action == 'query' %}
SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
{% endif %}
{% if not query_probe_triggered and action == 'dock' %}
{ action_raise_error("Probe dock failed!") }
{% endif %}
{% if query_probe_triggered and action == 'attach' %}
{ action_raise_error("Probe attach failed!") }
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_SetProbeState {% endif %}
printer.configfile.settings['gcode_macro _setprobestate'].description : G-Code macro
printer.configfile.settings['gcode_macro _probe_lock'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_Probe_Lock func_params='"{rawparams|string}"'  {% endif %}
SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_Probe_Lock {% endif %}
printer.configfile.settings['gcode_macro _probe_lock'].description : Locks Klicky Probe state
printer.configfile.settings['thermistor ps'].beta : 3950.0
printer.configfile.settings['thermistor ps'].resistance1 : 100000.0
printer.configfile.settings['thermistor ps'].temperature1 : 25.0
printer.configfile.settings['gcode_macro _disable_trace_debug'].gcode : 
{% set entry_trace_enabled_flag = printer["gcode_macro _printer_vars"].ptr_verb_codeflow|default(1)|int  %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_disable_trace_debug func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _disable_trace_debug <<<<< {% endif %}
SET_GCODE_VARIABLE MACRO=_printer_vars VARIABLE=ptr_verb_codeflow VALUE=0
_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_disable_trace_debug {% endif %}
{% if entry_trace_enabled_flag %}
_proc_end function=_disable_trace_debug FORCE=1
M118
M118
{% endif %}
printer.configfile.settings['gcode_macro _disable_trace_debug'].description : sets codeflow verbosity flag and inits depth counter
printer.configfile.settings['delayed_gcode printer_startup'].gcode : 
{% set svv = printer.save_variables.variables %}
; {% if svv.module_debug_loaded %} _enable_trace_debug REASON='"Startup Testing"' {% endif %}
; {% if svv.module_debug_loaded %} _enable_gmove_debug REASON='"Startup Testing"' {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=printer_startup func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"starting"'
SAVE_VARIABLE VARIABLE=last_spd_fact VALUE=1.0
{% if svv.module_ercf_loaded %}
_ERCF_SERVO_UP
{% endif %}
{% if svv.module_ledeff_loaded %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %}
M118 >>> LED CONTROL: LED_EFFECT <<<
{% endif %}
STOP_LED_EFFECTS
_set_ledeff_mode CHAIN=chamber_lights 	EFFECT=normal 	RESET=1
_set_ledeff_mode CHAIN=lcd_lights 		EFFECT=normal	RESET=1
_set_ledeff_mode CHAIN=ercf_lights 		EFFECT=off		RESET=1
_set_ledeff_mode CHAIN=dash_lights 		EFFECT=off		RESET=1
{% else %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %}
M118 >>> LED CONTROL: KLIPPER <<<
{% endif %}
ChLts_Normal
LcdLts_Normal
; ERCFLts_off
; DBLts_off
{% endif %}
printer_config_restore
M106 S26
UPDATE_DELAYED_GCODE ID=welcome_msg DURATION=5
sng_startup
_IdleLED_On
_PwrLED_Off
{% if printer["gcode_macro set_startup_bedtemp"].heat_on_start %}
set_startup_bedtemp
{% endif %}
RUN_SHELL_COMMAND CMD=set_cam_config
{% if svv.module_ercf_loaded %} _ercf_ptr_startup {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=printer_startup {% endif %}
_start_bounds_checking
; {% if svv.module_debug_loaded %} _disable_gmove_debug {% endif %}
; {% if svv.module_debug_loaded %} _disable_trace_debug {% endif %}
{% if svv.debug_err_flag 	== 0 and
svv.ercf_err_flag 	== 0 and
svv.klicky_err_flag 	== 0 and
svv.ledeff_err_flag 	== 0 and
svv.linadv_err_flag 	== 0 and
svv.gcodeproc_err_flag == 0 and
svv.scrub_err_flag 	== 0 		%}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"started"'
M118 Printer state: Ready
{% else %}
M118 Printer state: NOT Ready - an error is asserted:
M118 - svv.debug_err_flag: {svv.debug_err_flag}
M118 - svv.ercf_err_flag: {svv.ercf_err_flag}
M118 - svv.klicky_err_flag: {svv.klicky_err_flag}
M118 - svv.ledeff_err_flag: {svv.ledeff_err_flag}
M118 - svv.linadv_err_flag: {svv.linadv_err_flag}
M118 - svv.gcodeproc_err_flag: {svv.gcodeproc_err_flag}
M118 - svv.scrub_err_flag: {svv.scrub_err_flag}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"error"'
{% endif %}
printer.configfile.settings['delayed_gcode printer_startup'].initial_duration : 1.0
printer.configfile.settings['tmc2209 stepper_z'].driver_pwm_ofs : 36
printer.configfile.settings['tmc2209 stepper_z'].driver_hstrt : 5
printer.configfile.settings['tmc2209 stepper_z'].driver_toff : 3
printer.configfile.settings['tmc2209 stepper_z'].sense_resistor : 0.11
printer.configfile.settings['tmc2209 stepper_z'].uart_address : 0
printer.configfile.settings['tmc2209 stepper_z'].driver_pwm_reg : 8
printer.configfile.settings['tmc2209 stepper_z'].driver_iholddelay : 8
printer.configfile.settings['tmc2209 stepper_z'].interpolate : False
printer.configfile.settings['tmc2209 stepper_z'].uart_pin : PC6
printer.configfile.settings['tmc2209 stepper_z'].hold_current : 0.8
printer.configfile.settings['tmc2209 stepper_z'].driver_tbl : 2
printer.configfile.settings['tmc2209 stepper_z'].driver_pwm_autograd : True
printer.configfile.settings['tmc2209 stepper_z'].driver_pwm_grad : 14
printer.configfile.settings['tmc2209 stepper_z'].run_current : 1.2
printer.configfile.settings['tmc2209 stepper_z'].driver_hend : 0
printer.configfile.settings['tmc2209 stepper_z'].stealthchop_threshold : 1.0
printer.configfile.settings['tmc2209 stepper_z'].driver_pwm_autoscale : True
printer.configfile.settings['tmc2209 stepper_z'].driver_tpowerdown : 20
printer.configfile.settings['tmc2209 stepper_z'].driver_pwm_freq : 1
printer.configfile.settings['tmc2209 stepper_z'].driver_pwm_lim : 12
printer.configfile.settings['tmc2209 stepper_z'].driver_sgthrs : 0
printer.configfile.settings['tmc2209 stepper_x'].driver_pwm_ofs : 36
printer.configfile.settings['tmc2209 stepper_x'].driver_hstrt : 5
printer.configfile.settings['tmc2209 stepper_x'].driver_toff : 3
printer.configfile.settings['tmc2209 stepper_x'].sense_resistor : 0.11
printer.configfile.settings['tmc2209 stepper_x'].uart_address : 0
printer.configfile.settings['tmc2209 stepper_x'].driver_pwm_reg : 8
printer.configfile.settings['tmc2209 stepper_x'].driver_iholddelay : 8
printer.configfile.settings['tmc2209 stepper_x'].interpolate : False
printer.configfile.settings['tmc2209 stepper_x'].stealthchop_threshold : 0.0
printer.configfile.settings['tmc2209 stepper_x'].hold_current : 2.0
printer.configfile.settings['tmc2209 stepper_x'].driver_tbl : 2
printer.configfile.settings['tmc2209 stepper_x'].driver_pwm_autograd : True
printer.configfile.settings['tmc2209 stepper_x'].driver_pwm_grad : 14
printer.configfile.settings['tmc2209 stepper_x'].run_current : 1.414
printer.configfile.settings['tmc2209 stepper_x'].driver_hend : 0
printer.configfile.settings['tmc2209 stepper_x'].uart_pin : PC4
printer.configfile.settings['tmc2209 stepper_x'].driver_pwm_autoscale : True
printer.configfile.settings['tmc2209 stepper_x'].driver_tpowerdown : 20
printer.configfile.settings['tmc2209 stepper_x'].driver_pwm_freq : 1
printer.configfile.settings['tmc2209 stepper_x'].driver_pwm_lim : 12
printer.configfile.settings['tmc2209 stepper_x'].driver_sgthrs : 0
printer.configfile.settings['tmc2209 stepper_y'].driver_pwm_ofs : 36
printer.configfile.settings['tmc2209 stepper_y'].driver_hstrt : 5
printer.configfile.settings['tmc2209 stepper_y'].driver_toff : 3
printer.configfile.settings['tmc2209 stepper_y'].sense_resistor : 0.11
printer.configfile.settings['tmc2209 stepper_y'].run_current : 1.414
printer.configfile.settings['tmc2209 stepper_y'].uart_address : 0
printer.configfile.settings['tmc2209 stepper_y'].driver_pwm_reg : 8
printer.configfile.settings['tmc2209 stepper_y'].driver_iholddelay : 8
printer.configfile.settings['tmc2209 stepper_y'].interpolate : False
printer.configfile.settings['tmc2209 stepper_y'].uart_pin : PD11
printer.configfile.settings['tmc2209 stepper_y'].driver_pwm_autoscale : True
printer.configfile.settings['tmc2209 stepper_y'].driver_tbl : 2
printer.configfile.settings['tmc2209 stepper_y'].driver_pwm_autograd : True
printer.configfile.settings['tmc2209 stepper_y'].driver_pwm_grad : 14
printer.configfile.settings['tmc2209 stepper_y'].driver_sgthrs : 0
printer.configfile.settings['tmc2209 stepper_y'].driver_hend : 0
printer.configfile.settings['tmc2209 stepper_y'].stealthchop_threshold : 0.0
printer.configfile.settings['tmc2209 stepper_y'].hold_current : 2.0
printer.configfile.settings['tmc2209 stepper_y'].driver_tpowerdown : 20
printer.configfile.settings['tmc2209 stepper_y'].driver_pwm_lim : 12
printer.configfile.settings['tmc2209 stepper_y'].driver_pwm_freq : 1
printer.configfile.settings['filament_motion_sensor encoder_sensor'].detection_length : 4.0
printer.configfile.settings['filament_motion_sensor encoder_sensor'].switch_pin : ^ercf:PA6
printer.configfile.settings['filament_motion_sensor encoder_sensor'].event_delay : 0.1
printer.configfile.settings['filament_motion_sensor encoder_sensor'].insert_gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=encoder_sensor_insert {% endif %}
fil_ecdr_prs
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=encoder_sensor_insert {% endif %}
printer.configfile.settings['filament_motion_sensor encoder_sensor'].runout_gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=encoder_sensor_runout {% endif %}
fil_ecdr_rel
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=encoder_sensor_runout {% endif %}
printer.configfile.settings['filament_motion_sensor encoder_sensor'].pause_on_runout : False
printer.configfile.settings['filament_motion_sensor encoder_sensor'].pause_delay : 0.5
printer.configfile.settings['filament_motion_sensor encoder_sensor'].extruder : extruder
printer.configfile.settings['delayed_gcode _ercf_module_start'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_module_start func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _ercf_module_start Start <<< {% endif %}
SAVE_VARIABLE VARIABLE=module_ercf_loaded VALUE=1
save_variable VARIABLE=ercf_err_flag VALUE=0
SET_GCODE_VARIABLE MACRO=ERCF_HOME VARIABLE=home VALUE=-1
{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _ercf_module_start End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ercf_module_start {% endif %}
printer.configfile.settings['delayed_gcode _ercf_module_start'].initial_duration : 0.5
printer.configfile.settings['gcode_macro printled_on'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PrintLED_On func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> PrintLED_On <<< {% endif %}
_PrintLED_On
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PrintLED_On {% endif %}
printer.configfile.settings['gcode_macro printled_on'].description : G-Code macro
printer.configfile.settings['gcode_macro ercf_test_load_cart'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_TEST_LOAD_CART func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_TEST_LOAD_CART Start ... {% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=0
_ercf_park_n_home
ERCF_SELECT_TOOL_dbg TOOL={params.C|int}
ERCF_LOAD LENGTH={printer["gcode_macro _ERCF_VAR"].ercf_test_load_seq_len}
ERCF_UNLOAD LENGTH={printer["gcode_macro _ERCF_VAR"].ercf_test_load_seq_len}
_ERCF_UNSELECT_TOOL
ercf_move_cart C=0
save_variable VARIABLE=ercf_err_flag VALUE=0
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_TEST_LOAD_CART End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_TEST_LOAD_CART {% endif %}
printer.configfile.settings['gcode_macro ercf_test_load_cart'].description : Test load sequence on a single Cart (param is C) - home at start, home at end
printer.configfile.settings['gcode_macro snd_printpause'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_PrintPause {% endif %}
sng_startup
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_PrintPause {% endif %}
printer.configfile.settings['gcode_macro snd_printpause'].description : G-Code macro
printer.configfile.settings['gcode_macro ercf_encoder_motion_issue'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_ENCODER_MOTION_ISSUE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_ENCODER_MOTION_ISSUE Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Issue on tool {printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int} {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Checking if this is a clog or a runout... {% endif %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
_ERCF_SERVO_DOWN
ERCF_BUZZ_GEAR_MOTOR
_ERCF_SERVO_UP
ERCF_CLOG_OR_RUNOUT
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_ENCODER_MOTION_ISSUE End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_ENCODER_MOTION_ISSUE {% endif %}
printer.configfile.settings['gcode_macro ercf_encoder_motion_issue'].description : Perform a test when the encoder sense an issue (check for clog then assumes a runout)
printer.configfile.settings['gcode_macro _enable_save_var_debug'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_enable_save_var_debug func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _enable_save_var_debug <<<<< {% endif %}
SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=save_var_debug VALUE=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_enable_save_var_debug {% endif %}
printer.configfile.settings['gcode_macro _enable_save_var_debug'].description : used to enable save_var debug
printer.configfile.settings['gcode_macro m1181'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if params.CE|int < 0  %}
M118 Swap {svv.ercf_swaps + 1} (Initial Load): T{params.NE|int} @ {printer.virtual_sdcard.file_position} | {(printer.virtual_sdcard.progress*100)|round(2,'common')}%
{% elif params.CE == params.NE %}
{% else %}
M118 Swap {svv.ercf_swaps + 1}: T{params.CE|int} -> T{params.NE|int} @ {printer.virtual_sdcard.file_position} | {(printer.virtual_sdcard.progress*100)|round(2,'common')}%
{% endif %}
printer.configfile.settings['gcode_macro m1181'].description : To implement a more expressive tool change notification (called at tool change start, hence the +1 on swaps)
printer.configfile.settings['gcode_macro chlts_orange'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ChLts_Orange {% endif %}
SET_LED LED=chamber_lights RED=0.9 GREEN=0.3 BLUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ChLts_Orange {% endif %}
printer.configfile.settings['gcode_macro chlts_orange'].description : G-Code macro
printer.configfile.settings['gcode_macro ercf_unlock'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_UNLOCK func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_UNLOCK Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Unlock the ERCF {% endif %}
stop_pause_alarm
SET_GCODE_VARIABLE MACRO=_ERCF_PAUSE VARIABLE=is_paused VALUE=0
UPDATE_DELAYED_GCODE ID=disable_heater DURATION=0
{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == False %}
_ERCF_UNSELECT_TOOL
{% else %}
_ERCF_UNSELECT_TOOL FORCED=0
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Heating to {printer["gcode_macro _ERCF_PAUSE"].extruder_temp} {% endif %}
_ercf_wait_he_temp TEMP={printer["gcode_macro _ERCF_PAUSE"].extruder_temp}
RESTORE_GCODE_STATE NAME=ERCF_state
save_variable VARIABLE=last_saved_gcode_state VALUE='"ERCF_state"'
save_variable VARIABLE=ercf_err_flag VALUE=0
M118 _ERCF_Unlock @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Refer to the manual before resuming the print {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_UNLOCK End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_UNLOCK {% endif %}
printer.configfile.settings['gcode_macro ercf_unlock'].description : Unlock ERCF operations
printer.configfile.settings['tmc2209 extruder'].driver_pwm_ofs : 36
printer.configfile.settings['tmc2209 extruder'].driver_hstrt : 5
printer.configfile.settings['tmc2209 extruder'].driver_toff : 3
printer.configfile.settings['tmc2209 extruder'].sense_resistor : 0.11
printer.configfile.settings['tmc2209 extruder'].uart_address : 0
printer.configfile.settings['tmc2209 extruder'].driver_pwm_reg : 8
printer.configfile.settings['tmc2209 extruder'].driver_iholddelay : 8
printer.configfile.settings['tmc2209 extruder'].interpolate : False
printer.configfile.settings['tmc2209 extruder'].uart_pin : PE1
printer.configfile.settings['tmc2209 extruder'].hold_current : 0.05
printer.configfile.settings['tmc2209 extruder'].driver_tbl : 2
printer.configfile.settings['tmc2209 extruder'].driver_pwm_autograd : True
printer.configfile.settings['tmc2209 extruder'].driver_pwm_grad : 14
printer.configfile.settings['tmc2209 extruder'].run_current : 0.85
printer.configfile.settings['tmc2209 extruder'].driver_hend : 0
printer.configfile.settings['tmc2209 extruder'].stealthchop_threshold : 0.0
printer.configfile.settings['tmc2209 extruder'].driver_pwm_autoscale : True
printer.configfile.settings['tmc2209 extruder'].driver_tpowerdown : 20
printer.configfile.settings['tmc2209 extruder'].driver_pwm_freq : 1
printer.configfile.settings['tmc2209 extruder'].driver_pwm_lim : 12
printer.configfile.settings['tmc2209 extruder'].driver_sgthrs : 0
printer.configfile.settings.force_move.enable_force_move : True
printer.configfile.settings['delayed_gcode _ercf_start_loadtest'].gcode : 
ERCF_TEST_LOAD_SEQ LOOP=1
printer.configfile.settings['delayed_gcode _ercf_start_loadtest'].initial_duration : 0.0
printer.configfile.settings['bed_mesh nosoak'].tension : 0.2
printer.configfile.settings['bed_mesh nosoak'].min_x : 40.0
printer.configfile.settings['bed_mesh nosoak'].min_y : 40.0
printer.configfile.settings['bed_mesh nosoak'].y_count : 5
printer.configfile.settings['bed_mesh nosoak'].mesh_y_pps : 2
printer.configfile.settings['bed_mesh nosoak'].x_count : 5
printer.configfile.settings['bed_mesh nosoak'].mesh_x_pps : 2
printer.configfile.settings['bed_mesh nosoak'].points : ((-0.08, -0.0575, -0.07, -0.115, -0.1575), (-0.0725, -0.0275, -0.04, -0.04, -0.0825), (-0.02, -0.0, 0.0, -0.0075, -0.025), (-0.0275, 0.035, 0.01, 0.0075, -0.01), (-0.0525, 0.0375, 0.0325, 0.0025, -0.02))
printer.configfile.settings['bed_mesh nosoak'].algo : bicubic
printer.configfile.settings['bed_mesh nosoak'].version : 1
printer.configfile.settings['bed_mesh nosoak'].max_x : 330.0
printer.configfile.settings['bed_mesh nosoak'].max_y : 330.0
printer.configfile.settings['gcode_shell_command set_cam_config'].command : sh /home/pi/klipper_config/cfg_noz_cam.sh
printer.configfile.settings['gcode_shell_command set_cam_config'].verbose : False
printer.configfile.settings['gcode_shell_command set_cam_config'].timeout : 2.0
printer.configfile.settings['gcode_macro t11'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T11 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T11 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=11
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T11 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T11 {% endif %}
printer.configfile.settings['gcode_macro t11'].description : G-Code macro
printer.configfile.settings['gcode_macro t10'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T10 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T10 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=10
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T10 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T10 {% endif %}
printer.configfile.settings['gcode_macro t10'].description : G-Code macro
printer.configfile.settings['gcode_macro _cart_move_dwell'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_cart_move_dwell func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _cart_move_dwell Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 >>> _cart_move_dwell {printer["gcode_macro _ERCF_VAR"].ercf_cart_move_dwell|int}mS <<< {% endif %}
G4 P{printer["gcode_macro _ERCF_VAR"].ercf_cart_move_dwell|int}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _cart_move_dwell End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_cart_move_dwell {% endif %}
printer.configfile.settings['gcode_macro _cart_move_dwell'].description : impute a dwell time to allow for the stepper movement to complete
printer.configfile.settings['gcode_macro sng_empire'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_empire {% endif %}
M117 Empire
M3001 S392 P436
M3001 S0 P109
M3001 S392 P436
M3001 S0 P109
M3001 S392 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S392 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S392 P872
M3001 S0 P218
M3001 S587 P436
M3001 S0 P109
M3001 S587 P436
M3001 S0 P109
M3001 S587 P436
M3001 S0 P109
M3001 S622 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S370 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S392 P872
M3001 S0 P218
M3001 S784 P436
M3001 S0 P109
M3001 S392 P326
M3001 S0 P81
M3001 S392 P108
M3001 S0 P27
M3001 S784 P436
M3001 S0 P109
M3001 S740 P326
M3001 S0 P81
M3001 S698 P108
M3001 S0 P27
M3001 S659 P108
M3001 S0 P27
M3001 S622 P108
M3001 S0 P27
M3001 S659 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S415 P217
M3001 S0 P54
M3001 S554 P436
M3001 S0 P109
M3001 S523 P326
M3001 S0 P81
M3001 S494 P108
M3001 S0 P27
M3001 S466 P108
M3001 S0 P27
M3001 S440 P108
M3001 S0 P27
M3001 S466 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S311 P217
M3001 S0 P54
M3001 S370 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S370 P108
M3001 S0 P27
M3001 S466 P436
M3001 S0 P109
M3001 S392 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S587 P872
M3001 S0 P218
M3001 S784 P436
M3001 S0 P109
M3001 S392 P326
M3001 S0 P81
M3001 S392 P108
M3001 S0 P27
M3001 S784 P436
M3001 S0 P109
M3001 S740 P326
M3001 S0 P81
M3001 S698 P108
M3001 S0 P27
M3001 S659 P108
M3001 S0 P27
M3001 S622 P108
M3001 S0 P27
M3001 S659 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S415 P217
M3001 S0 P54
M3001 S554 P436
M3001 S0 P109
M3001 S523 P326
M3001 S0 P81
M3001 S494 P108
M3001 S0 P27
M3001 S466 P108
M3001 S0 P27
M3001 S440 P108
M3001 S0 P27
M3001 S466 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S311 P217
M3001 S0 P54
M3001 S370 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S392 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S392 P872
M3001 S0 P218
M3001 S392 P436
M3001 S0 P109
M3001 S392 P436
M3001 S0 P109
M3001 S392 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S392 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S392 P872
M3001 S0 P218
M3001 S587 P436
M3001 S0 P109
M3001 S587 P436
M3001 S0 P109
M3001 S587 P436
M3001 S0 P109
M3001 S622 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S370 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S392 P872
M3001 S0 P218
M3001 S784 P436
M3001 S0 P109
M3001 S392 P326
M3001 S0 P81
M3001 S392 P108
M3001 S0 P27
M3001 S784 P436
M3001 S0 P109
M3001 S740 P326
M3001 S0 P81
M3001 S698 P108
M3001 S0 P27
M3001 S659 P108
M3001 S0 P27
M3001 S622 P108
M3001 S0 P27
M3001 S659 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S415 P217
M3001 S0 P54
M3001 S554 P436
M3001 S0 P109
M3001 S523 P326
M3001 S0 P81
M3001 S494 P108
M3001 S0 P27
M3001 S466 P108
M3001 S0 P27
M3001 S440 P108
M3001 S0 P27
M3001 S466 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S311 P217
M3001 S0 P54
M3001 S370 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S392 P436
M3001 S0 P109
M3001 S311 P326
M3001 S0 P81
M3001 S466 P108
M3001 S0 P27
M3001 S392 P872
M3001 S0 P218
M3001 S0 P436
M3001 S0 P109
M3001 S294 P217
M3001 S0 P54
M3001 S311 P217
M3001 S0 P54
M3001 S262 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S466 P217
M3001 S0 P54
M3001 S440 P217
M3001 S0 P54
M3001 S370 P217
M3001 S0 P54
M3001 S587 P217
M3001 S0 P54
M3001 S554 P217
M3001 S0 P54
M3001 S440 P217
M3001 S0 P54
M3001 S523 P217
M3001 S0 P54
M3001 S466 P217
M3001 S0 P54
M3001 S370 P217
M3001 S0 P54
M3001 S311 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S294 P217
M3001 S0 P54
M3001 S311 P217
M3001 S0 P54
M3001 S262 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S466 P217
M3001 S0 P54
M3001 S440 P217
M3001 S0 P54
M3001 S370 P217
M3001 S0 P54
M3001 S784 P217
M3001 S0 P54
M3001 S587 P217
M3001 S0 P54
M3001 S466 P217
M3001 S0 P54
M3001 S415 P217
M3001 S0 P54
M3001 S311 P217
M3001 S0 P54
M3001 S247 P217
M3001 S0 P54
M3001 S208 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S294 P217
M3001 S0 P54
M3001 S311 P217
M3001 S0 P54
M3001 S262 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S466 P217
M3001 S0 P54
M3001 S440 P217
M3001 S0 P54
M3001 S370 P217
M3001 S0 P54
M3001 S587 P217
M3001 S0 P54
M3001 S554 P217
M3001 S0 P54
M3001 S440 P217
M3001 S0 P54
M3001 S523 P217
M3001 S0 P54
M3001 S466 P217
M3001 S0 P54
M3001 S370 P217
M3001 S0 P54
M3001 S311 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S311 P217
M3001 S0 P54
M3001 S330 P217
M3001 S0 P54
M3001 S277 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S494 P217
M3001 S0 P54
M3001 S466 P217
M3001 S0 P54
M3001 S392 P217
M3001 S0 P54
M3001 S831 P217
M3001 S0 P54
M3001 S622 P217
M3001 S0 P54
M3001 S494 P217
M3001 S0 P54
M3001 S440 P217
M3001 S0 P54
M3001 S330 P217
M3001 S0 P54
M3001 S262 P217
M3001 S0 P54
M3001 S220 P217
M3001 S0 P54
M3001 S440 P436
M3001 S0 P109
M3001 S440 P436
M3001 S0 P109
M3001 S440 P436
M3001 S0 P109
M3001 S349 P326
M3001 S0 P81
M3001 S523 P108
M3001 S0 P27
M3001 S440 P436
M3001 S0 P109
M3001 S349 P326
M3001 S0 P81
M3001 S523 P108
M3001 S0 P27
M3001 S440 P872
M3001 S0 P218
M3001 S659 P436
M3001 S0 P109
M3001 S659 P436
M3001 S0 P109
M3001 S659 P436
M3001 S0 P109
M3001 S698 P326
M3001 S0 P81
M3001 S523 P108
M3001 S0 P27
M3001 S415 P436
M3001 S0 P109
M3001 S349 P326
M3001 S0 P81
M3001 S523 P108
M3001 S0 P27
M3001 S440 P872
M3001 S0 P218
M3001 S880 P436
M3001 S0 P109
M3001 S440 P326
M3001 S0 P81
M3001 S440 P108
M3001 S0 P27
M3001 S880 P436
M3001 S0 P109
M3001 S831 P326
M3001 S0 P81
M3001 S784 P108
M3001 S0 P27
M3001 S740 P108
M3001 S0 P27
M3001 S698 P108
M3001 S0 P27
M3001 S740 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S466 P217
M3001 S0 P54
M3001 S622 P436
M3001 S0 P109
M3001 S587 P326
M3001 S0 P81
M3001 S554 P108
M3001 S0 P27
M3001 S523 P108
M3001 S0 P27
M3001 S494 P108
M3001 S0 P27
M3001 S523 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S349 P217
M3001 S0 P54
M3001 S415 P436
M3001 S0 P109
M3001 S349 P326
M3001 S0 P81
M3001 S523 P108
M3001 S0 P27
M3001 S440 P436
M3001 S0 P109
M3001 S349 P326
M3001 S0 P81
M3001 S523 P108
M3001 S0 P27
M3001 S440 P872
M3001 S0 P218
M3001 S880 P436
M3001 S0 P109
M3001 S440 P326
M3001 S0 P81
M3001 S440 P108
M3001 S0 P27
M3001 S880 P436
M3001 S0 P109
M3001 S831 P326
M3001 S0 P81
M3001 S784 P108
M3001 S0 P27
M3001 S740 P108
M3001 S0 P27
M3001 S698 P108
M3001 S0 P27
M3001 S740 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S466 P217
M3001 S0 P54
M3001 S622 P436
M3001 S0 P109
M3001 S587 P326
M3001 S0 P81
M3001 S554 P108
M3001 S0 P27
M3001 S523 P108
M3001 S0 P27
M3001 S494 P108
M3001 S0 P27
M3001 S523 P217
M3001 S0 P54
M3001 S0 P436
M3001 S0 P109
M3001 S349 P217
M3001 S0 P54
M3001 S415 P436
M3001 S0 P109
M3001 S349 P326
M3001 S0 P81
M3001 S523 P108
M3001 S0 P27
M3001 S440 P436
M3001 S0 P109
M3001 S349 P326
M3001 S0 P81
M3001 S523 P108
M3001 S0 P27
M3001 S440 P653
M3001 S0 P163
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_empire {% endif %}
printer.configfile.settings['gcode_macro sng_empire'].description : G-Code macro
printer.configfile.settings['gcode_macro _emit_hho_parameters'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_emit_hho_parameters func_params='"{rawparams|string}"'  {% endif %}
{% set H2O_Flow_RPM = printer['heater_fan H2O_Flow'].rpm %}
{% set H2O_Pump_RPM = printer['heater_fan H2O_Pump'].rpm %}
{% set H2O_RadFan_RPM = printer['heater_fan H2O_RadFan'].rpm %}
{% set H2O_Temp = printer['temperature_sensor Hotend_H2O'].temperature %}
M118
M118 H2O Cooling Parameters:
M118 H2O_Flow_RPM: {printer["gcode_macro _bounds_vars"].h2o_flow_rpm_min|int} <= {H2O_Flow_RPM|int} <= {printer["gcode_macro _bounds_vars"].h2o_flow_rpm_max|int}
M118 H2O_Pump_RPM: {printer["gcode_macro _bounds_vars"].h2o_pump_rpm_min|int} <= {H2O_Pump_RPM|int} <= {printer["gcode_macro _bounds_vars"].h2o_pump_rpm_max|int}
M118 H2O_RadFan_RPM: {printer["gcode_macro _bounds_vars"].h2o_radfan_rpm_min|int} <= {H2O_RadFan_RPM|int} <= {printer["gcode_macro _bounds_vars"].h2o_radfan_rpm_max|int}
M118 H2O_Temp: {printer["gcode_macro _bounds_vars"].h2o_temp_min|int} <= {H2O_Temp|int} <= {printer["gcode_macro _bounds_vars"].h2o_temp_max|int}
M118
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_emit_hho_parameters {% endif %}
printer.configfile.settings['gcode_macro _emit_hho_parameters'].description : emits H2O Cooling Parameters and Bounds on same to console
printer.configfile.settings['gcode_macro m3001'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M3001 {% endif %}
{% set S = params.S|default(1000)|int %}
{% set P = params.P|default(100)|int %}
{% if S > 0 %}
SET_PIN PIN=_BEEPER_pin VALUE=0.5 cycle_time={1.0/(S|float)}
{% endif %}
G4 P{P}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M3001 {% endif %}
printer.configfile.settings['gcode_macro m3001'].description : G-Code macro
printer.configfile.settings['gcode_macro _setdynamicpa'].variable_mesh_smtm : [0.040,			0.040,			0.040,						0.040,					0.040,			0.040,			0.040,				0.040,		0.040,				0.040,			0.040,			0.040,				0.040,							0.040,			0.040,		0.040	]
printer.configfile.settings['gcode_macro _setdynamicpa'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_SetDynamicPA func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _linadv_vars"].dynamic_pa_enable %}
{% if printer["gcode_macro _linadv_vars"].linadv_verb_codeflow %}  M118 >>> _SetDynamicPA Start <<< {% endif %}
{% set sdpa = namespace(pa_unset=true) %}
{% set sdpb = namespace(matches=0) %}
{% for mesh_idx in range(printer["gcode_macro _SetDynamicPA"].mesh_name|length) %}
{% if params.MESH|string|lower == printer["gcode_macro _SetDynamicPA"].mesh_name[mesh_idx|int]|string|lower %}
SET_PRESSURE_ADVANCE ADVANCE={printer["gcode_macro _SetDynamicPA"].mesh_kval[mesh_idx|int]|float} SMOOTH_TIME={printer["gcode_macro _SetDynamicPA"].mesh_smtm[mesh_idx|int]|float}
{% set sdpa.pa_unset = false %}
{% set sdpb.matches = sdpb.matches + 1 %}
{% endif %}
{% endfor %}
{% if sdpa.pa_unset %}
{% if printer["gcode_macro _linadv_vars"].linadv_verb_error %}
M118 >>> _SetDynamicPA|UNKNOWN MESH: {params.MESH|string|lower} <<<
{% endif %}
M300 S200 P50
{% endif %}
{% if sdpb.matches > 1 %}
{% if printer["gcode_macro _linadv_vars"].linadv_verb_error %}
M118 >>> _SetDynamicPA|Multiple matches on MESH: {params.MESH|string|lower} - matched {sdpb.matches} times <<<
{% endif %}
M300 S200 P50
{% endif %}
{% if printer["gcode_macro _linadv_vars"].linadv_verb_codeflow %}  M118 >>> _SetDynamicPA End <<< {% endif %}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_SetDynamicPA {% endif %}
printer.configfile.settings['gcode_macro _setdynamicpa'].variable_mesh_name : ["Unknown",	"Perimeter",	"External perimeter",	"Overhang perimeter",	"Internal infill",	"Solid infill",	"Top solid infill",	"Ironing",	"Bridge infill",	"Gap fill",		"Skirt/Brim",	"Support material",	"Support material interface",	"Wipe tower",	"Custom",	"Mixed"		]
printer.configfile.settings['gcode_macro _setdynamicpa'].variable_mesh_kval : [0.0,			0.0,			0.0,						0.0,					0.0,			0.0,			0.0,				0.0,		0.0,				0.0,			0.0,			0.0,				0.0,							0.0,			0.0,		0.0	]
printer.configfile.settings['gcode_macro _setdynamicpa'].description : Used to set klipper's PA based on specific mesh types passed in gcode
printer.configfile.settings['gcode_shell_command wcv2_irled_off'].command : curl -d value=0 http://10.0.0.61:8081/api/ir_led
printer.configfile.settings['gcode_shell_command wcv2_irled_off'].verbose : False
printer.configfile.settings['gcode_shell_command wcv2_irled_off'].timeout : 2.0
printer.configfile.settings.printer.square_corner_velocity : 20.0
printer.configfile.settings.printer.move_flush_time : 0.05
printer.configfile.settings.printer.max_accel : 4000.0
printer.configfile.settings.printer.buffer_time_start : 0.25
printer.configfile.settings.printer.buffer_time_low : 1.0
printer.configfile.settings.printer.max_z_accel : 350.0
printer.configfile.settings.printer.max_velocity : 400.0
printer.configfile.settings.printer.max_z_velocity : 50.0
printer.configfile.settings.printer.kinematics : corexy
printer.configfile.settings.printer.max_accel_to_decel : 3000.0
printer.configfile.settings.printer.buffer_time_high : 2.0
printer.configfile.settings['gcode_macro ercflts_normal'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCFLts_Normal {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=ercf_lights RED=0.5 GREEN=0.5 BLUE=0.5
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCFLts_Normal {% endif %}
printer.configfile.settings['gcode_macro ercflts_normal'].description : G-Code macro
printer.configfile.settings['gcode_macro printled_off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PrintLED_Off func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> PrintLED_Off <<< {% endif %}
_PrintLED_Off
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PrintLED_Off {% endif %}
printer.configfile.settings['gcode_macro printled_off'].description : G-Code macro
printer.configfile.settings['gcode_macro _disable_gmove_debug'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_disable_gmove_debug func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _disable_gmove_debug <<<<< {% endif %}
SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=gmove_debug VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_disable_gmove_debug {% endif %}
printer.configfile.settings['gcode_macro _disable_gmove_debug'].description : used to disable gmove debug
printer.configfile.settings['gcode_macro go_relative'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=go_relative func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> RELATIVE <<< {% endif %}
G91
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=go_relative {% endif %}
printer.configfile.settings['gcode_macro go_relative'].description : does a G91 - just for readability's sake
printer.configfile.settings['gcode_macro snd_printresume'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_PrintResume {% endif %}
sng_startup
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_PrintResume {% endif %}
printer.configfile.settings['gcode_macro snd_printresume'].description : G-Code macro
printer.configfile.settings['gcode_macro _park_head'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_park_head func_params='"{rawparams|string}"'  {% endif %}
{% set th = printer.toolhead %}
{% set entry_ptr_state = params.ENTRY|string %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_debug %} M118 _____ _park_head | entry_ptr_state:{entry_ptr_state} _____ {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
M118 >>> _park_head - entry_ptr_state: {entry_ptr_state} <<<
{% endif %}
{% set x_park = th.axis_maximum.x//2|float %}
{% set y_park = th.axis_maximum.y|float %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_debug %} M118 _____ _park_head | x_park:{x_park} y_park:{y_park} _____ {% endif %}
{% set max_z = th.axis_maximum.z|float %}
{% set act_z = th.position.z|float %}
{% if act_z < (max_z - 20.0) %}
{% set max_deltaz = 20.0 %}
{% else %}
{% set max_deltaz = max_z - act_z %}
{% endif %}
{% set tgt_deltaz = svv.maxz|float + 15.0 - act_z %}
{% set min_deltaz = svv.maxz|float + 10.0 - act_z %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_debug %}
M118 >>> MaxZ: {svv.maxz} MaxDeltaZ: {max_deltaz} TgtDeltaZ: {tgt_deltaz} MinDeltaZ: {min_deltaz} <<<
{% endif %}
{% if tgt_deltaz > max_deltaz %}
{% set final_deltaz = min_deltaz %}
{% else %}
{% set final_deltaz = tgt_deltaz %}
{% endif %}
{% if entry_ptr_state|string == "print_paused" %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_debug %} M118 _____ _park_head print_paused | G0 X{x_park} Y{y_park} F15000 _____ {% endif %}
G0 X{x_park} Y{y_park} F15000
{% endif %}
go_relative
G1 Z{final_deltaz} F900
go_absolute
{% if entry_ptr_state|string == "print_ending" or entry_ptr_state|string == "print_started" or entry_ptr_state|string == "print_resumed" or entry_ptr_state|string == "print_cancelling" %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_debug %} M118 _____ _park_head B | G0 X{x_park} Y{y_park} F15000 _____ {% endif %}
G0 X{x_park} Y{y_park} F15000
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_park_head {% endif %}
printer.configfile.settings['gcode_macro _park_head'].description : procs for post canx/end parking of heads
printer.configfile.settings.probe.samples_tolerance_retries : 3
printer.configfile.settings.probe.deactivate_on_each_sample : True
printer.configfile.settings.probe.pin : ^PG11
printer.configfile.settings.probe.lift_speed : 8.0
printer.configfile.settings.probe.samples_tolerance : 0.01
printer.configfile.settings.probe.activate_gcode : 
printer.configfile.settings.probe.deactivate_gcode : 
printer.configfile.settings.probe.samples_result : median
printer.configfile.settings.probe.y_offset : 19.75
printer.configfile.settings.probe.samples : 3
printer.configfile.settings.probe.sample_retract_dist : 2.0
printer.configfile.settings.probe.x_offset : 0.0
printer.configfile.settings.probe.speed : 8.0
printer.configfile.settings.probe.z_offset : 6.42
printer.configfile.settings['gcode_macro _ercf_servo_up'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ERCF_SERVO_UP func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ERCF_SERVO_UP Start ... {% endif %}
SET_SERVO SERVO=ercf_servo ANGLE={printer["gcode_macro _ERCF_VAR"].servo_up_angle}
SET_SERVO SERVO=ercf_servo WIDTH=0.0
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ERCF_SERVO_UP End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ERCF_SERVO_UP {% endif %}
printer.configfile.settings['gcode_macro _ercf_servo_up'].description : Disengage the ERCF gear and disabled after raised (won't fall) to prevent power stalling
printer.configfile.settings['delayed_gcode pause_alarm'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=pause_alarm func_params='"{rawparams|string}"'  {% endif %}
_PrintLED_Off
M300 P100 S3000
M300 P100 S3000
M300 P100 S3000
_PrintLED_On
UPDATE_DELAYED_GCODE ID=pause_alarm DURATION=30
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=pause_alarm {% endif %}
printer.configfile.settings['delayed_gcode pause_alarm'].initial_duration : 0.0
printer.configfile.settings['gcode_shell_command restore_configs'].command : sh /home/pi/klipper_config/config_pull.sh
printer.configfile.settings['gcode_shell_command restore_configs'].verbose : False
printer.configfile.settings['gcode_shell_command restore_configs'].timeout : 600.0
printer.configfile.settings['thermistor chamber'].beta : 3950.0
printer.configfile.settings['thermistor chamber'].resistance1 : 100000.0
printer.configfile.settings['thermistor chamber'].temperature1 : 25.0
printer.configfile.settings['gcode_shell_command wcv2_ircut_on'].command : curl -d value=1 http://10.0.0.61:8081/api/ir_cut
printer.configfile.settings['gcode_shell_command wcv2_ircut_on'].verbose : False
printer.configfile.settings['gcode_shell_command wcv2_ircut_on'].timeout : 2.0
printer.configfile.settings['gcode_macro _ercf_park_n_home'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_park_n_home func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ercf_park_n_home start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > _ercf_park_n_home Skipped - an error condition is asserted < {% endif %}
{% else %}
{% if printer["gcode_macro ERCF_HOME"].home == -1 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 _ ERCF not homed, home & park filament... _ {% endif %}
ERCF_HOME
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 _ ERCF homed, park filament _ {% endif %}
ERCF_EJECT_UNKNOW_STATE
_ERCF_UNSELECT_TOOL
{% set selector_axis_pos = printer["gcode_macro _ERCF_VAR"].colorselector[0]|float %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 >>> _ercf_park_n_home cart position -> {selector_axis_pos}mm <<< {% endif %}
MANUAL_STEPPER STEPPER=selector_stepper MOVE={selector_axis_pos} SPEED=100
{% endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ercf_park_n_home End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ercf_park_n_home {% endif %}
printer.configfile.settings['gcode_macro _ercf_park_n_home'].description : unload and home
printer.configfile.settings['gcode_macro attach_probe_lock'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=Attach_Probe_Lock func_params='"{rawparams|string}"'  {% endif %}
Attach_Probe
_Probe_Lock
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=Attach_Probe_Lock {% endif %}
printer.configfile.settings['gcode_macro attach_probe_lock'].description : Attaches Klicky Probe, can only be docked after unlocking
printer.configfile.settings['gcode_macro chlts_off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ChLts_Off {% endif %}
SET_LED LED=chamber_lights RED=0 GREEN=0 BLUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ChLts_Off {% endif %}
printer.configfile.settings['gcode_macro chlts_off'].description : G-Code macro
printer.configfile.settings['filament_switch_sensor toolhead_sensor'].switch_pin : ^!PG15
printer.configfile.settings['filament_switch_sensor toolhead_sensor'].event_delay : 0.1
printer.configfile.settings['filament_switch_sensor toolhead_sensor'].insert_gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=toolhead_sensor_insert {% endif %}
M118 --> TH_filsw_prs
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=toolhead_sensor_insert {% endif %}
printer.configfile.settings['filament_switch_sensor toolhead_sensor'].runout_gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=toolhead_sensor_runout {% endif %}
M118 --> TH_filsw_rel
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=toolhead_sensor_runout {% endif %}
printer.configfile.settings['filament_switch_sensor toolhead_sensor'].pause_on_runout : False
printer.configfile.settings['filament_switch_sensor toolhead_sensor'].pause_delay : 0.5
printer.configfile.settings['gcode_macro z_probe_calibrate'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=Z_Probe_Calibrate func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Z_Probe_Calibrate <<< {% endif %}
_ENSURE_QGL
PROBE_CALIBRATE
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=Z_Probe_Calibrate {% endif %}
printer.configfile.settings['gcode_macro z_probe_calibrate'].description : hmm - just found another probe thing in klickyp-probe
printer.configfile.settings['gcode_macro resume'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=RESUME func_params='"{rawparams|string}"'  {% endif %}
{% set resume_flag = 0|int %}
{% if svv.module_ercf_loaded %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int != 0 %}
M118 You can't resume the print without unlocking the ERCF first.
M118 Run ERCF_UNLOCK and solve any issue before hitting Resume again
{% else %}
{% set resume_flag = 1|int %}
{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
{% endif %}
{% endif %}
{% else %}
{% set resume_flag = 1|int %}
{% endif %}
{% if resume_flag %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Resuming <<< {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_resuming"'
M118 RESUME @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}
snd_PrintResume
_HOURMETER_ON
_PrintLED_On
{% if svv.module_ledeff_loaded %}
_set_ledeff_mode CHAIN=chamber_lights	EFFECT=normal	RESET=1
_set_ledeff_mode CHAIN=lcd_lights 	EFFECT=normal	RESET=1
{% else %}
ChLts_Normal
LcdLts_Normal
{% endif %}
go_absolute REASON="forcing absolute before restoring gcode state"
{% if svv.pause_ercf_error %}
RESTORE_GCODE_STATE NAME=ERCF_state MOVE=1 MOVE_SPEED=300.0000
{% else %}
RESTORE_GCODE_STATE NAME=State_Save_Pause MOVE=1 MOVE_SPEED=300.0000
{% endif %}
{% set e = params.E|default(printer["gcode_macro _printer_vars"].pause_retract_default|float)|float %}
{% if 'VELOCITY' in params|upper %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_debug %} M118 >>> RESUME | Velocity param passed <<< {% endif %}
{% set get_params = ('VELOCITY=' ~ params.VELOCITY)  %}
{%else %}
{% set get_params = "" %}
{% endif %}
{% if printer.extruder.can_extrude|lower == 'true' %}
go_relative REASON="resume extruder deretract"
G1 E{e} F2100 REASON="resume deretract"
{% else %}
M118 No Resume Deretract as Extruder not hot enough
{% endif %}
go_absolute REASON="in case we are relative for deretract"
stop_pause_alarm
M300 P10 S1000
M300 P10 S2000
{% if printer["gcode_macro _printer_vars"].ptr_verb_debug %} M118 >>> RESUME | _RESUME_STOCK {rawparams} <<< {% endif %}
M118 _RESUME_STOCK @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}
_RESUME_STOCK {get_params}
CLEAR_PAUSE
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_resumed"'
_start_bounds_checking
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Resumed <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=RESUME {% endif %}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=RESUME {% endif %}
printer.configfile.settings['gcode_macro resume'].description : Resume the actual running print - adapted for ERCF
printer.configfile.settings['gcode_macro resume'].rename_existing : _RESUME_STOCK
printer.configfile.settings['gcode_macro snd_'].gcode : 
printer.configfile.settings['gcode_macro snd_'].description : G-Code macro
printer.configfile.settings['gcode_macro m300'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M300 {% endif %}
{% set S = params.S|default(1000)|int %}
{% set P = params.P|default(100)|int %}
{% if S > 0 %}
SET_PIN PIN=_BEEPER_pin VALUE=0.5 cycle_time={1.0/(S|float)}
{% endif %}
G4 P{P}
SET_PIN PIN=_BEEPER_pin VALUE=0.0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M300 {% endif %}
printer.configfile.settings['gcode_macro m300'].description : G-Code macro
printer.configfile.settings['gcode_macro manual_stepper'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=MANUAL_STEPPER func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> MANUAL_STEPPER Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag and params.ENABLE|default(1)|int %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > MANUAL_STEPPER Skipped - an error condition is asserted < {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 >>> MANUAL_STEPPER {rawparams} <<< {% endif %}
_MANUAL_STEPPER_STOCK {rawparams}
{% if params.SET_POSITION|default("")|string != "" or params.ENABLE|default(1)|int == 0 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %}
M118 >>> No motor dwell: SET_POSITION:{params.SET_POSITION|default("")|string} ENABLE:{params.ENABLE|default(1)|int} SYNC:{params.SYNC|default(1)|int} <<<
{% endif %}
{% elif params.STEPPER|string|lower == "selector_stepper" and params.NODWELL|default(0)|int == 0 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 >>> a cart move cmd <<< {% endif %}
_cart_move_dwell
{% elif params.STEPPER|string|lower == "gear_stepper" and params.NODWELL|default(0)|int == 0 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 >>> a gear move cmd <<< {% endif %}
_gear_move_dwell
{% elif params.NODWELL|default(0)|int != 0 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 >>> a NODWELL cmd <<< {% endif %}
{% else %}
M118 ___ unexpected command: manual_stepper {rawparams} ___
{%endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... MANUAL_STEPPER End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=MANUAL_STEPPER {% endif %}
printer.configfile.settings['gcode_macro manual_stepper'].description : wrapper for FW proc to handle error conditions, verbosity, and conditionally dwell
printer.configfile.settings['gcode_macro manual_stepper'].rename_existing : _MANUAL_STEPPER_STOCK
printer.configfile.settings['delayed_gcode _ercf_start_carthome'].gcode : 
_ercf_park_n_home
printer.configfile.settings['delayed_gcode _ercf_start_carthome'].initial_duration : 0.0
printer.configfile.settings['gcode_macro lcdlts_green'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=LcdLts_Green {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=lcd_lights RED=0 GREEN=0.5 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=LcdLts_Green {% endif %}
printer.configfile.settings['gcode_macro lcdlts_green'].description : G-Code macro
printer.configfile.settings['gcode_macro z_endstop_accuracy'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=Z_EndStop_Accuracy func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Z_EndStop_Accuracy <<< {% endif %}
_ENSURE_QGL
PROBE_Z_ACCURACY
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=Z_EndStop_Accuracy {% endif %}
printer.configfile.settings['gcode_macro z_endstop_accuracy'].description : Probe Z-Endstop accuracy at Nozzle-Endstop position
printer.configfile.settings['gcode_macro wcnightmode'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=wcnightmode func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> wcnightmode <<< {% endif %}
RUN_SHELL_COMMAND CMD=wcv2_ircut_off
RUN_SHELL_COMMAND CMD=wcv2_irled_on
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=wcnightmode {% endif %}
printer.configfile.settings['gcode_macro wcnightmode'].description : Enable IR LEDs/Stow IR Filter
printer.configfile.settings['gcode_macro wcdaymode'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=wcdaymode func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> wcdaymode <<< {% endif %}
RUN_SHELL_COMMAND CMD=wcv2_ircut_on
RUN_SHELL_COMMAND CMD=wcv2_irled_off
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=wcdaymode {% endif %}
printer.configfile.settings['gcode_macro wcdaymode'].description : Kill IR LEDs/Deploy IR Filter
printer.configfile.settings.respond.default_prefix : //
printer.configfile.settings.respond.default_type : command
printer.configfile.settings['gcode_macro _check_bounds'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_check_bounds func_params='"{rawparams|string}"'  {% endif %}
{% set H2O_Flow_RPM = printer['heater_fan H2O_Flow'].rpm %}
{% set H2O_Pump_RPM = printer['heater_fan H2O_Pump'].rpm %}
{% set H2O_RadFan_RPM = printer['heater_fan H2O_RadFan'].rpm %}
{% set H2O_Temp = printer['temperature_sensor Hotend_H2O'].temperature %}
{% if printer.extruder.target > 0 and (
(H2O_Flow_RPM 	>	printer["gcode_macro _bounds_vars"].h2o_flow_rpm_max)		or
(H2O_Flow_RPM 	<	printer["gcode_macro _bounds_vars"].h2o_flow_rpm_min)		or
(H2O_Pump_RPM 	>	printer["gcode_macro _bounds_vars"].h2o_pump_rpm_max)		or
(H2O_Pump_RPM 	<	printer["gcode_macro _bounds_vars"].h2o_pump_rpm_min)		or
(H2O_RadFan_RPM	>	printer["gcode_macro _bounds_vars"].h2o_radfan_rpm_max)		or
(H2O_RadFan_RPM	<	printer["gcode_macro _bounds_vars"].h2o_radfan_rpm_min)		or
(H2O_Temp		>	printer["gcode_macro _bounds_vars"].h2o_temp_max)			or
(H2O_Temp		<	printer["gcode_macro _bounds_vars"].h2o_temp_min)
) %}
M118 ... H2O cooling parameters Exceedance ALERT
_emit_hho_parameters
_start_bounds_alarm
M118 Pausing to enable resolution of H2O cooling parameters Exceedance
pause
{% else %}
M118 ... H2O cooling parameters OK
{% if params.REPORT|default(0) %}
_emit_hho_parameters
{% endif %}
_stop_bounds_alarm
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_check_bounds {% endif %}
printer.configfile.settings['gcode_macro _check_bounds'].description : runtime (during printing) proc to check various parameters and initiate a pause & bound_alarm on an exceedence
printer.configfile.settings['gcode_macro _probe_unlock'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_Probe_Unlock func_params='"{rawparams|string}"'  {% endif %}
SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_Probe_Unlock {% endif %}
printer.configfile.settings['gcode_macro _probe_unlock'].description : Unlocks Klicky Probe state
printer.configfile.settings['gcode_macro reset_noz_cam'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=reset_noz_cam {% endif %}
RUN_SHELL_COMMAND CMD=set_cam_config
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=reset_noz_cam {% endif %}
printer.configfile.settings['gcode_macro reset_noz_cam'].description : G-Code macro
printer.configfile.settings.z_calibration.samples_tolerance_retries : 3
printer.configfile.settings.z_calibration.max_deviation : 1.5
printer.configfile.settings.z_calibration.probe_switch_x : 226.0
printer.configfile.settings.z_calibration.start_gcode : Dock_Probe_Unlock
printer.configfile.settings.z_calibration.probe_switch_y : 330.5
printer.configfile.settings.z_calibration.probe_bed_x : 175.0
printer.configfile.settings.z_calibration.probe_bed_y : 175.0
printer.configfile.settings.z_calibration.before_switch_gcode : Attach_Probe
printer.configfile.settings.z_calibration.switch_offset : 0.675
printer.configfile.settings.z_calibration.lift_speed : 25.0
printer.configfile.settings.z_calibration.probe_nozzle_x : 231.3
printer.configfile.settings.z_calibration.probe_nozzle_y : 349.0
printer.configfile.settings.z_calibration.probing_retract_dist : 2.0
printer.configfile.settings.z_calibration.samples_tolerance : 0.01
printer.configfile.settings.z_calibration.samples : 5
printer.configfile.settings.z_calibration.probing_first_fast : True
printer.configfile.settings.z_calibration.end_gcode : Dock_Probe
printer.configfile.settings.z_calibration.samples_result : median
printer.configfile.settings.z_calibration.speed : 250.0
printer.configfile.settings.z_calibration.clearance : 5.0
printer.configfile.settings['gcode_macro sng_imperialmarch'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_imperialmarch {% endif %}
M117 Imperial March
M3001 S195.998 P250
M3001 S195.998 P250
M3001 S195.998 P250
M3001 S155.563 P125
G4 P62.5
M3001 S233.082 P62.5
M3001 S195.998 P250
M3001 S155.563 P125
G4 P62.5
M3001 S233.082 P62.5
M3001 S195.998 P500
M3001 S293.665 P250
M3001 S293.665 P250
M3001 S293.665 P250
M3001 S311.127 P125
G4 P62.5
M3001 S246.942 P62.5
M3001 S184.997 P250
M3001 S155.563 P125
G4 P62.5
M3001 S233.082 P62.5
M3001 S195.998 P500
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_imperialmarch {% endif %}
printer.configfile.settings['gcode_macro sng_imperialmarch'].description : G-Code macro
printer.configfile.settings['thermistor h2o'].beta : 3950.0
printer.configfile.settings['thermistor h2o'].temperature1 : 25.0
printer.configfile.settings['thermistor h2o'].resistance1 : 10000.0
printer.configfile.settings['gcode_macro ercflts_red'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCFLts_Red {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=ercf_lights RED=0.5 GREEN=0 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCFLts_Red {% endif %}
printer.configfile.settings['gcode_macro ercflts_red'].description : G-Code macro
printer.configfile.settings.virtual_sdcard.path : /home/pi/gcode_files
printer.configfile.settings['gcode_macro _scrub_vars'].variable_scrub_verb_codeflow : 0
printer.configfile.settings['gcode_macro _scrub_vars'].variable_scrub_verb_debug : 0
printer.configfile.settings['gcode_macro _scrub_vars'].description : nozzle scrub vars macro
printer.configfile.settings['gcode_macro _scrub_vars'].variable_scrub_err_flag : 0
printer.configfile.settings['gcode_macro _scrub_vars'].gcode : 
printer.configfile.settings['gcode_macro _scrub_vars'].variable_scrub_verb_error : 1
printer.configfile.settings['gcode_macro _scrub_vars'].variable_scrub_verb_status : 0
printer.configfile.settings['gcode_macro _scrub_vars'].variable_scrub_verb_info : 0
printer.configfile.settings['heater_fan h2o_flow'].tachometer_pin : ^pico:gpio21
printer.configfile.settings['heater_fan h2o_flow'].heater : ('extruder',)
printer.configfile.settings['heater_fan h2o_flow'].cycle_time : 0.01
printer.configfile.settings['heater_fan h2o_flow'].pin : pico:gpio17
printer.configfile.settings['heater_fan h2o_flow'].off_below : 0.0
printer.configfile.settings['heater_fan h2o_flow'].tachometer_poll_interval : 0.005
printer.configfile.settings['heater_fan h2o_flow'].heater_temp : 50.0
printer.configfile.settings['heater_fan h2o_flow'].shutdown_speed : 1.0
printer.configfile.settings['heater_fan h2o_flow'].fan_speed : 1.0
printer.configfile.settings['heater_fan h2o_flow'].max_power : 1.0
printer.configfile.settings['heater_fan h2o_flow'].kick_start_time : 0.1
printer.configfile.settings['heater_fan h2o_flow'].tachometer_ppr : 1
printer.configfile.settings['heater_fan h2o_flow'].hardware_pwm : False
printer.configfile.settings['gcode_macro save_variable'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=SAVE_VARIABLE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _debug_vars"].save_var_debug %} M118 ___SAVE_VARIABLE {rawparams}___ {% endif %}
_SAVE_VARIABLE_STOCK {rawparams}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=SAVE_VARIABLE {% endif %}
printer.configfile.settings['gcode_macro save_variable'].description : SAVE_VARIABLE, with console echo if so enabled
printer.configfile.settings['gcode_macro save_variable'].rename_existing : _SAVE_VARIABLE_STOCK
printer.configfile.settings['neopixel lcd_lights'].initial_white : 0.0
printer.configfile.settings['neopixel lcd_lights'].pin : EXP1_6
printer.configfile.settings['neopixel lcd_lights'].chain_count : 3
printer.configfile.settings['neopixel lcd_lights'].initial_red : 0.5
printer.configfile.settings['neopixel lcd_lights'].initial_green : 0.5
printer.configfile.settings['neopixel lcd_lights'].initial_blue : 0.5
printer.configfile.settings['neopixel lcd_lights'].color_order : ('RGB',)
printer.configfile.settings['delayed_gcode _scrub_module_start'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_scrub_module_start func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _scrub_module_start Start <<< {% endif %}
SAVE_VARIABLE VARIABLE=module_scrub_loaded VALUE=1
SAVE_VARIABLE VARIABLE=scrub_err_flag VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _scrub_module_start End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_scrub_module_start {% endif %}
printer.configfile.settings['delayed_gcode _scrub_module_start'].initial_duration : 0.5
printer.configfile.settings['gcode_macro fil_ecdr_prs'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=fil_ecdr_prs {% endif %}
M118 fil_ecdr_prs
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=fil_ecdr_prs {% endif %}
printer.configfile.settings['gcode_macro fil_ecdr_prs'].description : called when the fil encoder toggles closed
printer.configfile.settings['heater_fan h2o_pump'].tachometer_pin : ^pico:gpio19
printer.configfile.settings['heater_fan h2o_pump'].heater : ('extruder',)
printer.configfile.settings['heater_fan h2o_pump'].cycle_time : 0.01
printer.configfile.settings['heater_fan h2o_pump'].pin : pico:gpio20
printer.configfile.settings['heater_fan h2o_pump'].off_below : 0.0
printer.configfile.settings['heater_fan h2o_pump'].tachometer_poll_interval : 0.003
printer.configfile.settings['heater_fan h2o_pump'].heater_temp : 50.0
printer.configfile.settings['heater_fan h2o_pump'].shutdown_speed : 1.0
printer.configfile.settings['heater_fan h2o_pump'].fan_speed : 1.0
printer.configfile.settings['heater_fan h2o_pump'].max_power : 1.0
printer.configfile.settings['heater_fan h2o_pump'].kick_start_time : 0.1
printer.configfile.settings['heater_fan h2o_pump'].tachometer_ppr : 2
printer.configfile.settings['heater_fan h2o_pump'].hardware_pwm : False
printer.configfile.settings['gcode_macro _ercf_servo_down'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ERCF_SERVO_DOWN func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ERCF_SERVO_DOWN Start ... {% endif %}
MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
MANUAL_STEPPER STEPPER=gear_stepper MOVE=0.5 SPEED=25 ACCEL=0 SYNC=0 NODWELL=1
SET_SERVO SERVO=ercf_servo ANGLE={printer["gcode_macro _ERCF_VAR"].servo_down_angle}
MANUAL_STEPPER STEPPER=gear_stepper MOVE=0.0 SPEED=25 ACCEL=0 SYNC=0
MANUAL_STEPPER STEPPER=gear_stepper MOVE=-0.5 SPEED=25 ACCEL=0 SYNC=0
MANUAL_STEPPER STEPPER=gear_stepper MOVE=0.0 SPEED=25 ACCEL=0 NODWELL=1
SET_SERVO SERVO=ercf_servo WIDTH=0.0
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ERCF_SERVO_DOWN End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ERCF_SERVO_DOWN {% endif %}
printer.configfile.settings['gcode_macro _ercf_servo_down'].description : Engage the ERCF gear & do a wiggle, then a buzz to ensure drive/idler gear tooth meshing
printer.configfile.settings['gcode_macro snd_meshstore'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_MeshStore {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_MeshStore {% endif %}
printer.configfile.settings['gcode_macro snd_meshstore'].description : G-Code macro
printer.configfile.settings['gcode_macro lcdlts_blue'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=LcdLts_Blue {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=lcd_lights RED=0 GREEN=0 BLUE=0.5
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=LcdLts_Blue {% endif %}
printer.configfile.settings['gcode_macro lcdlts_blue'].description : G-Code macro
printer.configfile.settings['gcode_macro ercf_home_only'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_HOME_ONLY func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_HOME_ONLY Start ... {% endif %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Test load filament in cart 0 {% endif %}
; ERCF_SELECT_TOOL TOOL=0
ERCF_SELECT_TOOL_dbg TOOL=0
ERCF_SET_STEPS RATIO=1.0
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Loading filament to ERCF... {% endif %}
ERCF_LOAD LENGTH={printer["gcode_macro _ERCF_VAR"].ercf_cart_load_length}
ERCF_UNLOAD LENGTH={printer["gcode_macro _ERCF_VAR"].ercf_cart_unload_length}
_ERCF_UNSELECT_TOOL
SET_GCODE_VARIABLE MACRO=ERCF_HOME VARIABLE=home VALUE=1
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Homing ERCF ended ... {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Homing ERCF failed, ERCF is paused, run "ERCF_UNLOCK" to unlock it ... {% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=1
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_HOME_ONLY End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_HOME_ONLY {% endif %}
printer.configfile.settings['gcode_macro ercf_home_only'].description : G-Code macro
printer.configfile.settings['thermistor duct'].beta : 3950.0
printer.configfile.settings['thermistor duct'].resistance1 : 10000.0
printer.configfile.settings['thermistor duct'].temperature1 : 25.0
printer.configfile.settings['output_pin _alarm_pin'].shutdown_value : 0.0
printer.configfile.settings['output_pin _alarm_pin'].pwm : False
printer.configfile.settings['output_pin _alarm_pin'].pin : pico:gpio18
printer.configfile.settings['output_pin _alarm_pin'].value : 0.0
printer.configfile.settings['output_pin _alarm_pin'].maximum_mcu_duration : 0.0
printer.configfile.settings['gcode_macro _klicky_check_variables_version'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_klicky_check_variables_version func_params='"{rawparams|string}"'  {% endif %}
{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}
{% if version != 1 %}
{ action_raise_error("Please update your klicky variables, there are some functionality changes") }
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_klicky_check_variables_version {% endif %}
printer.configfile.settings['gcode_macro _klicky_check_variables_version'].description : G-Code macro
printer.configfile.settings['gcode_macro ercf_endlessspool_unload'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_ENDLESSSPOOL_UNLOAD func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_ENDLESSSPOOL_UNLOAD Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > ERCF_ENDLESSSPOOL_UNLOAD Skipped - an error condition is asserted < {% endif %}
{% else %}
_ERCF_ENDLESSSPOOL_UNLOAD_STOCK {rawparams}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_ENDLESSSPOOL_UNLOAD End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_ENDLESSSPOOL_UNLOAD {% endif %}
printer.configfile.settings['gcode_macro ercf_endlessspool_unload'].description : wrapper for ERCF.py fw proc to handle error conditions, verbosity
printer.configfile.settings['gcode_macro ercf_endlessspool_unload'].rename_existing : _ERCF_ENDLESSSPOOL_UNLOAD_STOCK
printer.configfile.settings['gcode_macro m300done'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M300done {% endif %}
SET_PIN PIN=_BEEPER_pin VALUE=0.0 cycle_time=0.024
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M300done {% endif %}
printer.configfile.settings['gcode_macro m300done'].description : G-Code macro
printer.configfile.settings['gcode_macro g1'].rename_existing : G1.1
printer.configfile.settings['gcode_macro g1'].description : G1, with console echo if enabled
printer.configfile.settings['gcode_macro g1'].gcode : 
{% if printer["gcode_macro _debug_vars"].gmove_debug %} M118 G1 {rawparams|upper} {% endif %}
G1.1 {rawparams}
printer.configfile.settings['gcode_macro _umbilical_path'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_Umbilical_Path func_params='"{rawparams|string}"'  {% endif %}
{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}
{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}
{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}
{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed * 60 %}
{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed * 60 %}
{% if umbilical %}
_entry_point function=Umbilical_Path
G0 X{umbilical_x} Y{umbilical_y} F{xytravel_feedrate}
G0 Z{safe_z} F{ztravel_feedrate}
_exit_point function=Umbilical_Path
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_Umbilical_Path {% endif %}
printer.configfile.settings['gcode_macro _umbilical_path'].description : G-Code macro
printer.configfile.settings['gcode_macro sng_classical'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_classical {% endif %}
M117 Classical
M3001 S659.255 P125
M3001 S622.254 P125
M3001 S659.255 P125
M3001 S622.254 P125
M3001 S659.255 P125
M3001 S493.883 P125
M3001 S587.33 P125
M3001 S523.251 P125
M3001 S440 P500
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_classical {% endif %}
printer.configfile.settings['gcode_macro sng_classical'].description : G-Code macro
printer.configfile.settings['gcode_macro _idleled_on'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_IdleLED_On func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _IdleLED_On <<< {% endif %}
SET_PIN PIN=_sw_grn_led VALUE=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_IdleLED_On {% endif %}
printer.configfile.settings['gcode_macro _idleled_on'].description : Illuminate the Halo Sw Green LED
printer.configfile.settings['gcode_macro _hourmeter_off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_HOURMETER_OFF func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _HOURMETER_OFF <<< {% endif %}
SET_PIN PIN=_hourmeter VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_HOURMETER_OFF {% endif %}
printer.configfile.settings['gcode_macro _hourmeter_off'].description : Turn Hour Meter Off
printer.configfile.settings['gcode_macro power_off_printer'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=power_off_printer func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> RUN_SHELL_COMMAND CMD=power_off_printer <<< {% endif %}
RUN_SHELL_COMMAND CMD=power_off_printer
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=power_off_printer {% endif %}
printer.configfile.settings['gcode_macro power_off_printer'].description : Power off the printer
printer.configfile.settings['gcode_macro _proc_end'].gcode : 
{% set svv = printer.save_variables.variables %}
{% set this1 = namespace(depth_indent = "`") %}
_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE={svv.proc_depth - 1|int}
{% if svv.proc_depth|int < 0 %}
_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow or params.FORCE|default(0)|int %}
{% for iter in range(svv.proc_depth - 1|int) %}
{% set this1.depth_indent = this1.depth_indent ~ "`" %}
{% endfor %}
{% if printer["gcode_macro _printer_vars"].show_proc_exit %}
{% if params.FUNCTION|string != "" and printer["gcode_macro _printer_vars"].show_proc_exit_details %}
M118 {this1.depth_indent ~ " [" ~ params.FUNCTION|lower ~ "] done"}
{% else %}
M118 {this1.depth_indent}
{% endif %}
{% endif %}
{% endif %}
printer.configfile.settings['gcode_macro _proc_end'].description : for trace debug purposes - presents depth as leading back-tics
printer.configfile.settings['delayed_gcode _linadv_module_start'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_linadv_module_start func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _linadv_vars"].linadv_verb_codeflow %}  M118 >>> _linadv_module_start Start <<< {% endif %}
SAVE_VARIABLE VARIABLE=module_linadv_loaded VALUE=1
SAVE_VARIABLE VARIABLE=linadv_err_flag VALUE=0
{% if printer["gcode_macro _linadv_vars"].linadv_verb_codeflow %}  M118 >>> _linadv_module_start End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_linadv_module_start {% endif %}
printer.configfile.settings['delayed_gcode _linadv_module_start'].initial_duration : 0.5
printer.configfile.settings['gcode_macro th_filsw_rel'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=TH_filsw_rel {% endif %}
M118 TH_filsw_rel
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=TH_filsw_rel {% endif %}
printer.configfile.settings['gcode_macro th_filsw_rel'].description : called when the th fil sw toggles open
printer.configfile.settings['gcode_macro dblts_full'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=DBLts_Full {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=dash_lights RED=1 GREEN=1 BLUE=1
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=DBLts_Full {% endif %}
printer.configfile.settings['gcode_macro dblts_full'].description : G-Code macro
printer.configfile.settings['gcode_macro _enable_gmove_debug'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_enable_gmove_debug func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _enable_gmove_debug <<<<< {% endif %}
SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=gmove_debug VALUE=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_enable_gmove_debug {% endif %}
printer.configfile.settings['gcode_macro _enable_gmove_debug'].description : used to enable gmove debug
printer.configfile.settings['gcode_macro _user_variables'].variable_ztravel_speed : 50
printer.configfile.settings['gcode_macro _user_variables'].variable_park_toolhead : False
printer.configfile.settings['gcode_macro _user_variables'].variable_z_drop_speed : 5
printer.configfile.settings['gcode_macro _user_variables'].variable_umbilical : False
printer.configfile.settings['gcode_macro _user_variables'].variable_docklocation_y : 350.0
printer.configfile.settings['gcode_macro _user_variables'].variable_docklocation_x : 319.0
printer.configfile.settings['gcode_macro _user_variables'].variable_docklocation_z : -128
printer.configfile.settings['gcode_macro _user_variables'].variable_safe_z : 15
printer.configfile.settings['gcode_macro _user_variables'].variable_zrelease_speed : 5
printer.configfile.settings['gcode_macro _user_variables'].variable_attachmove_z : 0
printer.configfile.settings['gcode_macro _user_variables'].variable_attachmove_y : 30
printer.configfile.settings['gcode_macro _user_variables'].variable_attachmove_x : 0
printer.configfile.settings['gcode_macro _user_variables'].variable_enable_z_hop : True
printer.configfile.settings['gcode_macro _user_variables'].description : G-Code macro
printer.configfile.settings['gcode_macro _user_variables'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_User_Variables func_params='"{rawparams|string}"'  {% endif %}
{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
{% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
{% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
{% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}
{% if home_z_height|default(0) != 0 %}
SET_GCODE_VARIABLE MACRO=_USER_Variables VARIABLE=safe_z VALUE={ home_z_height }
{% endif %}
{% if z_endstop_x != 0 or z_endstop_y != 0 %}
SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }
{% else %}
SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_User_Variables {% endif %}
printer.configfile.settings['gcode_macro _user_variables'].variable_xytravel_speed : 250
printer.configfile.settings['gcode_macro _user_variables'].variable_xyrelease_speed : 75
printer.configfile.settings['gcode_macro _user_variables'].variable_xydock_speed : 50
printer.configfile.settings['gcode_macro _user_variables'].variable_version : 1
printer.configfile.settings['gcode_macro _user_variables'].variable_umbilical_x : 15
printer.configfile.settings['gcode_macro _user_variables'].variable_umbilical_y : 15
printer.configfile.settings['gcode_macro _user_variables'].variable_parkposition_x : 175
printer.configfile.settings['gcode_macro _user_variables'].variable_parkposition_y : 350
printer.configfile.settings['gcode_macro _user_variables'].variable_parkposition_z : 15
printer.configfile.settings['gcode_macro _user_variables'].variable_z_endstop_x : 231.3
printer.configfile.settings['gcode_macro _user_variables'].variable_dockmove_z : 0
printer.configfile.settings['gcode_macro _user_variables'].variable_dockmove_y : 0
printer.configfile.settings['gcode_macro _user_variables'].variable_dockmove_x : -88
printer.configfile.settings['gcode_macro _user_variables'].variable_z_endstop_y : 349.0
printer.configfile.settings['gcode_macro _user_variables'].variable_verbose : False
printer.configfile.settings['gcode_macro _user_variables'].variable_max_bed_x : 350.0
printer.configfile.settings['gcode_macro _user_variables'].variable_max_bed_y : 350.0
printer.configfile.settings['gcode_macro _user_variables'].variable_zdock_speed : 5
printer.configfile.settings['delayed_gcode _klicky_module_start'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_klicky_module_start func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _klicky_module_start Start <<< {% endif %}
SAVE_VARIABLE VARIABLE=module_klicky_loaded VALUE=1
SAVE_VARIABLE VARIABLE=klicky_err_flag VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _klicky_module_start End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_klicky_module_start {% endif %}
printer.configfile.settings['delayed_gcode _klicky_module_start'].initial_duration : 0.5
printer.configfile.settings['gcode_macro m122'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M122 func_params='"{rawparams|string}"'  {% endif %}
M118
M118 >>>> M122 TMC Debug Start <<<<
M118
M118 >>> stepper_x <<<
M118
DUMP_TMC STEPPER=stepper_x
M118
M118 >>> stepper_y <<<
M118
DUMP_TMC STEPPER=stepper_y
M118
M118 >>> stepper_z <<<
M118
DUMP_TMC STEPPER=stepper_z
M118
M118 >>> stepper_z1 <<<
M118
DUMP_TMC STEPPER=stepper_z1
M118
M118 >>> stepper_z2 <<<
M118
DUMP_TMC STEPPER=stepper_z2
M118
M118 >>> stepper_z3 <<<
M118
DUMP_TMC STEPPER=stepper_z3
M118
M118 >>> extruder <<<
M118
DUMP_TMC STEPPER=extruder
M118
M118 >>> selector_stepper <<<
M118
DUMP_TMC STEPPER=selector_stepper
M118
M118 >>> gear_stepper <<<
M118
DUMP_TMC STEPPER=gear_stepper
M118
M118 >>>> M122 TMC Debug End <<<<
M118
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M122 {% endif %}
printer.configfile.settings['gcode_macro m122'].description : dumps tmc_stepper status stuffs
printer.configfile.settings['gcode_macro sng_reveille'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_reveille {% endif %}
M117 Reveille Bitch
M3001 P125 S392
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S659
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S659
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S523
M3001 P250 S659
M3001 P125 S523
M3001 P125 S392
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S659
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S659
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S392
M3001 P333 S523
M3001 P42 S0
M3001 P125 S659
M3001 P125 S659
M3001 P125 S659
M3001 P125 S659
M3001 P125 S659
M3001 P250 S784
M3001 P125 S659
M3001 P125 S523
M3001 P125 S659
M3001 P125 S523
M3001 P125 S659
M3001 P125 S523
M3001 P250 S659
M3001 P125 S523
M3001 P125 S659
M3001 P125 S659
M3001 P125 S659
M3001 P125 S659
M3001 P125 S659
M3001 P250 S784
M3001 P125 S659
M3001 P125 S523
M3001 P125 S659
M3001 P125 S523
M3001 P125 S392
M3001 P125 S392
M3001 P333 S523
M3001 P42 S0
M3001 P125 S392
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S659
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S659
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S523
M3001 P250 S659
M3001 P125 S523
M3001 P125 S392
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S659
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S659
M3001 P125 S523
M3001 P63 S659
M3001 P63 S523
M3001 P125 S392
M3001 P125 S392
M3001 P333 S523
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_reveille {% endif %}
printer.configfile.settings['gcode_macro sng_reveille'].description : G-Code macro
printer.configfile.settings['gcode_shell_command power_on_printer'].command : curl "http://10.0.0.25/cm?cmnd=Backlog%3BDelay%200%3BPower%20ON"
printer.configfile.settings['gcode_shell_command power_on_printer'].verbose : False
printer.configfile.settings['gcode_shell_command power_on_printer'].timeout : 2.0
printer.configfile.settings['gcode_macro m190'].rename_existing : M190.1
printer.configfile.settings['gcode_macro m190'].description : capture and set target heater_bed temp, waiting for temp attainment
printer.configfile.settings['gcode_macro m190'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M190 func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=heater_bed_temp_setting VALUE={params.S|int}
M190.1 {rawparams}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M190 {% endif %}
printer.configfile.settings['gcode_macro sng_taps'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_taps {% endif %}
M117 Taps
M3001 P643 S294
M3001 P214 S294
M3001 P2571 S392
M3001 P643 S294
M3001 P214 S392
M3001 P2571 S494
M3001 P643 S294
M3001 P214 S392
M3001 P857 S494
M3001 P643 S294
M3001 P214 S392
M3001 P857 S494
M3001 P643 S294
M3001 P214 S392
M3001 P2571 S494
M3001 P643 S392
M3001 P214 S494
M3001 P1714 S587
M3001 P1714 S494
M3001 P1714 S392
M3001 P4286 S294
M3001 P643 S294
M3001 P214 S294
M3001 P6000 S392
M3001 P643 S294
M3001 P214 S294
M3001 P2571 S392
M3001 P643 S294
M3001 P214 S392
M3001 P2571 S494
M3001 P643 S294
M3001 P214 S392
M3001 P857 S494
M3001 P643 S294
M3001 P214 S392
M3001 P857 S494
M3001 P643 S294
M3001 P214 S392
M3001 P2571 S494
M3001 P643 S392
M3001 P214 S494
M3001 P1714 S587
M3001 P1714 S494
M3001 P1714 S392
M3001 P4286 S294
M3001 P643 S294
M3001 P214 S294
M3001 P6000 S392
M3001 P643 S294
M3001 P214 S294
M3001 P857 S392
M3001 P643 S294
M3001 P214 S294
M3001 P857 S392
M3001 P643 S294
M3001 P214 S392
M3001 P857 S494
M3001 P643 S294
M3001 P214 S392
M3001 P857 S494
M3001 P643 S294
M3001 P214 S392
M3001 P857 S494
M3001 P643 S294
M3001 P214 S392
M3001 P857 S494
M3001 P643 S294
M3001 P214 S392
M3001 P2571 S494
M3001 P643 S392
M3001 P214 S494
M3001 P1714 S587
M3001 P1714 S494
M3001 P1714 S392
M3001 P4286 S294
M3001 P643 S294
M3001 P214 S294
M3001 P5991 S392
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_taps {% endif %}
printer.configfile.settings['gcode_macro sng_taps'].description : G-Code macro
printer.configfile.settings['gcode_macro _home_z'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_Home_Z func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"z_homing"'
{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> z_homing <<< {% endif %}
{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}
{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}
{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed * 60 %}
{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed * 60 %}
{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
_entry_point function=Home_Z
{% if not 'xy' in printer.toolhead.homed_axes %}
{ action_raise_error("Must Home X and Y Axis First!") }
{% else %}
{% if not 'z' in printer.toolhead.homed_axes %}
{% if verbose %} M118 Resetting Z position to zero {% endif %}
SET_KINEMATIC_POSITION Z=0
{% endif %}
G0 X{z_endstop_x} Y{z_endstop_y} F{xytravel_feedrate}
G28 Z0
G0 Z{safe_z} F{z_drop_feedrate}
{% endif %}
_exit_point function=Home_Z
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"z_homed"'
{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> z_homed <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_Home_Z {% endif %}
printer.configfile.settings['gcode_macro _home_z'].description : G-Code macro
printer.configfile.settings['gcode_macro save_conf'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=save_conf func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> save_conf <<< {% endif %}
SAVE_CONFIG
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=save_conf {% endif %}
printer.configfile.settings['gcode_macro save_conf'].description : Execute a Save Configuration
printer.configfile.settings['gcode_macro ercf_calibrate'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CALIBRATE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CALIBRATE Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %}
M118 Start the complete auto calibration...
M118 First home'g the ERCF
{% endif %}
ERCF_HOME
save_variable VARIABLE=ercf_err_flag VALUE=0
{% for chan in range(printer["gcode_macro _ERCF_VAR"].colorselector|length) if not svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %}
M118 ERCF_CALIBRATE_SINGLE TOOL={chan|int}
{% else %}
M118 __ Calibrating Tool {chan|int} __
{% endif %}
ERCF_CALIBRATE_SINGLE TOOL={chan|int}
{% endfor %}
_ERCF_UNSELECT_TOOL
M118 ERCF_Calibrate Error: {svv.ercf_err_flag}
{% if svv.ercf_err_flag == 0 %}
M118 End of auto-cal - Restart firmware now.
{% else %}
M118 End of auto-cal - Error Exists - resolve and rerun.
{% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=0
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CALIBRATE End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CALIBRATE {% endif %}
printer.configfile.settings['gcode_macro ercf_calibrate'].description : Complete calibration of all ERCF Tools
printer.configfile.settings['gcode_macro calibrate_z'].rename_existing : _CALIBRATE_Z_STOCK
printer.configfile.settings['gcode_macro calibrate_z'].variable_entryexit_z : 15
printer.configfile.settings['gcode_macro calibrate_z'].variable_entryexit_zfeedrate : 900
printer.configfile.settings['gcode_macro calibrate_z'].description : Automatically calibrates the nozzles offset to the print surface and, possibly/optionally dock/undock Klicky
printer.configfile.settings['gcode_macro calibrate_z'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=CALIBRATE_Z func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"z_calibrating"'
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 z_calibrating {% endif %}
{% set force = params.FORCE|default(0)|int %}
{% if printer.save_variables.variables.z_axis_cal and force == 0 %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 Z-AutoCalibration already completed, skipping... {% endif %}
{% else %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 Z-Cal'g {% endif %}
_ENSURE_QGL
M117 Z-Calibration
G0 Z{entryexit_z} F{entryexit_zfeedrate}
_CALIBRATE_Z_STOCK
G0 Z{entryexit_z} F{entryexit_zfeedrate}
M117
SAVE_VARIABLE VARIABLE=z_axis_cal VALUE=1
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"z_calibrated"'
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 z_calibrated {% endif %}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=CALIBRATE_Z {% endif %}
printer.configfile.settings['gcode_macro _clear_he_heating_indication'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_clear_HE_heating_indication func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _clear_HE_heating_indication Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF Heated {% endif %}
{% if printer.save_variables.variables.module_ledeff_loaded %}
; _set_ledeff_mode CHAIN=ercf_lights EFFECT=off
{% else %}
; ERCFLts_off
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _clear_HE_heating_indication End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_clear_HE_heating_indication {% endif %}
printer.configfile.settings['gcode_macro _clear_he_heating_indication'].description : deannunciate heating
printer.configfile.settings['gcode_macro ercf_calib_selector'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CALIB_SELECTOR func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CALIB_SELECTOR Start ... {% endif %}
_ERCF_SERVO_UP
{% set move_length=(20.0 + (params.TOOL|int + 1)*21.0 + ((params.TOOL|int + 1)/3)*5.0) %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Measuring the selector position for tool {params.TOOL} {% endif %}
ERCF_GET_SELECTOR_POS REF={move_length|int}
ERCF_MOTORS_OFF
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CALIB_SELECTOR End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CALIB_SELECTOR {% endif %}
printer.configfile.settings['gcode_macro ercf_calib_selector'].description : Calibration of the selector position for a defined Tool
printer.configfile.settings['temperature_sensor host'].min_temp : 10.0
printer.configfile.settings['temperature_sensor host'].sensor_type : temperature_host
printer.configfile.settings['temperature_sensor host'].sensor_path : /sys/class/thermal/thermal_zone0/temp
printer.configfile.settings['temperature_sensor host'].gcode_id : Host
printer.configfile.settings['temperature_sensor host'].max_temp : 100.0
printer.configfile.settings['gcode_macro chlts_normal'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ChLts_Normal {% endif %}
SET_LED LED=chamber_lights RED=0.5 GREEN=0.5 BLUE=0.5
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ChLts_Normal {% endif %}
printer.configfile.settings['gcode_macro chlts_normal'].description : G-Code macro
printer.configfile.settings['gcode_macro _ensure_qgl'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ENSURE_QGL func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _ENSURE_QGL <<< {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"checking_qgl"'
_ENSURE_HOMED
{% if not printer.quad_gantry_level.applied %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 QGL'g {% endif %}
QUAD_GANTRY_LEVEL
SAVE_VARIABLE VARIABLE=z_axis_cal VALUE=0
{% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"qgl_checked"'
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 qgl_checked {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ENSURE_QGL {% endif %}
printer.configfile.settings['gcode_macro _ensure_qgl'].description : QGL only if needed - no wasted cycles/power
printer.configfile.settings['bed_mesh hot_klicky'].tension : 0.2
printer.configfile.settings['bed_mesh hot_klicky'].min_x : 40.0
printer.configfile.settings['bed_mesh hot_klicky'].min_y : 40.0
printer.configfile.settings['bed_mesh hot_klicky'].y_count : 5
printer.configfile.settings['bed_mesh hot_klicky'].mesh_y_pps : 2
printer.configfile.settings['bed_mesh hot_klicky'].x_count : 5
printer.configfile.settings['bed_mesh hot_klicky'].points : ((0.115938, 0.114063, 0.075, 0.093594, 0.175313), (0.0975, 0.040938, -0.007344, 0.026875, 0.090625), (0.040313, 0.01375, 0.0, 0.019687, 0.044062), (0.09875, 0.049687, 0.012812, 0.045, 0.07875), (0.157812, 0.171719, 0.125, 0.133594, 0.200312))
printer.configfile.settings['bed_mesh hot_klicky'].algo : bicubic
printer.configfile.settings['bed_mesh hot_klicky'].mesh_x_pps : 2
printer.configfile.settings['bed_mesh hot_klicky'].version : 1
printer.configfile.settings['bed_mesh hot_klicky'].max_x : 330.0
printer.configfile.settings['bed_mesh hot_klicky'].max_y : 330.0
printer.configfile.settings['gcode_macro _disable_save_var_debug'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_disable_save_var_debug func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _disable_save_var_debug <<<<< {% endif %}
SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=save_var_debug VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_disable_save_var_debug {% endif %}
printer.configfile.settings['gcode_macro _disable_save_var_debug'].description : used to disable save_var debug
printer.configfile.settings['gcode_macro snd_printfail'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_PrintFail {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_PrintFail {% endif %}
printer.configfile.settings['gcode_macro snd_printfail'].description : G-Code macro
printer.configfile.settings.extruder.control : pid
printer.configfile.settings.extruder.pullup_resistor : 4700.0
printer.configfile.settings.extruder.max_extrude_only_velocity : 7200.0
printer.configfile.settings.extruder.rotation_distance : 34.2060721875
printer.configfile.settings.extruder.gear_ratio : ((7.5, 1.0),)
printer.configfile.settings.extruder.max_extrude_only_distance : 200.0
printer.configfile.settings.extruder.sensor_type : PT1000
printer.configfile.settings.extruder.min_temp : 0.0
printer.configfile.settings.extruder.enable_pin : !PD4
printer.configfile.settings.extruder.pressure_advance : 0.035
printer.configfile.settings.extruder.max_temp : 375.0
printer.configfile.settings.extruder.max_extrude_cross_section : 50.0
printer.configfile.settings.extruder.pwm_cycle_time : 0.1
printer.configfile.settings.extruder.dir_pin : PE3
printer.configfile.settings.extruder.pid_kp : 17.665
printer.configfile.settings.extruder.instantaneous_corner_velocity : 1.0
printer.configfile.settings.extruder.full_steps_per_rotation : 200
printer.configfile.settings.extruder.heater_pin : PA2
printer.configfile.settings.extruder.pid_kd : 88.107
printer.configfile.settings.extruder.pid_ki : 0.885
printer.configfile.settings.extruder.filament_diameter : 1.75
printer.configfile.settings.extruder.sensor_pin : PF4
printer.configfile.settings.extruder.nozzle_diameter : 0.4
printer.configfile.settings.extruder.pressure_advance_smooth_time : 0.04
printer.configfile.settings.extruder.step_pin : PE2
printer.configfile.settings.extruder.max_power : 1.0
printer.configfile.settings.extruder.microsteps : 16
printer.configfile.settings.extruder.min_extrude_temp : 170.0
printer.configfile.settings.extruder.max_extrude_only_accel : 800.0
printer.configfile.settings.extruder.smooth_time : 1.0
printer.configfile.settings.board_pins.mcu : ('mcu',)
printer.configfile.settings.board_pins.aliases : (('EXP1_1', 'PE8'), ('EXP1_2', 'PE7'), ('EXP1_3', 'PE9'), ('EXP1_4', 'PE10'), ('EXP1_5', 'PE12'), ('EXP1_6', 'PE13'), ('EXP1_7', 'PE14'), ('EXP1_8', 'PE15'), ('EXP1_9', '<GND>'), ('EXP1_10', '<5V>'), ('EXP2_1', 'PA6'), ('EXP2_2', 'PA5'), ('EXP2_3', 'PB1'), ('EXP2_4', 'PA4'), ('EXP2_5', 'PB2'), ('EXP2_6', 'PA7'), ('EXP2_7', 'PC15'), ('EXP2_8', '<RST>'), ('EXP2_9', '<GND>'), ('EXP2_10', '<5V>'))
printer.configfile.settings['output_pin _host_connect_led'].pin : pico:gpio25
printer.configfile.settings['output_pin _host_connect_led'].shutdown_value : 0.0
printer.configfile.settings['output_pin _host_connect_led'].pwm : False
printer.configfile.settings['output_pin _host_connect_led'].maximum_mcu_duration : 0.0
printer.configfile.settings['output_pin _host_connect_led'].value : 1.0
printer.configfile.settings['temperature_sensor hotend_h2o'].pullup_resistor : 4700.0
printer.configfile.settings['temperature_sensor hotend_h2o'].sensor_pin : pico:gpio26
printer.configfile.settings['temperature_sensor hotend_h2o'].sensor_type : H2O
printer.configfile.settings['temperature_sensor hotend_h2o'].inline_resistor : 0.0
printer.configfile.settings['temperature_sensor hotend_h2o'].min_temp : 10.0
printer.configfile.settings['temperature_sensor hotend_h2o'].gcode_id : H2O
printer.configfile.settings['temperature_sensor hotend_h2o'].max_temp : 120.0
printer.configfile.settings['gcode_macro ercf_calib_unload'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CALIB_UNLOAD func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CALIB_UNLOAD Start ... {% endif %}
{% set unload_length = params.LENGTH|default(0.0)|float %}
{% if unload_length|float == 0.0 %}
ERCF_UNLOAD LENGTH={(ref|float)*(ratio|float) - printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + 27.0}
{% else %}
{% if ratio|float < 1.0 %}
ERCF_UNLOAD LENGTH={(unload_length|float)}
{% else %}
ERCF_UNLOAD LENGTH={(unload_length|float)*(ratio|float)}
{% endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CALIB_UNLOAD End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CALIB_UNLOAD {% endif %}
printer.configfile.settings['gcode_macro ercf_calib_unload'].variable_ratio : 0.0
printer.configfile.settings['gcode_macro ercf_calib_unload'].variable_ref : 0.0
printer.configfile.settings['gcode_macro ercf_calib_unload'].description : Filament unload during ERCF calibration
printer.configfile.settings['gcode_macro _set_he_heating_indication'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_set_HE_heating_indication func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _set_HE_heating_indication Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF Heating {% endif %}
{% if printer.save_variables.variables.module_ledeff_loaded %}
; _set_ledeff_mode CHAIN=ercf_lights EFFECT=he_temp
{% else %}
; ERCFLts_red
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _set_HE_heating_indication End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_set_HE_heating_indication {% endif %}
printer.configfile.settings['gcode_macro _set_he_heating_indication'].description : annunciate heating taking place
printer.configfile.settings['gcode_macro dblts_orange'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=DBLts_Orange {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=dash_lights RED=0.3 GREEN=0.1 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=DBLts_Orange {% endif %}
printer.configfile.settings['gcode_macro dblts_orange'].description : G-Code macro
printer.configfile.settings['delayed_gcode delayed_printer_off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=delayed_printer_off func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> delayed_printer_off <<< {% endif %}
{% if printer.idle_timeout.state == "Idle" %}
RUN_SHELL_COMMAND CMD=backup_configs
RUN_SHELL_COMMAND CMD=power_off_printer
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=delayed_printer_off {% endif %}
printer.configfile.settings['delayed_gcode delayed_printer_off'].initial_duration : 0.0
printer.configfile.settings['gcode_macro _ercf_restore_he_temp'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_restore_he_temp func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ercf_restore_he_temp Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_he_temp_restore_val %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> _ercf_restore_he_temp: {svv.ercf_he_temp_restore_val} <<< {% endif %}
_ercf_wait_he_temp TEMP={svv.ercf_he_temp_restore_val}
save_variable variable=ercf_he_temp_restore_val value=0
{% else %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ercf_restore_he_temp End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ercf_restore_he_temp {% endif %}
printer.configfile.settings['gcode_macro _ercf_restore_he_temp'].description : restore extruder temp after a load/unload raise to eject temp
printer.configfile.settings['gcode_macro ercf_unload_tool'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_UNLOAD_TOOL func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_UNLOAD_TOOL Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
_ercf_set_eject_temp
{% endif %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
{% if printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int != -1 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF_UNLOAD_TOOL {printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int} ... {% endif %}
{% set ercf_params = printer.save_variables.variables %}
ERCF_HOME_EXTRUDER
; ERCF_SELECT_TOOL TOOL={printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int}
ERCF_SELECT_TOOL_dbg TOOL={printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int}
ERCF_SET_STEPS RATIO={ercf_params['ercf_calib_%s' % (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|string)]}
_ercf_syncd_th_load_unload RETRACT=1 MODIFIER={printer["gcode_macro _ERCF_VAR"].ercf_dual_unload_mod|float}
ERCF_UNLOAD LENGTH={ercf_params.ercf_calib_ref|float - printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + printer["gcode_macro _ERCF_VAR"].unload_modifier|float - (printer["gcode_macro _ERCF_VAR"].ercf_dual_unload_mod|float)}
_ERCF_UNSELECT_TOOL
{% endif %}
{% else %}
_alert_ercf_is_paused
{% endif %}
_ercf_restore_he_temp
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_UNLOAD_TOOL End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_UNLOAD_TOOL {% endif %}
printer.configfile.settings['gcode_macro ercf_unload_tool'].description : Eject the filament DURING A PRINT and park it into the ERCF
printer.configfile.settings['gcode_macro snd_printstart'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_PrintStart {% endif %}
sng_mario
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_PrintStart {% endif %}
printer.configfile.settings['gcode_macro snd_printstart'].description : G-Code macro
printer.configfile.settings['gcode_macro _ercf_var'].variable_min_temp_extruder : 180
printer.configfile.settings['gcode_macro _ercf_var'].variable_timeout_pause : 72000
printer.configfile.settings['gcode_macro _ercf_var'].variable_ercf_verb_status : 0
printer.configfile.settings['gcode_macro _ercf_var'].variable_endless_spool_mode : 0
printer.configfile.settings['gcode_macro _ercf_var'].variable_ercf_verb_codeflow : 0
printer.configfile.settings['gcode_macro _ercf_var'].variable_ercf_gear_move_dwell : 100
printer.configfile.settings['gcode_macro _ercf_var'].variable_servo_up_angle : 30
printer.configfile.settings['gcode_macro _ercf_var'].variable_ercf_verb_error : 1
printer.configfile.settings['gcode_macro _ercf_var'].variable_ercf_extruder_move_dwell : 100
printer.configfile.settings['gcode_macro _ercf_var'].variable_ercf_verb_motors : 0
printer.configfile.settings['gcode_macro _ercf_var'].variable_servo_down_angle : 80
printer.configfile.settings['gcode_macro _ercf_var'].variable_sensor_to_nozzle : 41.5
printer.configfile.settings['gcode_macro _ercf_var'].variable_test_ercf_load_seq_at_print : 0
printer.configfile.settings['gcode_macro _ercf_var'].variable_ercf_cart_unload_length : 68
printer.configfile.settings['gcode_macro _ercf_var'].variable_sync_accel : 0
printer.configfile.settings['gcode_macro _ercf_var'].variable_ercf_cart_load_length : 45
printer.configfile.settings['gcode_macro _ercf_var'].variable_end_of_bowden_to_sensor : 47
printer.configfile.settings['gcode_macro _ercf_var'].variable_ercf_verb_debug : 0
printer.configfile.settings['gcode_macro _ercf_var'].variable_ercf_load_unload_dwell : 50
printer.configfile.settings['gcode_macro _ercf_var'].variable_ercf_test_load_seq_len : 100
printer.configfile.settings['gcode_macro _ercf_var'].description : G-Code macro
printer.configfile.settings['gcode_macro _ercf_var'].variable_ercf_servo_move_dwell : 200
printer.configfile.settings['gcode_macro _ercf_var'].variable_test_ercf_load_seq_at_boot : 0
printer.configfile.settings['gcode_macro _ercf_var'].gcode : 
printer.configfile.settings['gcode_macro _ercf_var'].variable_ercf_verb_loadunload : 0
printer.configfile.settings['gcode_macro _ercf_var'].variable_home_ercf_at_boot : 0
printer.configfile.settings['gcode_macro _ercf_var'].variable_colorselector : [2.0,23.0,44.15,   70.5, 91.5, 112.0,   138.6, 159.5, 180.0,    206.5, 227.5, 248.5]
printer.configfile.settings['gcode_macro _ercf_var'].variable_min_bowden_length : 945.0
printer.configfile.settings['gcode_macro _ercf_var'].variable_disable_heater : 600
printer.configfile.settings['gcode_macro _ercf_var'].variable_ercf_verb_info : 0
printer.configfile.settings['gcode_macro _ercf_var'].variable_clog_detection : 0
printer.configfile.settings['gcode_macro _ercf_var'].variable_extruder_eject_temp : 240
printer.configfile.settings['gcode_macro _ercf_var'].variable_sync_feedrate : 1500
printer.configfile.settings['gcode_macro _ercf_var'].variable_ercf_dual_unload_mod : 20
printer.configfile.settings['gcode_macro _ercf_var'].variable_ercf_th_load_len_mod : 0
printer.configfile.settings['gcode_macro _ercf_var'].variable_ercf_cart_move_dwell : 100
printer.configfile.settings['gcode_macro _ercf_var'].variable_unload_modifier : 9.0
printer.configfile.settings['gcode_macro _ercf_var'].variable_ercf_eject_unknow_state_len_mod : 50
printer.configfile.settings['gcode_macro _ercf_var'].variable_sync_speed : 25
printer.configfile.settings['gcode_macro ercf_change_tool'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CHANGE_TOOL func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CHANGE_TOOL Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% set th = printer.toolhead %}
{% if printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int == params.TOOL|int and
printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
{% else %}
{% if printer.idle_timeout.state == "Printing" and svv.has_wipe_tower == 0 %}
{% set z_entry = th.position.z|float %}
save_gcode_state NAME=ercf_change_tool_entry
{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
; {% set z_safe = [(th.position.z|float + 1), th.axis_maximum.z|float]|min %}
{% set z_safe = [svv.maxz|float+1, th.axis_maximum.z]|min %}
_reset_extruder
go_relative
{% if printer.extruder.temperature|int >= retract_temp_min|int %}
G1 E-0.4 F3600
{% else %}
M118 No pre-swap retract due to Low Temp...
{% endif %}
go_absolute
G0 X{x_safe} Y{y_safe} Z{z_safe} F15000
M400
go_relative
G0 Z15 F3000
go_absolute
G0 X{range(6,70)|random} Y350 F15000
{% endif %}
_ercf_set_eject_temp
{% if printer.idle_timeout.state == "Printing" and svv.has_wipe_tower != 0 %}
ERCF_CHANGE_TOOL_SLICER TOOL={params.TOOL|int}
{% else %}
ERCF_CHANGE_TOOL_STANDALONE TOOL={params.TOOL|int}
{% endif %}
_ercf_restore_he_temp
{% if printer.idle_timeout.state == "Printing" and svv.has_wipe_tower == 0 %}
_print_purge
G0 Z{z_entry} F3000
restore_gcode_state NAME=ercf_change_tool_entry MOVE=1 MOVE_SPEED=300
{% endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CHANGE_TOOL End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CHANGE_TOOL {% endif %}
printer.configfile.settings['gcode_macro ercf_change_tool'].description : Perform a tool swap, either in or out of a print
printer.configfile.settings['gcode_macro ercf_change_tool'].variable_retract_temp_min : 180
printer.configfile.settings['output_pin _sw_grn_led'].shutdown_value : 0.0
printer.configfile.settings['output_pin _sw_grn_led'].pwm : False
printer.configfile.settings['output_pin _sw_grn_led'].pin : pico:gpio12
printer.configfile.settings['output_pin _sw_grn_led'].value : 0.0
printer.configfile.settings['output_pin _sw_grn_led'].maximum_mcu_duration : 0.0
printer.configfile.settings['gcode_macro _printled_off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_PrintLED_Off func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _PrintLED_Off <<< {% endif %}
SET_PIN PIN=_sw_red_led VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_PrintLED_Off {% endif %}
printer.configfile.settings['gcode_macro _printled_off'].description : Extinguish the Halo Sw Red LED
printer.configfile.settings['gcode_macro set_servo'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=SET_SERVO func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> SET_SERVO Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag and params.WIDTH|default(1)|int %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > SET_SERVO Skipped - an error condition is asserted < {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 >>> SET_SERVO {rawparams} <<< {% endif %}
_SET_SERVO_STOCK {rawparams}
{% if params.ANGLE|default("")|string != "" or params.WIDTH|default("0.0")|string != "0.0" %}
_servo_move_dwell
{% endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... SET_SERVO End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=SET_SERVO {% endif %}
printer.configfile.settings['gcode_macro set_servo'].description : wrapper for FW proc to handle error conditions, verbosity, and conditionally dwell
printer.configfile.settings['gcode_macro set_servo'].rename_existing : _SET_SERVO_STOCK
printer.configfile.settings['tmc2209 manual_stepper selector_stepper'].driver_pwm_ofs : 36
printer.configfile.settings['tmc2209 manual_stepper selector_stepper'].driver_hstrt : 5
printer.configfile.settings['tmc2209 manual_stepper selector_stepper'].driver_toff : 3
printer.configfile.settings['tmc2209 manual_stepper selector_stepper'].sense_resistor : 0.11
printer.configfile.settings['tmc2209 manual_stepper selector_stepper'].uart_address : 1
printer.configfile.settings['tmc2209 manual_stepper selector_stepper'].driver_hend : 0
printer.configfile.settings['tmc2209 manual_stepper selector_stepper'].driver_pwm_reg : 8
printer.configfile.settings['tmc2209 manual_stepper selector_stepper'].driver_iholddelay : 8
printer.configfile.settings['tmc2209 manual_stepper selector_stepper'].interpolate : False
printer.configfile.settings['tmc2209 manual_stepper selector_stepper'].stealthchop_threshold : 0.0
printer.configfile.settings['tmc2209 manual_stepper selector_stepper'].hold_current : 0.1
printer.configfile.settings['tmc2209 manual_stepper selector_stepper'].driver_tbl : 2
printer.configfile.settings['tmc2209 manual_stepper selector_stepper'].driver_pwm_autograd : True
printer.configfile.settings['tmc2209 manual_stepper selector_stepper'].driver_pwm_grad : 14
printer.configfile.settings['tmc2209 manual_stepper selector_stepper'].run_current : 0.6
printer.configfile.settings['tmc2209 manual_stepper selector_stepper'].driver_sgthrs : 0
printer.configfile.settings['tmc2209 manual_stepper selector_stepper'].uart_pin : ercf:PA8
printer.configfile.settings['tmc2209 manual_stepper selector_stepper'].driver_pwm_autoscale : True
printer.configfile.settings['tmc2209 manual_stepper selector_stepper'].driver_tpowerdown : 20
printer.configfile.settings['tmc2209 manual_stepper selector_stepper'].driver_pwm_lim : 12
printer.configfile.settings['tmc2209 manual_stepper selector_stepper'].driver_pwm_freq : 1
printer.configfile.settings['gcode_macro _pwrled_off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_PwrLED_Off func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _PwrLED_Off <<< {% endif %}
SET_PIN PIN=_sw_blu_led VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_PwrLED_Off {% endif %}
printer.configfile.settings['gcode_macro _pwrled_off'].description : Extinguish the Halo Sw Blue LED
printer.configfile.settings.idle_timeout.gcode : 
M84
TURN_OFF_HEATERS
UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=60
printer.configfile.settings.idle_timeout.timeout : 18000.0
printer.configfile.settings['gcode_macro _ensure_homed'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ENSURE_HOMED func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> ENSURING HOMED <<< {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"checking_home"'
{% if "z" not in printer.toolhead.homed_axes %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 Homing {% endif %}
G28
SAVE_VARIABLE VARIABLE=z_axis_cal VALUE=0
{% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"home_checked"'
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> ENSURED HOMED <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ENSURE_HOMED {% endif %}
printer.configfile.settings['gcode_macro _ensure_homed'].description : Home only if needed - no wasted cycles/power
printer.configfile.settings['delayed_gcode clear_display'].gcode : 
M117
printer.configfile.settings['delayed_gcode clear_display'].initial_duration : 0.0
printer.configfile.settings['gcode_macro dump_parameter'].gcode : 
{% set config = True if params.C or params.S else False %}
{% set path = 'config'   if params.C
else 'settings' if params.S %}
{% set search = params.C if params.C
else params.S if params.S
else params.P if params.P %}
{% set out = [] %}
{% for name1 in printer|sort %}
{% if config %} ; print the searched printer.configfile[path] parameter
{% if name1 is in ['configfile'] %}
{% for name2 in printer[name1][path]|sort %}
{% if name2 is in [search] %}
{% for name3, value in printer[name1][path][name2].items()|sort %}
{% set _dummy = out.append("printer.configfile.%s['%s'].%s = %s" %
(path, name2, name3, value)) %}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% else %}
{% for name2, value in printer[name1].items()|sort %} ; search for anything expext printer.configfile
{% if search is not defined and name1 is not in ['configfile'] %} ; print all printer. parameter
{% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
{% elif search is defined and name1 is in [search] %} ; print the searched printer. parameter
{% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
{% if out|length > 0 %}
{action_respond_info(out|join("\n"))}
{% else %}
{action_respond_info("Nothing found for \"DUMP_PARAMETER %s\"" % rawparams)}
{% endif %}
printer.configfile.settings['gcode_macro dump_parameter'].description : Debug: Print entries of the printer object
printer.configfile.settings['gcode_macro testmacro'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=testmacro func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> testmacro <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_info %} M118 sonoff_ipaddr:{ printer.save_variables.variables.sonoff_ipaddr } {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=testmacro {% endif %}
printer.configfile.settings['gcode_macro testmacro'].description : testing jinja2 operations & :expressions
printer.configfile.settings['gcode_macro m900'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M900 func_params='"{rawparams|string}"'  {% endif %}
{% if 'K' in params %}
{% if printer["gcode_macro _linadv_vars"].linadv_verb_info %}
M118 M900 - {'PA:' + params.K|float|string + ' ST:' + printer.extruder.smooth_time|float|string}
{% endif %}
SET_PRESSURE_ADVANCE ADVANCE={params.K|float}
{% else %}
{% if printer["gcode_macro _linadv_vars"].linadv_verb_error %}
M118 >>> M900: No PA K-factor passed... <<<
{% endif %}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M900 {% endif %}
printer.configfile.settings['gcode_macro m900'].description : Set Pressure Advance - Param K=K-Factor|float, other params are ignored
printer.configfile.settings['gcode_macro lcdlts_off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=LcdLts_Off {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=lcd_lights RED=0 GREEN=0 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=LcdLts_Off {% endif %}
printer.configfile.settings['gcode_macro lcdlts_off'].description : G-Code macro
printer.configfile.settings['gcode_macro _bounds_vars'].variable_h2o_flow_rpm_max : 1500
printer.configfile.settings['gcode_macro _bounds_vars'].variable_h2o_radfan_rpm_min : 1000
printer.configfile.settings['gcode_macro _bounds_vars'].description : vars for bounds checking
printer.configfile.settings['gcode_macro _bounds_vars'].variable_h2o_temp_max : 100
printer.configfile.settings['gcode_macro _bounds_vars'].variable_bounds_alarm_recurse_period : 1800
printer.configfile.settings['gcode_macro _bounds_vars'].gcode : 
printer.configfile.settings['gcode_macro _bounds_vars'].variable_h2o_pump_rpm_min : 1500
printer.configfile.settings['gcode_macro _bounds_vars'].variable_h2o_flow_rpm_min : 375
printer.configfile.settings['gcode_macro _bounds_vars'].variable_h2o_pump_rpm_max : 4500
printer.configfile.settings['gcode_macro _bounds_vars'].variable_bounds_check_period : 60
printer.configfile.settings['gcode_macro _bounds_vars'].variable_h2o_temp_min : 10
printer.configfile.settings['gcode_macro _bounds_vars'].variable_bounds_alarm_duration : 1000
printer.configfile.settings['gcode_macro _bounds_vars'].variable_h2o_radfan_rpm_max : 3000
printer.configfile.settings['gcode_macro power_on_printer'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=power_on_printer func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> RUN_SHELL_COMMAND CMD=power_on_printer <<< {% endif %}
RUN_SHELL_COMMAND CMD=power_on_printer
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> RUN_SHELL_COMMAND CMD=restore_configs <<< {% endif %}
RUN_SHELL_COMMAND CMD=restore_configs
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=power_on_printer {% endif %}
printer.configfile.settings['gcode_macro power_on_printer'].description : Power on the printer
printer.configfile.settings['gcode_macro snd_meshend'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_MeshEnd {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_MeshEnd {% endif %}
printer.configfile.settings['gcode_macro snd_meshend'].description : G-Code macro
printer.configfile.settings['gcode_macro ercf_buzz_gear_motor'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_BUZZ_GEAR_MOTOR func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_BUZZ_GEAR_MOTOR Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > ERCF_BUZZ_GEAR_MOTOR Skipped - an error condition is asserted < {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 > ERCF_BUZZ_GEAR_MOTOR {rawparams} < {% endif %}
_ERCF_BUZZ_GEAR_MOTOR_STOCK {rawparams}
_gear_move_dwell
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_BUZZ_GEAR_MOTOR End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_BUZZ_GEAR_MOTOR {% endif %}
printer.configfile.settings['gcode_macro ercf_buzz_gear_motor'].description : wrapper for ERCF.py fw proc to handle error conditions, verbosity, and adds a dwell
printer.configfile.settings['gcode_macro ercf_buzz_gear_motor'].rename_existing : _ERCF_BUZZ_GEAR_MOTOR_STOCK
printer.configfile.settings['bed_mesh 110_soaked_klicky'].tension : 0.2
printer.configfile.settings['bed_mesh 110_soaked_klicky'].min_x : 40.0
printer.configfile.settings['bed_mesh 110_soaked_klicky'].min_y : 40.0
printer.configfile.settings['bed_mesh 110_soaked_klicky'].y_count : 5
printer.configfile.settings['bed_mesh 110_soaked_klicky'].mesh_y_pps : 2
printer.configfile.settings['bed_mesh 110_soaked_klicky'].x_count : 5
printer.configfile.settings['bed_mesh 110_soaked_klicky'].version : 1
printer.configfile.settings['bed_mesh 110_soaked_klicky'].algo : bicubic
printer.configfile.settings['bed_mesh 110_soaked_klicky'].mesh_x_pps : 2
printer.configfile.settings['bed_mesh 110_soaked_klicky'].max_y : 330.0
printer.configfile.settings['bed_mesh 110_soaked_klicky'].max_x : 330.0
printer.configfile.settings['bed_mesh 110_soaked_klicky'].points : ((0.05, 0.05, 0.0825, 0.08, 0.1175), (-0.0325, 0.03, 0.015, 0.0175, 0.075), (-0.0075, -0.0075, 0.0, 0.035, 0.06), (0.01, 0.04, 0.05, 0.045, 0.07), (0.0525, 0.0925, 0.0775, 0.0525, 0.08))
printer.configfile.settings['dotstar chamber_lights'].initial_white : 0.0
printer.configfile.settings['dotstar chamber_lights'].data_pin : pico:gpio11
printer.configfile.settings['dotstar chamber_lights'].chain_count : 231
printer.configfile.settings['dotstar chamber_lights'].initial_red : 0.0
printer.configfile.settings['dotstar chamber_lights'].initial_green : 0.0
printer.configfile.settings['dotstar chamber_lights'].clock_pin : pico:gpio10
printer.configfile.settings['dotstar chamber_lights'].initial_blue : 0.0
printer.configfile.settings['tmc2209 stepper_z1'].driver_tbl : 2
printer.configfile.settings['tmc2209 stepper_z1'].driver_pwm_ofs : 36
printer.configfile.settings['tmc2209 stepper_z1'].driver_hstrt : 5
printer.configfile.settings['tmc2209 stepper_z1'].driver_toff : 3
printer.configfile.settings['tmc2209 stepper_z1'].sense_resistor : 0.11
printer.configfile.settings['tmc2209 stepper_z1'].uart_address : 0
printer.configfile.settings['tmc2209 stepper_z1'].driver_pwm_reg : 8
printer.configfile.settings['tmc2209 stepper_z1'].driver_iholddelay : 8
printer.configfile.settings['tmc2209 stepper_z1'].interpolate : False
printer.configfile.settings['tmc2209 stepper_z1'].uart_pin : PC7
printer.configfile.settings['tmc2209 stepper_z1'].driver_pwm_freq : 1
printer.configfile.settings['tmc2209 stepper_z1'].driver_pwm_autoscale : True
printer.configfile.settings['tmc2209 stepper_z1'].driver_pwm_autograd : True
printer.configfile.settings['tmc2209 stepper_z1'].driver_pwm_grad : 14
printer.configfile.settings['tmc2209 stepper_z1'].run_current : 1.2
printer.configfile.settings['tmc2209 stepper_z1'].driver_hend : 0
printer.configfile.settings['tmc2209 stepper_z1'].stealthchop_threshold : 1.0
printer.configfile.settings['tmc2209 stepper_z1'].hold_current : 0.8
printer.configfile.settings['tmc2209 stepper_z1'].driver_tpowerdown : 20
printer.configfile.settings['tmc2209 stepper_z1'].driver_pwm_lim : 12
printer.configfile.settings['tmc2209 stepper_z1'].driver_sgthrs : 0
printer.configfile.settings['tmc2209 stepper_z3'].driver_pwm_ofs : 36
printer.configfile.settings['tmc2209 stepper_z3'].driver_hstrt : 5
printer.configfile.settings['tmc2209 stepper_z3'].driver_toff : 3
printer.configfile.settings['tmc2209 stepper_z3'].sense_resistor : 0.11
printer.configfile.settings['tmc2209 stepper_z3'].driver_hend : 0
printer.configfile.settings['tmc2209 stepper_z3'].driver_pwm_reg : 8
printer.configfile.settings['tmc2209 stepper_z3'].driver_iholddelay : 8
printer.configfile.settings['tmc2209 stepper_z3'].interpolate : False
printer.configfile.settings['tmc2209 stepper_z3'].stealthchop_threshold : 1.0
printer.configfile.settings['tmc2209 stepper_z3'].hold_current : 0.8
printer.configfile.settings['tmc2209 stepper_z3'].driver_tbl : 2
printer.configfile.settings['tmc2209 stepper_z3'].driver_pwm_autograd : True
printer.configfile.settings['tmc2209 stepper_z3'].driver_pwm_grad : 14
printer.configfile.settings['tmc2209 stepper_z3'].run_current : 1.2
printer.configfile.settings['tmc2209 stepper_z3'].uart_address : 0
printer.configfile.settings['tmc2209 stepper_z3'].uart_pin : PE4
printer.configfile.settings['tmc2209 stepper_z3'].driver_pwm_autoscale : True
printer.configfile.settings['tmc2209 stepper_z3'].driver_tpowerdown : 20
printer.configfile.settings['tmc2209 stepper_z3'].driver_pwm_freq : 1
printer.configfile.settings['tmc2209 stepper_z3'].driver_pwm_lim : 12
printer.configfile.settings['tmc2209 stepper_z3'].driver_sgthrs : 0
printer.configfile.settings['tmc2209 stepper_z2'].driver_pwm_ofs : 36
printer.configfile.settings['tmc2209 stepper_z2'].driver_hstrt : 5
printer.configfile.settings['tmc2209 stepper_z2'].driver_toff : 3
printer.configfile.settings['tmc2209 stepper_z2'].sense_resistor : 0.11
printer.configfile.settings['tmc2209 stepper_z2'].uart_address : 0
printer.configfile.settings['tmc2209 stepper_z2'].driver_pwm_reg : 8
printer.configfile.settings['tmc2209 stepper_z2'].driver_iholddelay : 8
printer.configfile.settings['tmc2209 stepper_z2'].interpolate : False
printer.configfile.settings['tmc2209 stepper_z2'].stealthchop_threshold : 1.0
printer.configfile.settings['tmc2209 stepper_z2'].hold_current : 0.8
printer.configfile.settings['tmc2209 stepper_z2'].driver_tbl : 2
printer.configfile.settings['tmc2209 stepper_z2'].driver_pwm_autograd : True
printer.configfile.settings['tmc2209 stepper_z2'].driver_pwm_grad : 14
printer.configfile.settings['tmc2209 stepper_z2'].run_current : 1.2
printer.configfile.settings['tmc2209 stepper_z2'].driver_hend : 0
printer.configfile.settings['tmc2209 stepper_z2'].uart_pin : PF2
printer.configfile.settings['tmc2209 stepper_z2'].driver_pwm_autoscale : True
printer.configfile.settings['tmc2209 stepper_z2'].driver_tpowerdown : 20
printer.configfile.settings['tmc2209 stepper_z2'].driver_pwm_freq : 1
printer.configfile.settings['tmc2209 stepper_z2'].driver_pwm_lim : 12
printer.configfile.settings['tmc2209 stepper_z2'].driver_sgthrs : 0
printer.configfile.settings['gcode_macro dblts_blue'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=DBLts_Blue {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=dash_lights RED=0 GREEN=0 BLUE=0.5
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=DBLts_Blue {% endif %}
printer.configfile.settings['gcode_macro dblts_blue'].description : G-Code macro
printer.configfile.settings['gcode_macro ercf_clog_or_runout'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CLOG_OR_RUNOUT func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CLOG_OR_RUNOUT Start ... {% endif %}
{% if printer.ercf.encoder_pos|float != 0 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Clog detected, please check the ERCF and the printer {% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=1
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Runout detected... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].endless_spool_mode|int == 1 %}
{% if printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int >= (printer["gcode_macro _ERCF_VAR"].colorselector|length -1) %}
{% set nexttool = 0 %}
{% else %}
{% set nexttool = (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int + 1) %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Loading tool {nexttool|int} {% endif %}
SAVE_GCODE_STATE NAME=ERCF_Pre_Brush_init
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Forming filament tip and Unloading Filament... {% endif %}
go_relative
ERCF_FORM_TIP_STANDALONE
ERCF_HOME_EXTRUDER TOTAL_LENGTH={printer["gcode_macro _ERCF_VAR"].sensor_to_nozzle} STEP_LENGTH=2.0
_ERCF_SERVO_DOWN
_ercf_syncd_th_load_unload RETRACT=1
{% set ercf_params = printer.save_variables.variables %}
ERCF_SET_STEPS RATIO={ercf_params['ercf_calib_%s' % (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|string)]}
ERCF_UNLOAD LENGTH={ercf_params.ercf_calib_ref|float - printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + printer["gcode_macro _ERCF_VAR"].unload_modifier|float}
_ERCF_UNSELECT_TOOL
ERCF_LOAD_TOOL TOOL={nexttool|int}
ERCF_CHECK_IF_RESUME
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 EndlessSpool mode not enabled, please do something {% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=1
{% endif %}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CLOG_OR_RUNOUT End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CLOG_OR_RUNOUT {% endif %}
printer.configfile.settings['gcode_macro ercf_clog_or_runout'].description : Actions taken if a clog or a runout is detected by the ERCF encoder
printer.configfile.settings['gcode_macro _ercf_set_eject_temp'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_set_eject_temp func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ercf_set_eject_temp Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if printer.extruder.temperature < printer["gcode_macro _ERCF_VAR"].extruder_eject_temp %}
{% if svv.ercf_he_temp_restore_val %}
{% else %}
save_variable variable=ercf_he_temp_restore_val value={svv.extruder_temp_setting}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_CHANGE_TOOL HE Temp raise to eject temp <<< {% endif %}
_ercf_wait_he_temp TEMP={printer["gcode_macro _ERCF_VAR"].extruder_eject_temp}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ercf_set_eject_temp End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ercf_set_eject_temp {% endif %}
printer.configfile.settings['gcode_macro _ercf_set_eject_temp'].description : set extruder to eject temp before load/unload
printer.configfile.settings['gcode_macro g0'].gcode : 
{% if printer["gcode_macro _debug_vars"].gmove_debug %} M118 G0 {rawparams|upper} {% endif %}
G0.1 {rawparams}
printer.configfile.settings['gcode_macro g0'].description : G0, with console echo if enabled
printer.configfile.settings['gcode_macro g0'].rename_existing : G0.1
printer.configfile.settings['verify_heater heater_bed'].max_error : 120.0
printer.configfile.settings['verify_heater heater_bed'].check_gain_time : 60.0
printer.configfile.settings['verify_heater heater_bed'].hysteresis : 5.0
printer.configfile.settings['verify_heater heater_bed'].heating_gain : 2.0
printer.configfile.settings['gcode_macro ercf_finalize_load'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_FINALIZE_LOAD func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_FINALIZE_LOAD Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > ERCF_FINALIZE_LOAD Skipped - an error condition is asserted < {% endif %}
{% else %}
_ERCF_FINALIZE_LOAD_STOCK {rawparams}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_FINALIZE_LOAD End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_FINALIZE_LOAD {% endif %}
printer.configfile.settings['gcode_macro ercf_finalize_load'].description : wrapper for ERCF.py fw proc to handle error conditions, verbosity
printer.configfile.settings['gcode_macro ercf_finalize_load'].rename_existing : _ERCF_FINALIZE_LOAD_STOCK
printer.configfile.settings['gcode_macro host_reboot'].gcode : 
{action_call_remote_method("reboot_machine")}
printer.configfile.settings['gcode_macro host_reboot'].description : G-Code macro
printer.configfile.settings['neopixel ercf_lights'].initial_white : 0.0
printer.configfile.settings['neopixel ercf_lights'].pin : pico:gpio22
printer.configfile.settings['neopixel ercf_lights'].chain_count : 8
printer.configfile.settings['neopixel ercf_lights'].initial_red : 0.0
printer.configfile.settings['neopixel ercf_lights'].initial_green : 0.0
printer.configfile.settings['neopixel ercf_lights'].initial_blue : 0.0
printer.configfile.settings['neopixel ercf_lights'].color_order : ('GRB',)
printer.configfile.settings['bed_mesh 110_klicky_nosoak'].tension : 0.2
printer.configfile.settings['bed_mesh 110_klicky_nosoak'].min_x : 40.0
printer.configfile.settings['bed_mesh 110_klicky_nosoak'].min_y : 40.0
printer.configfile.settings['bed_mesh 110_klicky_nosoak'].y_count : 5
printer.configfile.settings['bed_mesh 110_klicky_nosoak'].mesh_y_pps : 2
printer.configfile.settings['bed_mesh 110_klicky_nosoak'].x_count : 5
printer.configfile.settings['bed_mesh 110_klicky_nosoak'].points : ((-0.045, -0.025, 0.0025, -0.045, -0.06), (-0.075, -0.0, -0.01, -0.05, -0.025), (-0.0075, -0.0025, 0.0, 0.0, -0.0225), (-0.0075, 0.0275, 0.04, 0.01, -0.01), (-0.0025, 0.0575, 0.04, -0.015, -0.0225))
printer.configfile.settings['bed_mesh 110_klicky_nosoak'].algo : bicubic
printer.configfile.settings['bed_mesh 110_klicky_nosoak'].mesh_x_pps : 2
printer.configfile.settings['bed_mesh 110_klicky_nosoak'].version : 1
printer.configfile.settings['bed_mesh 110_klicky_nosoak'].max_x : 330.0
printer.configfile.settings['bed_mesh 110_klicky_nosoak'].max_y : 330.0
printer.configfile.settings['gcode_macro cancel_print'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=CANCEL_PRINT func_params='"{rawparams|string}"'  {% endif %}
{% set th = printer.toolhead %}
{% set canx_entry_ptr_state = svv.last_ptr_state %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_debug %} M118 _____ CANCEL_PRINT | canx_entry_ptr_state: {canx_entry_ptr_state} _____ {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %}
M118 >>> Canceling Print <<<
{% endif %}
M118 CANCEL_PRINT @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_canceling"'
stop_pause_alarm
M300 P10 S3000
M300 P10 S2000
M300 P10 S1000
M106 S26
{% if svv.module_ercf_loaded %}
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
ERCF_EJECT FINAL=1
{% endif %}
{% endif %}
{% if svv.module_ledeff_loaded %}
_set_ledeff_mode CHAIN=chamber_lights	EFFECT=normal
_set_ledeff_mode CHAIN=lcd_lights 	EFFECT=normal
{% else %}
ChLts_Normal
LcdLts_Normal
{% endif %}
TURN_OFF_HEATERS
CLEAR_PAUSE
SDCARD_RESET_FILE
_park_head ENTRY='{canx_entry_ptr_state|string}'
_CANCEL_PRINT_STOCK
_HOURMETER_OFF
_PrintLED_Off
SAVE_VARIABLE VARIABLE=final_maxz VALUE={svv.maxz}
SAVE_VARIABLE VARIABLE=maxz VALUE=0.0
SAVE_VARIABLE VARIABLE=has_wipe_tower VALUE=-1
SAVE_VARIABLE VARIABLE=v2_2526_slicer_check VALUE='"NULL"'
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_canceled"'
SAVE_VARIABLE VARIABLE=last_saved_gcode_state VALUE='"NULL"'
{% if 1 %}
{% if svv.module_ercf_loaded %}
M118 { ">>> Print canceled after " ~ svv.ercf_swaps ~ " swaps. <<<" }
M117 Canx - {svv.ercf_swaps} swaps.
{% else %}
M118 >>> Print Canceled <<<
M117 Print Canceled
{% endif %}
{% endif %}
snd_PrintCancel
SAVE_VARIABLE VARIABLE=ercf_swaps_last_canx_print VALUE={svv.ercf_swaps}
SAVE_VARIABLE VARIABLE=ercf_swaps VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=CANCEL_PRINT {% endif %}
printer.configfile.settings['gcode_macro cancel_print'].description : Cancel the actual running or paused print
printer.configfile.settings['gcode_macro cancel_print'].rename_existing : _CANCEL_PRINT_STOCK
printer.configfile.settings['gcode_macro chlts_test'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ChLts_Test {% endif %}
SET_LED LED=chamber_lights RED=0.5 GREEN=0.5 BLUE=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ChLts_Test {% endif %}
printer.configfile.settings['gcode_macro chlts_test'].description : G-Code macro
printer.configfile.settings['gcode_macro search_vars'].gcode : 
{ action_respond_info("-------------------------------------------------------") }
{ action_respond_info("-------------------------------------------------------") }
{ action_respond_info("-------------------------------------------------------") }
{% set search = params.S|lower %}
{% set ns = namespace() %}
{% for item in printer  %}
{% if ' ' in item %}
{% set ns.path = ['printer', "['%s']" % (item), ''] %}
{% else %}
{% set ns.path = ['printer.', item, ''] %}
{% endif %}
{% if search in ns.path|lower %}
{ action_respond_info(ns.path|join) }
{% endif %}
{% if printer[item].items() %}
{% for childkey, child in printer[item].items() recursive %}
{% set ns.path = ns.path[:loop.depth|int + 1] %}
{% if ' ' in childkey %}
{% set null = ns.path.append("['%s']" % (childkey)) %}
{% else %}
{% set null = ns.path.append(".%s" % (childkey)) %}
{% endif %}
{% if child is mapping  %}
{ loop(child.items()) }
{% else %}
{% if search in ns.path|lower %}
{ action_respond_info("%s : %s" % (ns.path|join, child)) }
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{% endfor %}
{ action_respond_info("-------------------------------------------------------") }
{ action_respond_info("-------------------------------------------------------") }
{ action_respond_info("-------------------------------------------------------") }
printer.configfile.settings['gcode_macro search_vars'].description : G-Code macro
printer.configfile.settings['gcode_macro printer_config_backup'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=printer_config_backup func_params='"{rawparams|string}"'  {% endif %}
RUN_SHELL_COMMAND CMD=backup_configs
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Printer config backed up to git repo <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=printer_config_backup {% endif %}
printer.configfile.settings['gcode_macro printer_config_backup'].description : performs backup of local configs to the git master
printer.configfile.settings.pause_resume.recover_velocity : 300.0
printer.configfile.settings['gcode_macro ercf_get_selector_pos'].rename_existing : _ERCF_GET_SELECTOR_POS_STOCK
printer.configfile.settings['gcode_macro ercf_get_selector_pos'].description : wrapper for ERCF.py fw proc to handle error conditions, verbosity
printer.configfile.settings['gcode_macro ercf_get_selector_pos'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_GET_SELECTOR_POS func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_GET_SELECTOR_POS Start ... {% endif %}
_ERCF_GET_SELECTOR_POS_STOCK {rawparams}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_GET_SELECTOR_POS End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_GET_SELECTOR_POS {% endif %}
printer.configfile.settings['gcode_macro t0'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T0 func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T0 Start ... {% endif %}
ERCF_CHANGE_TOOL TOOL=0
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T0 End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T0 {% endif %}
printer.configfile.settings['gcode_macro t0'].description : G-Code macro
printer.configfile.settings['gcode_macro lcdlts_test'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=LcdLts_Test {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=lcd_lights RED=0.1 GREEN=0.1 BLUE=0.5
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=LcdLts_Test {% endif %}
printer.configfile.settings['gcode_macro lcdlts_test'].description : G-Code macro
printer.configfile.settings['gcode_macro ercf_test_load_sequence'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_TEST_LOAD_SEQUENCE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_TEST_LOAD_SEQUENCE Start ... {% endif %}
{% set loop_number = params.LOOP|default(1)|int %}
{% set use_rand = params.RAND|default(0)|int %}
{% for iteration in range(loop_number|int) %}
{% for load in range((printer["gcode_macro _ERCF_VAR"].colorselector|length)|int) %}
{% if use_rand|int == 1 %}
{% set rand_tool = range(0, printer["gcode_macro _ERCF_VAR"].colorselector|length)|random %}
M118 Test Load on Cart {rand_tool|int}
; ERCF_SELECT_TOOL TOOL={rand_tool|int}
ERCF_SELECT_TOOL_dbg TOOL={rand_tool|int}
{% else %}
M118 Test Load on Cart {load|int}
; ERCF_SELECT_TOOL TOOL={load|int}
ERCF_SELECT_TOOL_dbg TOOL={load|int}
{% endif %}
ERCF_LOAD LENGTH={printer["gcode_macro _ERCF_VAR"].ercf_test_load_seq_len}
ERCF_UNLOAD LENGTH={printer["gcode_macro _ERCF_VAR"].ercf_test_load_seq_len}
_ERCF_UNSELECT_TOOL
{% endfor %}
{% endfor %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_TEST_LOAD_SEQUENCE End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_TEST_LOAD_SEQUENCE {% endif %}
printer.configfile.settings['gcode_macro ercf_test_load_sequence'].description : Stock - Test sequence  (wrapper proc added: ERCF_TEST_LOAD_SEQ - see _ercf_software_mods.cfg)
printer.configfile.settings['gcode_macro sng_mario'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_mario {% endif %}
M117 Mario
M3001 S1046 P150
M3001 S1318 P150
M3001 S1567 P150
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_mario {% endif %}
printer.configfile.settings['gcode_macro sng_mario'].description : G-Code macro
printer.configfile.settings['gcode_macro _print_purge'].variable_purge_len : 30
printer.configfile.settings['gcode_macro _print_purge'].description : purge with return to entry position
printer.configfile.settings['gcode_macro _print_purge'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_print_purge func_params='"{rawparams|string}"'  {% endif %}
{% set svv = printer.save_variables.variables %}
{% set th = printer.toolhead %}
{% set z_entry = th.position.z|float %}
save_gcode_state NAME=print_purge_entry
{% if ( printer['filament_switch_sensor toolhead_sensor'].filament_detected == True and printer.extruder.temperature >= purge_temp_min ) or printer['filament_switch_sensor toolhead_sensor'].filament_detected == False %}
go_relative
G1 Z5.0 F3000
go_absolute
G1 X{range(6,70)|random} Y350 F20000
G1 Z{wipe_zheight} F3000
go_relative
M400
{% if verbose %} M118 {"Purging " ~ purge_len ~ "mm @ " ~ purge_spd ~ "mm/min..."} {% endif %}
G1 E{purge_len} F{purge_spd}
go_absolute
_reset_extruder
G1 Y340
G0 Z15
CLEAN_NOZZLE
{% else %}
M118 No Purge due to Low Temp...
{% endif %}
G0 Z{z_entry}
restore_gcode_state NAME=print_purge_entry MOVE=1 MOVE_SPEED=250
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_print_purge {% endif %}
printer.configfile.settings['gcode_macro _print_purge'].variable_ooze_dwell : 1
printer.configfile.settings['gcode_macro _print_purge'].variable_verbose : False
printer.configfile.settings['gcode_macro _print_purge'].variable_purge_spd : 750
printer.configfile.settings['gcode_macro _print_purge'].variable_wipe_zheight : 0.05
printer.configfile.settings['gcode_macro _print_purge'].variable_purge_ret : 0.2
printer.configfile.settings['gcode_macro _print_purge'].variable_purge_temp_min : 180
printer.configfile.settings['gcode_macro ercf_unload_filament_in_extruder_with_tip_forming'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING Start ... {% endif %}
{% set ercf_params = printer.save_variables.variables %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
_ercf_set_eject_temp
{% if printer.extruder.temperature > printer["gcode_macro _ERCF_VAR"].min_temp_extruder %}
{% if printer["gcode_macro ERCF_SELECT_TOOL"].tool_selected|int == -1 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Forming filament tip and Unloading Filament... {% endif %}
go_relative
ERCF_FORM_TIP_STANDALONE
G1 E-4.00 F1200.0
G1 E-15.00 F2000
ERCF_HOME_EXTRUDER
{% if params.RATIO|string != "" %}
ERCF_SET_STEPS RATIO={params.RATIO|float}
{% elif ercf_params['ercf_calib_%s' % (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|string)]|string == "" %}
ERCF_SET_STEPS RATIO=1.0
{% else %}
ERCF_SET_STEPS RATIO={ercf_params['ercf_calib_%s' % (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|string)]|float}
{% endif %}
_ERCF_SERVO_DOWN
_ercf_syncd_th_load_unload RETRACT=1 MODIFIER={printer["gcode_macro _ERCF_VAR"].ercf_dual_unload_mod|float}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Filament out of TH throat {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %}
M118 Tool selected, UNSELECT it
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_debug %} M118 Tool selected, UNSELECT it {% endif %}
{% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=1
_ERCF_PAUSE
{% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Extruder too cold {% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=1
_ERCF_PAUSE
{% endif %}
_ercf_restore_he_temp
{% else %}
save_variable VARIABLE=ercf_err_flag VALUE=1
_alert_ercf_is_paused
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING {% endif %}
printer.configfile.settings['gcode_macro ercf_unload_filament_in_extruder_with_tip_forming'].description : Unload filament from the nozzle to the toolhead entrance using generic tip forming macro
printer.configfile.settings['verify_heater extruder'].heating_gain : 2.0
printer.configfile.settings['verify_heater extruder'].check_gain_time : 20.0
printer.configfile.settings['verify_heater extruder'].max_error : 120.0
printer.configfile.settings['verify_heater extruder'].hysteresis : 5.0
printer.configfile.settings['output_pin _beeper_pin'].shutdown_value : 0.0
printer.configfile.settings['output_pin _beeper_pin'].scale : 1.0
printer.configfile.settings['output_pin _beeper_pin'].cycle_time : 0.024
printer.configfile.settings['output_pin _beeper_pin'].pin : PE8
printer.configfile.settings['output_pin _beeper_pin'].maximum_mcu_duration : 0.0
printer.configfile.settings['output_pin _beeper_pin'].value : 0.0
printer.configfile.settings['output_pin _beeper_pin'].hardware_pwm : False
printer.configfile.settings['output_pin _beeper_pin'].pwm : True
printer.configfile.settings['gcode_macro sng_badboys'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_badboys {% endif %}
M117 wutchyagonnadue?
M3001 P20 S100
M3001 P147 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P121 S622
M3001 P50 S0
M3001 P170 S587
M3001 P114 S523
M3001 P57 S0
M3001 P170 S587
M3001 P103 S523
M3001 P67 S0
M3001 P170 S440
M3001 P121 S523
M3001 P50 S0
M3001 P170 S440
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P662 S0
M3001 P341 S311
M3001 P170 S294
M3001 P170 S262
M3001 P170 S294
M3001 P170 S262
M3001 P341 S220
M3001 P341 S196
M3001 P341 S208
M3001 P522 S220
M3001 P160 S0
M3001 P53 S196
M3001 P117 S0
M3001 P60 S196
M3001 P281 S0
M3001 P67 S196
M3001 P103 S0
M3001 P64 S196
M3001 P107 S0
M3001 P82 S196
M3001 P430 S0
M3001 P67 S220
M3001 P103 S0
M3001 P67 S220
M3001 P273 S0
M3001 P60 S220
M3001 P110 S0
M3001 P85 S220
M3001 P85 S0
M3001 P75 S220
M3001 P437 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P124 S110
M3001 P46 S0
M3001 P20 S100
M3001 P150 S0
M3001 P170 S82
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P170 S220
M3001 P170 S196
M3001 P170 S165
M3001 P170 S196
M3001 P170 S220
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P170 S330
M3001 P92 S65
M3001 P78 S0
M3001 P170 S294
M3001 P170 S262
M3001 P170 S294
M3001 P170 S262
M3001 P170 S220
M3001 P121 S196
M3001 P50 S0
M3001 P170 S392
M3001 P92 S49
M3001 P78 S0
M3001 P170 S415
M3001 P20 S100
M3001 P150 S0
M3001 P170 S440
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P117 S110
M3001 P53 S0
M3001 P20 S100
M3001 P150 S0
M3001 P170 S82
M3001 P20 S100
M3001 P150 S0
M3001 P110 S440
M3001 P60 S0
M3001 P170 S523
M3001 P96 S622
M3001 P75 S0
M3001 P103 S587
M3001 P67 S0
M3001 P170 S587
M3001 P78 S98
M3001 P92 S0
M3001 P170 S523
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P146 S62
M3001 P25 S0
M3001 P89 S65
M3001 P82 S0
M3001 P78 S65
M3001 P92 S0
M3001 P89 S65
M3001 P82 S0
M3001 P85 S65
M3001 P85 S0
M3001 P89 S65
M3001 P82 S0
M3001 P60 S65
M3001 P110 S0
M3001 P78 S65
M3001 P92 S0
M3001 P170 S196
M3001 P85 S49
M3001 P85 S0
M3001 P170 S208
M3001 P20 S100
M3001 P150 S0
M3001 P170 S220
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P124 S110
M3001 P46 S0
M3001 P20 S100
M3001 P150 S0
M3001 P170 S82
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P149 S247
M3001 P21 S0
M3001 P170 S220
M3001 P170 S196
M3001 P170 S165
M3001 P170 S196
M3001 P170 S220
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P170 S330
M3001 P92 S65
M3001 P78 S0
M3001 P149 S294
M3001 P21 S0
M3001 P138 S262
M3001 P32 S0
M3001 P170 S294
M3001 P170 S262
M3001 P170 S220
M3001 P78 S65
M3001 P92 S0
M3001 P170 S196
M3001 P85 S49
M3001 P85 S0
M3001 P170 S208
M3001 P20 S100
M3001 P150 S0
M3001 P170 S220
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M3001 P149 S0
M3001 P2 S100
M3001 P20 S100
M3001 P150 S0
M3001 P20 S100
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_badboys {% endif %}
printer.configfile.settings['gcode_macro sng_badboys'].description : G-Code macro
printer.configfile.settings['gcode_macro _entry_point'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_entry_point func_params='"{rawparams|string}"'  {% endif %}
{% set function  = 'pre_' ~ params.FUNCTION %}
{% if printer["gcode_macro _klicky_vars"].klicky_verb_info %} M118 >>> _____ENTERING {function} <<< {% endif %}
M400
SAVE_GCODE_STATE NAME={function}
SET_GCODE_OFFSET Z=0
go_absolute
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_entry_point {% endif %}
printer.configfile.settings['gcode_macro _entry_point'].description : G-Code macro
printer.configfile.settings['gcode_macro dblts_off'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=DBLts_Off {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=dash_lights RED=0 GREEN=0 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=DBLts_Off {% endif %}
printer.configfile.settings['gcode_macro dblts_off'].description : G-Code macro
printer.configfile.settings['gcode_macro bed_mesh_calibrate'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=BED_MESH_CALIBRATE func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"bed_meshing"'
{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> bed_meshing <<< {% endif %}
{% if printer["gcode_macro _User_Variables"].verbose %} M118 Bed Mesh Calibrate {% endif %}
_ENSURE_QGL
_CheckProbe action=query
Attach_Probe
{% if printer["gcode_macro _klicky_vars"].klicky_verb_info %} M118 >>> ____ BED_MESH_CALIBRATE_STOCK {rawparams} <<< {% endif %}
_BED_MESH_CALIBRATE_STOCK {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
Dock_Probe
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"bed_meshed"'
{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> bed_meshed <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=BED_MESH_CALIBRATE {% endif %}
printer.configfile.settings['gcode_macro bed_mesh_calibrate'].description : Perform Mesh Bed Leveling with klicky automount
printer.configfile.settings['gcode_macro bed_mesh_calibrate'].rename_existing : _BED_MESH_CALIBRATE_STOCK
printer.configfile.settings['gcode_macro dblts_test'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=DBLts_Test {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=dash_lights RED=0.1 GREEN=0.1 BLUE=0.5
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=DBLts_Test {% endif %}
printer.configfile.settings['gcode_macro dblts_test'].description : G-Code macro
printer.configfile.settings['gcode_macro set_startup_bedtemp'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=set_startup_bedtemp func_params='"{rawparams|string}"' {% endif %}
M140 S{printer["gcode_macro set_startup_bedtemp"].ptrstartup_bedtemp|int}
G4 P500
M300 S659.255 P125
{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
M118 Heating Bed to {printer["gcode_macro set_startup_bedtemp"].ptrstartup_bedtemp|int}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=set_startup_bedtemp {% endif %}
printer.configfile.settings['gcode_macro set_startup_bedtemp'].variable_ptrstartup_bedtemp : 120
printer.configfile.settings['gcode_macro set_startup_bedtemp'].variable_heat_on_start : 0
printer.configfile.settings['gcode_macro set_startup_bedtemp'].description : Set bed temp at startup
printer.configfile.settings['gcode_macro _linadv_vars'].variable_linadv_verb_error : 1
printer.configfile.settings['gcode_macro _linadv_vars'].description : led effects module variables
printer.configfile.settings['gcode_macro _linadv_vars'].variable_dynamic_pa_enable : 0
printer.configfile.settings['gcode_macro _linadv_vars'].variable_linadv_verb_status : 0
printer.configfile.settings['gcode_macro _linadv_vars'].variable_linadv_verb_debug : 0
printer.configfile.settings['gcode_macro _linadv_vars'].variable_linadv_verb_codeflow : 0
printer.configfile.settings['gcode_macro _linadv_vars'].variable_linadv_verb_info : 0
printer.configfile.settings['gcode_macro _linadv_vars'].gcode : 
printer.configfile.settings['gcode_macro ercf_load_tool'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_LOAD_TOOL func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_LOAD_TOOL Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
_ercf_set_eject_temp
{% set ercf_params = printer.save_variables.variables %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
{% if printer["gcode_macro ERCF_HOME"].home == -1 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF not homed, homing it... {% endif %}
ERCF_HOME
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Loading tool {params.TOOL|int} ... {% endif %}
; ERCF_SELECT_TOOL TOOL={params.TOOL|int}
ERCF_SELECT_TOOL_dbg TOOL={params.TOOL|int}
ERCF_SET_STEPS RATIO={ercf_params['ercf_calib_%s' % (params.TOOL|string)]}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Loading filament from ERCF to extruder ... {% endif %}
ERCF_LOAD LENGTH={ercf_params.ercf_calib_ref|float - printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + printer["gcode_macro _ERCF_VAR"].ercf_th_load_len_mod|float}
ERCF_LOAD_FILAMENT_IN_EXTRUDER
{% else %}
_alert_ercf_is_paused
{% endif %}
_ercf_restore_he_temp
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_LOAD_TOOL End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_LOAD_TOOL {% endif %}
printer.configfile.settings['gcode_macro ercf_load_tool'].description : Load the filament from the ERCF to the toolhead
printer.configfile.settings['gcode_macro _extruder_move_dwell'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_extruder_move_dwell func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _extruder_move_dwell Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 >>> _extruder_move_dwell {printer["gcode_macro _ERCF_VAR"].ercf_extruder_move_dwell|int}mS <<< {% endif %}
G4 P{printer["gcode_macro _ERCF_VAR"].ercf_extruder_move_dwell|int}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _extruder_move_dwell End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_extruder_move_dwell {% endif %}
printer.configfile.settings['gcode_macro _extruder_move_dwell'].description : impute a dwell time to allow for the extruder movement to complete
printer.configfile.settings['manual_stepper gear_stepper'].homing_positive_dir : False
printer.configfile.settings['manual_stepper gear_stepper'].homing_retract_dist : 5.0
printer.configfile.settings['manual_stepper gear_stepper'].position_endstop : 0.0
printer.configfile.settings['manual_stepper gear_stepper'].full_steps_per_rotation : 200
printer.configfile.settings['manual_stepper gear_stepper'].endstop_pin : ^ercf:PA7
printer.configfile.settings['manual_stepper gear_stepper'].rotation_distance : 22.8104890164
printer.configfile.settings['manual_stepper gear_stepper'].accel : 150.0
printer.configfile.settings['manual_stepper gear_stepper'].second_homing_speed : 2.5
printer.configfile.settings['manual_stepper gear_stepper'].step_pin : ercf:PA4
printer.configfile.settings['manual_stepper gear_stepper'].homing_speed : 5.0
printer.configfile.settings['manual_stepper gear_stepper'].microsteps : 16
printer.configfile.settings['manual_stepper gear_stepper'].velocity : 35.0
printer.configfile.settings['manual_stepper gear_stepper'].dir_pin : ercf:PA10
printer.configfile.settings['manual_stepper gear_stepper'].gear_ratio : ((80.0, 20.0),)
printer.configfile.settings['manual_stepper gear_stepper'].homing_retract_speed : 5.0
printer.configfile.settings['manual_stepper gear_stepper'].enable_pin : !ercf:PA2
printer.configfile.settings['bed_mesh soaked'].tension : 0.2
printer.configfile.settings['bed_mesh soaked'].min_x : 40.0
printer.configfile.settings['bed_mesh soaked'].min_y : 40.0
printer.configfile.settings['bed_mesh soaked'].y_count : 5
printer.configfile.settings['bed_mesh soaked'].mesh_y_pps : 2
printer.configfile.settings['bed_mesh soaked'].x_count : 5
printer.configfile.settings['bed_mesh soaked'].points : ((0.155, 0.1225, 0.1225, 0.1325, 0.2025), (0.0925, 0.0825, 0.035, 0.0375, 0.1125), (0.0975, 0.035, 0.0, 0.035, 0.08), (0.1225, 0.1025, 0.0675, 0.0725, 0.125), (0.215, 0.2075, 0.1575, 0.1625, 0.225))
printer.configfile.settings['bed_mesh soaked'].version : 1
printer.configfile.settings['bed_mesh soaked'].algo : bicubic
printer.configfile.settings['bed_mesh soaked'].mesh_x_pps : 2
printer.configfile.settings['bed_mesh soaked'].max_x : 330.0
printer.configfile.settings['bed_mesh soaked'].max_y : 330.0
printer.configfile.settings['gcode_macro dblts_green'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=DBLts_Green {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=dash_lights RED=0 GREEN=0.5 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=DBLts_Green {% endif %}
printer.configfile.settings['gcode_macro dblts_green'].description : G-Code macro
printer.configfile.settings['gcode_macro _printled_on'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_PrintLED_On func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _PrintLED_On <<< {% endif %}
SET_PIN PIN=_sw_red_led VALUE=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_PrintLED_On {% endif %}
printer.configfile.settings['gcode_macro _printled_on'].description : Illuminate the Halo Sw Red LED
printer.configfile.settings['gcode_macro _checkprobe'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_CheckProbe func_params='"{rawparams|string}"'  {% endif %}
Query_Probe
_SetProbeState action={ params.ACTION }
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_CheckProbe {% endif %}
printer.configfile.settings['gcode_macro _checkprobe'].description : G-Code macro
printer.configfile.settings['gcode_macro _checkprobe'].variable_probe_state : 0
printer.configfile.settings['neopixel dash_lights'].initial_white : 0.0
printer.configfile.settings['neopixel dash_lights'].pin : PB0
printer.configfile.settings['neopixel dash_lights'].chain_count : 8
printer.configfile.settings['neopixel dash_lights'].initial_red : 0.0
printer.configfile.settings['neopixel dash_lights'].initial_green : 0.0
printer.configfile.settings['neopixel dash_lights'].initial_blue : 0.0
printer.configfile.settings['neopixel dash_lights'].color_order : ('GRB',)
printer.configfile.settings['gcode_macro sng_auldlangsyne'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_auldlangsyne {% endif %}
M117 Auld Lang Syne
M3001 S578 P800
M3001 S783 P1200
M3001 S783 P400
M3001 S783 P800
M3001 S987 P800
M3001 S880 P1200
M3001 S783 P400
M3001 S880 P800
M3001 S987 P800
M3001 S783 P1200
M3001 S783 P400
M3001 S987 P800
M3001 S1174 P800
M3001 S1318 P1600
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_auldlangsyne {% endif %}
printer.configfile.settings['gcode_macro sng_auldlangsyne'].description : G-Code macro
printer.configfile.settings['gcode_macro hourmeter_toggle'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=HOURMETER_TOGGLE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> HOURMETER_TOGGLE <<< {% endif %}
{% if printer["output_pin _hourmeter"].value == 1 %}
_HOURMETER_OFF
{% else %}
_HOURMETER_ON
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=HOURMETER_TOGGLE {% endif %}
printer.configfile.settings['gcode_macro hourmeter_toggle'].description : Toggle Hour Meter
printer.configfile.settings['gcode_macro go_absolute'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=go_absolute func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> ABSOLUTE <<< {% endif %}
G90
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=go_absolute {% endif %}
printer.configfile.settings['gcode_macro go_absolute'].description : does a G90 - just for readability's sake
printer.configfile.settings.firmware_retraction.unretract_extra_length : 0.0
printer.configfile.settings.firmware_retraction.retract_length : 0.4
printer.configfile.settings.firmware_retraction.unretract_speed : 22.5
printer.configfile.settings.firmware_retraction.retract_speed : 45.0
printer.configfile.settings['gcode_macro dump_print_area_limits'].gcode : 
{% set min = printer.toolhead.axis_minimum %}
{% set max = printer.toolhead.axis_maximum %}
{% set probe_offset = {'x' : printer.configfile.settings.probe.x_offset,
'y' : printer.configfile.settings.probe.y_offset} %}
{% set probe_area = {'min' : {'x' : [min.x,(min.x-probe_offset.x)]|max,
'y' : [min.y,(min.y-probe_offset.y)]|max},
'max' : {'x' : [max.x,(max.x-probe_offset.x)]|min,
'y' : [max.y,(max.y-probe_offset.y)]|min}} %}
{action_respond_info("Print Volume Limits:
Min X:%7.1f, Y:%7.1f, Z:%7.1f
Max X:%7.1f, Y:%7.1f, Z:%7.1f
Probe Area Limits:
Min X:%7.1f, Y:%7.1f
Max X:%7.1f, Y:%7.1f" %
(min.x,min.y,min.z,max.x,max.y,max.z,probe_area.min.x,probe_area.min.y, probe_area.max.x,probe_area.max.y))}
printer.configfile.settings['gcode_macro dump_print_area_limits'].description : Debug: Print information about print volume and probeable area
printer.configfile.settings['gcode_macro ercf_display_encoder_pos'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_DISPLAY_ENCODER_POS func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_DISPLAY_ENCODER_POS Start ... {% endif %}
M118 Encoder value is {printer['ercf'].encoder_pos|float}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_DISPLAY_ENCODER_POS End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_DISPLAY_ENCODER_POS {% endif %}
printer.configfile.settings['gcode_macro ercf_display_encoder_pos'].description : Display current value of the ERCF encoder
printer.configfile.settings['gcode_macro _load_unload_dwell'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_load_unload_dwell func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _load_unload_dwell Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 >>> _load_unload_dwell {printer["gcode_macro _ERCF_VAR"].ercf_load_unload_dwell|int}mS <<< {% endif %}
G4 P{printer["gcode_macro _ERCF_VAR"].ercf_load_unload_dwell|int}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _load_unload_dwell End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_load_unload_dwell {% endif %}
printer.configfile.settings['gcode_macro _load_unload_dwell'].description : impute a dwell time to allow for the extruder movement to complete
printer.configfile.settings['gcode_macro _ercf_pause'].gcode : 
{% set svv = printer.save_variables.variables %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ERCF_PAUSE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ERCF_PAUSE Start ... {% endif %}
SET_GCODE_VARIABLE MACRO=_ERCF_PAUSE VARIABLE=extruder_temp VALUE={printer.extruder.target}
SET_GCODE_VARIABLE MACRO=_ERCF_PAUSE VARIABLE=is_paused VALUE=1
SET_IDLE_TIMEOUT TIMEOUT={printer["gcode_macro _ERCF_VAR"].timeout_pause}
UPDATE_DELAYED_GCODE ID=disable_heater DURATION={printer["gcode_macro _ERCF_VAR"].disable_heater}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %}
M118 An issue with the ERCF has been detected and the ERCF has been PAUSED
M118 When you intervene to fix the issue, first call the "ERCF_UNLOCK" Gcode
M118 Refer to the manual before resuming the print
{% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=1
SAVE_GCODE_STATE NAME=ERCF_state
SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
M118 _ERCF_Pause @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}
PAUSE
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ERCF_PAUSE End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ERCF_PAUSE {% endif %}
printer.configfile.settings['gcode_macro _ercf_pause'].variable_extruder_temp : 0
printer.configfile.settings['gcode_macro _ercf_pause'].description : Pause the current print and lock the ERCF operations
printer.configfile.settings['gcode_macro _ercf_pause'].variable_is_paused : 0
printer.configfile.settings['delayed_gcode _recursive_bounds_alarm'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_recursive_bounds_alarm func_params='"{rawparams|string}"'  {% endif %}
{% if
printer.extruder.target > 0
%}
M118 H2O cooling parameters Exceedance ALERT
_fire_warble_alarm
UPDATE_DELAYED_GCODE ID=_recursive_bounds_alarm DURATION={printer["gcode_macro _bounds_vars"].bounds_alarm_recurse_period|float}
{% else %}
M118 H2O cooling parameters Exceedance Alert CANCELED
_stop_bounds_alarm
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_recursive_bounds_alarm {% endif %}
printer.configfile.settings['delayed_gcode _recursive_bounds_alarm'].initial_duration : 0.0
printer.configfile.settings['gcode_macro dock_probe'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=Dock_Probe func_params='"{rawparams|string}"'  {% endif %}
{% set goback  = params.back|default(0) %}
{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed * 60 %}
{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed * 60 %}
{% set xydock_feedrate = printer["gcode_macro _User_Variables"].xydock_speed * 60 %}
{% set zdock_feedrate = printer["gcode_macro _User_Variables"].zdock_speed * 60 %}
{% set xyrelease_feedrate = printer["gcode_macro _User_Variables"].xyrelease_speed * 60 %}
{% set zrelease_feedrate = printer["gcode_macro _User_Variables"].zrelease_speed * 60 %}
{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
{% endif %}
{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
{% endif %}
{% if not 'xyz' in printer.toolhead.homed_axes %}
{ action_raise_error("Must Home X, Y and Z Axis First!") }
{% endif %}
_entry_point function=Dock_Probe
{% if probe_attached and not probe_lock %}
{% if verbose %} M118 Docking Probe {% endif %}
{% if printer.toolhead.position.z < safe_z %}
G0 Z{safe_z} F{z_drop_feedrate}
{% endif %}
_Umbilical_Path
{% if printer.toolhead.position.y > (docklocation_y|float - attachmove_y|float) %}
G0 Y{docklocation_y|float - attachmove_y|float} F{xytravel_feedrate}
G0 X{docklocation_x|float - attachmove_x|float} F{xytravel_feedrate}
{% else %}
G0 X{docklocation_x|float - attachmove_x|float} Y{docklocation_y|float - attachmove_y|float} F{xytravel_feedrate}
{% endif %}
{% if docklocation_z != -128 %}
G0 Z{docklocation_z|float - attachmove_z|float} F{zdock_feedrate}
{% endif %}
G0 X{docklocation_x} Y{docklocation_y} F{xydock_feedrate}
{% if docklocation_z != -128 %}
G0 Z{docklocation_z} F{zdock_feedrate}
{% endif %}
{% if docklocation_z != -128 %}
G0 Z{docklocation_z|float + dockmove_z|float} F{zrelease_feedrate}
{% endif %}
G0 X{docklocation_x|float + dockmove_x|float} Y{docklocation_y|float + dockmove_y|float} F{xyrelease_feedrate}
{% if printer.toolhead.position.z < safe_z %}
G0 Z{safe_z} F{z_drop_feedrate}
{% endif %}
_Park_Toolhead
G4 P1000
_CheckProbe action=dock
{% elif probe_lock %}
{% if verbose %} M118 Probe locked {% endif %}
_CheckProbe action=query
{% else %}
{% if verbose %} M118 Probe already docked {% endif %}
_CheckProbe action=query
{% endif %}
_exit_point function=Dock_Probe move={goback}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=Dock_Probe {% endif %}
printer.configfile.settings['gcode_macro dock_probe'].description : Docks Klicky Probe
printer.configfile.settings['gcode_macro _ercf_start_he_temp'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_start_he_temp func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ercf_start_he_temp Start ... {% endif %}
M104 S{params.TEMP|int}
_ercf_temp_ind_check_cycle
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ercf_start_he_temp End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ercf_start_he_temp {% endif %}
printer.configfile.settings['gcode_macro _ercf_start_he_temp'].description : set he temp to passed TEMP (int) parameter and carry on (no wait)
printer.configfile.settings['delayed_gcode check_bounds'].gcode : 
M118 H2O cooling automatic parameter check...
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=check_bounds func_params='"{rawparams|string}"'  {% endif %}
_check_bounds
UPDATE_DELAYED_GCODE ID=check_bounds DURATION={printer["gcode_macro _bounds_vars"].bounds_check_period|int}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=check_bounds {% endif %}
printer.configfile.settings['delayed_gcode check_bounds'].initial_duration : 0.0
printer.configfile.settings['gcode_macro snd_printend'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=snd_PrintEnd {% endif %}
sng_bethovene
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=snd_PrintEnd {% endif %}
printer.configfile.settings['gcode_macro snd_printend'].description : G-Code macro
printer.configfile.settings['gcode_macro ercf_calib_save_var'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CALIB_SAVE_VAR func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CALIB_SAVE_VAR Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 >>> ERCF_CALIB_SAVE_VAR - Entered Params: {rawparams} <<< {% endif %}
{% if params.TOOL|int == 0 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_CALIB_SAVE_VAR - Tool is 0 <<< {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Tool {params.TOOL} calibration value is {printer['ercf'].encoder_pos|float} {% endif %}
SAVE_VARIABLE VARIABLE=ercf_calib_ref VALUE={printer['ercf'].encoder_pos|float}
SAVE_VARIABLE VARIABLE=ercf_calib_{params.TOOL|int} VALUE=1.0
SET_GCODE_VARIABLE MACRO=ERCF_CALIB_UNLOAD VARIABLE=ref VALUE={printer['ercf'].encoder_pos|float}
SET_GCODE_VARIABLE MACRO=ERCF_CALIB_UNLOAD VARIABLE=ratio VALUE=1.0
{% else %}
{% set ratio = (printer["gcode_macro _ERCF_VAR"].min_bowden_length|float - 100.0) / printer['ercf'].encoder_pos|float %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Tool {params.TOOL} ratio is {ratio|float} {% endif %}
SAVE_VARIABLE VARIABLE=ercf_calib_{params.TOOL|int} VALUE={ratio|float}
SET_GCODE_VARIABLE MACRO=ERCF_CALIB_UNLOAD VARIABLE=ratio VALUE={ratio|float}
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CALIB_SAVE_VAR End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CALIB_SAVE_VAR {% endif %}
printer.configfile.settings['gcode_macro ercf_calib_save_var'].description : Saving ERCF calibration values
printer.configfile.settings['gcode_shell_command wcv2_ircut_off'].command : curl -d value=0 http://10.0.0.61:8081/api/ir_cut
printer.configfile.settings['gcode_shell_command wcv2_ircut_off'].verbose : False
printer.configfile.settings['gcode_shell_command wcv2_ircut_off'].timeout : 2.0
printer.configfile.settings['gcode_macro m118'].gcode : 
{ action_respond_info(rawparams) }
printer.configfile.settings['gcode_macro m118'].description : To trap/wrap FW M118 w/ action_respond_info vs. FW's implementation (supports numeric/special char starts)
printer.configfile.settings['gcode_macro m118'].rename_existing : M118.1
printer.configfile.settings['gcode_macro do_bed_mesh'].variable_bed_temp : 60
printer.configfile.settings['gcode_macro do_bed_mesh'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=DO_BED_MESH func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> DO_BED_MESH <<< {% endif %}
M117 Heating...
M140 S{bed_temp}
M104 S{extruder_temp}
M190 S{bed_temp}
M109 S{extruder_temp}
_PrintLED_On
M300
_ENSURE_QGL
BED_MESH_CALIBRATE
G28
M300
M300
_PrintLED_Off
SAVE_CONFIG
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=DO_BED_MESH {% endif %}
printer.configfile.settings['gcode_macro do_bed_mesh'].variable_extruder_temp : 230
printer.configfile.settings['gcode_macro do_bed_mesh'].description : Heat bed and then perform a bed mesh sequence
printer.configfile.settings['gcode_macro sng_mch'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=sng_mch {% endif %}
M117 MCH
M3001 P229 S294
M3001 P214 S370
M3001 P8 S440
M3001 P201 S73
M3001 P16 S110
M3001 P5 S294
M3001 P125 S370
M3001 P104 S0
M3001 P214 S440
M3001 P10 S370
M3001 P3 S110
M3001 P3 S147
M3001 P5 S220
M3001 P211 S294
M3001 P8 S110
M3001 P201 S440
M3001 P8 S165
M3001 P10 S220
M3001 P10 S330
M3001 P125 S277
M3001 P76 S0
M3001 P211 S440
M3001 P5 S139
M3001 P3 S165
M3001 P3 S220
M3001 P5 S277
M3001 P229 S330
M3001 P5 S73
M3001 P203 S440
M3001 P3 S110
M3001 P3 S147
M3001 P5 S294
M3001 P417 S370
M3001 P16 S587
M3001 P5 S110
M3001 P203 S147
M3001 P5 S370
M3001 P10 S440
M3001 P375 S294
M3001 P21 S0
M3001 P16 S370
M3001 P8 S147
M3001 P201 S92
M3001 P214 S392
M3001 P219 S440
M3001 P3 S165
M3001 P13 S220
M3001 P5 S277
M3001 P198 S330
M3001 P201 S440
M3001 P3 S165
M3001 P16 S220
M3001 P10 S330
M3001 P198 S139
M3001 P13 S110
M3001 P206 S392
M3001 P3 S277
M3001 P10 S330
M3001 P13 S165
M3001 P125 S220
M3001 P260 S0
M3001 P5 S139
M3001 P3 S165
M3001 P219 S220
M3001 P8 S73
M3001 P193 S294
M3001 P5 S110
M3001 P250 S147
M3001 P169 S0
M3001 P3 S92
M3001 P5 S110
M3001 P232 S147
M3001 P404 S73
M3001 P3 S110
M3001 P8 S147
M3001 P10 S294
M3001 P203 S92
M3001 P229 S370
M3001 P5 S73
M3001 P198 S440
M3001 P3 S110
M3001 P13 S147
M3001 P5 S220
M3001 P3 S294
M3001 P219 S370
M3001 P211 S440
M3001 P5 S110
M3001 P3 S147
M3001 P3 S220
M3001 P5 S294
M3001 P232 S370
M3001 P8 S440
M3001 P188 S110
M3001 P5 S165
M3001 P10 S220
M3001 P16 S330
M3001 P198 S277
M3001 P201 S440
M3001 P13 S220
M3001 P5 S139
M3001 P3 S165
M3001 P3 S277
M3001 P224 S330
M3001 P3 S73
M3001 P195 S440
M3001 P3 S110
M3001 P8 S147
M3001 P10 S370
M3001 P411 S294
M3001 P21 S587
M3001 P5 S110
M3001 P10 S147
M3001 P193 S92
M3001 P5 S73
M3001 P5 S294
M3001 P5 S370
M3001 P391 S440
M3001 P5 S110
M3001 P3 S147
M3001 P216 S370
M3001 P203 S392
M3001 P10 S440
M3001 P182 S110
M3001 P21 S165
M3001 P3 S220
M3001 P13 S277
M3001 P141 S330
M3001 P57 S0
M3001 P193 S440
M3001 P5 S165
M3001 P29 S220
M3001 P8 S139
M3001 P161 S330
M3001 P26 S0
M3001 P5 S110
M3001 P193 S392
M3001 P10 S330
M3001 P3 S220
M3001 P250 S277
M3001 P154 S0
M3001 P3 S165
M3001 P125 S220
M3001 P104 S0
M3001 P8 S73
M3001 P198 S294
M3001 P10 S147
M3001 P125 S110
M3001 P286 S0
M3001 P5 S92
M3001 P3 S110
M3001 P29 S147
M3001 P5 S185
M3001 P195 S220
M3001 P393 S73
M3001 P5 S587
M3001 P5 S110
M3001 P198 S147
M3001 P219 S554
M3001 P5 S98
M3001 P188 S494
M3001 P5 S147
M3001 P65 S196
M3001 P167 S0
M3001 P8 S294
M3001 P182 S392
M3001 P5 S147
M3001 P10 S196
M3001 P242 S123
M3001 P8 S98
M3001 P177 S494
M3001 P203 S196
M3001 P16 S392
M3001 P159 S294
M3001 P10 S147
M3001 P10 S196
M3001 P125 S123
M3001 P122 S0
M3001 P10 S440
M3001 P167 S147
M3001 P10 S185
M3001 P250 S220
M3001 P156 S0
M3001 P3 S185
M3001 P10 S494
M3001 P206 S220
M3001 P5 S440
M3001 P391 S147
M3001 P3 S185
M3001 P3 S220
M3001 P195 S587
M3001 P221 S554
M3001 P8 S98
M3001 P185 S494
M3001 P3 S147
M3001 P221 S196
M3001 P5 S294
M3001 P172 S392
M3001 P5 S147
M3001 P10 S196
M3001 P221 S123
M3001 P10 S98
M3001 P164 S494
M3001 P229 S587
M3001 P10 S196
M3001 P3 S123
M3001 P125 S147
M3001 P34 S0
M3001 P10 S147
M3001 P125 S196
M3001 P120 S0
M3001 P10 S440
M3001 P188 S110
M3001 P5 S220
M3001 P5 S277
M3001 P250 S330
M3001 P151 S0
M3001 P10 S277
M3001 P5 S165
M3001 P3 S220
M3001 P206 S330
M3001 P336 S110
M3001 P29 S0
M3001 P3 S220
M3001 P10 S294
M3001 P8 S139
M3001 P172 S165
M3001 P227 S370
M3001 P8 S440
M3001 P193 S73
M3001 P5 S110
M3001 P3 S147
M3001 P10 S370
M3001 P8 S220
M3001 P198 S294
M3001 P208 S440
M3001 P5 S92
M3001 P5 S110
M3001 P3 S147
M3001 P3 S220
M3001 P5 S294
M3001 P219 S370
M3001 P10 S440
M3001 P193 S110
M3001 P5 S165
M3001 P3 S220
M3001 P8 S277
M3001 P198 S330
M3001 P182 S440
M3001 P8 S220
M3001 P8 S139
M3001 P3 S165
M3001 P3 S277
M3001 P206 S330
M3001 P8 S73
M3001 P188 S440
M3001 P3 S110
M3001 P3 S294
M3001 P10 S370
M3001 P125 S147
M3001 P234 S0
M3001 P21 S587
M3001 P5 S110
M3001 P214 S147
M3001 P3 S73
M3001 P8 S294
M3001 P354 S440
M3001 P21 S0
M3001 P5 S110
M3001 P10 S370
M3001 P125 S147
M3001 P73 S0
M3001 P195 S392
M3001 P10 S440
M3001 P174 S110
M3001 P3 S165
M3001 P29 S220
M3001 P13 S277
M3001 P185 S330
M3001 P198 S440
M3001 P10 S277
M3001 P5 S165
M3001 P174 S330
M3001 P39 S0
M3001 P172 S392
M3001 P206 S330
M3001 P13 S220
M3001 P172 S165
M3001 P125 S139
M3001 P109 S0
M3001 P18 S294
M3001 P177 S73
M3001 P3 S185
M3001 P10 S220
M3001 P5 S110
M3001 P125 S147
M3001 P242 S0
M3001 P3 S110
M3001 P16 S147
M3001 P3 S185
M3001 P206 S220
M3001 P5 S92
M3001 P16 S147
M3001 P250 S73
M300done
M117
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=sng_mch {% endif %}
printer.configfile.settings['gcode_macro sng_mch'].description : G-Code macro
printer.configfile.settings.quad_gantry_level.retries : 3
printer.configfile.settings.quad_gantry_level.horizontal_move_z : 15.0
printer.configfile.settings.quad_gantry_level.retry_tolerance : 0.0075
printer.configfile.settings.quad_gantry_level.gantry_corners : ((-60.0, -10.0), (410.0, 420.0))
printer.configfile.settings.quad_gantry_level.points : ((50.0, 25.0), (50.0, 275.0), (300.0, 275.0), (300.0, 25.0))
printer.configfile.settings.quad_gantry_level.speed : 250.0
printer.configfile.settings.quad_gantry_level.max_adjust : 4.0
printer.configfile.settings.display.menu_reverse_navigation : False
printer.configfile.settings.display.menu_timeout : 0
printer.configfile.settings.display.spi_software_mosi_pin : EXP2_6
printer.configfile.settings.display.cs_pin : EXP1_3
printer.configfile.settings.display.spi_software_sclk_pin : EXP2_2
printer.configfile.settings.display.encoder_pins : ^EXP2_5, ^EXP2_3
printer.configfile.settings.display.lcd_type : uc1701
printer.configfile.settings.display.spi_software_miso_pin : EXP2_1
printer.configfile.settings.display.a0_pin : EXP1_4
printer.configfile.settings.display.display_group : _default_16x4
printer.configfile.settings.display.encoder_steps_per_detent : 4
printer.configfile.settings.display.encoder_fast_rate : 0.03
printer.configfile.settings.display.menu_root : __main
printer.configfile.settings.display.spi_speed : 10000000
printer.configfile.settings.display.rst_pin : EXP1_5
printer.configfile.settings.display.contrast : 63
printer.configfile.settings.display.click_pin : ^!EXP1_2
printer.configfile.settings.duplicate_pin_override.pins : ('ercf:PA6', 'PG15')
printer.configfile.settings['gcode_macro _reset_extruder'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_reset_extruder func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _reset_extruder <<< {% endif %}
G92 E0
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_reset_extruder {% endif %}
printer.configfile.settings['gcode_macro _reset_extruder'].description : for readability - execute G92 E0
printer.configfile.settings['gcode_macro lcdlts_full'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=LcdLts_Full {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=lcd_lights RED=1 GREEN=1 BLUE=1
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=LcdLts_Full {% endif %}
printer.configfile.settings['gcode_macro lcdlts_full'].description : G-Code macro
printer.configfile.settings['bed_mesh default'].tension : 0.2
printer.configfile.settings['bed_mesh default'].min_x : 40.0
printer.configfile.settings['bed_mesh default'].min_y : 40.0
printer.configfile.settings['bed_mesh default'].y_count : 5
printer.configfile.settings['bed_mesh default'].mesh_y_pps : 2
printer.configfile.settings['bed_mesh default'].x_count : 5
printer.configfile.settings['bed_mesh default'].points : ((0.1375, 0.09, 0.0825, 0.1225, 0.17), (0.055, 0.04, 0.005, 0.0475, 0.1025), (0.0525, 0.0175, 0.0, 0.0175, 0.09), (0.0825, 0.055, 0.02, 0.02, 0.0725), (0.14, 0.155, 0.1225, 0.105, 0.165))
printer.configfile.settings['bed_mesh default'].algo : bicubic
printer.configfile.settings['bed_mesh default'].mesh_x_pps : 2
printer.configfile.settings['bed_mesh default'].version : 1
printer.configfile.settings['bed_mesh default'].max_x : 330.0
printer.configfile.settings['bed_mesh default'].max_y : 330.0
printer.configfile.settings['gcode_macro _setdynamicspdrate'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_SetDynamicSpdRate func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _gcodeproc_vars"].dynamic_spdrate_enable %}
{% if printer["gcode_macro _gcodeproc_vars"].gcodeproc_verb_codeflow %}  M118 >>> _SetDynamicSpdRate Start <<< {% endif %}
{% set this1 = namespace(pa_unset=true) %}
{% set this2 = namespace(matches=0) %}
{% for mesh_idx in range(printer["gcode_macro _SetDynamicSpdRate"].mesh_name|length) %}
{% if params.MESH|string|lower == printer["gcode_macro _SetDynamicSpdRate"].mesh_name[mesh_idx|int]|string|lower %}
M220 S{(printer["gcode_macro _SetDynamicSpdRate"].mesh_spdrate[mesh_idx|int]|float * 100)|int}
{% set this1.pa_unset = false %}
{% set this2.matches = this2.matches + 1 %}
{% endif %}
{% endfor %}
{% if this1.pa_unset %}
{% if printer["gcode_macro _gcodeproc_vars"].gcodeproc_verb_error %}
M118 >>> _SetDynamicSpdRate|UNKNOWN MESH: {params.MESH|string|lower} <<<
{% endif %}
M300 S200 P50
{% endif %}
{% if this2.matches > 1 %}
{% if printer["gcode_macro _gcodeproc_vars"].gcodeproc_verb_error %}
M118 >>> _SetDynamicSpdRate|Multiple matches on MESH: {params.MESH|string|lower} - matched {this2.matches} times <<<
{% endif %}
M300 S200 P50
{% endif %}
{% if printer["gcode_macro _gcodeproc_vars"].gcodeproc_verb_codeflow %}  M118 >>> _SetDynamicSpdRate End <<< {% endif %}
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_SetDynamicSpdRate {% endif %}
printer.configfile.settings['gcode_macro _setdynamicspdrate'].variable_mesh_name : ["Unknown",	"Perimeter",	"External perimeter",	"Overhang perimeter",	"Internal infill",	"Solid infill",	"Top solid infill",	"Ironing",	"Bridge infill",	"Gap fill",		"Skirt/Brim",	"Support material",	"Support material interface",	"Wipe tower",	"Custom",	"Mixed"		]
printer.configfile.settings['gcode_macro _setdynamicspdrate'].description : Used to set klipper's Speed Rate Multiplier based on specific mesh types passed in gcode
printer.configfile.settings['gcode_macro _setdynamicspdrate'].variable_mesh_spdrate : [1.0,			1.0,			1.0,						1.0,					1.0,			1.0,			1.0,				1.0,		1.0,				1.0,			1.0,			1.0,				1.0,							1.0,			1.0,		1.0	]
printer.configfile.settings['thermistor mhz_b3950'].resistance2 : 1366.2
printer.configfile.settings['thermistor mhz_b3950'].resistance3 : 168.6
printer.configfile.settings['thermistor mhz_b3950'].resistance1 : 103180.0
printer.configfile.settings['thermistor mhz_b3950'].temperature2 : 150.0
printer.configfile.settings['thermistor mhz_b3950'].temperature3 : 250.0
printer.configfile.settings['thermistor mhz_b3950'].temperature1 : 25.0
printer.configfile.settings['gcode_macro ercf_unload'].rename_existing : _ERCF_UNLOAD_STOCK
printer.configfile.settings['gcode_macro ercf_unload'].description : wrapper for ERCF.py fw proc to handle error conditions, verbosity, and adds a dwell
printer.configfile.settings['gcode_macro ercf_unload'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_UNLOAD func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_UNLOAD Start ... {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.ercf_err_flag %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 > ERCF_UNLOAD Skipped - an error condition is asserted < {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_loadunload %} M118 ^^^ ERCF_UNLOAD {rawparams} {% endif %}
_ERCF_UNLOAD_STOCK {rawparams}
_load_unload_dwell
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_UNLOAD End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_UNLOAD {% endif %}
printer.configfile.settings['delayed_gcode _ercf_temp_ind_check_cycle'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_temp_ind_check_cycle func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ercf_temp_ind_check_cycle Start ... {% endif %}
{% if printer.extruder.target|int != printer.extruder.temperature|int %}
_set_HE_heating_indication
UPDATE_DELAYED_GCODE ID=_ercf_temp_ind_check_cycle DURATION=3
{% else %}
UPDATE_DELAYED_GCODE ID=_ercf_temp_ind_check_cycle DURATION=0
_clear_HE_heating_indication
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ercf_temp_ind_check_cycle End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ercf_temp_ind_check_cycle {% endif %}
printer.configfile.settings['delayed_gcode _ercf_temp_ind_check_cycle'].initial_duration : 0.0
printer.configfile.settings['gcode_macro ercf_select_tool'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_SELECT_TOOL func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_SELECT_TOOL Start ... {% endif %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_SELECT_TOOL | _ERCF_PAUSE.is_paused = 0 <<< {% endif %}
{% if printer["gcode_macro ERCF_HOME"].home != -1 %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Select Tool {params.TOOL} ... {% endif %}
_ERCF_SERVO_UP
MANUAL_STEPPER STEPPER=selector_stepper MOVE={printer["gcode_macro _ERCF_VAR"].colorselector[params.TOOL|int]}
SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=tool_selected VALUE={params.TOOL}
SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=color_selected VALUE={params.TOOL}
_ERCF_SERVO_DOWN
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Tool {params.TOOL} Enabled {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Could not select tool, ERCF is not homed {% endif %}
{% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_SELECT_TOOL | Could not select tool, _ERCF_PAUSE.is_paused = 1 <<< {% endif %}
_alert_ercf_is_paused
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_SELECT_TOOL End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_SELECT_TOOL {% endif %}
printer.configfile.settings['gcode_macro ercf_select_tool'].variable_color_selected : -1
printer.configfile.settings['gcode_macro ercf_select_tool'].variable_tool_selected : -1
printer.configfile.settings['gcode_macro ercf_select_tool'].description : Raise servo, move the selector to params.TOOL, Lower servo, save color_/tool_selected
printer.configfile.settings['gcode_macro ercf_is_filament_in_extruder'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_IS_FILAMENT_IN_EXTRUDER func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_IS_FILAMENT_IN_EXTRUDER Start ... {% endif %}
{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Filament is in extruder {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Filament not in extruder {% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=1
_ERCF_PAUSE
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_IS_FILAMENT_IN_EXTRUDER End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_IS_FILAMENT_IN_EXTRUDER {% endif %}
printer.configfile.settings['gcode_macro ercf_is_filament_in_extruder'].description : G-Code macro
printer.configfile.settings['gcode_macro _gear_move_dwell'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_gear_move_dwell func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _gear_move_dwell Start ... {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_motors %} M118 >>> _gear_move_dwell {printer["gcode_macro _ERCF_VAR"].ercf_gear_move_dwell|int}mS <<< {% endif %}
G4 P{printer["gcode_macro _ERCF_VAR"].ercf_gear_move_dwell|int}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _gear_move_dwell End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_gear_move_dwell {% endif %}
printer.configfile.settings['gcode_macro _gear_move_dwell'].description : impute a dwell time to allow for the stepper movement to complete
printer.configfile.settings['gcode_macro lcdlts_red'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=LcdLts_Red {% endif %}
{% set svv = printer.save_variables.variables %}
{% if svv.module_ledeff_loaded %}
M118 ___ LED Effects Module Loaded, neopixel commands are overridden, use _set_ledeff_mode macro ___
{% else %}
SET_LED LED=lcd_lights RED=0.5 GREEN=0 BLUE=0
{% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=LcdLts_Red {% endif %}
printer.configfile.settings['gcode_macro lcdlts_red'].description : G-Code macro
printer.configfile.settings['gcode_macro start_pause_alarm'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=start_pause_alarm func_params='"{rawparams|string}"'  {% endif %}
UPDATE_DELAYED_GCODE ID=pause_alarm DURATION=1
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=start_pause_alarm {% endif %}
printer.configfile.settings['gcode_macro start_pause_alarm'].description : G-Code macro
printer.configfile.settings['delayed_gcode _debug_module_start'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_debug_module_start func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _debug_module_start Start <<< {% endif %}
SAVE_VARIABLE VARIABLE=module_debug_loaded VALUE=1
SAVE_VARIABLE VARIABLE=debug_err_flag VALUE=0
{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _debug_module_start End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_debug_module_start {% endif %}
printer.configfile.settings['delayed_gcode _debug_module_start'].initial_duration : 0.5
printer.configfile.settings['gcode_macro th_filsw_prs'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=TH_filsw_prs {% endif %}
M118 TH_filsw_prs
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=TH_filsw_prs {% endif %}
printer.configfile.settings['gcode_macro th_filsw_prs'].description : called when the th fil sw toggles closed
printer.configfile.settings['gcode_macro idleled_on'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=IdleLED_On func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> IdleLED_On <<< {% endif %}
_IdleLED_On
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=IdleLED_On {% endif %}
printer.configfile.settings['gcode_macro idleled_on'].description : G-Code macro
printer.configfile.settings['gcode_macro save_gcode_state'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=SAVE_GCODE_STATE func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _debug_vars"].gcode_state_debug %} M118 >>>>> SAVE_GCODE_STATE {rawparams} <<<<< {% endif %}
save_variable VARIABLE=last_saved_gcode_state VALUE='"{params.NAME}"'
_SAVE_GCODE_STATE_STOCK {rawparams}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=SAVE_GCODE_STATE {% endif %}
printer.configfile.settings['gcode_macro save_gcode_state'].description : for debug purposes, and to ease resume pains...
printer.configfile.settings['gcode_macro save_gcode_state'].rename_existing : _SAVE_GCODE_STATE_STOCK
printer.configfile.settings['gcode_macro probe_z_accuracy'].variable_entryexit_zrate : 900
printer.configfile.settings['gcode_macro probe_z_accuracy'].rename_existing : _PROBE_Z_ACCURACY_STOCK
printer.configfile.settings['gcode_macro probe_z_accuracy'].variable_entryexit_z : 15
printer.configfile.settings['gcode_macro probe_z_accuracy'].description : adapts an undocumented FW routine to test z_endstop accuracy
printer.configfile.settings['gcode_macro probe_z_accuracy'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PROBE_Z_ACCURACY func_params='"{rawparams|string}"'  {% endif %}
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"pza'g"'
{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> pza'g <<< {% endif %}
_ENSURE_QGL
M117 PROBE_Z_ACCURACY
G0 Z{entryexit_z} F{entryexit_zrate}
_PROBE_Z_ACCURACY_STOCK {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
G0 Z{entryexit_z} F{entryexit_zrate}
M117
SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"pza'd"'
{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>>  PZA'd <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PROBE_Z_ACCURACY {% endif %}
printer.configfile.settings['gcode_macro ercf_test_load_seq'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_TEST_LOAD_SEQ func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_TEST_LOAD_SEQ Start ... {% endif %}
save_variable VARIABLE=ercf_err_flag VALUE=0
_ercf_park_n_home
ERCF_TEST_LOAD_SEQUENCE {rawparams}
ercf_move_cart C=0
save_variable VARIABLE=ercf_err_flag VALUE=0
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_TEST_LOAD_SEQ End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_TEST_LOAD_SEQ {% endif %}
printer.configfile.settings['gcode_macro ercf_test_load_seq'].description : wrapper code for ERCF_TEST_LOAD_SEQUENCE - homes at start, homes at end
printer.configfile.settings['gcode_macro disable_steppers'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=disable_steppers func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> disable_steppers <<< {% endif %}
SAVE_VARIABLE VARIABLE=z_axis_cal VALUE=0
SAVE_VARIABLE VARIABLE=ercf_selector_homed VALUE=0
SAVE_VARIABLE VARIABLE=maxz VALUE=0.0
M18
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=disable_steppers {% endif %}
printer.configfile.settings['gcode_macro disable_steppers'].description : Disable Stepper Motors
printer.configfile.settings['gcode_shell_command backup_configs'].command : sh /home/pi/klipper_config/config_push.sh
printer.configfile.settings['gcode_shell_command backup_configs'].verbose : False
printer.configfile.settings['gcode_shell_command backup_configs'].timeout : 600.0
printer.configfile.settings['gcode_macro ercf_load_filament_in_extruder'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_LOAD_FILAMENT_IN_EXTRUDER func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_LOAD_FILAMENT_IN_EXTRUDER Start ... {% endif %}
{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
{% if printer.extruder.temperature >= printer["gcode_macro _ERCF_VAR"].min_temp_extruder %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Loading Filament... {% endif %}
_ercf_syncd_th_load_unload MODIFIER=-7
_extruder_move_dwell
ERCF_HOME_EXTRUDER TOTAL_LENGTH=30.0 STEP_LENGTH=0.5
_ERCF_UNSELECT_TOOL FORCED=0
ERCF_FINALIZE_LOAD LENGTH={printer["gcode_macro _ERCF_VAR"].sensor_to_nozzle|float}
_reset_extruder
go_absolute
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Load Complete {% endif %}
{% else %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Extruder too cold {% endif %}
_ERCF_PAUSE
{% endif %}
{% else %}
_alert_ercf_is_paused
{% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_LOAD_FILAMENT_IN_EXTRUDER End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_LOAD_FILAMENT_IN_EXTRUDER {% endif %}
printer.configfile.settings['gcode_macro ercf_load_filament_in_extruder'].description : Load filament from the toolhead entrance to the nozzle
printer.configfile.settings['gcode_macro _probe_variables'].description : G-Code macro
printer.configfile.settings['gcode_macro _probe_variables'].variable_z_endstop_x : 0
printer.configfile.settings['gcode_macro _probe_variables'].gcode : 
printer.configfile.settings['gcode_macro _probe_variables'].variable_z_endstop_y : 0
printer.configfile.settings['gcode_macro _probe_variables'].variable_probe_attached : False
printer.configfile.settings['gcode_macro _probe_variables'].variable_probe_lock : False
printer.configfile.settings['gcode_macro _probe_variables'].variable_probe_state : False
printer.configfile.settings['gcode_macro _ercf_wait_he_temp'].gcode : 
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_wait_he_temp func_params='"{rawparams|string}"'  {% endif %}
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ercf_wait_he_temp Start ... {% endif %}
_set_HE_heating_indication
M109 S{params.TEMP|int}
_clear_HE_heating_indication
{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ercf_wait_he_temp End <<< {% endif %}
{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ercf_wait_he_temp {% endif %}
printer.configfile.settings['gcode_macro _ercf_wait_he_temp'].description : set he temp to passed TEMP (int) parameter and wait
printer.configfile.settings['bed_mesh 120_magprobe'].tension : 0.2
printer.configfile.settings['bed_mesh 120_magprobe'].min_x : 40.0
printer.configfile.settings['bed_mesh 120_magprobe'].min_y : 40.0
printer.configfile.settings['bed_mesh 120_magprobe'].y_count : 5
printer.configfile.settings['bed_mesh 120_magprobe'].mesh_y_pps : 2
printer.configfile.settings['bed_mesh 120_magprobe'].x_count : 5
printer.configfile.settings['bed_mesh 120_magprobe'].points : ((0.072344, 0.080781, 0.059531, 0.05, 0.092656), (-0.000312, 0.005313, -0.015156, -0.017969, 0.021406), (0.018281, 0.020781, 0.0, -0.006719, 0.027656), (0.023594, 0.035469, 0.021562, 0.000156, 0.040625), (0.098594, 0.130625, 0.104375, 0.088594, 0.120937))
printer.configfile.settings['bed_mesh 120_magprobe'].algo : bicubic
printer.configfile.settings['bed_mesh 120_magprobe'].mesh_x_pps : 2
printer.configfile.settings['bed_mesh 120_magprobe'].version : 1
printer.configfile.settings['bed_mesh 120_magprobe'].max_x : 330.0
printer.configfile.settings['bed_mesh 120_magprobe'].max_y : 330.0
printer.configfile.save_config_pending : False
printer.mcu
printer.mcu.mcu_build_versions : gcc: (15:9-2019-q4-0ubuntu1) 9.2.1 20191025 (release) [ARM/arm-9-branch revision 277599] binutils: (2.34-4ubuntu1+13ubuntu1) 2.34
printer.mcu.mcu_version : v0.10.0-184-gdd714fc7
printer.mcu.last_stats.retransmit_seq : 0
printer.mcu.last_stats.receive_seq : 406
printer.mcu.last_stats.send_seq : 406
printer.mcu.last_stats.bytes_invalid : 0
printer.mcu.last_stats.rto : 0.025
printer.mcu.last_stats.ready_bytes : 0
printer.mcu.last_stats.srtt : 0.0
printer.mcu.last_stats.stalled_bytes : 0
printer.mcu.last_stats.bytes_write : 9619
printer.mcu.last_stats.mcu_awake : 0.002
printer.mcu.last_stats.mcu_task_avg : 8e-06
printer.mcu.last_stats.rttvar : 0.0
printer.mcu.last_stats.mcu_task_stddev : 1.7e-05
printer.mcu.last_stats.freq : 180004561
printer.mcu.last_stats.bytes_retransmit : 0
printer.mcu.last_stats.bytes_read : 13044
printer.mcu.mcu_constants.BUS_PINS_i2c1 : PB6,PB7
printer.mcu.mcu_constants.BUS_PINS_i2c2 : PB10,PB11
printer.mcu.mcu_constants.BUS_PINS_spi3a : PC11,PC12,PC10
printer.mcu.mcu_constants.PWM_MAX : 255
printer.mcu.mcu_constants.BUS_PINS_spi2a : PC2,PC3,PB10
printer.mcu.mcu_constants.BUS_PINS_i2c1a : PB8,PB9
printer.mcu.mcu_constants.RESERVE_PINS_crystal : PH0,PH1
printer.mcu.mcu_constants.STEPPER_BOTH_EDGE : 1
printer.mcu.mcu_constants.ADC_MAX : 4095
printer.mcu.mcu_constants.BUS_PINS_spi4 : PE13,PE14,PE12
printer.mcu.mcu_constants.RESERVE_PINS_USB : PA11,PA12
printer.mcu.mcu_constants.CLOCK_FREQ : 180000000
printer.mcu.mcu_constants.BUS_PINS_spi1 : PA6,PA7,PA5
printer.mcu.mcu_constants.BUS_PINS_spi3 : PB4,PB5,PB3
printer.mcu.mcu_constants.MCU : stm32f446xx
printer.mcu.mcu_constants.BUS_PINS_spi2 : PB14,PB15,PB13
printer.mcu.mcu_constants.BUS_PINS_spi1a : PB4,PB5,PB3
printer.mcu.mcu_constants.STATS_SUMSQ_BASE : 256
printer['mcu pico']
printer['mcu pico'].mcu_build_versions : gcc: (15:9-2019-q4-0ubuntu1) 9.2.1 20191025 (release) [ARM/arm-9-branch revision 277599] binutils: (2.34-4ubuntu1+13ubuntu1) 2.34
printer['mcu pico'].mcu_version : v0.10.0-184-gdd714fc7
printer['mcu pico'].last_stats.retransmit_seq : 2
printer['mcu pico'].last_stats.receive_seq : 155
printer['mcu pico'].last_stats.send_seq : 155
printer['mcu pico'].last_stats.bytes_invalid : 0
printer['mcu pico'].last_stats.rto : 0.025
printer['mcu pico'].last_stats.ready_bytes : 0
printer['mcu pico'].last_stats.srtt : 0.0
printer['mcu pico'].last_stats.stalled_bytes : 0
printer['mcu pico'].last_stats.bytes_write : 3346
printer['mcu pico'].last_stats.mcu_awake : 0.001
printer['mcu pico'].last_stats.mcu_task_avg : 5e-06
printer['mcu pico'].last_stats.rttvar : 0.0
printer['mcu pico'].last_stats.mcu_task_stddev : 4e-06
printer['mcu pico'].last_stats.freq : 12000057
printer['mcu pico'].last_stats.bytes_retransmit : 9
printer['mcu pico'].last_stats.adj : 11999734
printer['mcu pico'].last_stats.bytes_read : 6210
printer['mcu pico'].mcu_constants.BUS_PINS_spi0a : gpio0,gpio3,gpio2
printer['mcu pico'].mcu_constants.BUS_PINS_spi0b : gpio4,gpio7,gpio6
printer['mcu pico'].mcu_constants.BUS_PINS_spi0c : gpio16,gpio19,gpio18
printer['mcu pico'].mcu_constants.BUS_PINS_spi0d : gpio20,gpio23,gpio22
printer['mcu pico'].mcu_constants.INITIAL_PINS : gpio2,!gpio3,!gpio12,gpio13
printer['mcu pico'].mcu_constants.STEPPER_BOTH_EDGE : 1
printer['mcu pico'].mcu_constants.ADC_MAX : 4095
printer['mcu pico'].mcu_constants.PWM_MAX : 255
printer['mcu pico'].mcu_constants.CLOCK_FREQ : 12000000
printer['mcu pico'].mcu_constants.MCU : rp2040
printer['mcu pico'].mcu_constants.BUS_PINS_spi1c : gpio24,gpio27,gpio26
printer['mcu pico'].mcu_constants.BUS_PINS_spi1b : gpio12,gpio15,gpio14
printer['mcu pico'].mcu_constants.BUS_PINS_spi1a : gpio8,gpio11,gpio10
printer['mcu pico'].mcu_constants.STATS_SUMSQ_BASE : 256
printer['mcu ercf']
printer['mcu ercf'].mcu_build_versions : gcc: (15:9-2019-q4-0ubuntu1) 9.2.1 20191025 (release) [ARM/arm-9-branch revision 277599] binutils: (2.34-4ubuntu1+13ubuntu1) 2.34
printer['mcu ercf'].mcu_version : v0.10.0-235-gf97fd7c6-dirty-20220126_035429-thow3d
printer['mcu ercf'].last_stats.retransmit_seq : 0
printer['mcu ercf'].last_stats.receive_seq : 157
printer['mcu ercf'].last_stats.send_seq : 157
printer['mcu ercf'].last_stats.bytes_invalid : 0
printer['mcu ercf'].last_stats.rto : 0.025
printer['mcu ercf'].last_stats.ready_bytes : 0
printer['mcu ercf'].last_stats.srtt : 0.0
printer['mcu ercf'].last_stats.stalled_bytes : 0
printer['mcu ercf'].last_stats.bytes_write : 1467
printer['mcu ercf'].last_stats.mcu_awake : 0.044
printer['mcu ercf'].last_stats.mcu_task_avg : 2.8e-05
printer['mcu ercf'].last_stats.rttvar : 0.0
printer['mcu ercf'].last_stats.mcu_task_stddev : 1.9e-05
printer['mcu ercf'].last_stats.freq : 47999968
printer['mcu ercf'].last_stats.bytes_retransmit : 0
printer['mcu ercf'].last_stats.adj : 47998888
printer['mcu ercf'].last_stats.bytes_read : 30212
printer['mcu ercf'].mcu_constants.STEPPER_BOTH_EDGE : 1
printer['mcu ercf'].mcu_constants.ADC_MAX : 4095
printer['mcu ercf'].mcu_constants.PWM_MAX : 255
printer['mcu ercf'].mcu_constants.CLOCK_FREQ : 48000000
printer['mcu ercf'].mcu_constants.RESERVE_PINS_USB : PA24,PA25
printer['mcu ercf'].mcu_constants.MCU : samd21g18a
printer['mcu ercf'].mcu_constants.STATS_SUMSQ_BASE : 256
printer['gcode_macro HOST_SHUTDOWN']
printer['gcode_macro HOST_REBOOT']
printer.idle_timeout
printer.idle_timeout.state : Ready
printer.idle_timeout.printing_time : 0.0
printer['gcode_macro _printer_vars']
printer['gcode_macro _printer_vars'].ptr_verb_info : 0
printer['gcode_macro _printer_vars'].ptr_verb_debug : 0
printer['gcode_macro _printer_vars'].pause_retract_default : 1.0
printer['gcode_macro _printer_vars'].show_proc_exit_details : 1
printer['gcode_macro _printer_vars'].ptr_verb_codeflow : 0
printer['gcode_macro _printer_vars'].ptr_verb_error : 1
printer['gcode_macro _printer_vars'].ptr_verb_status : 0
printer['gcode_macro _printer_vars'].ptr_verb_modload : 0
printer['gcode_macro _printer_vars'].show_proc_exit : 1
printer['gcode_macro _proc_start']
printer['gcode_macro _proc_end']
printer['gcode_macro _enable_trace_debug']
printer['gcode_macro _disable_trace_debug']
printer.gcode_move
printer.gcode_move.homing_origin : Coord(x=0.0, y=0.0, z=0.0, e=0.0)
printer.gcode_move.speed_factor : 1.0
printer.gcode_move.gcode_position : Coord(x=0.0, y=0.0, z=-0.1375, e=0.0)
printer.gcode_move.absolute_extrude : True
printer.gcode_move.absolute_coordinates : True
printer.gcode_move.position : Coord(x=0.0, y=0.0, z=-0.1375, e=0.0)
printer.gcode_move.speed : 1500.0
printer.gcode_move.extrude_factor : 1.0
printer.print_stats
printer.print_stats.print_duration : 0.0
printer.print_stats.total_duration : 0.0
printer.print_stats.filament_used : 0.0
printer.print_stats.filename : 
printer.print_stats.state : standby
printer.print_stats.message : 
printer.virtual_sdcard
printer.virtual_sdcard.progress : 0.0
printer.virtual_sdcard.file_position : 0
printer.virtual_sdcard.is_active : False
printer.virtual_sdcard.file_path : None
printer.virtual_sdcard.file_size : 0
printer.display_status
printer.display_status.progress : 0.0
printer.display_status.message : None
printer['gcode_macro HELLO_WORLD']
printer['gcode_macro reset_noz_cam']
printer.save_variables
printer.save_variables.variables.ercf_selector_homed : 0
printer.save_variables.variables.ercf_calib_11 : 1.01550066403
printer.save_variables.variables.ercf_calib_10 : 1.01550066403
printer.save_variables.variables.final_maxz : 3.35
printer.save_variables.variables.ledeff_err_flag : 0
printer.save_variables.variables.total_toolchanges : 0
printer.save_variables.variables.last_spd_fact : 1.0
printer.save_variables.variables.height : 0.3
printer.save_variables.variables.last_chamber_lights_effect : off
printer.save_variables.variables.scrub_err_flag : 0
printer.save_variables.variables.z_axis_cal : 0
printer.save_variables.variables.module_led_effect_loaded : 1
printer.save_variables.variables.ercf_he_temp_restore_val : 0
printer.save_variables.variables.maxz : 0.0
printer.save_variables.variables.last_dash_lights_effect : off
printer.save_variables.variables.last_layer_chg_msg : L:11/133|62412 | 8.98%: X:146.761 Y:182.187 Z:3.375
printer.save_variables.variables.pause_ercf_error : 1
printer.save_variables.variables.width : 0.6
printer.save_variables.variables.ercf_swaps : 0
printer.save_variables.variables.ercf_calib_3 : 1.01550066403
printer.save_variables.variables.ercf_calib_2 : 1.00495632806
printer.save_variables.variables.ercf_calib_1 : 0.999368802804
printer.save_variables.variables.ercf_calib_0 : 1.0
printer.save_variables.variables.ercf_calib_7 : 1.01550066403
printer.save_variables.variables.ercf_calib_6 : 1.01550066403
printer.save_variables.variables.ercf_calib_5 : 1.01550066403
printer.save_variables.variables.ercf_calib_4 : 1.01550066403
printer.save_variables.variables.ercf_calib_9 : 1.01550066403
printer.save_variables.variables.last_ptr_state : started
printer.save_variables.variables.type : custom
printer.save_variables.variables.debug_err_flag : 0
printer.save_variables.variables.v2_2526_slicer_check : NULL
printer.save_variables.variables.module_klicky_loaded : 1
printer.save_variables.variables.last_restored_gcode_state : pre_homing_override
printer.save_variables.variables.ercf_err_flag : 0
printer.save_variables.variables.klicky_err_flag : 0
printer.save_variables.variables.linadv_err_flag : 0
printer.save_variables.variables.extruder_temp_setting : 0
printer.save_variables.variables.module_ledeff_loaded : 0
printer.save_variables.variables.module_debug_loaded : 1
printer.save_variables.variables.last_ercf_lights_effect : off
printer.save_variables.variables.module_linadv_loaded : 1
printer.save_variables.variables.last_saved_gcode_state : NULL
printer.save_variables.variables.ercf_swaps_last_canx_print : 12
printer.save_variables.variables.gcodeproc_err_flag : 0
printer.save_variables.variables.last_lcd_lights_effect : off
printer.save_variables.variables.ercf_calib_8 : 1.01550066403
printer.save_variables.variables.module_gcodeproc_loaded : 1
printer.save_variables.variables.ercf_calib_ref : 1000.671335
printer.save_variables.variables.ercf_swaps_last_complete_print : 1
printer.save_variables.variables.module_scrub_loaded : 1
printer.save_variables.variables.has_wipe_tower : -1
printer.save_variables.variables.heater_bed_temp_setting : 0
printer.save_variables.variables.proc_depth : 0
printer.save_variables.variables.module_ercf_loaded : 1
printer.save_variables.variables.z : 0.3
printer['output_pin _host_connect_led']
printer['output_pin _host_connect_led'].value : 1.0
printer['output_pin _sw_red_led']
printer['output_pin _sw_red_led'].value : 0.0
printer['output_pin _sw_grn_led']
printer['output_pin _sw_grn_led'].value : 1.0
printer['output_pin _sw_blu_led']
printer['output_pin _sw_blu_led'].value : 0.0
printer['gcode_macro _debug_vars']
printer['gcode_macro _debug_vars'].debug_verb_debug : 0
printer['gcode_macro _debug_vars'].debug_verb_info : 0
printer['gcode_macro _debug_vars'].save_var_debug : 0
printer['gcode_macro _debug_vars'].debug_verb_error : 1
printer['gcode_macro _debug_vars'].gcode_state_debug : 0
printer['gcode_macro _debug_vars'].debug_verb_status : 0
printer['gcode_macro _debug_vars'].debug_verb_codeflow : 0
printer['gcode_macro _debug_vars'].gmove_debug : 0
printer['gcode_macro DUMP_PARAMETER']
printer['gcode_macro SEARCH_VARS']
printer['gcode_macro DUMP_PRINT_AREA_LIMITS']
printer['gcode_macro SAVE_VARIABLE']
printer['gcode_macro G0']
printer['gcode_macro G1']
printer['gcode_macro G4']
printer['gcode_macro M104']
printer['gcode_macro M109']
printer['gcode_macro M140']
printer['gcode_macro M190']
printer['gcode_macro SET_HEATER_TEMPERATURE']
printer['gcode_macro SAVE_GCODE_STATE']
printer['gcode_macro RESTORE_GCODE_STATE']
printer['gcode_macro M122']
printer['gcode_macro _enable_gcode_state_debug']
printer['gcode_macro _disable_gcode_state_debug']
printer['gcode_macro _enable_gmove_debug']
printer['gcode_macro _disable_gmove_debug']
printer['gcode_macro _enable_save_var_debug']
printer['gcode_macro _disable_save_var_debug']
printer['gcode_macro printer_config_backup']
printer['gcode_macro printer_config_restore']
printer['dotstar chamber_lights']
printer['dotstar chamber_lights'].color_data : [(0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0)]
printer['gcode_macro ChLts_Off']
printer['gcode_macro ChLts_Normal']
printer['gcode_macro ChLts_Full']
printer['gcode_macro ChLts_Red']
printer['gcode_macro ChLts_Green']
printer['gcode_macro ChLts_Blue']
printer['gcode_macro ChLts_Orange']
printer['gcode_macro ChLts_Test']
printer['neopixel ercf_lights']
printer['neopixel ercf_lights'].color_data : [(0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0)]
printer['neopixel dash_lights']
printer['neopixel dash_lights'].color_data : [(0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0), (0.0, 0.0, 0.0, 0.0)]
printer['neopixel lcd_lights']
printer['neopixel lcd_lights'].color_data : [(0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0), (0.5, 0.5, 0.5, 0.0)]
printer['gcode_macro ERCFLts_Off']
printer['gcode_macro ERCFLts_Normal']
printer['gcode_macro ERCFLts_Full']
printer['gcode_macro ERCFLts_Red']
printer['gcode_macro ERCFLts_Green']
printer['gcode_macro ERCFLts_Blue']
printer['gcode_macro ERCFLts_Orange']
printer['gcode_macro ERCFLts_Test']
printer['gcode_macro DBLts_Off']
printer['gcode_macro DBLts_Normal']
printer['gcode_macro DBLts_Full']
printer['gcode_macro DBLts_Red']
printer['gcode_macro DBLts_Green']
printer['gcode_macro DBLts_Blue']
printer['gcode_macro DBLts_Orange']
printer['gcode_macro DBLts_Test']
printer['gcode_macro LcdLts_Off']
printer['gcode_macro LcdLts_Normal']
printer['gcode_macro LcdLts_Full']
printer['gcode_macro LcdLts_Red']
printer['gcode_macro LcdLts_Green']
printer['gcode_macro LcdLts_Blue']
printer['gcode_macro LcdLts_Orange']
printer['gcode_macro LcdLts_Test']
printer.motion_report
printer.motion_report.live_position : Coord(x=0.0, y=0.0, z=0.0, e=0.0)
printer.motion_report.steppers : ['extruder', 'manual_stepper gear_stepper', 'manual_stepper selector_stepper', 'stepper_x', 'stepper_y', 'stepper_z', 'stepper_z1', 'stepper_z2', 'stepper_z3']
printer.motion_report.live_velocity : 0.0
printer.motion_report.live_extruder_velocity : 0.0
printer.motion_report.trapq : ['extruder', 'toolhead']
printer.query_endstops
printer['tmc2209 manual_stepper gear_stepper']
printer['tmc2209 manual_stepper gear_stepper'].phase_offset_position : 0.112270375627
printer['tmc2209 manual_stepper gear_stepper'].hold_current : 0.0917878994809
printer['tmc2209 manual_stepper gear_stepper'].drv_status : None
printer['tmc2209 manual_stepper gear_stepper'].mcu_phase_offset : 63
printer['tmc2209 manual_stepper gear_stepper'].run_current : 0.795495128835
printer['tmc2209 manual_stepper selector_stepper']
printer['tmc2209 manual_stepper selector_stepper'].phase_offset_position : 0.7875
printer['tmc2209 manual_stepper selector_stepper'].hold_current : 0.0917878994809
printer['tmc2209 manual_stepper selector_stepper'].drv_status : None
printer['tmc2209 manual_stepper selector_stepper'].mcu_phase_offset : 63
printer['tmc2209 manual_stepper selector_stepper'].run_current : 0.611919329873
printer['servo ercf_servo']
printer['servo ercf_servo'].value : 0.0
printer['filament_motion_sensor encoder_sensor']
printer['filament_motion_sensor encoder_sensor'].filament_detected : True
printer['filament_motion_sensor encoder_sensor'].enabled : True
printer['filament_switch_sensor toolhead_sensor']
printer['filament_switch_sensor toolhead_sensor'].filament_detected : False
printer['filament_switch_sensor toolhead_sensor'].enabled : True
printer['gcode_macro fil_ecdr_prs']
printer['gcode_macro fil_ecdr_rel']
printer['gcode_macro TH_filsw_prs']
printer['gcode_macro TH_filsw_rel']
printer.ercf
printer.ercf.encoder_pos : 0.0
printer['gcode_macro ERCF_CALIB_SELECTOR']
printer['gcode_macro ERCF_CALIBRATE']
printer['gcode_macro ERCF_CALIBRATE_SINGLE']
printer['gcode_macro ERCF_CALIB_SAVE_VAR']
printer['gcode_macro ERCF_CALIB_UNLOAD']
printer['gcode_macro ERCF_CALIB_UNLOAD'].ratio : 0.0
printer['gcode_macro ERCF_CALIB_UNLOAD'].ref : 0.0
printer['gcode_macro _ERCF_SERVO_DOWN']
printer['gcode_macro _ERCF_SERVO_UP']
printer['gcode_macro ERCF_MOTORS_OFF']
printer['gcode_macro _ERCF_PAUSE']
printer['gcode_macro _ERCF_PAUSE'].is_paused : 0
printer['gcode_macro _ERCF_PAUSE'].extruder_temp : 0
printer['gcode_macro ERCF_UNLOCK']
printer['gcode_macro T0']
printer['gcode_macro T1']
printer['gcode_macro T2']
printer['gcode_macro T3']
printer['gcode_macro T4']
printer['gcode_macro T5']
printer['gcode_macro T6']
printer['gcode_macro T7']
printer['gcode_macro T8']
printer['gcode_macro T9']
printer['gcode_macro T10']
printer['gcode_macro T11']
printer['gcode_macro ERCF_CHANGE_TOOL']
printer['gcode_macro ERCF_CHANGE_TOOL'].retract_temp_min : 180
printer['gcode_macro ERCF_CHANGE_TOOL_SLICER']
printer['gcode_macro ERCF_CHANGE_TOOL_STANDALONE']
printer['gcode_macro ERCF_LOAD_TOOL']
printer['gcode_macro ERCF_EJECT']
printer['gcode_macro ERCF_UNLOAD_TOOL']
printer['gcode_macro ERCF_SELECT_TOOL']
printer['gcode_macro ERCF_SELECT_TOOL'].color_selected : -1
printer['gcode_macro ERCF_SELECT_TOOL'].tool_selected : -1
printer['gcode_macro _ERCF_UNSELECT_TOOL']
printer['gcode_macro ERCF_LOAD_FILAMENT_IN_EXTRUDER']
printer['gcode_macro ERCF_FORM_TIP_STANDALONE']
printer['gcode_macro ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING']
printer['gcode_macro ERCF_IS_FILAMENT_IN_EXTRUDER']
printer['gcode_macro ERCF_IS_FILAMENT_STUCK_IN_ERCF']
printer['gcode_macro ERCF_EJECT_UNKNOW_STATE']
printer['gcode_macro ERCF_EJECT_FROM_BOWDEN']
printer['gcode_macro ERCF_HOME']
printer['gcode_macro ERCF_HOME'].home : -1
printer['gcode_macro ERCF_HOME_SELECTOR']
printer['gcode_macro ERCF_HOME_ONLY']
printer['gcode_macro ERCF_DISPLAY_ENCODER_POS']
printer['gcode_macro ERCF_TEST_MOVE_GEAR']
printer['gcode_macro ERCF_TEST_SERVO']
printer['gcode_macro ERCF_TEST_GRIP']
printer['gcode_macro ERCF_TEST_LOAD_SEQUENCE']
printer['gcode_macro ERCF_ENCODER_MOTION_ISSUE']
printer['gcode_macro ERCF_CLOG_OR_RUNOUT']
printer['gcode_macro ERCF_CHECK_IF_RESUME']
printer['gcode_macro _ERCF_VAR']
printer['gcode_macro _ERCF_VAR'].servo_down_angle : 80
printer['gcode_macro _ERCF_VAR'].sync_feedrate : 1500
printer['gcode_macro _ERCF_VAR'].timeout_pause : 72000
printer['gcode_macro _ERCF_VAR'].ercf_cart_unload_length : 68
printer['gcode_macro _ERCF_VAR'].servo_up_angle : 30
printer['gcode_macro _ERCF_VAR'].test_ercf_load_seq_at_print : 0
printer['gcode_macro _ERCF_VAR'].ercf_eject_unknow_state_len_mod : 50
printer['gcode_macro _ERCF_VAR'].ercf_verb_debug : 0
printer['gcode_macro _ERCF_VAR'].ercf_verb_codeflow : 0
printer['gcode_macro _ERCF_VAR'].unload_modifier : 9.0
printer['gcode_macro _ERCF_VAR'].sync_speed : 25
printer['gcode_macro _ERCF_VAR'].ercf_cart_load_length : 45
printer['gcode_macro _ERCF_VAR'].clog_detection : 0
printer['gcode_macro _ERCF_VAR'].ercf_verb_loadunload : 0
printer['gcode_macro _ERCF_VAR'].ercf_verb_error : 1
printer['gcode_macro _ERCF_VAR'].end_of_bowden_to_sensor : 47
printer['gcode_macro _ERCF_VAR'].disable_heater : 600
printer['gcode_macro _ERCF_VAR'].sync_accel : 0
printer['gcode_macro _ERCF_VAR'].ercf_verb_info : 0
printer['gcode_macro _ERCF_VAR'].ercf_test_load_seq_len : 100
printer['gcode_macro _ERCF_VAR'].ercf_extruder_move_dwell : 100
printer['gcode_macro _ERCF_VAR'].min_temp_extruder : 180
printer['gcode_macro _ERCF_VAR'].extruder_eject_temp : 240
printer['gcode_macro _ERCF_VAR'].ercf_th_load_len_mod : 0
printer['gcode_macro _ERCF_VAR'].home_ercf_at_boot : 0
printer['gcode_macro _ERCF_VAR'].ercf_load_unload_dwell : 50
printer['gcode_macro _ERCF_VAR'].ercf_cart_move_dwell : 100
printer['gcode_macro _ERCF_VAR'].ercf_dual_unload_mod : 20
printer['gcode_macro _ERCF_VAR'].colorselector : [2.0, 23.0, 44.15, 70.5, 91.5, 112.0, 138.6, 159.5, 180.0, 206.5, 227.5, 248.5]
printer['gcode_macro _ERCF_VAR'].min_bowden_length : 945.0
printer['gcode_macro _ERCF_VAR'].sensor_to_nozzle : 41.5
printer['gcode_macro _ERCF_VAR'].ercf_servo_move_dwell : 200
printer['gcode_macro _ERCF_VAR'].ercf_gear_move_dwell : 100
printer['gcode_macro _ERCF_VAR'].ercf_verb_motors : 0
printer['gcode_macro _ERCF_VAR'].ercf_verb_status : 0
printer['gcode_macro _ERCF_VAR'].endless_spool_mode : 0
printer['gcode_macro _ERCF_VAR'].test_ercf_load_seq_at_boot : 0
printer['gcode_macro _servo_move_dwell']
printer['gcode_macro _cart_move_dwell']
printer['gcode_macro _gear_move_dwell']
printer['gcode_macro _extruder_move_dwell']
printer['gcode_macro _load_unload_dwell']
printer['gcode_macro _ercf_ptr_startup']
printer['gcode_macro _ercf_park_n_home']
printer['gcode_macro _set_HE_heating_indication']
printer['gcode_macro _clear_HE_heating_indication']
printer['gcode_macro _alert_ercf_is_paused']
printer['gcode_macro ercf_move_cart']
printer['gcode_macro ERCF_SELECT_TOOL_dbg']
printer['gcode_macro ERCF_TEST_LOAD_SEQ']
printer['gcode_macro ERCF_LOAD']
printer['gcode_macro ERCF_UNLOAD']
printer['gcode_macro ERCF_BUZZ_GEAR_MOTOR']
printer['gcode_macro ERCF_HOME_EXTRUDER']
printer['gcode_macro ERCF_CALIBRATE_ENCODER']
printer['gcode_macro ERCF_RESET_ENCODER_COUNTS']
printer['gcode_macro ERCF_SET_STEPS']
printer['gcode_macro ERCF_GET_SELECTOR_POS']
printer['gcode_macro ERCF_MOVE_SELECTOR']
printer['gcode_macro ERCF_ENDLESSSPOOL_UNLOAD']
printer['gcode_macro ERCF_FINALIZE_LOAD']
printer['gcode_macro MANUAL_STEPPER']
printer['gcode_macro SET_SERVO']
printer['gcode_macro _ercf_set_eject_temp']
printer['gcode_macro _ercf_restore_he_temp']
printer['gcode_macro _ercf_wait_he_temp']
printer['gcode_macro _ercf_start_he_temp']
printer['gcode_macro _ercf_start_Cold_temp']
printer['gcode_macro _ercf_syncd_th_load_unload']
printer['gcode_macro ERCF_TEST_LOAD_CART']
printer['gcode_macro ERCF_SERVO_DOWN']
printer['gcode_macro ERCF_SERVO_UP']
printer['gcode_macro _scrub_vars']
printer['gcode_macro _scrub_vars'].scrub_verb_debug : 0
printer['gcode_macro _scrub_vars'].scrub_verb_codeflow : 0
printer['gcode_macro _scrub_vars'].scrub_verb_info : 0
printer['gcode_macro _scrub_vars'].scrub_err_flag : 0
printer['gcode_macro _scrub_vars'].scrub_verb_status : 0
printer['gcode_macro _scrub_vars'].scrub_verb_error : 1
printer['gcode_macro clean_nozzle']
printer['gcode_macro clean_nozzle'].purge_len : 10
printer['gcode_macro clean_nozzle'].verbose : False
printer['gcode_macro clean_nozzle'].bucket_start : 0
printer['gcode_macro clean_nozzle'].clearance_z : 5
printer['gcode_macro clean_nozzle'].prep_spd_xy : 15000
printer['gcode_macro clean_nozzle'].brush_top : 4
printer['gcode_macro clean_nozzle'].bucket_pos : 1
printer['gcode_macro clean_nozzle'].prep_spd_z : 3000
printer['gcode_macro clean_nozzle'].brush_start : 84
printer['gcode_macro clean_nozzle'].wipe_qty : 3
printer['gcode_macro clean_nozzle'].enable_purge : False
printer['gcode_macro clean_nozzle'].wipe_spd_xy : 15000
printer['gcode_macro clean_nozzle'].purge_temp_min : 180
printer['gcode_macro clean_nozzle'].purge_spd : 150
printer['gcode_macro clean_nozzle'].bucket_left_width : 92
printer['gcode_macro clean_nozzle'].brush_front : 0
printer['gcode_macro clean_nozzle'].ooze_dwell : 2
printer['gcode_macro clean_nozzle'].purge_ret : 2
printer['gcode_macro clean_nozzle'].location_bucket_rear : True
printer['gcode_macro clean_nozzle'].bucket_right_width : 40
printer['gcode_macro clean_nozzle'].brush_depth : 0
printer['gcode_macro clean_nozzle'].brush_width : 34
printer['gcode_macro clean_nozzle'].bucket_gap : 22
printer['tmc2209 stepper_x']
printer['tmc2209 stepper_x'].phase_offset_position : 0.38125
printer['tmc2209 stepper_x'].hold_current : 1.41421356237
printer['tmc2209 stepper_x'].drv_status : None
printer['tmc2209 stepper_x'].mcu_phase_offset : 61
printer['tmc2209 stepper_x'].run_current : 1.41421356237
printer['tmc2209 stepper_y']
printer['tmc2209 stepper_y'].phase_offset_position : 0.38125
printer['tmc2209 stepper_y'].hold_current : 1.41421356237
printer['tmc2209 stepper_y'].drv_status : None
printer['tmc2209 stepper_y'].mcu_phase_offset : 61
printer['tmc2209 stepper_y'].run_current : 1.41421356237
printer['tmc2209 stepper_z']
printer['tmc2209 stepper_z'].phase_offset_position : 0.1525
printer['tmc2209 stepper_z'].hold_current : 0.815892439831
printer['tmc2209 stepper_z'].drv_status : None
printer['tmc2209 stepper_z'].mcu_phase_offset : 61
printer['tmc2209 stepper_z'].run_current : 1.19664224508
printer['tmc2209 stepper_z1']
printer['tmc2209 stepper_z1'].phase_offset_position : 0.0075
printer['tmc2209 stepper_z1'].hold_current : 0.815892439831
printer['tmc2209 stepper_z1'].drv_status : None
printer['tmc2209 stepper_z1'].mcu_phase_offset : 3
printer['tmc2209 stepper_z1'].run_current : 1.19664224508
printer['tmc2209 stepper_z2']
printer['tmc2209 stepper_z2'].phase_offset_position : 0.1575
printer['tmc2209 stepper_z2'].hold_current : 0.815892439831
printer['tmc2209 stepper_z2'].drv_status : None
printer['tmc2209 stepper_z2'].mcu_phase_offset : 63
printer['tmc2209 stepper_z2'].run_current : 1.19664224508
printer['tmc2209 stepper_z3']
printer['tmc2209 stepper_z3'].phase_offset_position : 0.0025
printer['tmc2209 stepper_z3'].hold_current : 0.815892439831
printer['tmc2209 stepper_z3'].drv_status : None
printer['tmc2209 stepper_z3'].mcu_phase_offset : 1
printer['tmc2209 stepper_z3'].run_current : 1.19664224508
printer['tmc2209 extruder']
printer['tmc2209 extruder'].phase_offset_position : 0.0897909394922
printer['tmc2209 extruder'].hold_current : 0.0611919329873
printer['tmc2209 extruder'].drv_status : None
printer['tmc2209 extruder'].mcu_phase_offset : 63
printer['tmc2209 extruder'].run_current : 0.856687061822
printer.menu
printer.menu.running : False
printer.menu.rows : 4
printer.menu.cols : 16
printer.menu.timeout : 0
printer.heaters
printer.heaters.available_sensors : ['temperature_sensor Hotend_H2O', 'temperature_sensor Host', 'heater_bed', 'temperature_fan MCU_Fan', 'temperature_fan PS_Fan', 'temperature_fan Chamber', 'temperature_fan Exhaust', 'extruder']
printer.heaters.available_heaters : ['heater_bed', 'extruder']
printer['temperature_sensor Hotend_H2O']
printer['temperature_sensor Hotend_H2O'].measured_min_temp : 24.31
printer['temperature_sensor Hotend_H2O'].measured_max_temp : 25.36
printer['temperature_sensor Hotend_H2O'].temperature : 24.98
printer['temperature_host Host']
printer['temperature_host Host'].temperature : 42.0
printer['temperature_sensor Host']
printer['temperature_sensor Host'].measured_min_temp : 42.0
printer['temperature_sensor Host'].measured_max_temp : 43.0
printer['temperature_sensor Host'].temperature : 42.0
printer.probe
printer.probe.last_z_result : 0.0
printer.probe.last_query : False
printer.heater_bed
printer.heater_bed.temperature : 27.27
printer.heater_bed.power : 0.0
printer.heater_bed.target : 0.0
printer.fan
printer.fan.speed : 0.101960784314
printer.fan.rpm : None
printer['heater_fan H2O_Pump']
printer['heater_fan H2O_Pump'].speed : 0.0
printer['heater_fan H2O_Pump'].rpm : 0.0
printer['heater_fan H2O_Flow']
printer['heater_fan H2O_Flow'].speed : 0.0
printer['heater_fan H2O_Flow'].rpm : 0.0
printer['heater_fan H2O_RadFan']
printer['heater_fan H2O_RadFan'].speed : 0.0
printer['heater_fan H2O_RadFan'].rpm : 0.0
printer['temperature_fan MCU_Fan']
printer['temperature_fan MCU_Fan'].speed : 0.0
printer['temperature_fan MCU_Fan'].rpm : None
printer['temperature_fan MCU_Fan'].temperature : 28.22
printer['temperature_fan MCU_Fan'].target : 40.0
printer['temperature_fan PS_Fan']
printer['temperature_fan PS_Fan'].speed : 0.283423769604
printer['temperature_fan PS_Fan'].rpm : None
printer['temperature_fan PS_Fan'].temperature : 30.77
printer['temperature_fan PS_Fan'].target : 35.0
printer['temperature_fan Chamber']
printer['temperature_fan Chamber'].speed : 0.0
printer['temperature_fan Chamber'].rpm : None
printer['temperature_fan Chamber'].temperature : 24.81
printer['temperature_fan Chamber'].target : 40.0
printer['temperature_fan Exhaust']
printer['temperature_fan Exhaust'].speed : 0.0
printer['temperature_fan Exhaust'].rpm : None
printer['temperature_fan Exhaust'].temperature : 27.42
printer['temperature_fan Exhaust'].target : 60.0
printer['gcode_macro M1170']
printer['gcode_macro M118']
printer['gcode_macro M1181']
printer['gcode_macro testmacro']
printer['gcode_macro wcdaymode']
printer['gcode_macro wcnightmode']
printer['gcode_macro power_on_printer']
printer['gcode_macro power_off_printer']
printer['gcode_macro go_absolute']
printer['gcode_macro go_relative']
printer['gcode_macro Z_Probe_Calibrate']
printer['gcode_macro Z_Calibrate']
printer['gcode_macro Z_EndStop_Accuracy']
printer['gcode_macro Z_Probe_Accuracy']
printer['gcode_macro system_shutdown']
printer['gcode_macro _PrintLED_Off']
printer['gcode_macro _PrintLED_On']
printer['gcode_macro _IdleLED_Off']
printer['gcode_macro _IdleLED_On']
printer['gcode_macro _PwrLED_Off']
printer['gcode_macro _PwrLED_On']
printer['gcode_macro PrintLED_Off']
printer['gcode_macro PrintLED_On']
printer['gcode_macro IdleLED_Off']
printer['gcode_macro IdleLED_On']
printer['gcode_macro PwrLED_Off']
printer['gcode_macro PwrLED_On']
printer['gcode_macro disable_steppers']
printer['gcode_macro _HOURMETER_OFF']
printer['gcode_macro _HOURMETER_ON']
printer['gcode_macro HOURMETER_TOGGLE']
printer['gcode_macro save_conf']
printer['gcode_macro DO_BED_MESH']
printer['gcode_macro DO_BED_MESH'].extruder_temp : 230
printer['gcode_macro DO_BED_MESH'].bed_temp : 60
printer['gcode_macro _ENSURE_HOMED']
printer['gcode_macro _ENSURE_QGL']
printer['gcode_macro M141']
printer['gcode_macro _reset_extruder']
printer['output_pin _hourmeter']
printer['output_pin _hourmeter'].value : 0.0
printer['output_pin _BEEPER_pin']
printer['output_pin _BEEPER_pin'].value : 0.0
printer['output_pin _Alarm_pin']
printer['output_pin _Alarm_pin'].value : 0.0
printer['gcode_macro sng_']
printer['gcode_macro sng_classical']
printer['gcode_macro sng_imperialmarch']
printer['gcode_macro sng_simpons']
printer['gcode_macro sng_reveille']
printer['gcode_macro sng_taps']
printer['gcode_macro sng_badboys']
printer['gcode_macro sng_mch2']
printer['gcode_macro sng_mch']
printer['gcode_macro sng_cena']
printer['gcode_macro sng_scom']
printer['gcode_macro sng_startup']
printer['gcode_macro sng_mario']
printer['gcode_macro sng_empire']
printer['gcode_macro sng_auldlangsyne']
printer['gcode_macro sng_bethovene']
printer['gcode_macro snd_']
printer['gcode_macro snd_PowerOn']
printer['gcode_macro snd_PrintStart']
printer['gcode_macro snd_PrintPause']
printer['gcode_macro snd_PrintEnd']
printer['gcode_macro snd_PrintCancel']
printer['gcode_macro snd_PrintFail']
printer['gcode_macro snd_PrintResume']
printer['gcode_macro snd_MeshStart']
printer['gcode_macro snd_MeshEnd']
printer['gcode_macro snd_MeshFail']
printer['gcode_macro snd_MeshStore']
printer['gcode_macro M300done']
printer['gcode_macro M3001']
printer['gcode_macro M300']
printer['gcode_macro init_gbl_vars']
printer.bed_mesh
printer.bed_mesh.mesh_min : (40.0, 40.0)
printer.bed_mesh.mesh_max : (330.0, 330.0)
printer.bed_mesh.probed_matrix : [[0.1375, 0.09, 0.0825, 0.1225, 0.17], [0.055, 0.04, 0.005, 0.0475, 0.1025], [0.0525, 0.0175, 0.0, 0.0175, 0.09], [0.0825, 0.055, 0.02, 0.02, 0.0725], [0.14, 0.155, 0.1225, 0.105, 0.165]]
printer.bed_mesh.profiles.UberSoaked.points : ((0.1675, 0.12, 0.085, 0.085, 0.155), (0.055, 0.04, -0.01, 0.0375, 0.1025), (0.07, 0.01, 0.0, 0.0275, 0.0775), (0.0825, 0.0825, 0.03, 0.0575, 0.1075), (0.1575, 0.1825, 0.1525, 0.16, 0.2175))
printer.bed_mesh.profiles.UberSoaked.mesh_params.tension : 0.2
printer.bed_mesh.profiles.UberSoaked.mesh_params.mesh_x_pps : 2
printer.bed_mesh.profiles.UberSoaked.mesh_params.algo : bicubic
printer.bed_mesh.profiles.UberSoaked.mesh_params.min_x : 40.0
printer.bed_mesh.profiles.UberSoaked.mesh_params.min_y : 40.0
printer.bed_mesh.profiles.UberSoaked.mesh_params.y_count : 5
printer.bed_mesh.profiles.UberSoaked.mesh_params.mesh_y_pps : 2
printer.bed_mesh.profiles.UberSoaked.mesh_params.x_count : 5
printer.bed_mesh.profiles.UberSoaked.mesh_params.max_x : 330.0
printer.bed_mesh.profiles.UberSoaked.mesh_params.max_y : 330.0
printer.bed_mesh.profiles.HOT_KLICKY.points : ((0.115938, 0.114063, 0.075, 0.093594, 0.175313), (0.0975, 0.040938, -0.007344, 0.026875, 0.090625), (0.040313, 0.01375, 0.0, 0.019687, 0.044062), (0.09875, 0.049687, 0.012812, 0.045, 0.07875), (0.157812, 0.171719, 0.125, 0.133594, 0.200312))
printer.bed_mesh.profiles.HOT_KLICKY.mesh_params.tension : 0.2
printer.bed_mesh.profiles.HOT_KLICKY.mesh_params.mesh_x_pps : 2
printer.bed_mesh.profiles.HOT_KLICKY.mesh_params.algo : bicubic
printer.bed_mesh.profiles.HOT_KLICKY.mesh_params.min_x : 40.0
printer.bed_mesh.profiles.HOT_KLICKY.mesh_params.min_y : 40.0
printer.bed_mesh.profiles.HOT_KLICKY.mesh_params.y_count : 5
printer.bed_mesh.profiles.HOT_KLICKY.mesh_params.mesh_y_pps : 2
printer.bed_mesh.profiles.HOT_KLICKY.mesh_params.x_count : 5
printer.bed_mesh.profiles.HOT_KLICKY.mesh_params.max_x : 330.0
printer.bed_mesh.profiles.HOT_KLICKY.mesh_params.max_y : 330.0
printer.bed_mesh.profiles.default.points : ((0.1375, 0.09, 0.0825, 0.1225, 0.17), (0.055, 0.04, 0.005, 0.0475, 0.1025), (0.0525, 0.0175, 0.0, 0.0175, 0.09), (0.0825, 0.055, 0.02, 0.02, 0.0725), (0.14, 0.155, 0.1225, 0.105, 0.165))
printer.bed_mesh.profiles.default.mesh_params.tension : 0.2
printer.bed_mesh.profiles.default.mesh_params.mesh_x_pps : 2
printer.bed_mesh.profiles.default.mesh_params.algo : bicubic
printer.bed_mesh.profiles.default.mesh_params.min_x : 40.0
printer.bed_mesh.profiles.default.mesh_params.min_y : 40.0
printer.bed_mesh.profiles.default.mesh_params.y_count : 5
printer.bed_mesh.profiles.default.mesh_params.mesh_y_pps : 2
printer.bed_mesh.profiles.default.mesh_params.x_count : 5
printer.bed_mesh.profiles.default.mesh_params.max_x : 330.0
printer.bed_mesh.profiles.default.mesh_params.max_y : 330.0
printer.bed_mesh.profiles.SOAKED.points : ((0.155, 0.1225, 0.1225, 0.1325, 0.2025), (0.0925, 0.0825, 0.035, 0.0375, 0.1125), (0.0975, 0.035, 0.0, 0.035, 0.08), (0.1225, 0.1025, 0.0675, 0.0725, 0.125), (0.215, 0.2075, 0.1575, 0.1625, 0.225))
printer.bed_mesh.profiles.SOAKED.mesh_params.tension : 0.2
printer.bed_mesh.profiles.SOAKED.mesh_params.mesh_x_pps : 2
printer.bed_mesh.profiles.SOAKED.mesh_params.algo : bicubic
printer.bed_mesh.profiles.SOAKED.mesh_params.min_x : 40.0
printer.bed_mesh.profiles.SOAKED.mesh_params.min_y : 40.0
printer.bed_mesh.profiles.SOAKED.mesh_params.y_count : 5
printer.bed_mesh.profiles.SOAKED.mesh_params.mesh_y_pps : 2
printer.bed_mesh.profiles.SOAKED.mesh_params.x_count : 5
printer.bed_mesh.profiles.SOAKED.mesh_params.max_x : 330.0
printer.bed_mesh.profiles.SOAKED.mesh_params.max_y : 330.0
printer.bed_mesh.profiles.110_Klicky_NoSoak.points : ((-0.045, -0.025, 0.0025, -0.045, -0.06), (-0.075, -0.0, -0.01, -0.05, -0.025), (-0.0075, -0.0025, 0.0, 0.0, -0.0225), (-0.0075, 0.0275, 0.04, 0.01, -0.01), (-0.0025, 0.0575, 0.04, -0.015, -0.0225))
printer.bed_mesh.profiles.110_Klicky_NoSoak.mesh_params.tension : 0.2
printer.bed_mesh.profiles.110_Klicky_NoSoak.mesh_params.mesh_x_pps : 2
printer.bed_mesh.profiles.110_Klicky_NoSoak.mesh_params.algo : bicubic
printer.bed_mesh.profiles.110_Klicky_NoSoak.mesh_params.min_x : 40.0
printer.bed_mesh.profiles.110_Klicky_NoSoak.mesh_params.min_y : 40.0
printer.bed_mesh.profiles.110_Klicky_NoSoak.mesh_params.y_count : 5
printer.bed_mesh.profiles.110_Klicky_NoSoak.mesh_params.mesh_y_pps : 2
printer.bed_mesh.profiles.110_Klicky_NoSoak.mesh_params.x_count : 5
printer.bed_mesh.profiles.110_Klicky_NoSoak.mesh_params.max_x : 330.0
printer.bed_mesh.profiles.110_Klicky_NoSoak.mesh_params.max_y : 330.0
printer.bed_mesh.profiles.120_MAGPROBE.points : ((0.072344, 0.080781, 0.059531, 0.05, 0.092656), (-0.000312, 0.005313, -0.015156, -0.017969, 0.021406), (0.018281, 0.020781, 0.0, -0.006719, 0.027656), (0.023594, 0.035469, 0.021562, 0.000156, 0.040625), (0.098594, 0.130625, 0.104375, 0.088594, 0.120937))
printer.bed_mesh.profiles.120_MAGPROBE.mesh_params.tension : 0.2
printer.bed_mesh.profiles.120_MAGPROBE.mesh_params.mesh_x_pps : 2
printer.bed_mesh.profiles.120_MAGPROBE.mesh_params.algo : bicubic
printer.bed_mesh.profiles.120_MAGPROBE.mesh_params.min_x : 40.0
printer.bed_mesh.profiles.120_MAGPROBE.mesh_params.min_y : 40.0
printer.bed_mesh.profiles.120_MAGPROBE.mesh_params.y_count : 5
printer.bed_mesh.profiles.120_MAGPROBE.mesh_params.mesh_y_pps : 2
printer.bed_mesh.profiles.120_MAGPROBE.mesh_params.x_count : 5
printer.bed_mesh.profiles.120_MAGPROBE.mesh_params.max_x : 330.0
printer.bed_mesh.profiles.120_MAGPROBE.mesh_params.max_y : 330.0
printer.bed_mesh.profiles.110_Soaked_Klicky.points : ((0.05, 0.05, 0.0825, 0.08, 0.1175), (-0.0325, 0.03, 0.015, 0.0175, 0.075), (-0.0075, -0.0075, 0.0, 0.035, 0.06), (0.01, 0.04, 0.05, 0.045, 0.07), (0.0525, 0.0925, 0.0775, 0.0525, 0.08))
printer.bed_mesh.profiles.110_Soaked_Klicky.mesh_params.tension : 0.2
printer.bed_mesh.profiles.110_Soaked_Klicky.mesh_params.mesh_x_pps : 2
printer.bed_mesh.profiles.110_Soaked_Klicky.mesh_params.algo : bicubic
printer.bed_mesh.profiles.110_Soaked_Klicky.mesh_params.min_x : 40.0
printer.bed_mesh.profiles.110_Soaked_Klicky.mesh_params.min_y : 40.0
printer.bed_mesh.profiles.110_Soaked_Klicky.mesh_params.y_count : 5
printer.bed_mesh.profiles.110_Soaked_Klicky.mesh_params.mesh_y_pps : 2
printer.bed_mesh.profiles.110_Soaked_Klicky.mesh_params.x_count : 5
printer.bed_mesh.profiles.110_Soaked_Klicky.mesh_params.max_x : 330.0
printer.bed_mesh.profiles.110_Soaked_Klicky.mesh_params.max_y : 330.0
printer.bed_mesh.profiles.COLD_KLICKY.points : ((0.003281, 0.035625, 0.063438, 0.025781, -0.020937), (-0.007344, 0.030469, 0.021719, -0.021094, -0.02), (-0.035156, 0.006406, 0.0, -0.013906, -0.055625), (-0.01375, 0.044375, 0.014375, -0.021875, -0.044375), (-0.032813, 0.016875, -0.002188, -0.035781, -0.03625))
printer.bed_mesh.profiles.COLD_KLICKY.mesh_params.tension : 0.2
printer.bed_mesh.profiles.COLD_KLICKY.mesh_params.mesh_x_pps : 2
printer.bed_mesh.profiles.COLD_KLICKY.mesh_params.algo : bicubic
printer.bed_mesh.profiles.COLD_KLICKY.mesh_params.min_x : 40.0
printer.bed_mesh.profiles.COLD_KLICKY.mesh_params.min_y : 40.0
printer.bed_mesh.profiles.COLD_KLICKY.mesh_params.y_count : 5
printer.bed_mesh.profiles.COLD_KLICKY.mesh_params.mesh_y_pps : 2
printer.bed_mesh.profiles.COLD_KLICKY.mesh_params.x_count : 5
printer.bed_mesh.profiles.COLD_KLICKY.mesh_params.max_x : 330.0
printer.bed_mesh.profiles.COLD_KLICKY.mesh_params.max_y : 330.0
printer.bed_mesh.profiles.NoSoak.points : ((-0.08, -0.0575, -0.07, -0.115, -0.1575), (-0.0725, -0.0275, -0.04, -0.04, -0.0825), (-0.02, -0.0, 0.0, -0.0075, -0.025), (-0.0275, 0.035, 0.01, 0.0075, -0.01), (-0.0525, 0.0375, 0.0325, 0.0025, -0.02))
printer.bed_mesh.profiles.NoSoak.mesh_params.tension : 0.2
printer.bed_mesh.profiles.NoSoak.mesh_params.mesh_x_pps : 2
printer.bed_mesh.profiles.NoSoak.mesh_params.algo : bicubic
printer.bed_mesh.profiles.NoSoak.mesh_params.min_x : 40.0
printer.bed_mesh.profiles.NoSoak.mesh_params.min_y : 40.0
printer.bed_mesh.profiles.NoSoak.mesh_params.y_count : 5
printer.bed_mesh.profiles.NoSoak.mesh_params.mesh_y_pps : 2
printer.bed_mesh.profiles.NoSoak.mesh_params.x_count : 5
printer.bed_mesh.profiles.NoSoak.mesh_params.max_x : 330.0
printer.bed_mesh.profiles.NoSoak.mesh_params.max_y : 330.0
printer.bed_mesh.mesh_matrix : [[0.1375, 0.124593, 0.103241, 0.09, 0.085944, 0.082667, 0.0825, 0.092537, 0.110019, 0.1225, 0.136704, 0.157574, 0.17], [0.114926, 0.104657, 0.087579, 0.07663, 0.070694, 0.063742, 0.061333, 0.071402, 0.089449, 0.102389, 0.117116, 0.138783, 0.151685], [0.077685, 0.07171, 0.061589, 0.05437, 0.04538, 0.032452, 0.026389, 0.036447, 0.055313, 0.068944, 0.084574, 0.107632, 0.12137], [0.055, 0.051407, 0.045148, 0.04, 0.029333, 0.013111, 0.005, 0.014796, 0.033704, 0.0475, 0.063833, 0.088056, 0.1025], [0.051426, 0.046502, 0.038088, 0.031796, 0.022251, 0.00811, 0.001037, 0.009094, 0.024914, 0.037019, 0.054615, 0.081336, 0.097333], [0.051074, 0.043384, 0.030491, 0.021815, 0.014498, 0.004539, -0.00037, 0.004785, 0.015355, 0.024537, 0.044024, 0.074565, 0.092944], [0.0525, 0.043167, 0.027611, 0.0175, 0.011407, 0.003759, 0.0, 0.003204, 0.010296, 0.0175, 0.037889, 0.070389, 0.09], [0.059796, 0.050755, 0.03564, 0.02563, 0.018457, 0.008925, 0.003815, 0.005519, 0.010366, 0.016037, 0.034879, 0.065164, 0.083463], [0.072537, 0.064455, 0.050842, 0.041426, 0.032204, 0.019027, 0.011407, 0.011014, 0.012833, 0.016352, 0.0324, 0.058542, 0.07437], [0.0825, 0.075481, 0.063574, 0.055, 0.044593, 0.029185, 0.02, 0.018185, 0.017926, 0.02, 0.034389, 0.058111, 0.0725], [0.099148, 0.095381, 0.088834, 0.083519, 0.073587, 0.058158, 0.048685, 0.045397, 0.042712, 0.04337, 0.058003, 0.082465, 0.097333], [0.124685, 0.12613, 0.12819, 0.128148, 0.119277, 0.104305, 0.094704, 0.089306, 0.08309, 0.081741, 0.097157, 0.123397, 0.139389], [0.14, 0.144593, 0.151852, 0.155, 0.146796, 0.132148, 0.1225, 0.115852, 0.107537, 0.105, 0.120926, 0.148296, 0.165]]
printer.bed_mesh.profile_name : default
printer.quad_gantry_level
printer.quad_gantry_level.applied : False
printer['gcode_macro _klicky_vars']
printer['gcode_macro _klicky_vars'].klicky_verb_codeflow : 0
printer['gcode_macro _klicky_vars'].klicky_verb_info : 0
printer['gcode_macro _klicky_vars'].klicky_verb_debug : 0
printer['gcode_macro _klicky_vars'].klicky_verb_status : 0
printer['gcode_macro _klicky_vars'].klicky_verb_error : 1
printer['gcode_macro _User_Variables']
printer['gcode_macro _User_Variables'].verbose : False
printer['gcode_macro _User_Variables'].umbilical_x : 15
printer['gcode_macro _User_Variables'].umbilical_y : 15
printer['gcode_macro _User_Variables'].z_drop_speed : 5
printer['gcode_macro _User_Variables'].z_endstop_x : 231.3
printer['gcode_macro _User_Variables'].z_endstop_y : 349.0
printer['gcode_macro _User_Variables'].safe_z : 15
printer['gcode_macro _User_Variables'].xydock_speed : 50
printer['gcode_macro _User_Variables'].docklocation_y : 350.0
printer['gcode_macro _User_Variables'].docklocation_x : 319.0
printer['gcode_macro _User_Variables'].enable_z_hop : True
printer['gcode_macro _User_Variables'].xytravel_speed : 250
printer['gcode_macro _User_Variables'].park_toolhead : False
printer['gcode_macro _User_Variables'].ztravel_speed : 50
printer['gcode_macro _User_Variables'].zdock_speed : 5
printer['gcode_macro _User_Variables'].max_bed_x : 350.0
printer['gcode_macro _User_Variables'].max_bed_y : 350.0
printer['gcode_macro _User_Variables'].dockmove_y : 0
printer['gcode_macro _User_Variables'].dockmove_x : -88
printer['gcode_macro _User_Variables'].dockmove_z : 0
printer['gcode_macro _User_Variables'].umbilical : False
printer['gcode_macro _User_Variables'].xyrelease_speed : 75
printer['gcode_macro _User_Variables'].attachmove_y : 30
printer['gcode_macro _User_Variables'].attachmove_x : 0
printer['gcode_macro _User_Variables'].attachmove_z : 0
printer['gcode_macro _User_Variables'].parkposition_z : 15
printer['gcode_macro _User_Variables'].parkposition_x : 175
printer['gcode_macro _User_Variables'].parkposition_y : 350
printer['gcode_macro _User_Variables'].docklocation_z : -128
printer['gcode_macro _User_Variables'].zrelease_speed : 5
printer['gcode_macro _User_Variables'].version : 1
printer['gcode_macro _Probe_Variables']
printer['gcode_macro _Probe_Variables'].probe_attached : False
printer['gcode_macro _Probe_Variables'].probe_lock : False
printer['gcode_macro _Probe_Variables'].probe_state : False
printer['gcode_macro _Probe_Variables'].z_endstop_x : 0
printer['gcode_macro _Probe_Variables'].z_endstop_y : 0
printer['gcode_macro _klicky_check_variables_version']
printer['gcode_macro _exit_point']
printer['gcode_macro _entry_point']
printer['gcode_macro _Homing_Variables']
printer['gcode_macro Attach_Probe_Lock']
printer['gcode_macro Dock_Probe_Unlock']
printer['gcode_macro _Probe_Unlock']
printer['gcode_macro _Probe_Lock']
printer['gcode_macro Attach_Probe']
printer['gcode_macro Dock_Probe']
printer['gcode_macro PROBE_CALIBRATE']
printer['gcode_macro PROBE_ACCURACY']
printer['gcode_macro _Umbilical_Path']
printer['gcode_macro _Home_Z']
printer['gcode_macro _CheckProbe']
printer['gcode_macro _CheckProbe'].probe_state : 0
printer['gcode_macro _SetProbeState']
printer['gcode_macro _Park_Toolhead']
printer['gcode_macro BED_MESH_CALIBRATE']
printer['gcode_macro QUAD_GANTRY_LEVEL']
printer['gcode_macro PROBE_Z_ACCURACY']
printer['gcode_macro PROBE_Z_ACCURACY'].entryexit_z : 15
printer['gcode_macro PROBE_Z_ACCURACY'].entryexit_zrate : 900
printer.z_calibration
printer.z_calibration.last_query : False
printer.z_calibration.last_z_offset : 0.0
printer['gcode_macro CALIBRATE_Z']
printer['gcode_macro CALIBRATE_Z'].entryexit_z : 15
printer['gcode_macro CALIBRATE_Z'].entryexit_zfeedrate : 900
printer['gcode_macro _linadv_vars']
printer['gcode_macro _linadv_vars'].linadv_verb_info : 0
printer['gcode_macro _linadv_vars'].linadv_verb_debug : 0
printer['gcode_macro _linadv_vars'].linadv_verb_error : 1
printer['gcode_macro _linadv_vars'].dynamic_pa_enable : 0
printer['gcode_macro _linadv_vars'].linadv_verb_codeflow : 0
printer['gcode_macro _linadv_vars'].linadv_verb_status : 0
printer['gcode_macro M900']
printer['gcode_macro _SetDynamicPA']
printer['gcode_macro _SetDynamicPA'].mesh_smtm : [0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04]
printer['gcode_macro _SetDynamicPA'].mesh_kval : [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
printer['gcode_macro _SetDynamicPA'].mesh_name : ['Unknown', 'Perimeter', 'External perimeter', 'Overhang perimeter', 'Internal infill', 'Solid infill', 'Top solid infill', 'Ironing', 'Bridge infill', 'Gap fill', 'Skirt/Brim', 'Support material', 'Support material interface', 'Wipe tower', 'Custom', 'Mixed']
printer['gcode_macro SET_PRESSURE_ADVANCE']
printer.firmware_retraction
printer.firmware_retraction.retract_length : 0.4
printer.firmware_retraction.unretract_extra_length : 0.0
printer.firmware_retraction.unretract_speed : 22.5
printer.firmware_retraction.retract_speed : 45.0
printer['gcode_macro _park_head']
printer['gcode_macro _gcodeproc_vars']
printer['gcode_macro _gcodeproc_vars'].gcodeproc_verb_info : 0
printer['gcode_macro _gcodeproc_vars'].gcodeproc_verb_error : 1
printer['gcode_macro _gcodeproc_vars'].gcodeproc_verb_status : 0
printer['gcode_macro _gcodeproc_vars'].gcodeproc_verb_codeflow : 0
printer['gcode_macro _gcodeproc_vars'].gcodeproc_verb_debug : 0
printer['gcode_macro _gcodeproc_vars'].dynamic_extrate_enable : 0
printer['gcode_macro _gcodeproc_vars'].dynamic_spdrate_enable : 0
printer['gcode_macro _SetSlicerVar']
printer['gcode_macro _SetDynamicExtRate']
printer['gcode_macro _SetDynamicExtRate'].mesh_extrate : [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
printer['gcode_macro _SetDynamicExtRate'].mesh_name : ['Unknown', 'Perimeter', 'External perimeter', 'Overhang perimeter', 'Internal infill', 'Solid infill', 'Top solid infill', 'Ironing', 'Bridge infill', 'Gap fill', 'Skirt/Brim', 'Support material', 'Support material interface', 'Wipe tower', 'Custom', 'Mixed']
printer['gcode_macro _SetDynamicSpdRate']
printer['gcode_macro _SetDynamicSpdRate'].mesh_name : ['Unknown', 'Perimeter', 'External perimeter', 'Overhang perimeter', 'Internal infill', 'Solid infill', 'Top solid infill', 'Ironing', 'Bridge infill', 'Gap fill', 'Skirt/Brim', 'Support material', 'Support material interface', 'Wipe tower', 'Custom', 'Mixed']
printer['gcode_macro _SetDynamicSpdRate'].mesh_spdrate : [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]
printer['gcode_macro PRINT_START']
printer['gcode_macro print_start_purge']
printer['gcode_macro _print_purge']
printer['gcode_macro _print_purge'].ooze_dwell : 1
printer['gcode_macro _print_purge'].purge_ret : 0.2
printer['gcode_macro _print_purge'].verbose : False
printer['gcode_macro _print_purge'].wipe_zheight : 0.05
printer['gcode_macro _print_purge'].purge_temp_min : 180
printer['gcode_macro _print_purge'].purge_spd : 750
printer['gcode_macro _print_purge'].purge_len : 30
printer.pause_resume
printer.pause_resume.is_paused : False
printer['gcode_macro start_pause_alarm']
printer['gcode_macro stop_pause_alarm']
printer['gcode_macro PAUSE']
printer['gcode_macro RESUME']
printer['gcode_macro CANCEL_PRINT']
printer['gcode_macro PRINT_END']
printer['gcode_macro PRINT_END'].print_end_scrub : False
printer['gcode_macro PRINT_END'].retract_temp_min : 180
printer['gcode_macro set_startup_bedtemp']
printer['gcode_macro set_startup_bedtemp'].ptrstartup_bedtemp : 120
printer['gcode_macro set_startup_bedtemp'].heat_on_start : 0
printer['gcode_macro corexy_gantry_speed_test']
printer['gcode_macro _bounds_vars']
printer['gcode_macro _bounds_vars'].h2o_temp_min : 10
printer['gcode_macro _bounds_vars'].h2o_pump_rpm_min : 1500
printer['gcode_macro _bounds_vars'].h2o_pump_rpm_max : 4500
printer['gcode_macro _bounds_vars'].h2o_flow_rpm_min : 375
printer['gcode_macro _bounds_vars'].h2o_radfan_rpm_min : 1000
printer['gcode_macro _bounds_vars'].bounds_alarm_duration : 1000
printer['gcode_macro _bounds_vars'].h2o_radfan_rpm_max : 3000
printer['gcode_macro _bounds_vars'].h2o_temp_max : 100
printer['gcode_macro _bounds_vars'].bounds_check_period : 60
printer['gcode_macro _bounds_vars'].bounds_alarm_recurse_period : 1800
printer['gcode_macro _bounds_vars'].h2o_flow_rpm_max : 1500
printer['gcode_macro _fire_warble_alarm']
printer['gcode_macro _start_bounds_alarm']
printer['gcode_macro _stop_bounds_alarm']
printer['gcode_macro _emit_hho_parameters']
printer['gcode_macro _check_bounds']
printer['gcode_macro _start_bounds_checking']
printer['gcode_macro _stop_bounds_checking']
printer.system_stats
printer.system_stats.sysload : 0.21
printer.system_stats.memavail : 15079752
printer.system_stats.cputime : 5.676656
printer.toolhead
printer.toolhead.square_corner_velocity : 20.0
printer.toolhead.max_accel : 4000.0
printer.toolhead.homed_axes : 
printer.toolhead.estimated_print_time : 918.297000472
printer.toolhead.max_velocity : 400.0
printer.toolhead.print_time : 902.388580044
printer.toolhead.max_accel_to_decel : 3000.0
printer.toolhead.axis_minimum : Coord(x=0.0, y=0.0, z=-5.0, e=0.0)
printer.toolhead.stalls : 0
printer.toolhead.axis_maximum : Coord(x=350.05, y=350.05, z=300.0, e=0.0)
printer.toolhead.position : Coord(x=0.0, y=0.0, z=0.0, e=0.0)
printer.toolhead.extruder : extruder
printer.extruder
printer.extruder.pressure_advance : 0.035
printer.extruder.target : 0.0
printer.extruder.power : 0.0
printer.extruder.can_extrude : False
printer.extruder.smooth_time : 0.04
printer.extruder.temperature : 26.35
-------------------------------------------------------
-------------------------------------------------------
-------------------------------------------------------
