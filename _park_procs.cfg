#############################################################################
# Parking Procs
#############################################################################

[delayed_gcode _park_procs_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_park_procs_loaded func_params='"{rawparams|string}"'
	_module_loaded MODULE=_park_procs
	_proc_end function=_park_procs_loaded

[gcode_macro _info_park_procs]
gcode:

# todo - write up on module's purpose/function/implementation/use
# see user_interaction for an example of intended use

[gcode_macro _park_head]
# parameter is ENTRY=machine_state
description: procs for post canx/end parking of heads
gcode:

	_proc_start function=_park_head func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	say S="Parking"

	# First, check if the axes are homed.
	{% if "xyz" in printer.toolhead.homed_axes %}

		{% set th = printer.toolhead %}									# set context for printer.toolhead object
		{% set entry_ptr_state = params.ENTRY|string %}

		# these are for absolute X/Y movement
		{% set x_park = th.axis_maximum.x//2|float %}					# lateral center
		{% set y_park = th.axis_maximum.y|float %}						# max y

		# this are calculations to arrive at a relative Z movement - seems Rube Goldbergish, but meh, so am I
		# in reality, in case of one at a time print modes, actual current height might not be the highest

		{% set max_z = th.axis_maximum.z|float %}						# get maximum Z axis machine limit
		{% set act_z = th.position.z|float %}							# get actual Z axis position

		{% if act_z < (max_z - 20.0) %}									# check to ensure we're not going to exceed max Z when lifting
			{% set max_deltaz = 20.0 %}									# and if OK, then set the relative val to the max lift value
		{% else %}														# otherwise
			{% set max_deltaz = max_z - act_z %}						# set the (relative) value to ensure we stop at max z
		{% endif %}

		{% set tgt_deltaz = svv.maxz|float + 15.0 - act_z %}			# typical safe is 15mm above highest printed part

		{% set min_deltaz = svv.maxz|float + 10.0 - act_z %}				# min safe is 10mm above highest printed part

		{% if tgt_deltaz > max_deltaz %}								# do the checks
			{% set final_deltaz = min_deltaz %}							# and set the final z move needed
		{% else %}
			{% set final_deltaz = tgt_deltaz %}							# dependant on print, limits, and max/min/targets
		{% endif %}

		# here we move to park.
		# park x/y first then final deltaz if we end from a pause (already raised) [not likely?]
		# otherwise raise first and then move horizontally

		{% if entry_ptr_state|string == "print_paused" %}
			G0 X{x_park} Y{y_park} F15000								# and move to absolute XY if canceled from a pause
		{% endif %}

		go_relative														# go relative
			G1 Z{final_deltaz} F900										# and move up to the safe height
		go_absolute														# go absolute

		{% if entry_ptr_state|string == "print_ending" or entry_ptr_state|string == "print_started" or entry_ptr_state|string == "print_resumed" or entry_ptr_state|string == "print_cancelling" %}
			G0 X{x_park} Y{y_park} F15000								# and move to absolute XY if canceled from a print
		{% endif %}

		say_wait S="Parked"

	{% else %}	# not homed...

		## 'raise error' will abruptly halt any parking because, safety...
		M117 Please home first!
		{action_raise_error("Please home your axes.") }

		say_wait S="Home it, brother."

	{% endif %}

	_proc_end function=_park_head
