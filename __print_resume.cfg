#####################################################################
# 	RESUME + ERCF adaptations
#####################################################################
# https://www.klipper3d.org/Config_Reference.html#pause_resume
# https://www.klipper3d.org/G-Codes.html#pause_resume

[gcode_macro RESUME]
description: Resume the actual running print - adapted for ERCF
rename_existing: _RESUME_STOCK
gcode:

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object
	
	######################### debug stuffs
#	{% if svv.module_debug_loaded %} _enable_trace_debug REASON='"ercf pause resume drama"' {% endif %}
#	{% if svv.module_debug_loaded %} _enable_gmove_debug REASON='"blah"' {% endif %}
#	{% if svv.module_debug_loaded %} _enable_save_var_debug REASON='"blah"' {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=RESUME func_params='"{rawparams|string}"'  {% endif %}

	{% set resume_flag = 0|int %}

	{% if svv.module_ercf_loaded %}
		{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int != 0 %}
			M118 You can't resume the print without unlocking the ERCF first.
			M118 Run ERCF_UNLOCK and solve any issue before hitting Resume again
			# don't flag a resume here as ercf is paused - user must ercf_unlock first...
			# .?.consider an ercf_unlock here so user can just fix and resume thereafter.?.
		{% else %}
			{% set resume_flag = 1|int %}
			{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
				SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
			{% endif %}
		{% endif %}
	{% else %}
		{% set resume_flag = 1|int %}
	{% endif %}


	#######################################################
	#  Above is logic to fire the following, if applicable
	#######################################################

	{% if resume_flag %}

		{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Resuming <<< {% endif %} 
	
		SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_resuming"'		# machine state save

		M118 RESUME @ {printer.virtual_sdcard.file_position} - {printer.virtual_sdcard.progress*10000|int/100|float}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}

		snd_PrintResume
		_HOURMETER_ON
		_PrintLED_On
		
		# reset lighting context before resuming print
		{% if svv.module_ledeff_loaded %}
			_set_ledeff_mode CHAIN=chamber_lights	EFFECT=normal	RESET=1		# uses LED_EFFECTS code
			_set_ledeff_mode CHAIN=lcd_lights 	EFFECT=normal	RESET=1		# uses LED_EFFECTS code
			# _set_ledeff_mode CHAIN=ercf_lights	EFFECT=off		RESET=1		# uses LED_EFFECTS code
			# _set_ledeff_mode CHAIN=dash_lights	EFFECT=off		RESET=1		# uses LED_EFFECTS code
		{% else %}
			ChLts_Normal		# set chamber lights to normal	- uses Klipper Dotstar code
			LcdLts_Normal		# set lcd lights to normal		- uses Klipper Neopixel code
			# ERCFLts_off			# set ercf lights to normal		- uses Klipper Neopixel code
			# DBLts_off			# set dash lights to normal		- uses Klipper Neopixel code
		{% endif %}
		
		go_absolute REASON="forcing absolute before restoring gcode state"
		
		{% if svv.pause_ercf_error %}
			RESTORE_GCODE_STATE NAME=ERCF_state MOVE=1 MOVE_SPEED=300.0000
		{% else %}
			RESTORE_GCODE_STATE NAME=State_Save_Pause MOVE=1 MOVE_SPEED=300.0000
		{% endif %}

		##### set defaults #####
		{% set e = params.E|default(printer["gcode_macro _printer_vars"].pause_retract_default|float)|float %}

		#### get VELOCITY parameter if specified ####
		{% if 'VELOCITY' in params|upper %}
			{% if printer["gcode_macro _printer_vars"].ptr_verb_debug %} M118 >>> RESUME | Velocity param passed <<< {% endif %} 
			{% set get_params = ('VELOCITY=' ~ params.VELOCITY)  %}
		{%else %}
		  {% set get_params = "" %}
		{% endif %}
		##### end of definitions #####
		
		{% if printer.extruder.can_extrude|lower == 'true' %}
			go_relative REASON="resume extruder deretract"
			G1 E{e} F2100 REASON="resume deretract"
		{% else %}
			M118 No Resume Deretract as Extruder not hot enough
		{% endif %}
		
		go_absolute REASON="in case we are relative for deretract"

		stop_pause_alarm
		M300 P10 S1000
		M300 P10 S2000

		{% if printer["gcode_macro _printer_vars"].ptr_verb_debug %} M118 >>> RESUME | _RESUME_STOCK {rawparams} <<< {% endif %}
		
		M118 _RESUME_STOCK @ {printer.virtual_sdcard.file_position} - {printer.virtual_sdcard.progress*10000|int/100|float}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}
		_RESUME_STOCK {get_params}	# resumes processing of gcode - hard coded in pause_resume.py to do a moving restore of saved gcode state: PAUSE_STATE 
		
		CLEAR_PAUSE
		SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_resumed"'	# machinestatesave

		{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Resumed <<< {% endif %} 

		{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=RESUME {% endif %}
		
		######################### debug stuffs
	#	{% if svv.module_debug_loaded %} _disable_save_var_debug {% endif %}	# make sure svv debug off
	#	{% if svv.module_debug_loaded %} _disable_gmove_debug {% endif %}
	#	{% if svv.module_debug_loaded %} _disable_trace_debug {% endif %}

	{% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=RESUME {% endif %}
	

