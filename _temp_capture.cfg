#####################################################################
#  _temp_capture
#####################################################################

[delayed_gcode _temp_capture_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_temp_capture_loaded func_params='"{rawparams|string}"'  
	_module_loaded MODULE=_temp_capture
	_proc_end function=_temp_capture_loaded 

#--------------------------------------------------------------------

[gcode_macro _info_temp_capture]
gcode:

# todo - write up on module's purpose/function/implementation/use
# see user_interaction for an example of intended use

#--------------------------------------------------------------------

[gcode_macro _temp_capture_vars]
description: macro for _temp_capture variables

gcode:

	_proc_start function=_temp_capture_vars func_params='"{rawparams|string}"'

	# there is none, this is for module variable use only

	_proc_end function=_temp_capture_vars

#--------------------------------------------------------------------

[gcode_macro M104]
description: capture and set target HE temp, non-blocking
rename_existing: M104.1
gcode:

	_proc_start function=M104 func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE=extruder_temp_setting VALUE={params.S|int}
	save_variable VARIABLE=boot_extruder_temp VALUE={params.S|int}

	say_wait S="Extruder {params.S|int}"

	M104.1 {rawparams}

	_proc_end function=M104

#--------------------------------------------------------------------

[gcode_macro M140]
description: capture and set target heater_bed temp, non-blocking
rename_existing: M140.1
gcode:

	_proc_start function=M140 func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE=heater_bed_temp_setting VALUE={params.S|int}
	save_variable VARIABLE=boot_heater_bed_temp VALUE={params.S|int}

	say_wait S="Bed {params.S|int}"

	M140.1 {rawparams}

	_proc_end function=M140

#--------------------------------------------------------------------

[gcode_macro M109]
description: capture and set target HE temp, waiting for temp attainment
rename_existing: M109.1
gcode:

	_proc_start function=M109 func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE=extruder_temp_setting VALUE={params.S|int}
	save_variable VARIABLE=boot_extruder_temp VALUE={params.S|int}
	M109.1 {rawparams}

	say_wait S="Extruder {params.S|int}"

	_proc_end function=M109

#--------------------------------------------------------------------

[gcode_macro M190]
description: capture and set heater_bed temp, waiting for temp attainment
rename_existing: M190.1
gcode:

	_proc_start function=M190 func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE=heater_bed_temp_setting VALUE={params.S|int}
	save_variable VARIABLE=boot_heater_bed_temp VALUE={params.S|int}

	say_wait S="Bed {params.S|int}"

	M190.1 {rawparams}

	_proc_end function=M190

#--------------------------------------------------------------------

[gcode_macro M191.1]
description: capture and set target chamber temp, waiting for temp attainment
variable_min_bed_tmp:		60
variable_min_he_tmp:		180
variable_min_chamb_tmp:		40
variable_max_chamb_tmp:		60
# param S = chamber heat temp setting
gcode:

	_proc_start function=M191.1 func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object
	{% set th = printer.toolhead %}									# set eazy accesss context for printer.toolhead object

	{% set S = params.S | default(0) | float %}

	SAVE_VARIABLE VARIABLE=chamber_temp_setting VALUE={params.S|int}

	# this is a fully blocking proc. As such, we need to ensure that
	# the relevant heaters are on - namely bed and extruder
	# and that the chamber temp setting is w/in reasonable bounds

#	M118 M191.1 S 	min:{min_chamb_tmp}		set:{S}		max:{max_chamb_tmp}
#	M118 Bed: min:{min_bed_tmp} 	set:{svv.heater_bed_temp_setting}	act:{printer.heater_bed.temperature}
#	M118 Ext: min:{min_he_tmp} 		set:{svv.extruder_temp_setting}		act:{printer.extruder.temperature}

	{% if	S <= max_chamb_tmp							and
			S >= min_chamb_tmp							and
			svv.extruder_temp_setting >= min_he_tmp		and
			svv.heater_bed_temp_setting >= min_bed_tmp
			%}

		{% if printer['temperature_fan Chamber'].temperature < svv.chamber_temp_setting %}

			M118 Waiting for Chamber to heat to {S}°C
			say_wait S="Chamber hold for {S|int}"
			TEMPERATURE_WAIT SENSOR="temperature_fan Chamber" MINIMUM={S}
			M118 Chamber heated to {printer['temperature_fan Chamber'].temperature}°C.
			say_wait S="Chamber Temp Attained"

		(% else %}

			say_wait S="Chamber Temp good"

		{% endif %}

	{% else %}

		M118 Chamber Temp Params out of bounds - continuing...
		say_wait S="ATTENTION! Chamber Temp Bypass!"

	{% endif %}

	_proc_end function=M191.1

#--------------------------------------------------------------------

[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE_STOCK
gcode:

	_proc_start function=SET_HEATER_TEMPERATURE func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE={params.HEATER|string|lower}_temp_setting VALUE={params.TARGET|int}
	save_variable VARIABLE=boot_{params.HEATER|string|lower}_temp VALUE={params.TARGET|int}
	_SET_HEATER_TEMPERATURE_STOCK {rawparams|lower}
	
	UPDATE_DELAYED_GCODE ID=_report_temps DURATION=1
	# this is a bit of a temporal hack to allow closely timed setting of both bed and extruder while
	# speaking the temps once, after both are set (as long as they are set w/in <0.25s of one another
	# might add logic below to not speak a specific setting if no change.?.  <-- done that...

	_proc_end function=SET_HEATER_TEMPERATURE

#--------------------------------------------------------------------

[delayed_gcode _report_temps]
# description: helps with naturalizing reporting of temps as I like them, and together after both are set successively
# instead of 'One Hundred Twenty', this emits 'One Twenty' - moar terse = bettar...
# added logic to track last reported temps so if redundant settings happen, don't report/say the non-different ones
initial_duration: 0
gcode:

	#enable_code_trace

	_proc_start function=_report_temps func_params='"{rawparams|string}"'  

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	{% set eTemp = svv.extruder_temp_setting|int %}					# set eTemp val for conditional reporting
	{% set bTemp = svv.heater_bed_temp_setting|int %}				# set bTemp val for conditional reporting
	 
	{% set last_bed_tmp_rpt = svv.last_bed_tmp_rpt|int %}			# get last reported btemp for use in conditionals
	{% set last_ext_tmp_rpt = svv.last_ext_tmp_rpt|int %}			# get last reported etemp for use in conditionals
	
# make tts drop the hundred for non-even-hundred temp callouts

	# make extruder temp speech prettier
	{% if eTemp|int > 300 %}
		{% set eTemp2 = eTemp|int-300 %}
		{% if eTemp2 < 10 %}
			{% set eTemp2 = ("oh " ~ eTemp2)|string %}
		{% endif %}
		{% set eTemp2 = ("three " ~ eTemp2)|string %}
	{% elif eTemp|int == 300 %}
		{% set eTemp2 = (eTemp|int)|string %}
	{% elif eTemp|int > 200 %}
		{% set eTemp2 = eTemp|int-200 %}
		{% if eTemp2 < 10 %}
			{% set eTemp2 = ("oh " ~ eTemp2)|string %}
		{% endif %}
		{% set eTemp2 = ("two " ~ eTemp2)|string %}
	{% elif eTemp|int == 200 %}
		{% set eTemp2 = (eTemp|int)|string %}
	{% elif eTemp|int > 100 %}
		{% set eTemp2 = eTemp|int-100 %}
		{% if eTemp2 < 10 %}
			{% set eTemp2 = ("oh " ~ eTemp2)|string %}
		{% endif %}
		{% set eTemp2 = ("one " ~ eTemp2)|string %}
	{% elif eTemp|int <= 100 %}
		{% set eTemp2 = (eTemp|int)|string %}
	{% endif %}

	# make bed temp speech prettier
	{% if bTemp|int > 300 %}
		{% set bTemp2 = bTemp|int-300 %}
		{% if bTemp2 < 10 %}
			{% set bTemp2 = ("oh " ~ bTemp2)|string %}
		{% endif %}
		{% set bTemp2 = ("three " ~ bTemp2)|string %}
	{% elif bTemp|int == 300 %}
		{% set bTemp2 = (bTemp|int)|string %}
	{% elif bTemp|int > 200 %}
		{% set bTemp2 = bTemp|int-200 %}
		{% if bTemp2 < 10 %}
			{% set bTemp2 = ("oh " ~ bTemp2)|string %}
		{% endif %}
		{% set bTemp2 = ("two " ~ bTemp2)|string %}
	{% elif bTemp|int == 200 %}
		{% set bTemp2 = (bTemp|int)|string %}
	{% elif bTemp|int > 100 %}
		# nix left digit and replay with one - one80
		{% set bTemp2 = bTemp|int-100 %}
		{% if bTemp2 < 10 %}
			{% set bTemp2 = ("oh " ~ bTemp2)|string %}
		{% endif %}
		{% set bTemp2 = ("one " ~ bTemp2)|string %}
	{% elif bTemp|int <= 100 %}
		{% set bTemp2 = (bTemp|int)|string %}
	{% endif %}
	
	{% if printer["gcode_macro _tts_vars"].tts_enable %}		# and verify that a gag order doesn't exist
		# then emit the prettiefied speech phrase
		{% if (last_bed_tmp_rpt != bTemp) and (last_ext_tmp_rpt != eTemp) %}		# both temps set to new val
			klipper_tts_said S="Extruder: {eTemp|string},  Bed: {bTemp|string}"	# echo new temp settings
			say_wait_nc S="Extruder: {eTemp2|string},  Bed: {bTemp2|string}"		# say new temp settings
			SAVE_VARIABLE VARIABLE=last_bed_tmp_rpt		VALUE={bTemp}				# save reported btemp
			SAVE_VARIABLE VARIABLE=last_ext_tmp_rpt		VALUE={eTemp}				# save reported etemp
		{% elif last_ext_tmp_rpt != eTemp %}										# not both, see if etemp different
			klipper_tts_said S="Extruder: {eTemp|string}"						# echo new etemp setting
			say_wait_nc S="Extruder: {eTemp2|string}"								# say new etemp setting
			SAVE_VARIABLE VARIABLE=last_ext_tmp_rpt		VALUE={eTemp}				# save reported etemp
		{% elif last_bed_tmp_rpt != bTemp %}										# so not both, and not e diff, so see if b differs
			klipper_tts_said S="Bed: {bTemp|string}"							# echo new btemp setting
			say_wait_nc S="Bed: {bTemp2|string}"									# say new btemp setting
			SAVE_VARIABLE VARIABLE=last_bed_tmp_rpt		VALUE={bTemp}				# save reported btemp
		{% else %} 																	# hmm, must be redundant setting.?.
			# so we fell through as this b/etemp settings match last, so report nothing?
			# OR possibly report verified or some such shite.  <-- went this route...
			klipper_tts_said S="Verified Temps: Extruder: {eTemp|string},  Bed: {bTemp|string}"	# report
			say_wait_nc S="Temps Verified"											# say temps verified diff
		{% endif %}
	{% else %}
		# then emit the prettiefied speech phrase
		{% if (last_bed_tmp_rpt != bTemp) and (last_ext_tmp_rpt != eTemp) %}		# both temps set to new val
			klipper_tts_dont_say S="Extruder: {eTemp|string},  Bed: {bTemp|string}"	# echo new temp settings
			say_wait_nc S="Extruder: {eTemp2|string},  Bed: {bTemp2|string}"		# say new temp settings
			SAVE_VARIABLE VARIABLE=last_bed_tmp_rpt		VALUE={bTemp}				# save reported btemp
			SAVE_VARIABLE VARIABLE=last_ext_tmp_rpt		VALUE={eTemp}				# save reported etemp
		{% elif last_ext_tmp_rpt != eTemp %}										# not both, see if etemp different
			klipper_tts_dont_say S="Extruder: {eTemp|string}"						# echo new etemp setting
			say_wait_nc S="Extruder: {eTemp2|string}"								# say new etemp setting
			SAVE_VARIABLE VARIABLE=last_ext_tmp_rpt		VALUE={eTemp}				# save reported etemp
		{% elif last_bed_tmp_rpt != bTemp %}										# so not both, and not e diff, so see if b differs
			klipper_tts_dont_say S="Bed: {bTemp|string}"							# echo new btemp setting
			say_wait_nc S="Bed: {bTemp2|string}"									# say new btemp setting
			SAVE_VARIABLE VARIABLE=last_bed_tmp_rpt		VALUE={bTemp}				# save reported btemp
		{% else %} 																	# hmm, must be redundant setting.?.
			# so we fell through as this b/etemp settings match last, so report nothing?
			# OR possibly report verified or some such shite.  <-- went this route...
			klipper_tts_dont_say S="Verified Temps: Extruder: {eTemp|string},  Bed: {bTemp|string}"	# report
			say_wait_nc S="Temps Verified"											# say temps verified diff
		{% endif %}
	{% endif %}

	_proc_end function=_report_temps 

	#disable_code_trace

#--------------------------------------------------------------------
