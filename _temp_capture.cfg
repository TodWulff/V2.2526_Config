#####################################################################
#  _temp_capture
#####################################################################

[delayed_gcode _temp_capture_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_temp_capture_loaded func_params='"{rawparams|string}"'  
	_module_loaded MODULE=_temp_capture
	_proc_end function=_temp_capture_loaded 

#--------------------------------------------------------------------

[gcode_macro _info_temp_capture]
gcode:
	#to do
	
#--------------------------------------------------------------------

[gcode_macro _temp_capture_vars]
description: macro for _temp_capture variables

#variable_debug_verb_error:		1 		# set to 0 to mute error reporting (um, errors. lol)
#variable_debug_verb_info:		0 	# set to 0 to mute info reporting (has data)
#variable_debug_verb_status:		0 	# set to 0 to mute status reporting (useful modes, update, etc.)
#variable_debug_verb_debug:		0 	# set to 0 to mute debugs stuffs I added
#
#variable_debug_verb_codeflow:	0 	# set to 0 to mute debugs stuffs I added (proc entry/exit)
#
#variable_gmove_debug:			0		# start with gmove debug disabled
#variable_save_var_debug:		0		# start with svv debug disabled
#variable_gcode_state_debug:		0		# start with gcode_state debug disabled
#
#variable_force_svv_typing:		1		# if enabled, forces type conv from str to int/flt, if numbers are stringified
#
#variable_trace_debug_emissions:	0		# 0=quiet 1=chatty

gcode:

	_proc_start function=_temp_capture_vars func_params='"{rawparams|string}"'

	# there is none, this is for module variable use only

	_proc_end function=_temp_capture_vars

#--------------------------------------------------------------------

[gcode_macro M104]
description: capture and set target HE temp, non-blocking
rename_existing: M104.1
gcode:

	_proc_start function=M104 func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE=extruder_temp_setting VALUE={params.S|int}
	save_variable VARIABLE=boot_extruder_temp VALUE={params.S|int}

	say S="Extruder {params.S|int}"

	M104.1 {rawparams}

	_proc_end function=M104

#--------------------------------------------------------------------

[gcode_macro M140]
description: capture and set target heater_bed temp, non-blocking
rename_existing: M140.1
gcode:

	_proc_start function=M140 func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE=heater_bed_temp_setting VALUE={params.S|int}
	save_variable VARIABLE=boot_heater_bed_temp VALUE={params.S|int}

	say S="Bed {params.S|int}"

	M140.1 {rawparams}

	_proc_end function=M140

#--------------------------------------------------------------------

[gcode_macro M109]
description: capture and set target HE temp, waiting for temp attainment
rename_existing: M109.1
gcode:

	_proc_start function=M109 func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE=extruder_temp_setting VALUE={params.S|int}
	save_variable VARIABLE=boot_extruder_temp VALUE={params.S|int}
	M109.1 {rawparams}

	say S="Extruder {params.S|int}"

	_proc_end function=M109

#--------------------------------------------------------------------

[gcode_macro M190]
description: capture and set heater_bed temp, waiting for temp attainment
rename_existing: M190.1
gcode:

	_proc_start function=M190 func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE=heater_bed_temp_setting VALUE={params.S|int}
	save_variable VARIABLE=boot_heater_bed_temp VALUE={params.S|int}

	say S="Bed {params.S|int}"

	M190.1 {rawparams}

	_proc_end function=M190

#--------------------------------------------------------------------

[gcode_macro M191.1]
description: capture and set target chamber temp, waiting for temp attainment
variable_min_bed_tmp:		60
variable_min_he_tmp:		180
variable_min_chamb_tmp:		40
variable_max_chamb_tmp:		60
# param S = chamber heat temp setting
gcode:

	_proc_start function=M191.1 func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object
	{% set th = printer.toolhead %}									# set eazy accesss context for printer.toolhead object

	{% set S = params.S | default(0) | float %}

	SAVE_VARIABLE VARIABLE=chamber_temp_setting VALUE={params.S|int}

	# this is a fully blocking proc. As such, we need to ensure that
	# the relevant heaters are on - namely bed and extruder
	# and that the chamber temp setting is w/in reasonable bounds

#	M118 M191.1 S 	min:{min_chamb_tmp}		set:{S}		max:{max_chamb_tmp}
#	M118 Bed: min:{min_bed_tmp} 	set:{svv.heater_bed_temp_setting}	act:{printer.heater_bed.temperature}
#	M118 Ext: min:{min_he_tmp} 		set:{svv.extruder_temp_setting}		act:{printer.extruder.temperature}

	{% if	S <= max_chamb_tmp							and
			S >= min_chamb_tmp							and
			svv.extruder_temp_setting >= min_he_tmp		and
			svv.heater_bed_temp_setting >= min_bed_tmp
			%}

		{% if printer['temperature_fan Chamber'].temperature < svv.chamber_temp_setting %}

			M118 Waiting for Chamber to heat to {S}°C
			say S="Chamber hold for {S|int}"
			TEMPERATURE_WAIT SENSOR="temperature_fan Chamber" MINIMUM={S}
			M118 Chamber heated to {printer['temperature_fan Chamber'].temperature}°C.
			say S="Chamber Temp Attained"

		(% else %}

			say S="Chamber Temp good"

		{% endif %}

	{% else %}

		M118 Chamber Temp Params out of bounds - continuing...
		say_wait S="ATTENTION! Chamber Temp Bypass!"

	{% endif %}

	_proc_end function=M191.1

#--------------------------------------------------------------------

[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE_STOCK
gcode:

	_proc_start function=SET_HEATER_TEMPERATURE func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE={params.HEATER|string|lower}_temp_setting VALUE={params.TARGET|int}
	save_variable VARIABLE=boot_{params.HEATER|string|lower}_temp VALUE={params.TARGET|int}
	_SET_HEATER_TEMPERATURE_STOCK {rawparams|lower}
	
#	say S="{params.HEATER|string|replace("heater_bed", "Bed")|replace("extruder","Extruder")} {params.TARGET|int}"
	
	UPDATE_DELAYED_GCODE ID=Report_Temps DURATION=0.25
	# this is a bit of a hack to allow closely timed setting of both bed and extruder while only speaking
	# the temps out once, after both are set (as long as they are set w/in <0.25 seconds of one another
	# might add logic below to not speak a specific setting if no change.?.

	_proc_end function=SET_HEATER_TEMPERATURE

#--------------------------------------------------------------------

[delayed_gcode Report_Temps]
# description: helps with naturalizing reporting of temps as I like them, and together after both are set successively
# instead of 'One Hundred Twenty', this emits 'One Twenty' - moar terse = bettar...
initial_duration: 0
gcode:

	_proc_start function=Report_Temps func_params='"{rawparams|string}"'  

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	{% set eTemp = svv.extruder_temp_setting|int %}
	{% set bTemp = svv.heater_bed_temp_setting|int %}
	 
	{% if eTemp|int >= 300 %}
		# nix left digit and replay with three - three30
		{% set eTemp2 = (eTemp|int-300)|string %}
		{% set eTemp = ("three" ~ eTemp2)|string %}
	{% elif eTemp|int >= 200 %}
		# nix left digit and replay with two - two20
		{% set eTemp2 = (eTemp|int-200)|string %}
		{% set eTemp = ("two" ~ eTemp2)|string %}
	{% elif eTemp|int >= 100 %}
		# nix left digit and replay with one - one80
		{% set eTemp2 = (eTemp|int-100)|string %}
		{% set eTemp = ("one" ~ eTemp2)|string %}
	{% endif %}

	{% if bTemp|int >= 300 %}
		# nix left digit and replay with three - three30
		{% set bTemp2 = (bTemp|int-300)|string %}
		{% set bTemp = ("three" ~ bTemp2)|string %}
	{% elif bTemp|int >= 200 %}
		# nix left digit and replay with two - two20
		{% set bTemp2 = (bTemp|int-200)|string %}
		{% set bTemp = ("two" ~ bTemp2)|string %}
	{% elif bTemp|int >= 100 %}
		# nix left digit and replay with one - one80
		{% set bTemp2 = (bTemp|int-100)|string %}
		{% set bTemp = ("one" ~ bTemp2)|string %}
	{% endif %}


	say_wait S="Extruder: {eTemp|string}  Bed: {bTemp|string} "

	_proc_end function=Report_Temps 

#--------------------------------------------------------------------

