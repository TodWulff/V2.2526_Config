###############################
# ERCF Code mods...
###############################

[delayed_gcode _ercf_module_start]
# description:  Inits state flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5							# have this at 0.5s as init code in _startup_autoexec.cfg runs at 0.1s after start
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_module_start func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _ercf_module_start Start <<< {% endif %}

	SAVE_VARIABLE VARIABLE=module_ercf_loaded VALUE=1					#flag via persistent variable that this module is loaded
	save_variable VARIABLE=ercf_err_flag VALUE=0						#init error flag via variable that this module is not in error

	{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _ercf_module_start End <<< {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end {% endif %}

[gcode_macro _ercf_park_n_home]
description: unload and home
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ercf_park_n_home func_params='"{rawparams|string}"'  {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ercf_park_n_home start ... {% endif %} 

	{% if svv.ercf_err_flag %} 

		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 > _ercf_park_n_home Skipped - an error condition is asserted < {% endif %}

	{% else %}

		# verify that the ercf is homed and knows where it's at (home does an unload if needed)
		{% if printer["gcode_macro ERCF_HOME"].home == -1 %}
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 _ ERCF not homed, home & park filament... _ {% endif %}
			ERCF_HOME
		{% else %}
			# so we're homed (position known), just make sure filament isn't in cart and move to 0
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 _ ERCF homed, park filament _ {% endif %}
			ERCF_EJECT_UNKNOW_STATE
			ERCF_UNSELECT_TOOL
			
			{% set selector_axis_pos = printer["gcode_macro ERCF_VAR"].colorselector[0]|float %}

			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 >>> _ercf_park_n_home cart position -> {selector_axis_pos}mm <<< {% endif %} 
			MANUAL_STEPPER STEPPER=selector_stepper MOVE={selector_axis_pos} SPEED=100
			
		{% endif %}
		
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ercf_park_n_home End <<< {% endif %} 

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end {% endif %}

[gcode_macro set_HE_heating_indication]
description: annunciate heating taking place
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=set_HE_heating_indication func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 >>> set_HE_heating_indication Start ... {% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 ERCF Heating {% endif %}

	{% if printer.save_variables.variables.module_ledeff_loaded %}
		set_light_mode CHAIN=ercf_lights EFFECT=he_temp			# uses LED_EFFECTS code
	{% else %}
		ERCFLts_red			# set ercf lights to normal		- uses Klipper Neopixel code
	{% endif %}
	# M300
	# M300

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 ... set_HE_heating_indication End <<< {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end {% endif %}

[gcode_macro clear_HE_heating_indication]
description: deannunciate heating
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=clear_HE_heating_indication func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 >>> clear_HE_heating_indication Start ... {% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 ERCF Heated {% endif %}

	{% if printer.save_variables.variables.module_ledeff_loaded %}
		set_light_mode CHAIN=ercf_lights EFFECT=off
	{% else %}
		ERCFLts_off
	{% endif %}
	# M300
	# M300
	# M300

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 ... clear_HE_heating_indication End <<< {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end {% endif %}

[gcode_macro alert_ercf_is_paused]
description: alerts user that ERCF is Paused and needs to be Unlocked
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=alert_ercf_is_paused func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 >>> alert_ercf_is_paused Start ... {% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 ERCF is paused, run "ERCF_UNLOCK" to unlock it ... {% endif %}
	# M300
	# M300

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 ... alert_ercf_is_paused End <<< {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end {% endif %}

[gcode_macro ercf_move_cart]
description: move ercf cart to param C 
# Example: ercf_move_cart C=9
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ercf_move_cart func_params='"{rawparams|string}"'  {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ercf_move_cart start ... {% endif %} 

	{% if svv.ercf_err_flag %} 

		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 > ercf_move_cart Skipped - an error condition is asserted < {% endif %}

	{% else %}

		_ercf_park_n_home
		
		{% set selector_axis_pos = printer["gcode_macro ERCF_VAR"].colorselector[params.C|default(0)|int]|float %}

		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 >>> ERCF_CART:{params.C|default(0)|int} -> {selector_axis_pos} <<< {% endif %} 
		MANUAL_STEPPER STEPPER=selector_stepper MOVE={selector_axis_pos} SPEED=100

	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 ... ercf_move_cart End <<< {% endif %} 

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end {% endif %}

[gcode_macro ERCF_LOAD]
description: wrapper for FW proc to handle error conditions, verbosity, and adds a dwell
rename_existing: ERCF_LOAD_STOCK
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_LOAD func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_LOAD Start ... {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if svv.ercf_err_flag %} 
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 > ERCF_LOAD Skipped - an error condition is asserted < {% endif %}
	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_loadunload %} M118 vvv ERCF_LOAD {rawparams} {% endif %}
		ERCF_LOAD_STOCK {rawparams}
		_load_unload_dwell
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_LOAD End <<< {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end {% endif %}

[gcode_macro ERCF_UNLOAD]
description: wrapper for FW proc to handle error conditions, verbosity, and adds a dwell
rename_existing: ERCF_UNLOAD_STOCK
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_UNLOAD func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_UNLOAD Start ... {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if svv.ercf_err_flag %} 
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 > ERCF_UNLOAD Skipped - an error condition is asserted < {% endif %}
	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_loadunload %} M118 ^^^ ERCF_UNLOAD {rawparams} {% endif %}
		ERCF_UNLOAD_STOCK {rawparams}
		_load_unload_dwell
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_UNLOAD End <<< {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end {% endif %}

[gcode_macro ERCF_BUZZ_GEAR_MOTOR]
description: wrapper for FW proc to handle error conditions, verbosity, and adds a dwell
rename_existing: ERCF_BUZZ_GEAR_MOTOR_STOCK
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_BUZZ_GEAR_MOTOR func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_BUZZ_GEAR_MOTOR Start ... {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if svv.ercf_err_flag %} 
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 > ERCF_BUZZ_GEAR_MOTOR Skipped - an error condition is asserted < {% endif %}
	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_motors %} M118 > ERCF_BUZZ_GEAR_MOTOR {rawparams} < {% endif %}
		ERCF_BUZZ_GEAR_MOTOR_STOCK {rawparams}
		_gear_move_dwell
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_BUZZ_GEAR_MOTOR End <<< {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end {% endif %}

[gcode_macro ERCF_SELECT_TOOL_dbg]
description: wrapper around ercf lib proc for error check so seq test procs can not run on blindly if an error exists.
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_SELECT_TOOL_dbg func_params='"{rawparams|string}"'  {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if svv.ercf_err_flag %} 
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 > ERCF_SELECT_TOOL Skipped - an error condition is asserted < {% endif %}
	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 > ERCF_SELECT_TOOL TOOL={params.TOOL|int} < {% endif %}
		ERCF_SELECT_TOOL {rawparams}
	{% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end {% endif %}

[gcode_macro ERCF_TEST_LOAD_SEQ]
description: wrapper code for ERCF_TEST_LOAD_SEQUENCE - homes at start, homes at end
# to be used at boot or print start, if so desired by user (set in ERCF_VARS)
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_TEST_LOAD_SEQ func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_TEST_LOAD_SEQ Start ... {% endif %}

	save_variable VARIABLE=ercf_err_flag VALUE=0		#clear error flag

	_ercf_park_n_home
	
	ERCF_TEST_LOAD_SEQUENCE {rawparams}
	
	ercf_move_cart C=0

	save_variable VARIABLE=ercf_err_flag VALUE=0		#clear error flag
 
	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_TEST_LOAD_SEQ End <<< {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end {% endif %}
	
[gcode_macro MANUAL_STEPPER]
description: wrapper for FW proc to handle error conditions, verbosity, and conditionally dwell
rename_existing: MANUAL_STEPPER_STOCK
gcode:
	# if in future there are more than ercf man steppers, then need to use conditionals herein.

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=MANUAL_STEPPER func_params='"{rawparams|string}"'  {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 >>> MANUAL_STEPPER Start ... {% endif %}

	{% if svv.ercf_err_flag %} 
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 > MANUAL_STEPPER Skipped - an error condition is asserted < {% endif %}
	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_motors %} M118 >>> MANUAL_STEPPER {rawparams} <<< {% endif %}
		MANUAL_STEPPER_STOCK {rawparams}
		
		{% if params.SET_POSITION|default("")|string != "" or params.ENABLE|default(0)|int == 0 %}
			# do no dwell on a set_positioon or a disable command
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_motors %} M118 >>> No motor dwell <<< {% endif %}
		{% elif params.STEPPER|string == "selector_stepper" and params.NODWELL|default(0)|int == 0 %}
			_cart_move_dwell
		{% elif params.STEPPER|string == "gear_stepper" and params.NODWELL|default(0)|int == 0 %}
			_gear_move_dwell
		{% else %}
#			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_motors %} M118 >>> a NODWELL cmd <<< {% endif %}
		{%endif %}
		
	{% endif %}
 
	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 ... MANUAL_STEPPER End <<< {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end {% endif %}

[gcode_macro SET_SERVO]
description: wrapper for FW proc to handle error conditions, verbosity, and conditionally dwell
rename_existing: SET_SERVO_STOCK
gcode:
	# if in future there are more than ercf servos, then need to use conditionals herein.

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=SET_SERVO func_params='"{rawparams|string}"'  {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 >>> SET_SERVO Start ... {% endif %}

	{% if svv.ercf_err_flag %} 
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 > SET_SERVO Skipped - an error condition is asserted < {% endif %}
	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_motors %} M118 >>> SET_SERVO {rawparams} <<< {% endif %}
		SET_SERVO_STOCK {rawparams}
		# only dwell when a move to an angle or width is commanded - no dwell if servo is just depowered (WIDTH=0.0)
		{% if params.ANGLE|default("")|string != "" or params.WIDTH|default("0.0")|string != "0.0" %}
			_servo_move_dwell
		{% endif %}
	{% endif %}
 
	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 ... SET_SERVO End <<< {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end {% endif %}

[gcode_macro _servo_move_dwell]
description:  impute a dwell time to allow for the servo movement to complete
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_servo_move_dwell func_params='"{rawparams|string}"'  {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _servo_move_dwell Start ... {% endif %}

	{% if svv.ercf_err_flag %} 
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 > _servo_move_dwell Skipped - an error condition is asserted < {% endif %}
	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_motors %} M118 >>> _servo_move_dwell {printer["gcode_macro ERCF_VAR"].ercf_servo_move_dwell_time|int}mS <<< {% endif %}
		G4 P{printer["gcode_macro ERCF_VAR"].ercf_servo_move_dwell_time|int}
	{% endif %}
 
	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 ... _servo_move_dwell End <<< {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end {% endif %}
	
[gcode_macro _cart_move_dwell]
description:  impute a dwell time to allow for the stepper movement to complete
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_cart_move_dwell func_params='"{rawparams|string}"'  {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _cart_move_dwell Start ... {% endif %}

	{% if svv.ercf_err_flag %} 
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 > _cart_move_dwell Skipped - an error condition is asserted < {% endif %}
	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_motors %} M118 >>> _cart_move_dwell {printer["gcode_macro ERCF_VAR"].ercf_cart_move_dwell_time|int}mS <<< {% endif %}
		G4 P{printer["gcode_macro ERCF_VAR"].ercf_cart_move_dwell_time|int}
	{% endif %}
 
	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 ... _cart_move_dwell End <<< {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end {% endif %}
	
[gcode_macro _gear_move_dwell]
description:  impute a dwell time to allow for the stepper movement to complete
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_gear_move_dwell func_params='"{rawparams|string}"'  {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _gear_move_dwell Start ... {% endif %}

	{% if svv.ercf_err_flag %} 
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 > _gear_move_dwell Skipped - an error condition is asserted < {% endif %}
	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_motors %} M118 >>> _gear_move_dwell {printer["gcode_macro ERCF_VAR"].ercf_gear_move_dwell_time|int}mS <<< {% endif %}
		G4 P{printer["gcode_macro ERCF_VAR"].ercf_gear_move_dwell_time|int}
	{% endif %}
 
	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 ... _gear_move_dwell End <<< {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end {% endif %}
	
[gcode_macro _extruder_move_dwell]
description:  impute a dwell time to allow for the extruder movement to complete
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_extruder_move_dwell func_params='"{rawparams|string}"'  {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _extruder_move_dwell Start ... {% endif %}

	{% if svv.ercf_err_flag %} 
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 > _extruder_move_dwell Skipped - an error condition is asserted < {% endif %}
	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_motors %} M118 >>> _extruder_move_dwell {printer["gcode_macro ERCF_VAR"].ercf_extruder_move_dwell_time|int}mS <<< {% endif %}
		G4 P{printer["gcode_macro ERCF_VAR"].ercf_extruder_move_dwell_time|int}
	{% endif %}
 
	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 ... _extruder_move_dwell End <<< {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end {% endif %}

[gcode_macro _load_unload_dwell]
description:  impute a dwell time to allow for the extruder movement to complete
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_load_unload_dwell func_params='"{rawparams|string}"'  {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _load_unload_dwell Start ... {% endif %}

	{% if svv.ercf_err_flag %} 
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 > _load_unload_dwell Skipped - an error condition is asserted < {% endif %}
	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_motors %} M118 >>> _load_unload_dwell {printer["gcode_macro ERCF_VAR"].ercf_load_unload_dwell_time|int}mS <<< {% endif %}
		G4 P{printer["gcode_macro ERCF_VAR"].ercf_load_unload_dwell_time|int}
	{% endif %}
 
	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_codeflow %} M118 ... _load_unload_dwell End <<< {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end {% endif %}

	
