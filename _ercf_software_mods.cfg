###############################
# ERCF Code additions/wrappers
###############################

[delayed_gcode _ercf_software_mods_loaded]
initial_duration: 4.501
gcode:

	_proc_start function=_ercf_software_mods_loaded func_params='"{rawparams|string}"'
	
	_module_loaded MODULE=_ercf_software_mods
	
	_proc_end function=_ercf_software_mods_loaded

[delayed_gcode _ercf_module_start]
# description: Inits state flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5							# have this at 0.5s as init code in _startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_ercf_module_start func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE=module_ercf_loaded VALUE=1					#flag via persistent variable that this module is loaded
	save_variable VARIABLE=ercf_err_flag VALUE=0						#init error flag via variable that this module is not in error
	SET_GCODE_VARIABLE MACRO=ERCF_HOME VARIABLE=home VALUE=-1

	_proc_end function=_ercf_module_start

[delayed_gcode _ercf_start_carthome]
initial_duration: 0.0
gcode:

	_proc_start function=_ercf_start_carthome func_params='"{rawparams|string}"'

	# ok this is an optional startup event, by design
	# but need to alert the user if the toolhead has filament in it as,
	# if it does, then heating the toolhead to do a unload is not
	# as in your face as it shold be, so need to add some logic here
	# to make it very evident that the upload requires a heating event

	{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
		M300
		M300
		M300
		M118 Filament in toolhead...
		M118 ... Heating to Unload & Home ERCF
		G4 P500
		M300
		M300
		M300
	{% endif %}

	_ercf_park_n_home

	_proc_end function=_ercf_start_carthome

[delayed_gcode _ercf_start_loadtest]
initial_duration: 0.0
gcode:

	_proc_start function=_ercf_start_loadtest func_params='"{rawparams|string}"'

	ERCF_TEST_LOAD_SEQ LOOP=1

	_proc_end function=_ercf_start_loadtest

[gcode_macro _servo_move_dwell]
description: impute a dwell time to allow for the servo movement to complete
gcode:

	_proc_start function=_servo_move_dwell func_params='"{rawparams|string}"'

	G4 P{printer["gcode_macro _ERCF_VAR"].ercf_servo_move_dwell|int}

	_proc_end function=_servo_move_dwell

[gcode_macro _cart_move_dwell]
description: impute a dwell time to allow for the stepper movement to complete
gcode:

	_proc_start function=_cart_move_dwell func_params='"{rawparams|string}"'

	G4 P{printer["gcode_macro _ERCF_VAR"].ercf_cart_move_dwell|int}

	_proc_end function=_cart_move_dwell

[gcode_macro _gear_move_dwell]
description: impute a dwell time to allow for the stepper movement to complete
gcode:

	_proc_start function=_gear_move_dwell func_params='"{rawparams|string}"'

	G4 P{printer["gcode_macro _ERCF_VAR"].ercf_gear_move_dwell|int}

	_proc_end function=_gear_move_dwell

[gcode_macro _extruder_move_dwell]
description: impute a dwell time to allow for the extruder movement to complete
gcode:

	_proc_start function=_extruder_move_dwell func_params='"{rawparams|string}"'

	G4 P{printer["gcode_macro _ERCF_VAR"].ercf_extruder_move_dwell|int}

	_proc_end function=_extruder_move_dwell

[gcode_macro _load_unload_dwell]
description: impute a dwell time to allow for the extruder movement to complete
gcode:

	_proc_start function=_load_unload_dwell func_params='"{rawparams|string}"'

	G4 P{printer["gcode_macro _ERCF_VAR"].ercf_load_unload_dwell|int}

	_proc_end function=_load_unload_dwell

[gcode_macro _ercf_ptr_startup]
description: gcodes that are called during printer startup
gcode:

	_proc_start function=_ercf_ptr_startup func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	{% if printer["gcode_macro _ERCF_VAR"].home_ercf_at_boot %}
		# _ercf_park_n_home
		UPDATE_DELAYED_GCODE ID=_ercf_start_carthome DURATION=5
# TODO: test ercf error flag here and report if error

	{% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].test_ercf_load_seq_at_boot %}
		# ERCF_TEST_LOAD_SEQ LOOP=1
		UPDATE_DELAYED_GCODE ID=_ercf_start_loadtest DURATION=15
# TODO: test ercf error flag here and report if error

	{% endif %}

	# set_led_effect EFFECT=fil_ecdr_ledOff
	# set_led_effect EFFECT=TH_filsw_ledOff

#	{% if svv.module_debug_loaded %} _disable_debug_trace {% endif %}

	_proc_end function=_ercf_ptr_startup

[gcode_macro _ercf_park_n_home]
description: unload and home
gcode:

	_proc_start function=_ercf_park_n_home func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if svv.ercf_err_flag %}
		M118 > _ercf_park_n_home Skipped - an error condition is asserted <
	{% else %}
		# verify that the ercf is homed and knows where it's at (home does an unload if needed)
		{% if printer["gcode_macro ERCF_HOME"].home == -1 %}
			M118 ERCF [Unload & Park filament] and Homing...
			ERCF_HOME
		{% else %}
			# so we're homed (position known), just make sure filament isn't in cart and move to 0
			ERCF_EJECT_UNKNOW_STATE
			_ERCF_UNSELECT_TOOL
			{% set selector_axis_pos = printer["gcode_macro _ERCF_VAR"].colorselector[0]|float %}
#			MANUAL_STEPPER STEPPER=selector_stepper MOVE={selector_axis_pos} SPEED=100
			{% if printer["gcode_macro _ERCF_VAR"].sensorless_selector|int == 1 %}
				ERCF_MOVE_SELECTOR TARGET={selector_axis_pos}
			{% else %}
				MANUAL_STEPPER STEPPER=selector_stepper MOVE={selector_axis_pos}
			{% endif %}
		{% endif %}
	{% endif %}

	_proc_end function=_ercf_park_n_home

[gcode_macro _set_HE_heating_indication]
description: annunciate heating taking place
gcode:

	_proc_start function=_set_HE_heating_indication func_params='"{rawparams|string}"'

	{% if printer.save_variables.variables.module_ledeff_loaded %}
		; _set_ledeff_mode CHAIN=ercf_lights EFFECT=he_temp			# uses LED_EFFECTS code
	{% else %}
		; ERCFLts_red			# set ercf lights to normal		- uses Klipper Neopixel code
	{% endif %}
	# M300
	# M300

	_proc_end function=_set_HE_heating_indication

[gcode_macro _clear_HE_heating_indication]
description: deannunciate heating
gcode:

	_proc_start function=_clear_HE_heating_indication func_params='"{rawparams|string}"'

	{% if printer.save_variables.variables.module_ledeff_loaded %}
		; _set_ledeff_mode CHAIN=ercf_lights EFFECT=off
	{% else %}
		; ERCFLts_off
	{% endif %}
	# M300
	# M300
	# M300

	_proc_end function=_clear_HE_heating_indication

[gcode_macro _alert_ercf_is_paused]
description: alerts user that ERCF is Paused and needs to be Unlocked
gcode:

	_proc_start function=_alert_ercf_is_paused func_params='"{rawparams|string}"'

	M118 ERCF is paused, run "ERCF_UNLOCK" to unlock it ...
	# M300
	# M300

	_proc_end function=_alert_ercf_is_paused

[gcode_macro ercf_move_cart]
description: move ercf cart to param C
# Example: ercf_move_cart C=9
gcode:

	_proc_start function=ercf_move_cart func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if svv.ercf_err_flag %}
		M118 > ercf_move_cart Skipped - an error condition is asserted <
	{% else %}
		_ercf_park_n_home
		{% set selector_axis_pos = printer["gcode_macro _ERCF_VAR"].colorselector[params.C|default(0)|int]|float %}
#		MANUAL_STEPPER STEPPER=selector_stepper MOVE={selector_axis_pos} SPEED=100
		{% if printer["gcode_macro _ERCF_VAR"].sensorless_selector|int == 1 %}
			ERCF_MOVE_SELECTOR TARGET={selector_axis_pos}
		{% else %}
			MANUAL_STEPPER STEPPER=selector_stepper MOVE={selector_axis_pos}
		{% endif %}
	{% endif %}

	_proc_end function=ercf_move_cart

[gcode_macro ERCF_SELECT_TOOL_dbg]
description: wrapper around ercf lib proc for error check so seq test procs can not run on blindly if an error exists.
gcode:

	_proc_start function=ERCF_SELECT_TOOL_dbg func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if svv.ercf_err_flag %}
		M118 > ERCF_SELECT_TOOL {rawparams} Skipped - an error condition is asserted <
	{% else %}
		ERCF_SELECT_TOOL {rawparams}
# M118 TOOL {params.TOOL|int} selected
	{% endif %}

	_proc_end function=ERCF_SELECT_TOOL_dbg

[gcode_macro ERCF_TEST_LOAD_SEQ]
description: wrapper code for ERCF_TEST_LOAD_SEQUENCE - homes at start, homes at end
# to be used at boot or print start, if so desired by user (set in ERCF_VARS)
gcode:

	_proc_start function=ERCF_TEST_LOAD_SEQ func_params='"{rawparams|string}"'

	save_variable VARIABLE=ercf_err_flag VALUE=0		#clear error flag

	_ercf_park_n_home

	ERCF_TEST_LOAD_SEQUENCE {rawparams}

	ercf_move_cart C=0

	save_variable VARIABLE=ercf_err_flag VALUE=0		#clear error flag

	_proc_end function=ERCF_TEST_LOAD_SEQ

###############################
# ERCF.py proc wrappers
###############################

[gcode_macro ERCF_LOAD]
description: wrapper for ERCF.py fw proc to handle error conditions, verbosity, and adds a dwell
rename_existing: _ERCF_LOAD_STOCK
gcode:

	_proc_start function=ERCF_LOAD func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if svv.ercf_err_flag %}
		M118 > ERCF_LOAD Skipped - an error condition is asserted <
	{% else %}
		_ERCF_LOAD_STOCK {rawparams}
		_load_unload_dwell
	{% endif %}

	_proc_end function=ERCF_LOAD

[gcode_macro ERCF_UNLOAD]
description: wrapper for ERCF.py fw proc to handle error conditions, verbosity, and adds a dwell
rename_existing: _ERCF_UNLOAD_STOCK
gcode:

	_proc_start function=ERCF_UNLOAD func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if svv.ercf_err_flag %}
		M118 > ERCF_UNLOAD Skipped - an error condition is asserted <
	{% else %}
		_ERCF_UNLOAD_STOCK {rawparams}
		_load_unload_dwell
	{% endif %}

	_proc_end function=ERCF_UNLOAD

[gcode_macro ERCF_BUZZ_GEAR_MOTOR]
description: wrapper for ERCF.py fw proc to handle error conditions, verbosity, and adds a dwell
rename_existing: _ERCF_BUZZ_GEAR_MOTOR_STOCK
gcode:

	_proc_start function=ERCF_BUZZ_GEAR_MOTOR func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if svv.ercf_err_flag %}
		M118 > ERCF_BUZZ_GEAR_MOTOR Skipped - an error condition is asserted <
	{% else %}
		_ERCF_BUZZ_GEAR_MOTOR_STOCK {rawparams}
		_gear_move_dwell
	{% endif %}

	_proc_end function=ERCF_BUZZ_GEAR_MOTOR

[gcode_macro ERCF_HOME_EXTRUDER]
description: wrapper of a ERCF.py fw proc
rename_existing: _ERCF_HOME_EXTRUDER_STOCK
gcode:
	_proc_start function=ERCF_HOME_EXTRUDER func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if svv.ercf_err_flag %}
		M118 > ERCF_HOME_EXTRUDER Skipped - an error condition is asserted <
	{% else %}
		_ERCF_HOME_EXTRUDER_STOCK {rawparams}
	{% endif %}

	_proc_end function=ERCF_HOME_EXTRUDER

[gcode_macro ERCF_CALIBRATE_ENCODER]
description: wrapper for ERCF.py fw proc to handle error conditions, verbosity
rename_existing: _ERCF_CALIBRATE_ENCODER_STOCK
gcode:

	_proc_start function=ERCF_CALIBRATE_ENCODER func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if svv.ercf_err_flag %}
		M118 > ERCF_CALIBRATE_ENCODER Skipped - an error condition is asserted <
	{% else %}
		_ERCF_CALIBRATE_ENCODER_STOCK {rawparams}
	{% endif %}

	_proc_end function=ERCF_CALIBRATE_ENCODER

[gcode_macro ERCF_RESET_ENCODER_COUNTS]
description: wrapper for ERCF.py fw proc to handle error conditions, verbosity
rename_existing: _ERCF_RESET_ENCODER_COUNTS_STOCK
gcode:

	_proc_start function=ERCF_RESET_ENCODER_COUNTS func_params='"{rawparams|string}"'

	_ERCF_RESET_ENCODER_COUNTS_STOCK {rawparams}

	_proc_end function=ERCF_RESET_ENCODER_COUNTS

[gcode_macro ERCF_SET_STEPS]
description: wrapper for ERCF.py fw proc to handle error conditions, verbosity
rename_existing: _ERCF_SET_STEPS_STOCK
gcode:

	_proc_start function=ERCF_SET_STEPS func_params='"{rawparams|string}"'

	_ERCF_SET_STEPS_STOCK {rawparams}

	_proc_end function=ERCF_SET_STEPS

[gcode_macro ERCF_GET_SELECTOR_POS]
description: wrapper for ERCF.py fw proc to handle error conditions, verbosity
rename_existing: _ERCF_GET_SELECTOR_POS_STOCK
gcode:

	_proc_start function=ERCF_GET_SELECTOR_POS func_params='"{rawparams|string}"'

	_ERCF_GET_SELECTOR_POS_STOCK {rawparams}

	_proc_end function=ERCF_GET_SELECTOR_POS

[gcode_macro ERCF_MOVE_SELECTOR]
description: wrapper for ERCF.py fw proc to handle error conditions, verbosity
rename_existing: _ERCF_MOVE_SELECTOR_STOCK
gcode:

	_proc_start function=ERCF_MOVE_SELECTOR func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if svv.ercf_err_flag %}
		M118 > ERCF_MOVE_SELECTOR Skipped - an error condition is asserted <
	{% else %}
		_ERCF_MOVE_SELECTOR_STOCK {rawparams}
	{% endif %}

	_proc_end function=ERCF_MOVE_SELECTOR

[gcode_macro ERCF_ENDLESSSPOOL_UNLOAD]
description: wrapper for ERCF.py fw proc to handle error conditions, verbosity
rename_existing: _ERCF_ENDLESSSPOOL_UNLOAD_STOCK
gcode:

	_proc_start function=ERCF_ENDLESSSPOOL_UNLOAD func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if svv.ercf_err_flag %}
		M118 > ERCF_ENDLESSSPOOL_UNLOAD Skipped - an error condition is asserted <
	{% else %}
		_ERCF_ENDLESSSPOOL_UNLOAD_STOCK {rawparams}
	{% endif %}

	_proc_end function=ERCF_ENDLESSSPOOL_UNLOAD

[gcode_macro ERCF_FINALIZE_LOAD]
description: wrapper for ERCF.py fw proc to handle error conditions, verbosity
rename_existing: _ERCF_FINALIZE_LOAD_STOCK
gcode:

	_proc_start function=ERCF_FINALIZE_LOAD func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if svv.ercf_err_flag %}
		M118 > ERCF_FINALIZE_LOAD Skipped - an error condition is asserted <
	{% else %}
		_ERCF_FINALIZE_LOAD_STOCK {rawparams}
	{% endif %}

	_proc_end function=ERCF_FINALIZE_LOAD

###############################
# Klipper fw proc wrappers
###############################

[gcode_macro MANUAL_STEPPER]
description: wrapper for FW proc to handle error conditions, verbosity, and conditionally dwell
rename_existing: _MANUAL_STEPPER_STOCK
gcode:

	_proc_start function=MANUAL_STEPPER func_params='"{rawparams|string}"'

	# if in future there are more than ercf man steppers, then need to use conditionals herein.

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if svv.ercf_err_flag and params.ENABLE|default(1)|int %} 				# if ENABLE not passed or != 0 and in an error, then don't do it.
		M118 > MANUAL_STEPPER Skipped - an error condition is asserted <
	{% else %}
		_MANUAL_STEPPER_STOCK {rawparams}

		#determine dwell, if applicable
		{% if params.SET_POSITION|default("")|string != "" or params.ENABLE|default(1)|int == 0 %}
			# do no dwell on a set_position or a disable command
		{% elif params.STEPPER|string|lower == "selector_stepper" and params.NODWELL|default(0)|int == 0 %}
			_cart_move_dwell
		{% elif params.STEPPER|string|lower == "gear_stepper" and params.NODWELL|default(0)|int == 0 %}
			_gear_move_dwell
		{% elif params.NODWELL|default(0)|int != 0 %}
			# so NODWELL is set
		{% else %}
			# we shouldn't get here...
			M118 ___ unexpected command: manual_stepper {rawparams} ___
		{%endif %}

	{% endif %}

	_proc_end function=MANUAL_STEPPER

[gcode_macro SET_SERVO]
description: wrapper for FW proc to handle error conditions, verbosity, and conditionally dwell
rename_existing: _SET_SERVO_STOCK
gcode:

	_proc_start function=SET_SERVO func_params='"{rawparams|string}"'

	# if in future there are more than ercf servos, then need to use conditionals herein.

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if svv.ercf_err_flag and params.WIDTH|default(1)|int %} 				# if WIDTH not passed or != 0 and in an error, then don't do it.
		M118 > SET_SERVO Skipped - an error condition is asserted <
	{% else %}
		_SET_SERVO_STOCK {rawparams}
		# only dwell when a move to an angle or width is commanded - no dwell if servo is just depowered (WIDTH=0.0)
		{% if (params.ANGLE|default(0.0)|float == 0.0) and (params.WIDTH|default(0.0)|float == 0.0) %}
			# M118 no ERCF Servo dwell
		{% else %}
			# M118 ERCF Servo dwelling Angle:{params.ANGLE|default(0)} Width:{params.WIDTH|default(0)}
		 _servo_move_dwell
		{% endif %}
	{% endif %}

	_proc_end function=SET_SERVO

[gcode_macro _ercf_set_eject_temp]
description: set extruder to eject temp before load/unload
gcode:

	_proc_start function=_ercf_set_eject_temp func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if printer.extruder.temperature < printer["gcode_macro _ERCF_VAR"].extruder_eject_temp %}
		{% if svv.ercf_he_temp_restore_val %}
			M118 !!! _ercf_set_eject_temp possibly nested?? Restore val already set to: {svv.ercf_he_temp_restore_val} !!!
		{% else %}
			save_variable variable=ercf_he_temp_restore_val value={svv.extruder_temp_setting}		# cache current he temp setting
		{% endif %}
		_ercf_wait_he_temp TEMP={printer["gcode_macro _ERCF_VAR"].extruder_eject_temp}
	{% endif %}

	_proc_end function=_ercf_set_eject_temp

[gcode_macro _ercf_restore_he_temp]
description: restore extruder temp after a load/unload raise to eject temp
gcode:

	_proc_start function=_ercf_restore_he_temp func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if svv.ercf_he_temp_restore_val %}
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> _ercf_restore_he_temp: {svv.ercf_he_temp_restore_val} <<< {% endif %}
		_ercf_start_he_temp TEMP={svv.ercf_he_temp_restore_val}
		save_variable variable=ercf_he_temp_restore_val value=0		# clear cached temp setting
	{% else %}
		M118 !!! _ercf_restore_he_temp possibly nested?? Restore val already cleared: {svv.ercf_he_temp_restore_val} !!!
	{% endif %}

	_proc_end function=_ercf_restore_he_temp

[gcode_macro _ercf_wait_he_temp]
description: set he temp to passed TEMP (int) parameter and wait
gcode:

	_proc_start function=_ercf_wait_he_temp func_params='"{rawparams|string}"'

	_set_HE_heating_indication
	M109 S{params.TEMP|int}						# set he temp and wait
	_clear_HE_heating_indication

	_proc_end function=_ercf_wait_he_temp

[gcode_macro _ercf_start_he_temp]
description: set he temp to passed TEMP (int) parameter and carry on (no wait)
gcode:

	_proc_start function=_ercf_start_he_temp func_params='"{rawparams|string}"'

	M104 S{params.TEMP|int}						# set he temp and carry on
	UPDATE_DELAYED_GCODE ID=_ercf_temp_ind_check_cycle DURATION=0.1					# check in 0.1 secs

	_proc_end function=_ercf_start_he_temp

[gcode_macro _ercf_start_Cold_temp]
description: set he temp to 0 and carry on (no wait)
gcode:

	_proc_start function=_ercf_start_Cold_temp func_params='"{rawparams|string}"'

	M104 S0																			# set he temp and carry on
	_clear_HE_heating_indication

	_proc_end function=_ercf_start_Cold_temp

[delayed_gcode _ercf_temp_ind_check_cycle]
#description: used to periodically check and see if temp = target and, if so, clear heating indication
initial_duration: 0
gcode:

	_proc_start function=_ercf_temp_ind_check_cycle func_params='"{rawparams|string}"'

	{% if printer.extruder.target|int != printer.extruder.temperature|int %}
		_set_HE_heating_indication
		UPDATE_DELAYED_GCODE ID=_ercf_temp_ind_check_cycle DURATION=3					# check again in 3 secs
	{% else %}
		UPDATE_DELAYED_GCODE ID=_ercf_temp_ind_check_cycle DURATION=0					# at temp - stop checking
		_clear_HE_heating_indication
	{% endif %}

	_proc_end function=_ercf_temp_ind_check_cycle

[gcode_macro _ercf_syncd_th_load_unload]
description: perform syncronous retract/extrude move of ercf gear motor and extruder motor for unload/load of filament to/from top of th inlet from/to th_sensor
# params are MODIFIER (+/- distance in mm) and RETRACT (bool: 1 = retract, 0 = extrude)
# references end_of_bowden_to_sensor as base distance
# example: _ercf_syncd_th_load_unload [MODIFIER=some_+/-_val] [RETRACT=bool]

gcode:

	_proc_start function=_ercf_syncd_th_load_unload func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if svv.ercf_err_flag %} 				# if in an error, don't do it.
		M118 > _ercf_syncd_th_load_unload Skipped - an error condition is asserted <
	{% else %}

		go_relative
		_reset_extruder
		MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0

		MANUAL_STEPPER STEPPER=gear_stepper MOVE={"-" if params.RETRACT|default(0)|int else ""}{printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + params.MODIFIER|default(0)|float} SPEED={printer["gcode_macro _ERCF_VAR"].sync_speed|float} ACCEL={printer["gcode_macro _ERCF_VAR"].sync_accel|float} SYNC=0 NODWELL=1
		G1 E{"-" if params.RETRACT|default(0)|int else ""}{printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + params.MODIFIER|default(0)|float} F{printer["gcode_macro _ERCF_VAR"].sync_feedrate|float}

		_gear_move_dwell	# impute delay to see if this is what is causing the https://i.imgur.com/L5tPy8V.png

	{% endif %}

	_proc_end function=_ercf_syncd_th_load_unload

[gcode_macro ERCF_TEST_LOAD_CART]
description: Test load sequence on a single Cart (param is CART) - home at start, home at end
gcode:

	_proc_start function=ERCF_TEST_LOAD_CART func_params='"{rawparams|string}"'

	save_variable VARIABLE=ercf_err_flag VALUE=0		#clear error flag

	_ercf_park_n_home

	ERCF_SELECT_TOOL_dbg TOOL={params.CART|int}			# wrapper to prevent movement if an error condition is asserted

	ERCF_LOAD LENGTH={printer["gcode_macro _ERCF_VAR"].ercf_test_load_seq_len}
	ERCF_UNLOAD LENGTH={printer["gcode_macro _ERCF_VAR"].ercf_test_load_seq_len}
	_ERCF_UNSELECT_TOOL

	ercf_move_cart C=0

	save_variable VARIABLE=ercf_err_flag VALUE=0		#clear error flag

	_proc_end function=ERCF_TEST_LOAD_CART

[gcode_macro ERCF_SERVO_DOWN]
description: for macro button purposes only
gcode:

	_proc_start function=ERCF_SERVO_DOWN func_params='"{rawparams|string}"'

	_ERCF_SERVO_DOWN {rawparams}

	_proc_end function=ERCF_SERVO_DOWN

[gcode_macro ERCF_SERVO_UP]
description: for macro button purposes only
gcode:

	_proc_start function=ERCF_SERVO_UP func_params='"{rawparams|string}"'

	_ERCF_SERVO_UP {rawparams}

	_proc_end function=ERCF_SERVO_UP

