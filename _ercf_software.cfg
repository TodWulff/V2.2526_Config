###############################
# ERCF module
###############################

# MHz: added tools 9 to 11 for the 12-cart unit
# MHz: nix'd [save_variables] herein as already in use on v2.2526 (copied contents of ercf_vars.cfg over to _globals.pvar)
# MHz: nix'd [response] section herein as already in use on v2.2526
# MHz: added debug flag var and conditionals to report entry and exit from procs
# MHz: added various flags and conditionals for verbosity: error, status, info reporting
# MHz: added my own cart load testing before realizing it was already done... lol
# MHz: added home check (w/ unload) and unload (if homed) to existing load test sequence 
# MHz: working on nix'g balance of stuffs in the event of a load/unload error on looping stuffs - such as 
#	   ercf calibrate, load sequence, cart load sequence, etc.  using svv.ercf_err_flag

[ercf]
# Encoder 
encoder_pin: ^ercf:PA6
# encoder_resolution: 1.333511 # in mm
# encoder_resolution: 1.366494 # in mm
# encoder_resolution: 1.351351 # in mm

; 08:51:22 ERCF_DISPLAY_ENCODER_POS
; 08:51:22 Encoder value is 66.216199
; 08:51:39 ERCF_RESET_ENCODER_COUNTS
; 08:51:42 ERCF_DISPLAY_ENCODER_POS
; 08:51:42 Encoder value is 0.0
; 08:52:16 ercf_calibrate_encoder DIST=500
; 08:52:27 + counts = 744.000
; 08:52:38 - counts = 745.000
; 08:52:48 + counts = 745.000
; 08:52:59 - counts = 745.000
; 08:53:10 + counts = 744.000
; 08:53:20 - counts = 745.000
; 08:53:31 + counts = 744.000
; 08:53:41 - counts = 744.000
; 08:53:52 + counts = 744.000
; 08:54:03 - counts = 745.000
; 08:54:03 Load direction: mean=744.20 stdev=0.45 min=744 max=745 range=1
; 08:54:03 Unload direction: mean=744.80 stdev=0.45 min=744 max=745 range=1
; 08:54:03 Before calibration measured length = 503.040410
; 08:54:03 Resulting resolution for the encoder = 1.343183
; 08:54:03 After calibration measured length = 500.000000
encoder_resolution: 1.343183 # used 

# Speeds and accels
# Long moves are faster than the small ones
# 100mm/s should be "quiet" with the NEMA14 motor or a NEMA17 pancake, but you can go lower if your really want it to be low noise
# Tested without any issue at 200mm/s, but it's noisy. I'm running mine at 170mm/s for long moves and 50mm/s for short moves.
long_moves_speed: 50   # mm/s. Default value is 100mm/s.
long_moves_accel: 200  # mm/s². Default value is 400mm/s²
short_moves_speed: 25  # mm/s. Default value is 25mm/s.
short_moves_accel: 200 # mm/s². Default value is 400mm/s²

###############################
# ERCF Save Variables
###############################

# nix'd [save variables] instantiation as v2.2526 is already using save variables
# moved contents of ercf_vars.cfg to _globals.pvar
# [save_variables]
# filename: /home/pi/klipper_config/ercf_vars.cfg
# and deleted ercf_vars.cfg

###############################
# ERCF Calibration macros
###############################

[gcode_macro ERCF_CALIB_SELECTOR]
description: Calibration of the selector position for a defined Tool
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CALIB_SELECTOR func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CALIB_SELECTOR Start ... {% endif %}

	_ERCF_SERVO_UP

	{% set move_length=(20.0 + (params.TOOL|int + 1)*21.0 + ((params.TOOL|int + 1)/3)*5.0) %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Measuring the selector position for tool {params.TOOL} {% endif %}

	ERCF_GET_SELECTOR_POS REF={move_length|int}

	ERCF_MOTORS_OFF

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CALIB_SELECTOR End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CALIB_SELECTOR {% endif %}

[gcode_macro ERCF_CALIBRATE]
description: Complete calibration of all ERCF Tools
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CALIBRATE func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CALIBRATE Start ... {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} 
		M118 Start the complete auto calibration...
		M118 First home'g the ERCF
	{% endif %}

	ERCF_HOME

	save_variable VARIABLE=ercf_err_flag VALUE=0		#clear error flag
	
	{% for chan in range(printer["gcode_macro _ERCF_VAR"].colorselector|length) if not svv.ercf_err_flag %}
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} 
			M118 ERCF_CALIBRATE_SINGLE TOOL={chan|int}
		{% else %}
			M118 __ Calibrating Tool {chan|int} __
		{% endif %}
		ERCF_CALIBRATE_SINGLE TOOL={chan|int}
	{% endfor %}

	_ERCF_UNSELECT_TOOL	# force servo up and clear tool selected & color selected 

 M118 ERCF_Calibrate Error: {svv.ercf_err_flag}

	{% if svv.ercf_err_flag == 0 %}
		M118 End of auto-cal - Restart firmware now.
	{% else %}
		M118 End of auto-cal - Error Exists - resolve and rerun.
	{% endif %}

	save_variable VARIABLE=ercf_err_flag VALUE=0		#clear error flag

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CALIBRATE End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CALIBRATE {% endif %}

[gcode_macro ERCF_CALIBRATE_SINGLE]
description: Calibration of a single ERCF Tool
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CALIBRATE_SINGLE func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CALIBRATE_SINGLE Start ... {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
	
	{% if params.TOOL|int >= 0 and params.TOOL|int < printer["gcode_macro _ERCF_VAR"].colorselector|length %}
		{% if printer["gcode_macro ERCF_HOME"].home == -1 %} 
			{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Homing the ERCF... {% endif %}
			ERCF_HOME
		{% endif %}

		; ERCF_SELECT_TOOL TOOL={params.TOOL}
		ERCF_SELECT_TOOL_dbg TOOL={params.TOOL}		# wrapper to prevent movement if an error condition is asserted
		ERCF_SET_STEPS RATIO=1.0

		{% if params.TOOL|int == 0 %}
			
			_ercf_set_eject_temp					# adjust to eject temp if not there

			{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Calibrating reference tool {params.TOOL} {% endif %}

			ERCF_LOAD LENGTH={printer["gcode_macro _ERCF_VAR"].min_bowden_length}
			ERCF_HOME_EXTRUDER TOTAL_LENGTH=400 STEP_LENGTH=0.5
			ERCF_CALIB_SAVE_VAR TOOL={params.TOOL}

			_ercf_syncd_th_load_unload RETRACT=1 MODIFIER={printer["gcode_macro _ERCF_VAR"].ercf_dual_unload_mod|float}		# dual unload - eject to top of extruder - ERCF_CALIBRATE_SINGLE

			ERCF_CALIB_UNLOAD

			ERCF_BUZZ_GEAR_MOTOR
			ERCF_IS_FILAMENT_STUCK_IN_ERCF
			
			; _ercf_restore_he_temp					# restore entry temp
			_ercf_start_Cold_temp

			_ERCF_UNSELECT_TOOL

		{% else %}
			{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Calibrating tool {params.TOOL} {% endif %}

			ERCF_LOAD LENGTH={printer["gcode_macro _ERCF_VAR"].min_bowden_length|float - 100.0}
			ERCF_CALIB_SAVE_VAR tool={params.TOOL}

			ERCF_CALIB_UNLOAD LENGTH={printer["gcode_macro _ERCF_VAR"].min_bowden_length|float - 100.0 + 27.0}
		{% endif %}

	{% else %}
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Tool out of range {% endif %}

		save_variable VARIABLE=ercf_err_flag VALUE=1		#flag an error - reset by caller

	{% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CALIBRATE_SINGLE End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CALIBRATE_SINGLE {% endif %}

[gcode_macro ERCF_CALIB_SAVE_VAR]
description: Saving ERCF calibration values
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CALIB_SAVE_VAR func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CALIB_SAVE_VAR Start ... {% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 >>> ERCF_CALIB_SAVE_VAR - Entered Params: {rawparams} <<< {% endif %}

	{% if params.TOOL|int == 0 %}

		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_CALIB_SAVE_VAR - Tool is 0 <<< {% endif %}

		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Tool {params.TOOL} calibration value is {printer['ercf'].encoder_pos|float} {% endif %}

		SAVE_VARIABLE VARIABLE=ercf_calib_ref VALUE={printer['ercf'].encoder_pos|float}	# this is the reference value
		SAVE_VARIABLE VARIABLE=ercf_calib_{params.TOOL|int} VALUE=1.0
		SET_GCODE_VARIABLE MACRO=ERCF_CALIB_UNLOAD VARIABLE=ref VALUE={printer['ercf'].encoder_pos|float}
		SET_GCODE_VARIABLE MACRO=ERCF_CALIB_UNLOAD VARIABLE=ratio VALUE=1.0
	{% else %}
		{% set ratio = (printer["gcode_macro _ERCF_VAR"].min_bowden_length|float - 100.0) / printer['ercf'].encoder_pos|float %}
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Tool {params.TOOL} ratio is {ratio|float} {% endif %}
		SAVE_VARIABLE VARIABLE=ercf_calib_{params.TOOL|int} VALUE={ratio|float}
		SET_GCODE_VARIABLE MACRO=ERCF_CALIB_UNLOAD VARIABLE=ratio VALUE={ratio|float}
	{% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CALIB_SAVE_VAR End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CALIB_SAVE_VAR {% endif %}

[gcode_macro ERCF_CALIB_UNLOAD]
description: Filament unload during ERCF calibration
variable_ratio: 0.0
variable_ref: 0.0
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CALIB_UNLOAD func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CALIB_UNLOAD Start ... {% endif %}

	# _ercf_set_eject_temp					# adjust to eject temp if not there

	{% set unload_length = params.LENGTH|default(0.0)|float %}
	{% if unload_length|float == 0.0 %}
		ERCF_UNLOAD LENGTH={(ref|float)*(ratio|float) - printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + 27.0}
	{% else %}
		{% if ratio|float < 1.0 %} # No correction move is done in case of "over targeting", hence the correction ratio is not applied during this unload sequence
			ERCF_UNLOAD LENGTH={(unload_length|float)}
		{% else %}
			ERCF_UNLOAD LENGTH={(unload_length|float)*(ratio|float)}
		{% endif %}
	{% endif %}

	# _ercf_restore_he_temp					# restore entry temp
			
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CALIB_UNLOAD End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CALIB_UNLOAD {% endif %}

# MHz: Nix'd as already instantiatedin _console_response.cfg
#[respond]
#default_type: command

###############################
# ERCF servo
###############################
# Push the top hat down (enable the bondtech gears) while "buzzing" the gear motor to ensure proper BMG gear meshing
[gcode_macro _ERCF_SERVO_DOWN]
description: Engage the ERCF gear & do a wiggle, then a buzz to ensure drive/idler gear tooth meshing
# once down and buzzed, the servo is disabled to keep from power stalling the servo
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ERCF_SERVO_DOWN func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ERCF_SERVO_DOWN Start ... {% endif %}

	MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0	# resets position counter to 0
	MANUAL_STEPPER STEPPER=gear_stepper MOVE=0.5 SPEED=25 ACCEL=0 SYNC=0 NODWELL=1		# stock manual_stepper is wrapped - no dwell as next servo moves impute a dwell
	SET_SERVO SERVO=ercf_servo ANGLE={printer["gcode_macro _ERCF_VAR"].servo_down_angle}
	# G4 P200																			# added dwell via wrapper proc hooks on FW proc + non hardcoded dwell period (see ercf_vars)
	MANUAL_STEPPER STEPPER=gear_stepper MOVE=0.0 SPEED=25 ACCEL=0 SYNC=0
	# G4 P100																			# added dwell via wrapper proc hooks on FW proc + non hardcoded dwell period (see ercf_vars)
	MANUAL_STEPPER STEPPER=gear_stepper MOVE=-0.5 SPEED=25 ACCEL=0 SYNC=0
	# G4 P100																			# added dwell via wrapper proc hooks on FW proc + non hardcoded dwell period (see ercf_vars)
	MANUAL_STEPPER STEPPER=gear_stepper MOVE=0.0 SPEED=25 ACCEL=0 NODWELL=1
	SET_SERVO SERVO=ercf_servo WIDTH=0.0												# disables the servo motor in the Down position - prevents power stalls

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ERCF_SERVO_DOWN End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ERCF_SERVO_DOWN {% endif %}

# Pull the top hat up (disengage the bondtech gears)
[gcode_macro _ERCF_SERVO_UP]
description: Disengage the ERCF gear and disabled after raised (won't fall) to prevent power stalling
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ERCF_SERVO_UP func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ERCF_SERVO_UP Start ... {% endif %}

	SET_SERVO SERVO=ercf_servo ANGLE={printer["gcode_macro _ERCF_VAR"].servo_up_angle}  # G4 P250 # added dwell via wrapper proc hooks calls to FW proc
	SET_SERVO SERVO=ercf_servo WIDTH=0.0	# disables the servo

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ERCF_SERVO_UP End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ERCF_SERVO_UP {% endif %}

###############################
# ERCF motors
###############################
[gcode_macro ERCF_MOTORS_OFF]
description: Turn off both ERCF motors and raise the servo up
#MHz - added servo up herein
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_MOTORS_OFF func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_MOTORS_OFF Start ... {% endif %}

	MANUAL_STEPPER STEPPER=gear_stepper ENABLE=0
	MANUAL_STEPPER STEPPER=selector_stepper ENABLE=0
	_ERCF_SERVO_UP

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_MOTORS_OFF End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_MOTORS_OFF {% endif %}

###############################
# PAUSE MACROS
# _ERCF_PAUSE is called when an human intervention is needed
# use ERCF_UNLOCK to start the manual intervention
# and use RESUME when the intervention is over to resume the current print
###############################

# Stop the delayed stop of the heater
[delayed_gcode disable_heater]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=disable_heater func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> disable_heater Start ... {% endif %}

	{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int != 0 %}
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Disable extruder heater (_ERCF_PAUSE timeout...) {% endif %}
		M104 S0
		_clear_HE_heating_indication
	{% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... disable_heater End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=disable_heater {% endif %}

# Pause the ERCF, park the extruder at the parking position
# Save the current state and start the delayed stop of the heated
# modify the timeout of the printer accordingly to timeout_pause
[gcode_macro _ERCF_PAUSE]
description: Pause the current print and lock the ERCF operations
variable_is_paused: 0
variable_extruder_temp: 0
gcode:
	{% set svv = printer.save_variables.variables %}				# set context for save_variables object
	
	######################### debug stuffs
#	{% if svv.module_debug_loaded %} _enable_trace_debug REASON='"chasing down failed ercf resume"' {% endif %}
#	{% if svv.module_debug_loaded %} _enable_gmove_debug REASON='"blah"' {% endif %}
#	{% if svv.module_debug_loaded %} _enable_save_var_debug REASON='"blah"' {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ERCF_PAUSE func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ERCF_PAUSE Start ... {% endif %}

	SET_GCODE_VARIABLE MACRO=_ERCF_PAUSE VARIABLE=extruder_temp VALUE={printer.extruder.target}
	SET_GCODE_VARIABLE MACRO=_ERCF_PAUSE VARIABLE=is_paused VALUE=1
	SET_IDLE_TIMEOUT TIMEOUT={printer["gcode_macro _ERCF_VAR"].timeout_pause}
	UPDATE_DELAYED_GCODE ID=disable_heater DURATION={printer["gcode_macro _ERCF_VAR"].disable_heater}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} 
		M118 An issue with the ERCF has been detected and the ERCF has been PAUSED
		M118 When you intervene to fix the issue, first call the "ERCF_UNLOCK" Gcode
		M118 Refer to the manual before resuming the print
	{% endif %}

	save_variable VARIABLE=ercf_err_flag VALUE=1		#flag an error - reset by caller

	SAVE_GCODE_STATE NAME=ERCF_state
	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0

	M118 _ERCF_Pause @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}

	PAUSE
	
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ERCF_PAUSE End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ERCF_PAUSE {% endif %}

[gcode_macro ERCF_UNLOCK]
description: Unlock ERCF operations
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_UNLOCK func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_UNLOCK Start ... {% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Unlock the ERCF {% endif %}
	
	stop_pause_alarm
	
	SET_GCODE_VARIABLE MACRO=_ERCF_PAUSE VARIABLE=is_paused VALUE=0
	UPDATE_DELAYED_GCODE ID=disable_heater DURATION=0
	
	{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == False %}
		_ERCF_UNSELECT_TOOL
	{% else %}
		_ERCF_UNSELECT_TOOL FORCED=0
	{% endif %}
	
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Heating to {printer["gcode_macro _ERCF_PAUSE"].extruder_temp} {% endif %}
	
	_ercf_wait_he_temp TEMP={printer["gcode_macro _ERCF_PAUSE"].extruder_temp}

	RESTORE_GCODE_STATE NAME=ERCF_state
	# spaghetti glue to ease restoring correctly from an _ERCF_PAUSE
	save_variable VARIABLE=last_saved_gcode_state VALUE='"ERCF_state"'
	
	save_variable VARIABLE=ercf_err_flag VALUE=0		#clear error flag
	
	M118 _ERCF_Unlock @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X:{printer.toolhead.position.x} Y:{printer.toolhead.position.y} Z:{printer.toolhead.position.z}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Refer to the manual before resuming the print {% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_UNLOCK End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_UNLOCK {% endif %}

	######################### debug stuffs
#	{% if svv.module_debug_loaded %} _disable_save_var_debug {% endif %}	# make sure svv debug off
#	{% if svv.module_debug_loaded %} _disable_gmove_debug {% endif %}
#	{% if svv.module_debug_loaded %} _disable_trace_debug {% endif %}

############################################
# Changing tool macros
# ERCF_CHANGE_TOOL_STANDALONE TOOL=XX to change filament outside of a print
# ERCF_CHANGE_TOOL_SLICER TOOL=XX will be called automatically (from the ACTIVATE_EXTRUDER gcode from SuperSlicer), don't use that for "manual" filament swap
# if the new extruder is different from the current extruder :
#	 eject the filament if needed
#	 load the new one
###########################################

[gcode_macro T0]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T0 func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T0 Start ... {% endif %}

	ERCF_CHANGE_TOOL TOOL=0

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T0 End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T0 {% endif %}

[gcode_macro T1]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T1 func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T1 Start ... {% endif %}

	ERCF_CHANGE_TOOL TOOL=1

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T1 End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T1 {% endif %}

[gcode_macro T2]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T2 func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T2 Start ... {% endif %}

	ERCF_CHANGE_TOOL TOOL=2

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T2 End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T2 {% endif %}

[gcode_macro T3]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T3 func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T3 Start ... {% endif %}

	ERCF_CHANGE_TOOL TOOL=3

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T3 End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T3 {% endif %}

[gcode_macro T4]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T4 func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T4 Start ... {% endif %}

	ERCF_CHANGE_TOOL TOOL=4

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T4 End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T4 {% endif %}

[gcode_macro T5]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T5 func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T5 Start ... {% endif %}

	ERCF_CHANGE_TOOL TOOL=5

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T5 End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T5 {% endif %}

[gcode_macro T6]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T6 func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T6 Start ... {% endif %}

	ERCF_CHANGE_TOOL TOOL=6

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T6 End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T6 {% endif %}

[gcode_macro T7]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T7 func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T7 Start ... {% endif %}

	ERCF_CHANGE_TOOL TOOL=7

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T7 End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T7 {% endif %}

[gcode_macro T8]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T8 func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T8 Start ... {% endif %}

	ERCF_CHANGE_TOOL TOOL=8

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T8 End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T8 {% endif %}

[gcode_macro T9]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T9 func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T9 Start ... {% endif %}

	ERCF_CHANGE_TOOL TOOL=9

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T9 End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T9 {% endif %}

[gcode_macro T10]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T10 func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T10 Start ... {% endif %}

	ERCF_CHANGE_TOOL TOOL=10

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T10 End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T10 {% endif %}

[gcode_macro T11]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=T11 func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> T11 Start ... {% endif %}

	ERCF_CHANGE_TOOL TOOL=11

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... T11 End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=T11 {% endif %}

[gcode_macro ERCF_CHANGE_TOOL]
description: Perform a tool swap, either in or out of a print
variable_retract_temp_min:		180			 # Minimum nozzle temperature to permit a retract.
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CHANGE_TOOL func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CHANGE_TOOL Start ... {% endif %}

 	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object
	{% set th = printer.toolhead %}									# set eazy accesss context for printer.toolhead object

	{% if printer.idle_timeout.state == "Printing" and svv.has_wipe_tower == 0 %}
		# we're in a print, and it has no wipe tower
		# so we need to prep for a swap
		{% set z_entry = th.position.z|float %}	  
		save_gcode_state NAME=ercf_change_tool_entry

		# need to do a rapid wipe before processing the swap.
		######################### safe anti-stringing tool-change wipe stuffs
		{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
		{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
		; {% set z_safe = [(th.position.z|float + 1), th.axis_maximum.z|float]|min %}
		{% set z_safe = [svv.maxz|float+1, th.axis_maximum.z]|min %}	# because, OAAT/SEQ context
		_reset_extruder													# zero the extruder
		go_relative
		{% if printer.extruder.temperature|int >= retract_temp_min|int %}
			G1 E-0.4 F3600					  							# retract filament
		{% else %} 
			M118 No pre-swap retract due to Low Temp...
		{% endif %}
		go_absolute
		G0 X{x_safe} Y{y_safe} Z{z_safe} F15000							# move nozzle to remove stringing
		M400															# wait for buffer to clear

		# consider variable use here, with bounding, considering max toolhead height
		go_relative
		G0 Z15 F3000	# 50mm/s
		go_absolute
		G0 X{range(6,70)|random} Y350 F15000	# 250mm/s				# move to random purge bucket location
	{% endif %}

	_ercf_set_eject_temp					# adjust to eject temp if not there

	# perform filament swap based on context:
	# if printing and with wipe tower, use slicer code
	# if printing sans wipe tower:
	#  - then slicer not doing any tip forming, so use adapted stand-alone tip forming code
	#  - already prepositioned by above code
	{% if printer.idle_timeout.state == "Printing" and svv.has_wipe_tower != 0 %} 
		ERCF_CHANGE_TOOL_SLICER TOOL={params.TOOL|int}		# slicer tip forming
	{% else %}
		ERCF_CHANGE_TOOL_STANDALONE TOOL={params.TOOL|int}	# this has a ercf tip forming
	{% endif %}

	_ercf_restore_he_temp					# restore entry temp

	# in print w/ no wipe tower - force an overt purge/scrub
	{% if printer.idle_timeout.state == "Printing" and svv.has_wipe_tower == 0 %}
		_print_purge			# execute the purge
		G0 Z{z_entry} F3000			# 50mm/s move up to entry z first, before doing the restore w/ move, to ensure stuff don't get bumped  
		restore_gcode_state NAME=ercf_change_tool_entry MOVE=1 MOVE_SPEED=300	# restore states w/ move back to proc entry loc
#		restore_gcode_state NAME=ercf_change_tool_entry 
	{% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CHANGE_TOOL End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CHANGE_TOOL {% endif %}

[gcode_macro ERCF_CHANGE_TOOL_SLICER]
description: Perform a tool swap during a print
gcode:
 	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CHANGE_TOOL_SLICER func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CHANGE_TOOL_SLICER Start ... {% endif %}

	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0

	#no homing here as ercf is homed as part of print start procs

	# then select cart
	{% if printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int != params.TOOL|int %}   

		save_variable VARIABLE=ercf_swaps VALUE={svv.ercf_swaps + 1}
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Tower Swaps: {svv.ercf_swaps|int} {% endif %}

		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 >>> ERCF_CHANGE_TOOL_SLICER Change Tool T{params.TOOL|int} <<< {% endif %}
		M117 Change Tool T{params.TOOL|int}

		ERCF_UNLOAD_TOOL	# uses slicer tip forming

		#consider validating extruder eject temp checks here
		#but since in a print with slicer tip forming, not needed, I guess...

		ERCF_LOAD_TOOL TOOL={params.TOOL|int}

######	ERCF_CHANGE_TOOL_SLICER_END contained the following and not used by other code
		{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
			{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
				SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
			{% endif %}
		{% else %}
			_alert_ercf_is_paused
		{% endif %}
######

	{% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CHANGE_TOOL_SLICER End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CHANGE_TOOL_SLICER {% endif %}

[gcode_macro ERCF_CHANGE_TOOL_STANDALONE]
description: Perform a tool swap out of a print (... or in print if no wipe tower (MHz))
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CHANGE_TOOL_STANDALONE func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CHANGE_TOOL_STANDALONE Start ... {% endif %}

 	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object
	{% set th = printer.toolhead %}									# set eazy accesss context for printer.toolhead object

	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0

	# extruder eject temp instantiation (i.e. if called from outside a print...)
	_ercf_set_eject_temp					# adjust to eject temp if not there

	# home if needed, which also unloads from toolhead or unknown (i.e. if called from outside a print...)
	{% if printer["gcode_macro ERCF_HOME"].home == -1 %}
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF not homed, homing it... {% endif %}
		ERCF_HOME
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 >>> ERCF_CHANGE_TOOL_STANDALONE Change Tool T{params.TOOL|int} <<< {% endif %}
		M117 Change Tool T{params.TOOL|int}
		
		# tool is unloaded after a home, so just load
		ERCF_LOAD_TOOL TOOL={params.TOOL|int}
		
		# ... and if in a print, bump swaps on the load
		{% if printer.idle_timeout.state == "Printing" and svv.has_wipe_tower == 0 %}
			save_variable VARIABLE=ercf_swaps VALUE={svv.ercf_swaps + 1}
			{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Non-Tower Swaps: {svv.ercf_swaps|int} {% endif %}
		{% endif %}

	# otherwise select cart
	{% elif printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int != params.TOOL|int %}


		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 >>> ERCF_CHANGE_TOOL_STANDALONE Change Tool T{params.TOOL|int} <<< {% endif %}
		M117 Change Tool T{params.TOOL|int}

		{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
			{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_CHANGE_TOOL_STANDALONE Unloading current filament <<< {% endif %}

			ERCF_EJECT	# uses ercf tip forming

		{% endif %}
		
		ERCF_LOAD_TOOL TOOL={params.TOOL|int}

		# ... and if in a print, bump swaps on the load
		{% if printer.idle_timeout.state == "Printing" and svv.has_wipe_tower == 0 %}
			save_variable VARIABLE=ercf_swaps VALUE={svv.ercf_swaps + 1}
			{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Non-Tower Swaps: {svv.ercf_swaps|int} {% endif %}
		{% endif %}

	{% else %}

		# IS HOMED and on correct cart - so check for lack filament & load if needed
		{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == False %}
		
			ERCF_LOAD_TOOL TOOL={params.TOOL|int}
			
			# ... and if in a print, bump swaps on the load
			{% if printer.idle_timeout.state == "Printing" and svv.has_wipe_tower == 0 %}
				save_variable VARIABLE=ercf_swaps VALUE={svv.ercf_swaps + 1}
				{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Non-Tower Swaps: {svv.ercf_swaps|int} {% endif %}
			{% endif %}
			
		{% endif %}

	{% endif %}
	 
	_ercf_restore_he_temp					# restore entry temp

	# ok, since we might be in a non-wipe tower print, reinstate stuffs as needed
	{% if printer.idle_timeout.state == "Printing" and svv.has_wipe_tower == 0 %}

		{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
			{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
				SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
			{% endif %}
		{% else %}
			_alert_ercf_is_paused
		{% endif %}
	{% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CHANGE_TOOL_STANDALONE End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CHANGE_TOOL_STANDALONE {% endif %}

############################################
# Unloading/Loading Macros
############################################

# Load filament from ERCF to nozzle
[gcode_macro ERCF_LOAD_TOOL]
description: Load the filament from the ERCF to the toolhead
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_LOAD_TOOL func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_LOAD_TOOL Start ... {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	_ercf_set_eject_temp					# adjust to eject temp if not there

	{% set ercf_params = printer.save_variables.variables %}
	{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
		{% if printer["gcode_macro ERCF_HOME"].home == -1 %}
			{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF not homed, homing it... {% endif %}
			ERCF_HOME
		{% endif %}
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Loading tool {params.TOOL|int} ... {% endif %}
		
		; ERCF_SELECT_TOOL TOOL={params.TOOL|int}
		ERCF_SELECT_TOOL_dbg TOOL={params.TOOL|int}				# added wrapper to prevent movement if an error condition is asserted
		
		ERCF_SET_STEPS RATIO={ercf_params['ercf_calib_%s' % (params.TOOL|string)]}
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Loading filament from ERCF to extruder ... {% endif %}
		ERCF_LOAD LENGTH={ercf_params.ercf_calib_ref|float - printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + printer["gcode_macro _ERCF_VAR"].ercf_th_load_len_mod|float}
		ERCF_LOAD_FILAMENT_IN_EXTRUDER
	{% else %}
		_alert_ercf_is_paused
	{% endif %}

	_ercf_restore_he_temp					# restore entry temp

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_LOAD_TOOL End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_LOAD_TOOL {% endif %}

# Unload filament from nozzle to ERCF, using built-in tip forming macro
[gcode_macro ERCF_EJECT]
description: Retract from nozzle, form tip, eject, parking filament in cart
# possibly called during a print filament swap, if a non-wipe tower mm print
gcode:

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_EJECT func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_EJECT Start ... {% endif %}

	{% set ercf_params = printer.save_variables.variables %}

	{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}  # if filament is in TH
		_ercf_set_eject_temp					# adjust to eject temp if not there 
	{% endif %}

	{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
		# not paused
		{% if printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int != -1 %}
			# no tool selected
			{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Unloading tool {printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int} ... {% endif %}
			{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
				# filament in HE

				# performs a mock ss tip forming and then calls
				# ERCF_HOME_EXTRUDER in ercf.py
				# but doesn't set ratio before, so do so now and call with ratio param
				{% set unload_ratio = ercf_params['ercf_calib_%s' % (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|string)] %}

				# Unload filament from the nozzle to the toolhead entrance using generic tip forming macro
				ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING RATIO={unload_ratio} # has baked in dual unload modifier

				ERCF_UNLOAD LENGTH={ercf_params.ercf_calib_ref|float - printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + printer["gcode_macro _ERCF_VAR"].unload_modifier|float - printer["gcode_macro _ERCF_VAR"].ercf_dual_unload_mod|float } # (params.FINAL|default(0)|int * printer["gcode_macro _ERCF_VAR"].ercf_dual_unload_mod|float)}

				_ERCF_UNSELECT_TOOL
			{% else %}
				ERCF_EJECT_UNKNOW_STATE
			{% endif %}
		{% else %}
			ERCF_EJECT_UNKNOW_STATE
		{% endif %}
	{% else %}
		_alert_ercf_is_paused
	{% endif %}

	_ercf_restore_he_temp					# restore entry temp

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_EJECT End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_EJECT {% endif %}

# Unload filament from nozzle to ERCF, assumes slicer is doing ramming
[gcode_macro ERCF_UNLOAD_TOOL]
description: Eject the filament DURING A PRINT and park it into the ERCF
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_UNLOAD_TOOL func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_UNLOAD_TOOL Start ... {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}  # if filament is in TH
		_ercf_set_eject_temp					# adjust to eject temp if not there 
	{% endif %}

	{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
		{% if printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int != -1 %}
			{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF_UNLOAD_TOOL {printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int} ... {% endif %}

			{% set ercf_params = printer.save_variables.variables %}

			# so slicer has formed tip at this point, presumably

			ERCF_HOME_EXTRUDER	# THIS IS IN ERCF.PY...

			# engage (lower) filament gear drive servo and set ratio to prep for unload
			; ERCF_SELECT_TOOL TOOL={printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int}
			ERCF_SELECT_TOOL_dbg TOOL={printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int} 		# wrapper to prevent movement if an error condition is asserted
			ERCF_SET_STEPS RATIO={ercf_params['ercf_calib_%s' % (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|string)]}

			_ercf_syncd_th_load_unload RETRACT=1 MODIFIER={printer["gcode_macro _ERCF_VAR"].ercf_dual_unload_mod|float}		# dual unload - eject from HE to top of extruder

			# eject from top of extruder to cart
			ERCF_UNLOAD LENGTH={ercf_params.ercf_calib_ref|float - printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + printer["gcode_macro _ERCF_VAR"].unload_modifier|float - (printer["gcode_macro _ERCF_VAR"].ercf_dual_unload_mod|float)}

			# raise servo and set color|cart to null selection per conditionals
			_ERCF_UNSELECT_TOOL 
		{% endif %}
	{% else %}
		_alert_ercf_is_paused
	{% endif %}

	_ercf_restore_he_temp					# restore entry temp

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_UNLOAD_TOOL End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_UNLOAD_TOOL {% endif %}

############################################
# Select/Unselect a tool
# move the selector (if needed) to the requested tool
############################################

# Select a tool. move the idler and then move the color selector (if needed)
[gcode_macro ERCF_SELECT_TOOL]
description: Raise servo, move the selector to params.TOOL, Lower servo, save color_/tool_selected
# tool_selected holds the tool that has been selected
# color_selected holds the tool that has been selected
variable_tool_selected: -1
variable_color_selected: -1
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_SELECT_TOOL func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_SELECT_TOOL Start ... {% endif %}

	{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_SELECT_TOOL | _ERCF_PAUSE.is_paused = 0 <<< {% endif %}
		{% if printer["gcode_macro ERCF_HOME"].home != -1 %}
			{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Select Tool {params.TOOL} ... {% endif %}
			_ERCF_SERVO_UP
			MANUAL_STEPPER STEPPER=selector_stepper MOVE={printer["gcode_macro _ERCF_VAR"].colorselector[params.TOOL|int]}
			SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=tool_selected VALUE={params.TOOL}
			SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=color_selected VALUE={params.TOOL}
			_ERCF_SERVO_DOWN
			{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Tool {params.TOOL} Enabled {% endif %}
		{% else %}
			{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Could not select tool, ERCF is not homed {% endif %}
		{% endif %}
	{% else %}
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_SELECT_TOOL | Could not select tool, _ERCF_PAUSE.is_paused = 1 <<< {% endif %}
		_alert_ercf_is_paused
	{% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_SELECT_TOOL End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_SELECT_TOOL {% endif %}

# Unselect a tool
[gcode_macro _ERCF_UNSELECT_TOOL]
description: Unselect tool_selected (set to -1) and, if FORCED=1, also unselects color_selected (sets to -1) (FORCED defaults to 1 if not passed)
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ERCF_UNSELECT_TOOL func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> _ERCF_UNSELECT_TOOL Start ... {% endif %}

	{% set unselect_color = params.FORCED|default(1)|int %}
	{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
		{% if printer["gcode_macro ERCF_HOME"].home != -1 %}
			_ERCF_SERVO_UP
			SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=tool_selected VALUE=-1
			{% if unselect_color == 1 %}
				SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=color_selected VALUE=-1
			{% endif %}
			ERCF_SET_STEPS RATIO=1.0
			{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Tool Unselected, Servo Raised {% endif %}
		{% else %}
			{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Could not unselect tool, ERCF is not homed {% endif %}
		{% endif %}
	{% else %}
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> _ERCF_UNSELECT_TOOL | _ERCF_PAUSE.is_paused = 1 <<< {% endif %}
		_alert_ercf_is_paused
	{% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... _ERCF_UNSELECT_TOOL End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ERCF_UNSELECT_TOOL {% endif %}

############################################
# Loading/Unloading part FROM/TO EXTRUDER TO/FROM NOZZLE
############################################

# Load the filament into the extruder
# Call _ERCF_PAUSE if the filament is not detected by the toolhead sensor
[gcode_macro ERCF_LOAD_FILAMENT_IN_EXTRUDER]
description: Load filament from the toolhead entrance to the nozzle
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_LOAD_FILAMENT_IN_EXTRUDER func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_LOAD_FILAMENT_IN_EXTRUDER Start ... {% endif %}

	{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
		{% if printer.extruder.temperature >= printer["gcode_macro _ERCF_VAR"].min_temp_extruder %}
			{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Loading Filament... {% endif %}
			
			_ercf_syncd_th_load_unload MODIFIER=-7			# dual load - top of extruder to sensor -7mm

			_extruder_move_dwell # G4 P100
			
			ERCF_HOME_EXTRUDER TOTAL_LENGTH=30.0 STEP_LENGTH=0.5
			_ERCF_UNSELECT_TOOL FORCED=0
			ERCF_FINALIZE_LOAD LENGTH={printer["gcode_macro _ERCF_VAR"].sensor_to_nozzle|float}
			
			_reset_extruder
			go_absolute
			{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Load Complete {% endif %}
		{% else %}
			{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Extruder too cold {% endif %}
			_ERCF_PAUSE
		{% endif %}
	{% else %}
		_alert_ercf_is_paused
	{% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_LOAD_FILAMENT_IN_EXTRUDER End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_LOAD_FILAMENT_IN_EXTRUDER {% endif %}

# StandAlone cooling moves to extract proper filament tip
[gcode_macro ERCF_FORM_TIP_STANDALONE]
description: Generic tip forming macro - mocking ss, presumably
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_FORM_TIP_STANDALONE func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_FORM_TIP_STANDALONE Start ... {% endif %}

	{% set COOLING_TUBE_LENGTH = params.COOLING_TUBE_LENGTH|default(10) %} # Dragon ST: 15, Dragon HF: 10, Mosquito: 20
	{% set COOLING_TUBE_RETRACTION = params.COOLING_TUBE_RETRACTION|default(30) %} # Dragon ST: 35, Dragon HF: 30, Mosquito: 38
	{% set INITIAL_COOLING_SPEED = params.INITIAL_COOLING_SPEED|default(10) %}
	{% set FINAL_COOLING_SPEED = params.FINAL_COOLING_SPEED|default(50) %}
	{% set COOLING_MOVES = params.COOLING_MOVES|default(5) %}
	{% set TOOLCHANGE_TEMP = params.TOOLCHANGE_TEMP|default(0) %}
	{% set USE_SKINNYDIP = params.USE_SKINNYDIP|default(1) %}
	{% set USE_FAST_SKINNYDIP = params.USE_FAST_SKINNYDIP|default(1) %}
	{% set SKINNYDIP_DISTANCE = params.SKINNYDIP_DISTANCE|default(26) %}
	{% set DIP_INSERTION_SPEED = params.DIP_INSERTION_SPEED|default(33) %}
	{% set DIP_EXTRACTION_SPEED = params.DIP_EXTRACTION_SPEED|default(70) %}
	{% set MELT_ZONE_PAUSE = params.MELT_ZONE_PAUSE|default(0) %}
	{% set COOLING_ZONE_PAUSE = params.COOLING_ZONE_PAUSE|default(0) %}
	{% set UNLOADING_SPEED_START = params.UNLOADING_SPEED_START|default(199) %}
	{% set UNLOADING_SPEED = params.UNLOADING_SPEED|default(20) %}
	{% set RAMMING_VOLUME = params.RAMMING_VOLUME|default(0) %} # in mm3
	{% set INITIAL_RETRACT = params.INITIAL_RETRACT|default(0) %} # Use an initial retract or not. Don't use it if you want to ram the filament
	{% set FINAL_EJECT = params.FINAL_EJECT|default(0) %} # Fully eject the filament afterwards, default is no

	go_relative
	_reset_extruder

	SET_PRESSURE_ADVANCE ADVANCE=0	### HMMM this doesn't get reset to w/e it was before entry.  maybe relying on filament gcode from slicer???
	
	{% set OLD_TEMP = printer.extruder.target %}

	# Ramming with SuperSlicer standard setting
	{% if INITIAL_RETRACT|int == 1 %}
		G1 E-8.5000 F3000
	{% endif %}

	{% set RATIO = (RAMMING_VOLUME|float) /23.0 %}

	G1 E{0.5784 * RATIO|float} F299 #7
	G1 E{0.5834 * RATIO|float} F302 #3
	G1 E{0.5918 * RATIO|float} F306 #6
	G1 E{0.6169 * RATIO|float} F319 #6
	G1 E{0.3393 * RATIO|float} F350 #0
	G1 E{0.3363 * RATIO|float} F350 #0
	G1 E{0.7577 * RATIO|float} F392 #6
	G1 E{0.8382 * RATIO|float} F434 #3
	G1 E{0.7776 * RATIO|float} F469 #9
	G1 E{0.1293 * RATIO|float} F469 #9
	G1 E{0.9673 * RATIO|float} F501 #2
	G1 E{1.0176 * RATIO|float} F527 #2
	G1 E{0.5956 * RATIO|float} F544 #6
	G1 E{0.4555 * RATIO|float} F544 #6
	G1 E{1.0662 * RATIO|float} F552 #4

	# set toolchange temperature just prior to filament being extracted from melt zone and wait for set point
	# (SKINNYDIP--normal mode only)
	{% if TOOLCHANGE_TEMP|float > 0 and USE_FAST_SKINNYDIP|int == 0 %}
		_ercf_wait_he_temp TEMP={TOOLCHANGE_TEMP}
	{% endif %}

	# Retraction
	{% set TOTAL_RETRACTION_DISTANCE = COOLING_TUBE_RETRACTION|float + COOLING_TUBE_LENGTH|float / 2 - 15 %}
	G1 E-15 F{1.0 * UNLOADING_SPEED_START|float * 60}
	G1 E-{0.7 * TOTAL_RETRACTION_DISTANCE} F{1.0 * UNLOADING_SPEED|float * 60}
	G1 E-{0.2 * TOTAL_RETRACTION_DISTANCE} F{0.5 * UNLOADING_SPEED|float * 60}
	G1 E-{0.1 * TOTAL_RETRACTION_DISTANCE} F{0.3 * UNLOADING_SPEED|float * 60}

	{% if TOOLCHANGE_TEMP|float > 0 and USE_FAST_SKINNYDIP|int == 1 %}
		_ercf_start_he_temp TEMP={TOOLCHANGE_TEMP}
	{% endif %}

	# Generate Cooling Moves
	{% set SPEED_INC = (FINAL_COOLING_SPEED|float - INITIAL_COOLING_SPEED|float) / (2 * COOLING_MOVES|float - 1) %}
	{% for move in range(COOLING_MOVES|int) %}
	  G1 E{COOLING_TUBE_LENGTH} F{(INITIAL_COOLING_SPEED|float + SPEED_INC*move*2) * 60}
	  G1 E-{COOLING_TUBE_LENGTH} F{(INITIAL_COOLING_SPEED|float + SPEED_INC*(move*2+1)) * 60}
	{% endfor %}

	# wait for extruder to reach toolchange temperature after cooling moves complete (SKINNYDIP--fast mode only)
	{% if TOOLCHANGE_TEMP|float > 0 and USE_FAST_SKINNYDIP|int == 0 %}
		_ercf_wait_he_temp TEMP={TOOLCHANGE_TEMP}
	{% endif %}

	# Generate a skinnydip move
	{% if USE_SKINNYDIP|int == 1 %}
	  G1 E{SKINNYDIP_DISTANCE} F{DIP_INSERTION_SPEED|float * 60}
	  G4 P{MELT_ZONE_PAUSE}
	  G1 E-{SKINNYDIP_DISTANCE} F{DIP_EXTRACTION_SPEED|float * 60}
	  G4 P{COOLING_ZONE_PAUSE}
	{% endif %}

	{% if TOOLCHANGE_TEMP|float > 0 %}
		_ercf_start_he_temp TEMP={OLD_TEMP}
	{% endif %}

	{% if FINAL_EJECT|int == 1 %}
		_reset_extruder
		G1 E-80 F3000
	{% endif %}

	_reset_extruder

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_FORM_TIP_STANDALONE End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_FORM_TIP_STANDALONE {% endif %}

# Unload from extruder with tip forming sequence
[gcode_macro ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING]
description: Unload filament from the nozzle to the toolhead entrance using generic tip forming macro
# called at print's end (sans wipe tower)

# added a RATIO parameter
# this is called from: ERCF_EJECT & ERCF_EJECT_UNKNOW_STATE
gcode:

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING Start ... {% endif %}

	{% set ercf_params = printer.save_variables.variables %}

	{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
		# not paused
		_ercf_set_eject_temp					# adjust to eject temp if not there
		
		{% if printer.extruder.temperature > printer["gcode_macro _ERCF_VAR"].min_temp_extruder %}
			{% if printer["gcode_macro ERCF_SELECT_TOOL"].tool_selected|int == -1 %}
				# tool not selected
				{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Forming filament tip and Unloading Filament... {% endif %}
				go_relative
				ERCF_FORM_TIP_STANDALONE
				G1 E-4.00 F1200.0
				G1 E-15.00 F2000
				ERCF_HOME_EXTRUDER	# in ERCF.PY...

				# ERCF_SET_STEPS ratio needs to be set here
				{% if params.RATIO|string != "" %}
					ERCF_SET_STEPS RATIO={params.RATIO|float}
				{% elif ercf_params['ercf_calib_%s' % (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|string)]|string == "" %}
					#so no ratio param passed and a lookup on the color_selected netted no result, so likely an out of sync eject
					ERCF_SET_STEPS RATIO=1.0
				{% else %}
					ERCF_SET_STEPS RATIO={ercf_params['ercf_calib_%s' % (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|string)]|float}
				{% endif %}

				_ERCF_SERVO_DOWN
				_ercf_syncd_th_load_unload RETRACT=1 MODIFIER={printer["gcode_macro _ERCF_VAR"].ercf_dual_unload_mod|float}		# dual unload - eject from HE to top of extruder

				{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Filament out of TH throat {% endif %}
				
			{% else %}
				# Tool Selected
					# why not just programmatically unselect it here???
				{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %}
					M118 Tool selected, UNSELECT it 
				{% else %}
					{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_debug %} M118 Tool selected, UNSELECT it {% endif %}
				{% endif %}
				save_variable VARIABLE=ercf_err_flag VALUE=1		#flag an error - reset by caller
				_ERCF_PAUSE
			{% endif %}
		{% else %}
			# HE cold
			{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Extruder too cold {% endif %}
			save_variable VARIABLE=ercf_err_flag VALUE=1			#flag an error - reset by caller
			_ERCF_PAUSE
		{% endif %}
		
		_ercf_restore_he_temp					# restore entry temp
		
	{% else %}
		# ercf pause is asserted
		save_variable VARIABLE=ercf_err_flag VALUE=1				#flag an error - reset by caller
		_alert_ercf_is_paused
	{% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING {% endif %}

############################################
# Endstop check macros
############################################

# Call _ERCF_PAUSE if the filament is not detected by the toolhead sensor
[gcode_macro ERCF_IS_FILAMENT_IN_EXTRUDER]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_IS_FILAMENT_IN_EXTRUDER func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_IS_FILAMENT_IN_EXTRUDER Start ... {% endif %}

	{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Filament is in extruder {% endif %}
	{% else %}
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Filament not in extruder {% endif %}

		save_variable VARIABLE=ercf_err_flag VALUE=1		#flag an error - reset by caller
		_ERCF_PAUSE
	{% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_IS_FILAMENT_IN_EXTRUDER End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_IS_FILAMENT_IN_EXTRUDER {% endif %}

# Call _ERCF_PAUSE if the filament is stuck in the ERCF
[gcode_macro ERCF_IS_FILAMENT_STUCK_IN_ERCF]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_IS_FILAMENT_STUCK_IN_ERCF func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_IS_FILAMENT_STUCK_IN_ERCF Start ... {% endif %}

	{% if printer.ercf.encoder_pos|float != 0 %}
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Filament stuck in ERCF {% endif %}

		save_variable VARIABLE=ercf_err_flag VALUE=1		#flag an error - reset by caller
		_ERCF_PAUSE
	{% else %}
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Filament not in ERCF {% endif %}
	{% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_IS_FILAMENT_STUCK_IN_ERCF End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_IS_FILAMENT_STUCK_IN_ERCF {% endif %}

############################################
# Macros called during homing to try to eject the filament if loaded
############################################

# Eject from extruder gear to the ERCF
## could be in extruder but before th sensor... so should do a dual extract.

[gcode_macro ERCF_EJECT_UNKNOW_STATE]
description: Unload filament from an unknown position
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_EJECT_UNKNOW_STATE func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_EJECT_UNKNOW_STATE Start ... {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object
	{% set ercf_params = printer.save_variables.variables %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF_EJECT_UNKNOW_STATE {% endif %}

	{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}

		_ercf_set_eject_temp					# adjust to eject temp if not there
		
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Filament in extruder, trying to eject it .. {% endif %}

		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Calling ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING {% endif %}

		# this performs a mock ss tip forming and then calls ERCF_HOME_EXTRUDER in ercf.py
		# but doesn't set ratio, so do so now and call with ratio param
		{% set unload_ratio = ercf_params['ercf_calib_%s' % (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|string)] %}
# M118 >>> ERCF_EJECT_UNKNOW_STATE Unload_Ratio initially set to: {unload_ratio} <<<

		# ratio needs to be checked and reset, if needed
		{% if unload_ratio|string == "" %}		# <-- so no ratio generated, so likely an out of sync eject
# M118 >>> ERCF_EJECT_UNKNOW_STATE unload_ratio lookup failed - defaulting to 1.0 <<<
			{% set unload_ratio = 1.0 %}
		{% endif %}

		ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING RATIO={unload_ratio} # has baked in dual unload modifier

		ERCF_UNLOAD LENGTH={printer["gcode_macro _ERCF_VAR"].min_bowden_length - printer["gcode_macro _ERCF_VAR"].ercf_eject_unknow_state_len_mod - printer["gcode_macro _ERCF_VAR"].ercf_dual_unload_mod|float} UNKNOWN=1

		_ercf_restore_he_temp					# restore entry temp
		
	{% else %}
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 No filament detected in TH, calling _ERCF_SERVO_DOWN {% endif %}
		_ERCF_SERVO_DOWN
	{% endif %}
	
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF_BUZZ_GEAR_MOTOR {% endif %}
	ERCF_BUZZ_GEAR_MOTOR				# G4 P200 followed	# added dwell via wrapper proc hooks on FW proc
	
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 ERCF_EJECT_FROM_BOWDEN {% endif %}
	ERCF_EJECT_FROM_BOWDEN

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_EJECT_UNKNOW_STATE End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_EJECT_UNKNOW_STATE {% endif %}

# Eject from the bowden to the ERCF
[gcode_macro ERCF_EJECT_FROM_BOWDEN]
description: Unload filament from the reverse bowden - set/wait for HE temp, if filament detected in TH 
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_EJECT_FROM_BOWDEN func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_EJECT_FROM_BOWDEN Start ... {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
		_ercf_wait_eject_temp					# adjust to eject temp if not there
	{% endif %}

	{% if printer.ercf.encoder_pos|float != 0 %}
		ERCF_UNLOAD HOMING=1		# ercf 'fw' proc
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Filament ejected {% endif %}

	{% else %}
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Filament already ejected {% endif %}

	{% endif %}

	_ERCF_SERVO_UP

	_ercf_restore_he_temp					# restore entry temp

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_EJECT_FROM_BOWDEN End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_EJECT_FROM_BOWDEN {% endif %}

############################################
# Homing macros
# ERCF_HOME must be called before using the ERCF
############################################

# Home the ERCF
# eject filament if loaded with ERCF_EJECT_UNKNOW_STATE
# next home the ERCF with ERCF_HOME_ONLY
[gcode_macro ERCF_HOME]
description: Home the ERCF
variable_home: -1
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_HOME func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_HOME Start ... {% endif %}

	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
	SET_GCODE_VARIABLE MACRO=ERCF_HOME VARIABLE=home VALUE=1
	{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 1 %}
		ERCF_UNLOCK
	{% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Homing ERCF {% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} QUERY_ENDSTOPS {% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_EJECT_UNKNOW_STATE <<< {% endif %}
	ERCF_EJECT_UNKNOW_STATE
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_HOME_SELECTOR <<< {% endif %}
	ERCF_HOME_SELECTOR
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> ERCF_HOME_ONLY <<< {% endif %}
	ERCF_HOME_ONLY

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_HOME End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_HOME {% endif %}

[gcode_macro ERCF_HOME_SELECTOR]
description: Home the ERCF selector

gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_HOME_SELECTOR func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_HOME_SELECTOR Start ... {% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 >>> Homing selector <<< {% endif %}

	_ERCF_SERVO_UP

	{% set number_of_chan=printer["gcode_macro _ERCF_VAR"].colorselector|length %}
	# {% set selector_length=(20.0 + number_of_chan*21.0 + (number_of_chan/3)*5.0) %}
	{% set selector_length=(20.0 + 12*21.0 + (number_of_chan/3)*5.0) %}

	# home the selector cart
	MANUAL_STEPPER STEPPER=selector_stepper SET_POSITION=0
	MANUAL_STEPPER STEPPER=selector_stepper SPEED=100 MOVE=-{selector_length|float} STOP_ON_ENDSTOP=1
	MANUAL_STEPPER STEPPER=selector_stepper SET_POSITION=0
	MANUAL_STEPPER STEPPER=selector_stepper SPEED=100 MOVE=5.0
	MANUAL_STEPPER STEPPER=selector_stepper SPEED=10 MOVE=-10.0 STOP_ON_ENDSTOP=1
	MANUAL_STEPPER STEPPER=selector_stepper SET_POSITION=0

	# record that no tool_/color_selected
	SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=tool_selected VALUE=-1
	SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=color_selected VALUE=-1

	SAVE_VARIABLE VARIABLE=ercf_selector_homed VALUE=1

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_HOME_SELECTOR End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_HOME_SELECTOR {% endif %}

# Home the ERCF:
# 1) home the color selector (if needed)
# 2) try to load filament 0 to ERCF and then unload it. Used to verify the ERCF gear
# if all is ok, the ERCF is ready to be used
[gcode_macro ERCF_HOME_ONLY]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_HOME_ONLY func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_HOME_ONLY Start ... {% endif %}

	{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Test load filament in cart 0 {% endif %}

		; ERCF_SELECT_TOOL TOOL=0		# Raise servo, move the selector to params.TOOL, Lower servo, save color_/tool_selected
		ERCF_SELECT_TOOL_dbg TOOL=0		# wrapper to prevent movement if an error condition is asserted
		ERCF_SET_STEPS RATIO=1.0
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Loading filament to ERCF... {% endif %}

		ERCF_LOAD LENGTH={printer["gcode_macro _ERCF_VAR"].ercf_cart_load_length}		# orig hard coded @ 45
		# G4 P50	# added dwell via wrapper proc hooks on FW proc
		ERCF_UNLOAD LENGTH={printer["gcode_macro _ERCF_VAR"].ercf_cart_unload_length}	# orig hard coded @ 68
		_ERCF_UNSELECT_TOOL
		SET_GCODE_VARIABLE MACRO=ERCF_HOME VARIABLE=home VALUE=1
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Homing ERCF ended ... {% endif %}

	{% else %}
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Homing ERCF failed, ERCF is paused, run "ERCF_UNLOCK" to unlock it ... {% endif %}

		save_variable VARIABLE=ercf_err_flag VALUE=1		# flag an error - reset by caller
	{% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_HOME_ONLY End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_HOME_ONLY {% endif %}

###############################################
# Test Macros
###############################################
[gcode_macro ERCF_DISPLAY_ENCODER_POS]
description: Display current value of the ERCF encoder
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_DISPLAY_ENCODER_POS func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_DISPLAY_ENCODER_POS Start ... {% endif %}

#	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Encoder value is {printer['ercf'].encoder_pos|float} {% endif %}
	M118 Encoder value is {printer['ercf'].encoder_pos|float}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_DISPLAY_ENCODER_POS End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_DISPLAY_ENCODER_POS {% endif %}

[gcode_macro ERCF_TEST_MOVE_GEAR]
description: Move the ERCF gear
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_TEST_MOVE_GEAR func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_TEST_MOVE_GEAR Start ... {% endif %}

	{% set move_length = params.LENGTH|default(0.0)|float %}
	{% set move_speed = params.SPEED|default(30.0)|float %}
	{% set move_accel = params.ACCEL|default(200.0)|float %}
	MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
	MANUAL_STEPPER STEPPER=gear_stepper MOVE={move_length|float} SPEED={move_speed|float} ACCEL={move_accel|float}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_TEST_MOVE_GEAR End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_TEST_MOVE_GEAR {% endif %}

[gcode_macro ERCF_TEST_SERVO]
description: Test the servo angle
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_TEST_SERVO func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_TEST_SERVO Start ... {% endif %}

	SET_SERVO SERVO=ercf_servo ANGLE={params.VALUE|float}
	_servo_move_dwell	# G4 P250
	SET_SERVO SERVO=ercf_servo WIDTH=0.0

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_TEST_SERVO End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_TEST_SERVO {% endif %}

[gcode_macro ERCF_TEST_GRIP]
description: Test the ERCF grip for a Tool
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_TEST_GRIP func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_TEST_GRIP Start ... {% endif %}

	_ERCF_SERVO_DOWN	# does a tooth meshing buzz too
	ERCF_MOTORS_OFF

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_TEST_GRIP End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_TEST_GRIP {% endif %}

[gcode_macro ERCF_TEST_LOAD_SEQUENCE]
description: Stock - Test sequence  (wrapper proc added: ERCF_TEST_LOAD_SEQ - see _ercf_software_mods.cfg)
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_TEST_LOAD_SEQUENCE func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_TEST_LOAD_SEQUENCE Start ... {% endif %}

	{% set loop_number = params.LOOP|default(1)|int %}
	{% set use_rand = params.RAND|default(0)|int %}
	{% for iteration in range(loop_number|int) %}
			{% for load in range((printer["gcode_macro _ERCF_VAR"].colorselector|length)|int) %}
				{% if use_rand|int == 1 %}
					{% set rand_tool = range(0, printer["gcode_macro _ERCF_VAR"].colorselector|length)|random %}
					
					; ERCF_SELECT_TOOL TOOL={rand_tool|int}
					ERCF_SELECT_TOOL_dbg TOOL={rand_tool|int}		# _dbg wrapper to prevent movement if an error condition is asserted
					
				{% else %}
				
					; ERCF_SELECT_TOOL TOOL={load|int}
					ERCF_SELECT_TOOL_dbg TOOL={load|int}			# _dbg wrapper to prevent movement if an error condition is asserted
					
				{% endif %}
				
				ERCF_LOAD LENGTH={printer["gcode_macro _ERCF_VAR"].ercf_test_load_seq_len}	# G4 P50 followed # added dwell via wrapper proc hooks on FW proc
				ERCF_UNLOAD LENGTH={printer["gcode_macro _ERCF_VAR"].ercf_test_load_seq_len}
				_ERCF_UNSELECT_TOOL															# G4 P200 followed # added dwell via wrapper proc hooks on FW proc
			{% endfor %}
	{% endfor %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_TEST_LOAD_SEQUENCE End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_TEST_LOAD_SEQUENCE {% endif %}


###############################################
# Endless spool mode and clog detection
###############################################

[gcode_macro ERCF_ENCODER_MOTION_ISSUE]
description: Perform a test when the encoder sense an issue (check for clog then assumes a runout)
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_ENCODER_MOTION_ISSUE func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_ENCODER_MOTION_ISSUE Start ... {% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Issue on tool {printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int} {% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Checking if this is a clog or a runout... {% endif %}

	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0

	# wiggle filament with gear motor to see if a clog (if the reason for the filament stall) can be freed up
	_ERCF_SERVO_DOWN
	ERCF_BUZZ_GEAR_MOTOR
	_ERCF_SERVO_UP
	
	# check to see if a runout or clog exists
	ERCF_CLOG_OR_RUNOUT

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_ENCODER_MOTION_ISSUE End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_ENCODER_MOTION_ISSUE {% endif %}

[gcode_macro ERCF_CLOG_OR_RUNOUT]
description: Actions taken if a clog or a runout is detected by the ERCF encoder
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CLOG_OR_RUNOUT func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CLOG_OR_RUNOUT Start ... {% endif %}

	{% if printer.ercf.encoder_pos|float != 0 %} 
		# CLOG ^^^ this seems a rather weird conditional test (maybe.?.)

		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Clog detected, please check the ERCF and the printer {% endif %}
		save_variable VARIABLE=ercf_err_flag VALUE=1		#flag an error - reset by caller

	{% else %}
		# RUNOUT
		
		{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 Runout detected... {% endif %}

		{% if printer["gcode_macro _ERCF_VAR"].endless_spool_mode|int == 1 %}

			{% if printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int >= (printer["gcode_macro _ERCF_VAR"].colorselector|length -1) %}
				{% set nexttool = 0 %}
			{% else %}
				{% set nexttool = (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int + 1) %}
			{% endif %}

			{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_info %} M118 Loading tool {nexttool|int} {% endif %}

			SAVE_GCODE_STATE NAME=ERCF_Pre_Brush_init
			# Adapt the example below to your own setup
			# The goal is just to clean the nozzle after the change
			# In my case I have a purge bucket with a brush
			# G0 X45 Y300 F18000
			# G0 X45 Y310 Z1 F3000

			# Custom unload sequence
			{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_status %} M118 Forming filament tip and Unloading Filament... {% endif %}

			go_relative
			ERCF_FORM_TIP_STANDALONE
			ERCF_HOME_EXTRUDER TOTAL_LENGTH={printer["gcode_macro _ERCF_VAR"].sensor_to_nozzle} STEP_LENGTH=2.0
			_ERCF_SERVO_DOWN

			_ercf_syncd_th_load_unload RETRACT=1			# dual unload - eject to top of extruder

			{% set ercf_params = printer.save_variables.variables %}
			ERCF_SET_STEPS RATIO={ercf_params['ercf_calib_%s' % (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|string)]}

			ERCF_UNLOAD LENGTH={ercf_params.ercf_calib_ref|float - printer["gcode_macro _ERCF_VAR"].end_of_bowden_to_sensor|float + printer["gcode_macro _ERCF_VAR"].unload_modifier|float}

			_ERCF_UNSELECT_TOOL

			ERCF_LOAD_TOOL TOOL={nexttool|int}
			ERCF_CHECK_IF_RESUME
			
		{% else %}
		
			{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_error %} M118 EndlessSpool mode not enabled, please do something {% endif %}
			save_variable VARIABLE=ercf_err_flag VALUE=1		#flag an error - reset by caller
		
		{% endif %}
	{% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CLOG_OR_RUNOUT End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CLOG_OR_RUNOUT {% endif %}

[gcode_macro ERCF_CHECK_IF_RESUME]
description: Safety checks before resuming the print after an encoder event
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ERCF_CHECK_IF_RESUME func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 >>> ERCF_CHECK_IF_RESUME Start ... {% endif %}

	{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 0 %}
	
		# Adapt the example below to your own setup
		# The goal is just to clean the nozzle after the change
		# In my case I have a purge bucket with a brush
		# BRUSH_PURGE LENGTH=50
		# BRUSH_CLEAN
		# RESTORE_GCODE_STATE NAME=ERCF_Pre_Brush_init
		RESUME
		{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
			SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
		{% endif %}
		
	{% else %}
	
		_alert_ercf_is_paused
		save_variable VARIABLE=ercf_err_flag VALUE=1		#flag an error - reset by caller
		
	{% endif %}

	{% if printer["gcode_macro _ERCF_VAR"].ercf_verb_codeflow %} M118 ... ERCF_CHECK_IF_RESUME End <<< {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ERCF_CHECK_IF_RESUME {% endif %}

[include _ercf_user_vars.cfg]
[include _ercf_software_mods.cfg]
