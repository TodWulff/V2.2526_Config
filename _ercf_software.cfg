###############################
# ERCF module
###############################

# MHz: added tools 9 to 11 for the 12-cart unit
# MHz: nix'd [save_variables] herein as already in use on v2.2526 (copied contents of ercf_vars.cfg over to _globals.pvar)
# MHz: nix'd [response] section herein as already in use on v2.2526
# MHz: added debug flag var and conditionals to report entry and exit from procs
# MHz: added various flags and conditionals for verbosity: error, status, info reporting
# MHz: added my own cart load testing before realizing it was already done... lol
# MHz: added home check (w/ unload) and unload (if homed) to existing load test sequence 
# MHz: working on nix'g balance of stuffs in the event of a load/unload error on looping stuffs
#		such as ercf calibrate, load sequence, cart load sequence, etc.  using svv.ercf_verb_error_state to track an error

[delayed_gcode _ercf_module]
#description:  Sets state flag for conditional use elsewhere.
initial_duration: 0.5							# have this at 0.5s as init code in _startup_autoexec.cfg runs at 0.1s after start
gcode:
	{% if printer["gcode_macro _debug_var"].debug_verb %} M118 >>> _ercf_module_start Start <<< {% endif %}

	SAVE_VARIABLE VARIABLE=module_ercf_loaded VALUE=1					#flag via persistent variable that this module is loaded
	SET_GCODE_VARIABLE MACRO=ERCF_VAR VARIABLE=ercf_err_flag VALUE=0	#init error flag via variable that this module is not in error

	{% if printer["gcode_macro _debug_var"].debug_verb %} M118 >>> _ercf_module_start End <<< {% endif %}

[gcode_macro set_HE_heating_indication]
description: annunciate heating taking place
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> set_HE_heating_indication Start <<< {% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 ERCF Heating {% endif %}
	
	{% if printer.save_variables.variables.module_led_effect_loaded %}
		set_light_mode CHAIN=ercf_lights EFFECT=he_temp			# uses LED_EFFECTS code
	{% else %}
		ERCFLts_red			# set ercf lights to normal		- uses Klipper Neopixel code
	{% endif %}
	M300
	M300

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> set_HE_heating_indication End <<< {% endif %}


[gcode_macro clear_HE_heating_indication]
description: deannunciate heating
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> clear_HE_heating_indication Start <<< {% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 ERCF Heated {% endif %}
	
	{% if printer.save_variables.variables.module_led_effect_loaded %}
		set_light_mode CHAIN=ercf_lights EFFECT=off
	{% else %}
		ERCFLts_off
	{% endif %}
	M300
	M300
	M300

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> clear_HE_heating_indication End <<< {% endif %}


[gcode_macro alert_ercf_is_paused]
description: alerts user that ERCF is Paused and needs to be Unlocked
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> alert_ercf_is_paused Start <<< {% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 ERCF is paused, run "ERCF_UNLOCK" to unlock it ... {% endif %}
	M300
	M300

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> alert_ercf_is_paused End <<< {% endif %}


[ercf]
# Encoder 
encoder_pin: ^ercf:PA6
#encoder_resolution: 1.333511 # in mm - this must be a full cycle - ~.7 to toggle and ~.7 to return
encoder_resolution: 1.366494 # in mm - this must be a full cycle - ~.7 to toggle and ~.7 to return

# Speeds and accels
# Long moves are faster than the small ones
# 100mm/s should be "quiet" with the NEMA14 motor or a NEMA17 pancake, but you can go lower if your really want it to be low noise
# Tested without any issue at 200mm/s, but it's noisy. I'm running mine at 170mm/s for long moves and 50mm/s for short moves.
long_moves_speed: 50   # mm/s. Default value is 100mm/s.
long_moves_accel: 200  # mm/s². Default value is 400mm/s²
short_moves_speed: 25  # mm/s. Default value is 25mm/s.
short_moves_accel: 200 # mm/s². Default value is 400mm/s²

[gcode_macro ERCF_VAR]
# =======================================================
# ================== VALUES TO ADJUST ===================
# =======================================================
#
# ==== Toolhead specific values ====
#
# Distance between the end of the reverse bowden and the toolhead sensor. Value is toolhead specific.
# Tested values :
# Galileo Clockwork with ERCF V1.1 sensor (hall effect) : 27.0
# LGX on AfterBurner with ERCF V1.1 sensor (hall effect) : 44.0
# AfterBurner Clockwork with ERCF V1.1 sensor (hall effect) : 36.0
# Orbiter1.5 on AfterBurner (using ~MHz adapter) with ERCF V1.1 sensor (hall effect) therein : 45.0
variable_end_of_bowden_to_sensor:	47


# Length from the sensor to the nozzle melt pool. Value is toolhead specific.
# Reduce this value if there are blobs of filament on each load, before the purge on the tower.
# Increase this value if there are big gaps on the purge tower (i.e. if it takes time for the filament to get pushed out after a swap)
# Tested values :
# Galileo Clockwork with ERCF 1.1 sensor (hall effect) & Dragon Normal Flow : 60.5
# LGX on AfterBurner with ERCF 1.1 sensor (hall effect) & Dragon Normal Flow : 55.6
# AfterBurner Clockwork with ERCF 1.1 sensor (hall effect) & Dragon Normal Flow : 54.0
# Orbiter1.5 on AfterBurner (using ~MHz adapter) with ERCF V1.1 sensor (hall effect) therein & Dragon HF : 50.0
#(coupler to end of bowden = 20mm + 45 for sensor trigger = 65.  from coupler to center of heat block = 115.  115.0-65.0 = 50.0 )
variable_sensor_to_nozzle:		40.6

# ==== Values to tune ====		 
#
# Tool position for the selector. This has to be tuned manually. 
# Please scale this array to the number of tools you have
#   Cart #						  0	  1		2	  	 3	 	4	 5			6	  7	  		8	   9	  10	 11
variable_colorselector =		[2.0,23.0,44.15,   70.5, 91.5, 112.0] #,   138.6, 159.5, 180.0,  206.5, 227.5, 248.5]

# Base value for the loading length used by the auto-calibration macro
# Please use a value SMALLER than the real reverse bowden length (like 50mm less)
variable_min_bowden_length:		935.0

# Servo angle for the Up position (i.e. tool disengaged). Refer to the manual to know how to properly tune this value
variable_servo_up_angle:		30		# based on real world tests w/ values in HW

# Servo angle for the Down position (i.e. tool engaged). Refer to the manual to know how to properly tune this value
variable_servo_down_angle:		80		# based on real world tests w/ values in HW

# Options to use or not 
# Beware that the clog detection and endless spool mode are in BETA mode for now
# Use at your own risk (beware of the involved macros and the pause(s) and resume ones)
# Put 0 to disable, 1 to enable
variable_clog_detection:		0
variable_endless_spool_mode:	0

variable_ercf_verb_error:			1	# set to 0 to mute error reporting (um, errors.  lol)
variable_ercf_verb_info:			1	# set to 0 to mute info reporting (has data)
variable_ercf_verb_status:			1	# set to 0 to mute status reporting (useful modes, update, etc.)
variable_ercf_verb_debug:			0	# set to 0 to mute debugs stuffs I added (proc entry/exit)

variable_ercf_err_flag:				0	# flag to track if an error exists on a looping construct

# =======================================================
# ============ END OF VALUES TO ADJUST ==================
# =======================================================
# You shouldn't have to change anything below this point

# Things that you shouldn't have to change
variable_unload_modifier:		5.0		# was 9.0 Modifier to adjust the ERCF park position (where the filament ends when doing an unload)
										# used in ERCF_EJECT, ERCF_UNLOAD_TOOL, and ERCF_CLOG_OR_RUNOUT
										# positive values yields less retract

variable_min_temp_extruder:		180		# Temp used during the auto-cal macro, to ensure we can move the extruder (but not really extruding)
variable_extruder_eject_temp:	240		# Temp used during filament ejection (in the ERCF_HOME macro, if a filament is detected in the toolhead)
variable_timeout_pause:			72000	# Time out used by the ERCF_PAUSE  -  20hrs
variable_disable_heater:		600		# Delay after which the hotend heater is disabled in the ERCF_PAUSE state  -  10min

gcode:
		# there is none.  this is for module variable purposes only.

###############################
# ERCF Save Variables
###############################

# nix'd [save variables] instantiation as v2.2526 is already using save variables
# copied contents of ercf_vars.cfg to _globals.pvar
# [save_variables]
# filename: /home/pi/klipper_config/ercf_vars.cfg

###############################
# ERCF Calibration macros
###############################
[gcode_macro ERCF_CALIB_SELECTOR]
description: Calibration of the selector position for a defined Tool
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CALIB_SELECTOR Start <<< {% endif %}

	ERCF_SERVO_UP

	{% set move_length=(20.0 + (params.TOOL|int + 1)*21.0 + ((params.TOOL|int + 1)/3)*5.0) %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 Measuring the selector position for tool {params.TOOL} {% endif %}
	
	ERCF_GET_SELECTOR_POS REF={move_length|int}
	
	ERCF_MOTORS_OFF

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CALIB_SELECTOR End <<< {% endif %}


[gcode_macro ERCF_CALIBRATE]
description: Complete calibration of all ERCF Tools
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CALIBRATE Start <<< {% endif %}

	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
	
	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} 
		M118 Start the complete auto calibration...
		M118 First home the ERCF
	{% endif %}
	
	ERCF_HOME

	SET_GCODE_VARIABLE MACRO=ERCF_VAR VARIABLE=ercf_err_flag VALUE=0		#clear error flag
	{% for chan in range(printer["gcode_macro ERCF_VAR"].colorselector|length) if not printer["gcode_macro ERCF_VAR"].ercf_err_flag %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 ERCF_CALIBRATE_SINGLE TOOL={chan|int} {% endif %}
		ERCF_CALIBRATE_SINGLE TOOL={chan|int}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=ERCF_VAR VARIABLE=ercf_err_flag VALUE=0		#clear error flag


	# {% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 End of auto-cal - Reload firmware {% endif %}
	M118 End of auto-cal - Reload firmware

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CALIBRATE End <<< {% endif %}


[gcode_macro ERCF_CALIBRATE_SINGLE]
description: Calibration of a single ERCF Tool
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CALIBRATE_SINGLE Start <<< {% endif %}

	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
	{% if params.TOOL|int >= 0 and params.TOOL|int < printer["gcode_macro ERCF_VAR"].colorselector|length %}
		{% if printer["gcode_macro ERCF_HOME"].home == -1 %}
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 Homing the ERCF... {% endif %}
			ERCF_HOME
		{% endif %}

		ERCF_SELECT_TOOL TOOL={params.TOOL}
		ERCF_SET_STEPS RATIO=1.0

		{% if params.TOOL|int == 0 %}
			{% if printer['extruder'].temperature < printer["gcode_macro ERCF_VAR"].min_temp_extruder %}
				set_HE_heating_indication
				M109 S{printer["gcode_macro ERCF_VAR"].min_temp_extruder|int}
				clear_HE_heating_indication
			{% endif %}

			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Calibrating reference tool {params.TOOL} {% endif %}
			
			ERCF_LOAD LENGTH={printer["gcode_macro ERCF_VAR"].min_bowden_length}
			ERCF_HOME_EXTRUDER TOTAL_LENGTH=400 STEP_LENGTH=0.5
			ERCF_CALIB_SAVE_VAR TOOL={params.TOOL}

			go_relative
			G92 E0
			MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 DUAL FILAMENT RETRACT: -{printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float} {% endif %}

			# E and Gear are working in concert - Feedrate of 1500mm/min == 25mm/sec Speed
			MANUAL_STEPPER STEPPER=gear_stepper MOVE=-{printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float} SPEED=25 ACCEL=0 SYNC=0
			G1 E-{printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float} F1500.0

			ERCF_CALIB_UNLOAD

			ERCF_BUZZ_GEAR_MOTOR
			ERCF_IS_FILAMENT_STUCK_IN_ERCF
			
			ERCF_UNSELECT_TOOL
		{% else %}
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Calibrating tool {params.TOOL} {% endif %}
			
			ERCF_LOAD LENGTH={printer["gcode_macro ERCF_VAR"].min_bowden_length|float - 100.0}
			ERCF_CALIB_SAVE_VAR tool={params.TOOL}

			ERCF_CALIB_UNLOAD LENGTH={printer["gcode_macro ERCF_VAR"].min_bowden_length|float - 100.0 + 27.0}
		{% endif %}

	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 Tool out of range {% endif %}
		SET_GCODE_VARIABLE MACRO=ERCF_VAR VARIABLE=ercf_err_flag VALUE=1		#flag an error - reset by caller

	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CALIBRATE_SINGLE End <<< {% endif %}


[gcode_macro ERCF_CALIB_SAVE_VAR]
description: Saving ERCF calibration values
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CALIB_SAVE_VAR Start <<< {% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} { action_respond_info(">>> ERCF_CALIB_SAVE_VAR Entered Params: " + rawparams + " <<<") } {% endif %}

	{% if params.TOOL|int == 0 %}
	
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} { action_respond_info(">>> ERCF_CALIB_SAVE_VAR: Tool is 0 <<<") } {% endif %}
		
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 Tool {params.TOOL} calibration value is {printer['ercf'].encoder_pos|float} {% endif %}

		SAVE_VARIABLE VARIABLE=ercf_calib_ref VALUE={printer['ercf'].encoder_pos|float}	# this is the reference value
		SAVE_VARIABLE VARIABLE=ercf_calib_{params.TOOL|int} VALUE=1.0
		SET_GCODE_VARIABLE MACRO=ERCF_CALIB_UNLOAD VARIABLE=ref VALUE={printer['ercf'].encoder_pos|float}
		SET_GCODE_VARIABLE MACRO=ERCF_CALIB_UNLOAD VARIABLE=ratio VALUE=1.0
	{% else %}
		{% set ratio = (printer["gcode_macro ERCF_VAR"].min_bowden_length|float - 100.0) / printer['ercf'].encoder_pos|float %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 Tool {params.TOOL} ratio is {ratio|float} {% endif %}
		SAVE_VARIABLE VARIABLE=ercf_calib_{params.TOOL|int} VALUE={ratio|float}
		SET_GCODE_VARIABLE MACRO=ERCF_CALIB_UNLOAD VARIABLE=ratio VALUE={ratio|float}
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CALIB_SAVE_VAR End <<< {% endif %}


[gcode_macro ERCF_CALIB_UNLOAD]
description: Filament unload during ERCF calibration
variable_ratio: 0.0
variable_ref: 0.0
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CALIB_UNLOAD Start <<< {% endif %}

	{% set unload_length = params.LENGTH|default(0.0)|float %}
	{% if unload_length|float == 0.0 %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 ERCF FILAMENT UNLOAD: -{(ref|float)*(ratio|float) - printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float + 27.0} {% endif %}
		ERCF_UNLOAD LENGTH={(ref|float)*(ratio|float) - printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float + 27.0}
	{% else %}
		{% if ratio|float < 1.0 %} # No correction move is done in case of "over targeting", hence the correction ratio is not applied during this unload sequence
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 ERCF FILAMENT UNLOAD: -{(unload_length|float)} {% endif %}
			ERCF_UNLOAD LENGTH={(unload_length|float)}
		{% else %}
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 ERCF FILAMENT UNLOAD: -{(unload_length|float)*(ratio|float)} {% endif %}
			ERCF_UNLOAD LENGTH={(unload_length|float)*(ratio|float)}
		{% endif %}
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CALIB_UNLOAD End <<< {% endif %}

# MHz: Nix'd as already instantiatedin _console_response.cfg
#[respond]
#default_type: command

###############################
# ERCF servo
###############################
# Push the top hat down (enable the bondtech gears) while "buzzing" the gear motor to ensure proper BMG gear meshing
[gcode_macro ERCF_SERVO_DOWN]
description: Engage the ERCF gear & do a buzz to ensure drive/idler gear tooth meshing
# once down and buzzed, the servo is disabled to keep from power stalling the servo
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_SERVO_DOWN Start <<< {% endif %}

	MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0	# resets position counter to 0
	MANUAL_STEPPER STEPPER=gear_stepper MOVE=0.5 SPEED=25 ACCEL=0 SYNC=0
	SET_SERVO SERVO=ercf_servo ANGLE={printer["gcode_macro ERCF_VAR"].servo_down_angle}
	G4 P200
	MANUAL_STEPPER STEPPER=gear_stepper MOVE=0.0 SPEED=25 ACCEL=0 SYNC=0
	G4 P100
	MANUAL_STEPPER STEPPER=gear_stepper MOVE=-0.5 SPEED=25 ACCEL=0 SYNC=0
	G4 P105  # was 100
	MANUAL_STEPPER STEPPER=gear_stepper MOVE=0.0 SPEED=25 ACCEL=0
	SET_SERVO SERVO=ercf_servo WIDTH=0.0	# disables the servo motor in the Down position - prevents power stalling

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_SERVO_DOWN End <<< {% endif %}

# Pull the top hat up (disengage the bondtech gears)
[gcode_macro ERCF_SERVO_UP]
description: Disengage the ERCF gear and disabled after raised (won't fall) to prevent power stalling
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_SERVO_UP Start <<< {% endif %}

	SET_SERVO SERVO=ercf_servo ANGLE={printer["gcode_macro ERCF_VAR"].servo_up_angle}
	G4 P375	# was 250
	SET_SERVO SERVO=ercf_servo WIDTH=0.0	# disables the servo

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_SERVO_UP End <<< {% endif %}


###############################
# ERCF motors
###############################
[gcode_macro ERCF_MOTORS_OFF]
description: Turn off both ERCF motors and raise the servo up
#MHz - added servo up herein
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_MOTORS_OFF Start <<< {% endif %}

	MANUAL_STEPPER STEPPER=gear_stepper ENABLE=0
	MANUAL_STEPPER STEPPER=selector_stepper ENABLE=0
	ERCF_SERVO_UP

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_MOTORS_OFF End <<< {% endif %}


###############################
# PAUSE MACROS
# ERCF_PAUSE is called when an human intervention is needed
# use ERCF_UNLOCK to start the manual intervention
# and use RESUME when the intervention is over to resume the current print
###############################

# Stop the delayed stop of the heater
[gcode_macro ERCF_UNLOCK]
description: Unlock ERCF operations
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_UNLOCK Start <<< {% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Unlock the ERCF {% endif %}
	stop_pause_alarm
	SET_GCODE_VARIABLE MACRO=ERCF_PAUSE VARIABLE=is_paused VALUE=0
	UPDATE_DELAYED_GCODE ID=disable_heater DURATION=0
	{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == False %}
		ERCF_UNSELECT_TOOL
	{% else %}
		ERCF_UNSELECT_TOOL FORCED=0
	{% endif %}
	set_HE_heating_indication
	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 Heating to {printer["gcode_macro ERCF_PAUSE"].extruder_temp} {% endif %}
	M104 S{printer["gcode_macro ERCF_PAUSE"].extruder_temp}
	RESTORE_GCODE_STATE NAME=ERCF_state
	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 Refer to the manual before resuming the print {% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_UNLOCK End <<< {% endif %}


[delayed_gcode disable_heater]
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> disable_heater Start <<< {% endif %}

	{% if printer["gcode_macro ERCF_PAUSE"].is_paused|int != 0 %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Disable extruder heater (ERCF_Pause timeout...) {% endif %}
		M104 S0
		clear_HE_heating_indication
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> disable_heater End <<< {% endif %}


# Pause the ERCF, park the extruder at the parking position
# Save the current state and start the delayed stop of the heated
# modify the timeout of the printer accordingly to timeout_pause
[gcode_macro ERCF_PAUSE]
description: Pause the current print and lock the ERCF operations
variable_is_paused: 0
variable_extruder_temp: 0
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_PAUSE Start <<< {% endif %}

	SET_GCODE_VARIABLE MACRO=ERCF_PAUSE VARIABLE=extruder_temp VALUE={printer.extruder.target}
	SET_GCODE_VARIABLE MACRO=ERCF_PAUSE VARIABLE=is_paused VALUE=1
	SET_IDLE_TIMEOUT TIMEOUT={printer["gcode_macro ERCF_VAR"].timeout_pause}
	UPDATE_DELAYED_GCODE ID=disable_heater DURATION={printer["gcode_macro ERCF_VAR"].disable_heater}
	
	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} 
		M118 An issue with the ERCF has been detected and the ERCF has been PAUSED
		M118 When you intervene to fix the issue, first call the "ERCF_UNLOCK" Gcode
		M118 Refer to the manual before resuming the print
	{% endif %}
	
	SAVE_GCODE_STATE NAME=ERCF_state
	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
	PAUSE

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_PAUSE End <<< {% endif %}

############################################
# Changing tool macros
# ERCF_CHANGE_TOOL_STANDALONE TOOL=XX to change filament outside of a print
# ERCF_CHANGE_TOOL_SLICER TOOL=XX will be called automatically (from the ACTIVATE_EXTRUDER gcode from SuperSlicer), don't use that for "manual" filament swap
# if the new extruder is different from the current extruder :
#	 eject the filament if needed
#	 load the new one
###########################################
[gcode_macro T0]
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T0 Start <<< {% endif %}

	ERCF_CHANGE_TOOL TOOL=0

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T0 End <<< {% endif %}

[gcode_macro T1]
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T1 Start <<< {% endif %}

	ERCF_CHANGE_TOOL TOOL=1

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T1 End <<< {% endif %}

[gcode_macro T2]
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T2 Start <<< {% endif %}

	ERCF_CHANGE_TOOL TOOL=2

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T2 End <<< {% endif %}

[gcode_macro T3]
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T3 Start <<< {% endif %}

	ERCF_CHANGE_TOOL TOOL=3

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T3 End <<< {% endif %}

[gcode_macro T4]
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T4 Start <<< {% endif %}

	ERCF_CHANGE_TOOL TOOL=4

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T4 End <<< {% endif %}

[gcode_macro T5]
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T5 Start <<< {% endif %}

	ERCF_CHANGE_TOOL TOOL=5

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T5 End <<< {% endif %}

[gcode_macro T6]
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T6 Start <<< {% endif %}

	ERCF_CHANGE_TOOL TOOL=6

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T6 End <<< {% endif %}

[gcode_macro T7]
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T7 Start <<< {% endif %}

	ERCF_CHANGE_TOOL TOOL=7

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T7 End <<< {% endif %}

[gcode_macro T8]
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T8 Start <<< {% endif %}

	ERCF_CHANGE_TOOL TOOL=8

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T8 End <<< {% endif %}

[gcode_macro T9]
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T9 Start <<< {% endif %}

	ERCF_CHANGE_TOOL TOOL=9

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T9 End <<< {% endif %}

[gcode_macro T10]
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T10 Start <<< {% endif %}

	ERCF_CHANGE_TOOL TOOL=10

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T10 End <<< {% endif %}

[gcode_macro T11]
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T11 Start <<< {% endif %}

	ERCF_CHANGE_TOOL TOOL=11

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> T11 End <<< {% endif %}

[gcode_macro ERCF_CHANGE_TOOL]
description: Perform a tool swap
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CHANGE_TOOL Start <<< {% endif %}

	{% if printer.idle_timeout.state == "Printing" %} 
		ERCF_CHANGE_TOOL_SLICER TOOL={params.TOOL|int}
	{% else %}
		ERCF_CHANGE_TOOL_STANDALONE TOOL={params.TOOL|int}
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CHANGE_TOOL End <<< {% endif %}

[gcode_macro ERCF_CHANGE_TOOL_SLICER]
description: Perform a tool swap during a print
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CHANGE_TOOL_SLICER Start <<< {% endif %}

	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
	{% if printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int != params.TOOL|int %}   
		# Add a variable 'SwapCounter' in your PRINT_START macro to display this info
		{% set newcounter = (printer["gcode_macro PRINT_START"].swapcounter|int + 1) %}
		SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=swapcounter VALUE={newcounter}
		
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 Swaps: {newcounter|int} {% endif %}
		
		SAVE_VARIABLE VARIABLE=ercf_swaps VALUE={newcounter|int}
		M117 Change Tool T{params.TOOL|int}
		ERCF_UNLOAD_TOOL
		ERCF_LOAD_TOOL TOOL={params.TOOL|int}
		ERCF_CHANGE_TOOL_SLICER_END
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CHANGE_TOOL_SLICER End <<< {% endif %}

[gcode_macro ERCF_CHANGE_TOOL_SLICER_END]
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CHANGE_TOOL_SLICER_END Start <<< {% endif %}

		{% if printer["gcode_macro ERCF_PAUSE"].is_paused|int == 0 %}
			{% if printer["gcode_macro ERCF_VAR"].clog_detection|int == 1 %}
				SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
			{% endif %}
		{% else %}
			alert_ercf_is_paused
		{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CHANGE_TOOL_SLICER_END End <<< {% endif %}

[gcode_macro ERCF_CHANGE_TOOL_STANDALONE]
description: Perform a tool swap out of a print
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CHANGE_TOOL_STANDALONE Start <<< {% endif %}

	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
	{% if printer["gcode_macro ERCF_HOME"].home == -1 %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 ERCF not homed, homing it... {% endif %}
		ERCF_HOME
		M117 Change Tool T{params.TOOL|int}
		ERCF_LOAD_TOOL TOOL={params.TOOL|int}
	{% elif printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int != params.TOOL|int %}
		M117 Change Tool T{params.TOOL|int}
		{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Unloading current filament {% endif %}
			{% if printer['extruder'].temperature < 178 %}
				{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Preheat Nozzle {% endif %}
				set_HE_heating_indication
				M109 S{printer["gcode_macro ERCF_VAR"].extruder_eject_temp}
				clear_HE_heating_indication
			{% endif %}
			ERCF_EJECT
		{% endif %}

		ERCF_LOAD_TOOL TOOL={params.TOOL|int}
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CHANGE_TOOL_STANDALONE End <<< {% endif %}

############################################
# Unloading/Loading Macros
############################################

# Load filament from ERCF to nozzle
[gcode_macro ERCF_LOAD_TOOL]
description: Load the filament from the ERCF to the toolhead
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_LOAD_TOOL Start <<< {% endif %}

	{% set ercf_params = printer.save_variables.variables %}
	{% if printer["gcode_macro ERCF_PAUSE"].is_paused|int == 0 %}
		{% if printer["gcode_macro ERCF_HOME"].home == -1 %}
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 ERCF not homed, homing it... {% endif %}
			ERCF_HOME
		{% endif %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 Loading tool {params.TOOL|int} ... {% endif %}
		ERCF_SELECT_TOOL TOOL={params.TOOL|int}
		ERCF_SET_STEPS RATIO={ercf_params['ercf_calib_%s' % (params.TOOL|string)]}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Loading filament from ERCF to extruder ... {% endif %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 ERCF_LOAD LENGTH={ercf_params.ercf_calib_ref|float - printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float} {% endif %}
		ERCF_LOAD LENGTH={ercf_params.ercf_calib_ref|float - printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float}
		ERCF_LOAD_FILAMENT_IN_EXTRUDER
	{% else %}
		alert_ercf_is_paused
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_LOAD_TOOL End <<< {% endif %}

# Unload filament from nozzle to ERCF, using built-in tip forming macro
[gcode_macro ERCF_EJECT]
description: Retract from nozzle, form tip, eject, parking filament in cart
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_EJECT Start <<< {% endif %}

	{% if printer["gcode_macro ERCF_PAUSE"].is_paused|int == 0 %}
		{% if printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int != -1 %}
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 Unloading tool {printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int} ... {% endif %}
			{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
				ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING
				{% set ercf_params = printer.save_variables.variables %}
				ERCF_SET_STEPS RATIO={ercf_params['ercf_calib_%s' % (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|string)]}
				{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 ERCF FILAMENT UNLOAD: -{ercf_params.ercf_calib_ref|float - printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float + printer["gcode_macro ERCF_VAR"].unload_modifier|float} {% endif %}
				ERCF_UNLOAD LENGTH={ercf_params.ercf_calib_ref|float - printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float + printer["gcode_macro ERCF_VAR"].unload_modifier|float}
				ERCF_UNSELECT_TOOL
			{% else %}
				ERCF_EJECT_UNKNOW_STATE
			{% endif %}
		{% else %}
			ERCF_EJECT_UNKNOW_STATE
		{% endif %}
	{% else %}
		alert_ercf_is_paused
	{% endif %}
	
	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_EJECT End <<< {% endif %}

# Unload filament from nozzle to ERCF, using SuperSlicer ramming
[gcode_macro ERCF_UNLOAD_TOOL]
description: Eject the filament during a print and park it into the ERCF
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_UNLOAD_TOOL Start <<< {% endif %}

	{% if printer["gcode_macro ERCF_PAUSE"].is_paused|int == 0 %}
		{% if printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int != -1 %}
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 ERCF_UNLOAD_TOOL {printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int} ... {% endif %}
			ERCF_HOME_EXTRUDER
			ERCF_SELECT_TOOL TOOL={printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int}
			{% set ercf_params = printer.save_variables.variables %}
			ERCF_SET_STEPS RATIO={ercf_params['ercf_calib_%s' % (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|string)]}
			go_relative
			G92 E0
			MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 DUAL FILAMENT RETRACT: -{printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float + 20.0} {% endif %}

			# E and Gear are working in concert - Feedrate of 1500mm/min == 25mm/sec Speed
			MANUAL_STEPPER STEPPER=gear_stepper MOVE=-{printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float + 20.0} SPEED=25 ACCEL=0 SYNC=0
			G1 E-{printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float + 20.0} F1500.0

			{% set ercf_params = printer.save_variables.variables %}
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 ERCF FILAMENT UNLOAD: -{ercf_params.ercf_calib_ref|float - printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float + printer["gcode_macro ERCF_VAR"].unload_modifier|float - 20.0} {% endif %}
			ERCF_UNLOAD LENGTH={ercf_params.ercf_calib_ref|float - printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float + printer["gcode_macro ERCF_VAR"].unload_modifier|float - 20.0}
			ERCF_UNSELECT_TOOL
		{% endif %}
	{% else %}
		alert_ercf_is_paused
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_UNLOAD_TOOL End <<< {% endif %}

############################################
# Select/Unselect a tool
# move the selector (if needed) to the requested tool
############################################

# Select a tool. move the idler and then move the color selector (if needed)
[gcode_macro ERCF_SELECT_TOOL]
description: Move the selector to the Tool and select it
variable_tool_selected: -1
variable_color_selected: -1
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_SELECT_TOOL Start <<< {% endif %}

	{% if printer["gcode_macro ERCF_PAUSE"].is_paused|int == 0 %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_SELECT_TOOL | ERCF_PAUSE.is_paused = 0 <<< {% endif %}
		{% if printer["gcode_macro ERCF_HOME"].home != -1 %}
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Select Tool {params.TOOL} ... {% endif %}
			ERCF_SERVO_UP
			MANUAL_STEPPER STEPPER=selector_stepper MOVE={printer["gcode_macro ERCF_VAR"].colorselector[params.TOOL|int]}
			SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=tool_selected VALUE={params.TOOL}
			SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=color_selected VALUE={params.TOOL}
			ERCF_SERVO_DOWN
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 Tool {params.TOOL} Enabled {% endif %}
		{% else %}
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 Could not select tool, ERCF is not homed {% endif %}
		{% endif %}
	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_SELECT_TOOL | ERCF_PAUSE.is_paused = 1 <<< {% endif %}
		alert_ercf_is_paused
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_SELECT_TOOL End <<< {% endif %}

# Unselect a tool
[gcode_macro ERCF_UNSELECT_TOOL]
description: Unselect current Tool
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_UNSELECT_TOOL Start <<< {% endif %}

	{% set unselect_color = params.FORCED|default(1)|int %}
	{% if printer["gcode_macro ERCF_PAUSE"].is_paused|int == 0 %}
		{% if printer["gcode_macro ERCF_HOME"].home != -1 %}
			ERCF_SERVO_UP
			SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=tool_selected VALUE=-1
			{% if unselect_color == 1 %}
				SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=color_selected VALUE=-1
			{% endif %}
			ERCF_SET_STEPS RATIO=1.0
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Tool Unselected, Servo Raised {% endif %}
		{% else %}
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 Could not unselect tool, ERCF is not homed {% endif %}
		{% endif %}
	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_UNSELECT_TOOL | ERCF_PAUSE.is_paused = 1 <<< {% endif %}
		alert_ercf_is_paused
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_UNSELECT_TOOL End <<< {% endif %}

############################################
# Loading/Unloading part FROM/TO EXTRUDER TO/FROM NOZZLE
############################################

# Load the filament into the extruder
# Call ERCF_PAUSE if the filament is not detected by the toolhead sensor
[gcode_macro ERCF_LOAD_FILAMENT_IN_EXTRUDER]
description: Load filament from the toolhead entrance to the nozzle
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_LOAD_FILAMENT_IN_EXTRUDER Start <<< {% endif %}

	{% if printer["gcode_macro ERCF_PAUSE"].is_paused|int == 0 %}
		{% if printer.extruder.temperature >= printer["gcode_macro ERCF_VAR"].min_temp_extruder %}
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Loading Filament... {% endif %}
			go_relative
			G92 E0
			MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 DUAL FILAMENT Load: {printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float - 7} {% endif %}
			
			# E and Gear are working in concert - Feedrate of 1500mm/min == 25mm/sec Speed
			MANUAL_STEPPER STEPPER=gear_stepper MOVE={printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float - 7} SPEED=25 ACCEL=0 SYNC=0
			G1 E{printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float - 7} F1500.0

			G4 P100
			ERCF_HOME_EXTRUDER TOTAL_LENGTH=30.0 STEP_LENGTH=0.5
			ERCF_UNSELECT_TOOL FORCED=0
			ERCF_FINALIZE_LOAD LENGTH={printer["gcode_macro ERCF_VAR"].sensor_to_nozzle|float}
			G92 E0
			go_absolute
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Load Complete {% endif %}
		{% else %}
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 Extruder too cold {% endif %}
			ERCF_PAUSE
		{% endif %}
	{% else %}
		alert_ercf_is_paused
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_LOAD_FILAMENT_IN_EXTRUDER End <<< {% endif %}

# StandAlone cooling moves to extract proper filament tip
[gcode_macro ERCF_FORM_TIP_STANDALONE]
description: Generic tip forming macro
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_FORM_TIP_STANDALONE Start <<< {% endif %}

	{% set COOLING_TUBE_LENGTH = params.COOLING_TUBE_LENGTH|default(15) %} # Dragon ST: 15, Dragon HF: 10, Mosquito: 20
	{% set COOLING_TUBE_RETRACTION = params.COOLING_TUBE_RETRACTION|default(35) %} # Dragon ST: 35, Dragon HF: 30, Mosquito: 38
	{% set INITIAL_COOLING_SPEED = params.INITIAL_COOLING_SPEED|default(10) %}
	{% set FINAL_COOLING_SPEED = params.FINAL_COOLING_SPEED|default(50) %}
	{% set COOLING_MOVES = params.COOLING_MOVES|default(5) %}
	{% set TOOLCHANGE_TEMP = params.TOOLCHANGE_TEMP|default(0) %}
	{% set USE_SKINNYDIP = params.USE_SKINNYDIP|default(1) %}
	{% set USE_FAST_SKINNYDIP = params.USE_FAST_SKINNYDIP|default(1) %}
	{% set SKINNYDIP_DISTANCE = params.SKINNYDIP_DISTANCE|default(26) %}
	{% set DIP_INSERTION_SPEED = params.DIP_INSERTION_SPEED|default(33) %}
	{% set DIP_EXTRACTION_SPEED = params.DIP_EXTRACTION_SPEED|default(70) %}
	{% set MELT_ZONE_PAUSE = params.MELT_ZONE_PAUSE|default(0) %}
	{% set COOLING_ZONE_PAUSE = params.COOLING_ZONE_PAUSE|default(0) %}
	{% set UNLOADING_SPEED_START = params.UNLOADING_SPEED_START|default(199) %}
	{% set UNLOADING_SPEED = params.UNLOADING_SPEED|default(20) %}
	{% set RAMMING_VOLUME = params.RAMMING_VOLUME|default(0) %} # in mm3
	{% set INITIAL_RETRACT = params.INITIAL_RETRACT|default(0) %} # Use an initial retract or not. Don't use it if you want to ram the filament
	{% set FINAL_EJECT = params.FINAL_EJECT|default(0) %} # Fully eject the filament afterwards, default is no

	go_relative
	G92 E0

	SET_PRESSURE_ADVANCE ADVANCE=0
	{% set OLD_TEMP = printer.extruder.target %}

	# Ramming with SuperSlicer standard setting
	{% if INITIAL_RETRACT|int == 1 %}
		G1 E-8.5000 F3000
	{% endif %}

	{% set RATIO = (RAMMING_VOLUME|float) /23.0 %}

	G1 E{0.5784 * RATIO|float} F299 #7
	G1 E{0.5834 * RATIO|float} F302 #3
	G1 E{0.5918 * RATIO|float} F306 #6
	G1 E{0.6169 * RATIO|float} F319 #6
	G1 E{0.3393 * RATIO|float} F350 #0
	G1 E{0.3363 * RATIO|float} F350 #0
	G1 E{0.7577 * RATIO|float} F392 #6
	G1 E{0.8382 * RATIO|float} F434 #3
	G1 E{0.7776 * RATIO|float} F469 #9
	G1 E{0.1293 * RATIO|float} F469 #9
	G1 E{0.9673 * RATIO|float} F501 #2
	G1 E{1.0176 * RATIO|float} F527 #2
	G1 E{0.5956 * RATIO|float} F544 #6
	G1 E{0.4555 * RATIO|float} F544 #6
	G1 E{1.0662 * RATIO|float} F552 #4

	# set toolchange temperature just prior to filament being extracted from melt zone and wait for set point
	# (SKINNYDIP--normal mode only)
	{% if TOOLCHANGE_TEMP|float > 0 and USE_FAST_SKINNYDIP|int == 0 %}
		set_HE_heating_indication
		M109 S{TOOLCHANGE_TEMP}
		clear_HE_heating_indication
	{% endif %}

	# Retraction
	{% set TOTAL_RETRACTION_DISTANCE = COOLING_TUBE_RETRACTION|float + COOLING_TUBE_LENGTH|float / 2 - 15 %}
	G1 E-15 F{1.0 * UNLOADING_SPEED_START|float * 60}
	G1 E-{0.7 * TOTAL_RETRACTION_DISTANCE} F{1.0 * UNLOADING_SPEED|float * 60}
	G1 E-{0.2 * TOTAL_RETRACTION_DISTANCE} F{0.5 * UNLOADING_SPEED|float * 60}
	G1 E-{0.1 * TOTAL_RETRACTION_DISTANCE} F{0.3 * UNLOADING_SPEED|float * 60}

	{% if TOOLCHANGE_TEMP|float > 0 and USE_FAST_SKINNYDIP|int == 1 %}
		set_HE_heating_indication
		M104 S{TOOLCHANGE_TEMP}
	{% endif %}

	# Generate Cooling Moves
	{% set SPEED_INC = (FINAL_COOLING_SPEED|float - INITIAL_COOLING_SPEED|float) / (2 * COOLING_MOVES|float - 1) %}
	{% for move in range(COOLING_MOVES|int) %}
	  G1 E{COOLING_TUBE_LENGTH} F{(INITIAL_COOLING_SPEED|float + SPEED_INC*move*2) * 60}
	  G1 E-{COOLING_TUBE_LENGTH} F{(INITIAL_COOLING_SPEED|float + SPEED_INC*(move*2+1)) * 60}
	{% endfor %}

	# wait for extruder to reach toolchange temperature after cooling moves complete (SKINNYDIP--fast mode only)
	{% if TOOLCHANGE_TEMP|float > 0 and USE_FAST_SKINNYDIP|int == 1 %}
		set_HE_heating_indication
		M109 S{TOOLCHANGE_TEMP}
#		clear_HE_heating_indication
	{% endif %}

	# Generate a skinnydip move
	{% if USE_SKINNYDIP|int == 1 %}
	  G1 E{SKINNYDIP_DISTANCE} F{DIP_INSERTION_SPEED|float * 60}
	  G4 P{MELT_ZONE_PAUSE}
	  G1 E-{SKINNYDIP_DISTANCE} F{DIP_EXTRACTION_SPEED|float * 60}
	  G4 P{COOLING_ZONE_PAUSE}
	{% endif %}

	{% if TOOLCHANGE_TEMP|float > 0 %}
		set_HE_heating_indication
		M104 S{OLD_TEMP}
	{% endif %}

	{% if FINAL_EJECT|int == 1 %}
		G92 E0
		G1 E-80 F3000
	{% endif %}

	G92 E0

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_FORM_TIP_STANDALONE End <<< {% endif %}

# Unload from extruder with tip forming sequence
[gcode_macro ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING]
description: Unload filament from the nozzle to the toolhead entrance using generic tip forming macro
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING Start <<< {% endif %}

	{% if printer["gcode_macro ERCF_PAUSE"].is_paused|int == 0 %}
		{% if printer.extruder.temperature > printer["gcode_macro ERCF_VAR"].min_temp_extruder %}
			{% if printer["gcode_macro ERCF_SELECT_TOOL"].tool_selected|int == -1 %}
				{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Forming filament tip and Unloading Filament... {% endif %}
				go_relative
				ERCF_FORM_TIP_STANDALONE
				G1 E-4.00 F1200.0
				G1 E-15.00 F2000
				ERCF_HOME_EXTRUDER
				ERCF_SERVO_DOWN
				go_relative
				G92 E0
				MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
				{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 DUAL FILAMENT RETRACT: -{printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float} {% endif %}

				# E and Gear are working in concert - Feedrate of 1500mm/min == 25mm/sec Speed
				MANUAL_STEPPER STEPPER=gear_stepper MOVE=-{printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float} SPEED=25 ACCEL=0 SYNC=0
				G1 E-{printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float} F1500.0

				{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Filament removed {% endif %}
			{% else %}
				{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 Tool selected, UNSELECT it {% endif %}
				SET_GCODE_VARIABLE MACRO=ERCF_VAR VARIABLE=ercf_err_flag VALUE=1		#flag an error - reset by caller
				ERCF_PAUSE
			{% endif %}
		{% else %}
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 Extruder too cold {% endif %}
			SET_GCODE_VARIABLE MACRO=ERCF_VAR VARIABLE=ercf_err_flag VALUE=1		#flag an error - reset by caller
			ERCF_PAUSE
		{% endif %}
	{% else %}
		SET_GCODE_VARIABLE MACRO=ERCF_VAR VARIABLE=ercf_err_flag VALUE=1		#flag an error - reset by caller
		alert_ercf_is_paused
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING End <<< {% endif %}

############################################
# Endstop check macros
############################################

# Call ERCF_PAUSE if the filament is not detected by the toolhead sensor
[gcode_macro ERCF_IS_FILAMENT_IN_EXTRUDER]
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_IS_FILAMENT_IN_EXTRUDER Start <<< {% endif %}

	{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Filament is in extruder {% endif %}
	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 Filament not in extruder {% endif %}
		SET_GCODE_VARIABLE MACRO=ERCF_VAR VARIABLE=ercf_err_flag VALUE=1		#flag an error - reset by caller
		ERCF_PAUSE
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_IS_FILAMENT_IN_EXTRUDER End <<< {% endif %}

# Call ERCF_PAUSE if the filament is stuck in the ERCF
[gcode_macro ERCF_IS_FILAMENT_STUCK_IN_ERCF]
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_IS_FILAMENT_STUCK_IN_ERCF Start <<< {% endif %}

	{% if printer.ercf.encoder_pos|float != 0 %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 Filament stuck in ERCF {% endif %}
		SET_GCODE_VARIABLE MACRO=ERCF_VAR VARIABLE=ercf_err_flag VALUE=1		#flag an error - reset by caller
		ERCF_PAUSE
	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 Filament not in ERCF {% endif %}
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_IS_FILAMENT_STUCK_IN_ERCF End <<< {% endif %}

############################################
# Macros called during homing to try to eject the filament if loaded
############################################

# Eject from extruder gear to the ERCF
[gcode_macro ERCF_EJECT_UNKNOW_STATE]
description: Unload filament from an unknown position
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_EJECT_UNKNOW_STATE Start <<< {% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 ERCF_EJECT_UNKNOW_STATE {% endif %}
	
	{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Filament in extruder, trying to eject it .. {% endif %}
		{% if printer['extruder'].temperature < 178 %}
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Preheat Nozzle {% endif %}
			set_HE_heating_indication
			M109 S{printer["gcode_macro ERCF_VAR"].extruder_eject_temp}
			clear_HE_heating_indication
		{% endif %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Calling ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING {% endif %}
		ERCF_UNLOAD_FILAMENT_IN_EXTRUDER_WITH_TIP_FORMING
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 ERCF FILAMENT UNLOAD: -{printer["gcode_macro ERCF_VAR"].min_bowden_length - 50} {% endif %}
		ERCF_UNLOAD LENGTH={printer["gcode_macro ERCF_VAR"].min_bowden_length - 50} UNKNOWN=1
	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 No Filament in TH, calling ERCF_SERVO_DOWN {% endif %}
		ERCF_SERVO_DOWN
	{% endif %}
	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 ERCF_BUZZ_GEAR_MOTOR {% endif %}
	ERCF_BUZZ_GEAR_MOTOR
	G4 P200
	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 ERCF_EJECT_FROM_BOWDEN {% endif %}
	ERCF_EJECT_FROM_BOWDEN

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_EJECT_UNKNOW_STATE End <<< {% endif %}

# Eject from the bowden to the ERCF
[gcode_macro ERCF_EJECT_FROM_BOWDEN]
description: Unload filament from the reverse bowden
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_EJECT_FROM_BOWDEN Start <<< {% endif %}

	{% if printer.ercf.encoder_pos|float != 0 %}
		ERCF_UNLOAD HOMING=1
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Filament ejected {% endif %}
		
	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Filament already ejected {% endif %}
		
	{% endif %}
	ERCF_SERVO_UP

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_EJECT_FROM_BOWDEN End <<< {% endif %}

############################################
# Homing macros
# ERCF_HOME must be called before using the ERCF
############################################

# Home the ERCF
# eject filament if loaded with ERCF_EJECT_UNKNOW_STATE
# next home the ERCF with ERCF_HOME_ONLY
[gcode_macro ERCF_HOME]
description: Home the ERCF
variable_home: -1
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_HOME Start <<< {% endif %}

	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
	SET_GCODE_VARIABLE MACRO=ERCF_HOME VARIABLE=home VALUE=1
	{% if printer["gcode_macro ERCF_PAUSE"].is_paused|int == 1 %}
		ERCF_UNLOCK
	{% endif %}
	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Homing ERCF ... {% endif %}
	
	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} QUERY_ENDSTOPS {% endif %}
	
	ERCF_EJECT_UNKNOW_STATE
	ERCF_HOME_SELECTOR
	ERCF_HOME_ONLY

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_HOME End <<< {% endif %}


[gcode_macro ERCF_HOME_SELECTOR]
description: Home the ERCF selector

gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_HOME_SELECTOR Start <<< {% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Homing selector {% endif %}
	
	ERCF_SERVO_UP

	{% set number_of_chan=printer["gcode_macro ERCF_VAR"].colorselector|length %}
	; {% set selector_length=(20.0 + number_of_chan*21.0 + (number_of_chan/3)*5.0) %}
	{% set selector_length=(20.0 + 12*21.0 + (number_of_chan/3)*5.0) %}

	MANUAL_STEPPER STEPPER=selector_stepper SET_POSITION=0
	MANUAL_STEPPER STEPPER=selector_stepper SPEED=100 MOVE=-{selector_length|float} STOP_ON_ENDSTOP=1
	MANUAL_STEPPER STEPPER=selector_stepper SET_POSITION=0
	MANUAL_STEPPER STEPPER=selector_stepper SPEED=100 MOVE=5.0
	MANUAL_STEPPER STEPPER=selector_stepper SPEED=10 MOVE=-10.0 STOP_ON_ENDSTOP=1
	MANUAL_STEPPER STEPPER=selector_stepper SET_POSITION=0
	SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=tool_selected VALUE=-1
	SET_GCODE_VARIABLE MACRO=ERCF_SELECT_TOOL VARIABLE=color_selected VALUE=-1
	
	SAVE_VARIABLE VARIABLE=ercf_selector_homed VALUE=1

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_HOME_SELECTOR End <<< {% endif %}

# Home the ERCF:
# 1) home the color selector (if needed)
# 2) try to load filament 0 to ERCF and then unload it. Used to verify the ERCF gear
# if all is ok, the ERCF is ready to be used
[gcode_macro ERCF_HOME_ONLY]
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_HOME_ONLY Start <<< {% endif %}

	{% if printer["gcode_macro ERCF_PAUSE"].is_paused|int == 0 %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Test load filament in cart 0 {% endif %}
		
		ERCF_SELECT_TOOL TOOL=0
		ERCF_SET_STEPS RATIO=1.0
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Loading filament to ERCF... {% endif %}
		
		ERCF_LOAD LENGTH=45
		G4 P50
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 ERCF FILAMENT UNLOAD: -68 {% endif %}
		ERCF_UNLOAD LENGTH=68
		ERCF_UNSELECT_TOOL
		SET_GCODE_VARIABLE MACRO=ERCF_HOME VARIABLE=home VALUE=1
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Homing ERCF ended ... {% endif %}
		
	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 Homing ERCF failed, ERCF is paused, run "ERCF_UNLOCK" to unlock it ... {% endif %}
		SET_GCODE_VARIABLE MACRO=ERCF_VAR VARIABLE=ercf_err_flag VALUE=1		# flag an error - reset by caller
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_HOME_ONLY End <<< {% endif %}

###############################################
# Test Macros
###############################################
[gcode_macro ERCF_DISPLAY_ENCODER_POS]
description: Display current value of the ERCF encoder
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_DISPLAY_ENCODER_POS Start <<< {% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 Encoder value is {printer['ercf'].encoder_pos|float} {% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_DISPLAY_ENCODER_POS End <<< {% endif %}

[gcode_macro ERCF_TEST_MOVE_GEAR]
description: Move the ERCF gear
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_TEST_MOVE_GEAR Start <<< {% endif %}

	{% set move_length = params.LENGTH|default(0.0)|float %}
	{% set move_speed = params.SPEED|default(30.0)|float %}
	{% set move_accel = params.ACCEL|default(200.0)|float %}
	MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
	MANUAL_STEPPER STEPPER=gear_stepper MOVE={move_length|float} SPEED={move_speed|float} ACCEL={move_accel|float}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_TEST_MOVE_GEAR End <<< {% endif %}

[gcode_macro ERCF_TEST_SERVO]
description: Test the servo angle
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_TEST_SERVO Start <<< {% endif %}

	SET_SERVO SERVO=ercf_servo ANGLE={params.VALUE|float}
	G4 P250
	SET_SERVO SERVO=ercf_servo WIDTH=0.0

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_TEST_SERVO End <<< {% endif %}

[gcode_macro ERCF_TEST_GRIP]
description: Test the ERCF grip for a Tool
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_TEST_GRIP Start <<< {% endif %}

	ERCF_SERVO_DOWN	# does a tooth meshing buzz too
	ERCF_MOTORS_OFF

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_TEST_GRIP End <<< {% endif %}

[gcode_macro ERCF_TEST_LOAD_SEQUENCE]
description: Test sequence
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_TEST_LOAD_SEQUENCE Start <<< {% endif %}

	# verify that the ercf is homed and knows where the fuk it's at
	{% if printer["gcode_macro ERCF_HOME"].home == -1 %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 ERCF not homed, homing it... {% endif %}
		ERCF_HOME
	{% else %}
		# so we're homed, so make sure filament isn't in cart
		ERCF_EJECT_UNKNOW_STATE
		ERCF_UNSELECT_TOOL
	{% endif %}
		
	{% set loop_number = params.LOOP|default(10)|int %}
	{% set use_rand = params.RAND|default(0)|int %}

	SET_GCODE_VARIABLE MACRO=ERCF_VAR VARIABLE=ercf_err_flag VALUE=0		#clear error flag
	{% for iteration in range(loop_number|int) if not printer["gcode_macro ERCF_VAR"].ercf_err_flag %}
		{% for load in range((printer["gcode_macro ERCF_VAR"].colorselector|length)|int) %}
			{% if use_rand|int == 1 %}
				{% set rand_tool = range(0, printer["gcode_macro ERCF_VAR"].colorselector|length)|random %}
				{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 > Cart {rand_tool|int} < {% endif %}
				ERCF_SELECT_TOOL TOOL={rand_tool|int}
			{% else %}
				{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 > Cart {load|int} < {% endif %}
				ERCF_SELECT_TOOL TOOL={load|int}
			{% endif %}
			ERCF_LOAD LENGTH=100
			G4 P50
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 ERCF FILAMENT UNLOAD: -100 {% endif %}
			ERCF_UNLOAD LENGTH=100
			ERCF_UNSELECT_TOOL
			G4 P200
		{% endfor %}
	{% endfor %}
	SET_GCODE_VARIABLE MACRO=ERCF_VAR VARIABLE=ercf_err_flag VALUE=0		#clear error flag

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_TEST_LOAD_SEQUENCE End <<< {% endif %}

[gcode_macro ERCF_TEST_CART_LOAD_SEQUENCE]
description:  MHz - cart filament load test on all tools sequentially
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_TEST_CART_LOAD_SEQUENCE Start <<< {% endif %}

	{% if printer["gcode_macro ERCF_PAUSE"].is_paused|int == 0 %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Executing a ERCF_TEST_CART_LOAD_SEQUENCE {% endif %}
		
		SET_GCODE_VARIABLE MACRO=ERCF_VAR VARIABLE=ercf_err_flag VALUE=0		#clear error flag
		{% for tool_idx in range(printer["gcode_macro ERCF_VAR"].colorselector|length) if not printer["gcode_macro ERCF_VAR"].ercf_err_flag %}
			ERCF_TEST_CART_LOAD TOOL={tool_idx|int}
		{% endfor %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Completed the ERCF_TEST_CART_LOAD_SEQUENCE {% endif %}
		SET_GCODE_VARIABLE MACRO=ERCF_VAR VARIABLE=ercf_err_flag VALUE=0		#clear error flag

	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 ERCF_TEST_CART_LOAD_SEQUENCE failed, ERCF is paused, run "ERCF_UNLOCK" to unlock it ... {% endif %}
	{% endif %}
	
	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_TEST_CART_LOAD_SEQUENCE End <<< {% endif %}

[gcode_macro ERCF_TEST_CART_LOAD]
description:  MHz - cart filament load test on a specific tool
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_TEST_CART_LOAD Start <<< {% endif %}

	{% if printer["gcode_macro ERCF_PAUSE"].is_paused|int == 0 %}
		{% if printer["gcode_macro ERCF_HOME"].home == -1 %}
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 ERCF not homed, homing it... {% endif %}
			ERCF_HOME
		{% else %}
			ERCF_EJECT_UNKNOW_STATE
			ERCF_UNSELECT_TOOL
		{% endif %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Test load filament in cart {params.TOOL|int} {% endif %}
		ERCF_SELECT_TOOL TOOL={params.TOOL|int}
		ERCF_SET_STEPS RATIO=1.0
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Loading filament into ERCF TOOL {params.TOOL|int} {% endif %}
		ERCF_LOAD LENGTH=45
		G4 P50
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 ERCF FILAMENT UNLOAD: -68 {% endif %}
		
		ERCF_UNLOAD LENGTH=68
		ERCF_UNSELECT_TOOL
		{% if params.TOOL|int != 0 %}
			SET_GCODE_VARIABLE MACRO=ERCF_HOME VARIABLE=home VALUE=0
		{% else %}
			SET_GCODE_VARIABLE MACRO=ERCF_HOME VARIABLE=home VALUE=1
		{% endif%}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 ERCF_TEST_CART_LOAD on TOOL {params.TOOL|int} complete... {% endif %}
		
	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 ERCF_TEST_CART_LOAD failed, ERCF is paused, run "ERCF_UNLOCK" to unlock it ... {% endif %}
		SET_GCODE_VARIABLE MACRO=ERCF_VAR VARIABLE=ercf_err_flag VALUE=1		#flag an error - reset by caller
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_TEST_CART_LOAD End <<< {% endif %}

###############################################
# Endless spool mode and clog detection
###############################################
	
[gcode_macro ERCF_ENCODER_MOTION_ISSUE]
description: Perform a test when the encoder sense an issue (clog or runout)
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_ENCODER_MOTION_ISSUE Start <<< {% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 Issue on tool {printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int} {% endif %}
		
	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 Checking if this is a clog or a runout... {% endif %}

	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0

	ERCF_SERVO_DOWN
	ERCF_BUZZ_GEAR_MOTOR
	ERCF_SERVO_UP
	ERCF_CLOG_OR_RUNOUT

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_ENCODER_MOTION_ISSUE End <<< {% endif %}

[gcode_macro ERCF_CLOG_OR_RUNOUT]
description: Actions taken if a clog or a runout is detected by the ERCF encoder
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CLOG_OR_RUNOUT Start <<< {% endif %}

	{% if printer.ercf.encoder_pos|float != 0 %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 Clog detected, please check the ERCF and the printer {% endif %}
		SET_GCODE_VARIABLE MACRO=ERCF_VAR VARIABLE=ercf_err_flag VALUE=1		#flag an error - reset by caller
	{% else %}
		{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 Runout detected ! {% endif %}
		
		{% if printer["gcode_macro ERCF_VAR"].endless_spool_mode|int == 1 %}
			{% if printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int >= (printer["gcode_macro ERCF_VAR"].colorselector|length -1) %}
				{% set nexttool = 0 %}
			{% else %}
				{% set nexttool = (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|int + 1) %}
			{% endif %}

			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 Loading tool {nexttool|int} {% endif %}

			SAVE_GCODE_STATE NAME=ERCF_Pre_Brush_init
			# Adapt the example below to your own setup
			# The goal is just to clean the nozzle after the change
			# In my case I have a purge bucket with a brush
			# G0 X45 Y300 F18000
			# G0 X45 Y310 Z1 F3000

			# Custom unload sequence
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_status %} M118 Forming filament tip and Unloading Filament... {% endif %}
			
			go_relative
			ERCF_FORM_TIP_STANDALONE
			ERCF_HOME_EXTRUDER TOTAL_LENGTH={printer["gcode_macro ERCF_VAR"].sensor_to_nozzle} STEP_LENGTH=2.0
			ERCF_SERVO_DOWN

			go_relative
			G92 E0
			MANUAL_STEPPER STEPPER=gear_stepper SET_POSITION=0
			
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 DUAL FILAMENT RETRACT: -{printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float} {% endif %}

			# E and Gear are working in concert - Feedrate of 1500mm/min == 25mm/sec Speed
			MANUAL_STEPPER STEPPER=gear_stepper MOVE=-{printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float} SPEED=25 ACCEL=0 SYNC=0
			G1 E-{printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float} F1500.0

			{% set ercf_params = printer.save_variables.variables %}
			ERCF_SET_STEPS RATIO={ercf_params['ercf_calib_%s' % (printer["gcode_macro ERCF_SELECT_TOOL"].color_selected|string)]}

			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_info %} M118 ERCF FILAMENT UNLOAD: -{ercf_params.ercf_calib_ref|float - printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float + printer["gcode_macro ERCF_VAR"].unload_modifier|float} {% endif %}
			ERCF_UNLOAD LENGTH={ercf_params.ercf_calib_ref|float - printer["gcode_macro ERCF_VAR"].end_of_bowden_to_sensor|float + printer["gcode_macro ERCF_VAR"].unload_modifier|float}

			ERCF_UNSELECT_TOOL

			ERCF_LOAD_TOOL TOOL={nexttool|int}
			ERCF_CHECK_IF_RESUME
		{% else %}
			{% if printer["gcode_macro ERCF_VAR"].ercf_verb_error %} M118 EndlessSpool mode not enabled, please do something {% endif %}
			SET_GCODE_VARIABLE MACRO=ERCF_VAR VARIABLE=ercf_err_flag VALUE=1		#flag an error - reset by caller
		{% endif %}
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CLOG_OR_RUNOUT End <<< {% endif %}

[gcode_macro ERCF_CHECK_IF_RESUME]
description: Safety checks before resuming the print after an encoder event
gcode:

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CHECK_IF_RESUME Start <<< {% endif %}

	{% if printer["gcode_macro ERCF_PAUSE"].is_paused|int == 0 %}
		# Adapt the example below to your own setup
		# The goal is just to clean the nozzle after the change
		# In my case I have a purge bucket with a brush
		# BRUSH_PURGE LENGTH=50
		# BRUSH_CLEAN
		; RESTORE_GCODE_STATE NAME=ERCF_Pre_Brush_init
		RESUME
		{% if printer["gcode_macro ERCF_VAR"].clog_detection|int == 1 %}
			SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
		{% endif %}
	{% else %}
		alert_ercf_is_paused
		SET_GCODE_VARIABLE MACRO=ERCF_VAR VARIABLE=ercf_err_flag VALUE=1		#flag an error - reset by caller
	{% endif %}

	{% if printer["gcode_macro ERCF_VAR"].ercf_verb_debug %} M118 >>> ERCF_CHECK_IF_RESUME End <<< {% endif %}

