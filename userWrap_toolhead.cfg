#####################################################################
# _userWrap_toolhead
#####################################################################

[delayed_gcode _userWrap_toolhead_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_toolhead_loaded func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'
	_module_loaded MODULE=_userWrap_toolhead
	_proc_end function=_toolhead_loaded

#--------------------------------------------------------------------

[gcode_macro _info_userWrap_toolhead]
gcode:

# user config to wrap FW procs in toolhead.cfg

#--------------------------------------------------------------------

[gcode_macro _userWrap_toolhead_vars]
description: macro for _toolhead variables

gcode:

	_proc_start function=_toolhead_vars func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	# there is none, this is for module variable use only

	_proc_end function=_toolhead_vars

#--------------------------------------------------------------------

[delayed_gcode _userWrap_toolhead_module_start]
#description: Inits svv flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5					# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_toolhead_module_start func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	SAVE_VARIABLE VARIABLE=module_toolhead_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_toolhead_err_flag VALUE=0							#init error flag that this module is not in error

	_proc_end function=_toolhead_module_start

#--------------------------------------------------------------------

[gcode_macro G4]
description: wrap FW proc for userLogging purposes
rename_existing: G4.1
gcode:
	_proc_start function=G4 func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'
	
	{% if printer["gcode_macro _debug__tools_vars"].debug_gmove %}  
		{% set newparams = rawparams|upper|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")%}
		log_gmove S="G4 {newparams}"
	{% endif %}
	
#	say S="Dwell"
	G4.1 {rawparams}			# debating with the other me if this should be above conditional...
	_proc_end function=G4

#--------------------------------------------------------------------

[gcode_macro M204]							# FW wrapper to trap/use set_velocity_limit
description: wrap FW proc to trap and make use of set_velocity_limit in a manner that I want
rename_existing: M204.1
gcode:

	_proc_start function=M204 func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	{% set ext_move_accel = params.P|default(0)|int %}
	{% set tvl_move_accel = params.T|default(0)|int %}
	{% set all_move_accel = params.S|default(0)|int %}
	{% set retract_accel = params.R|default(0)|int %}

	{% set max_accel_limit = printer.toolhead.max_accel %}

	{% if all_move_accel %}
		# S param passed - cap at max accel limit and do it
		{% if all_move_accel > max_accel_limit %}
			{% set all_move_accel = max_accel_limit %}
		{% endif %}
		SET_VELOCITY_LIMIT ACCEL={all_move_accel} ACCEL_TO_DECEL={all_move_accel / 2}
	{% elif ext_move_accel and tvl_move_accel %}
		# P and T params passed - choose lesser of P and T, cap at max accel limit, and do it
		{% if ext_move_accel < tvl_move_accel %}
			{% set tgt_move_accel = ext_move_accel %}
		{% else %}
			{% set tgt_move_accel = tvl_move_accel %}
		{% endif %}
		{% if tgt_move_accel > max_accel_limit %}
			{% set tgt_move_accel = max_accel_limit %}
		{% endif %}
		SET_VELOCITY_LIMIT ACCEL={tgt_move_accel} ACCEL_TO_DECEL={tgt_move_accel / 2}
	{% elif ext_move_accel and not tvl_move_accel %}
		# P not T params passed - cap P at max accel limit, and do it
		{% if ext_move_accel > max_accel_limit %}
			{% set ext_move_accel = max_accel_limit %}
		{% endif %}
		SET_VELOCITY_LIMIT ACCEL={ext_move_accel} ACCEL_TO_DECEL={ext_move_accel / 2}
	{% elif tvl_move_accel and not ext_move_accel %}
		# T not P params passed - cap T at max accel limit, and do it
		{% if tvl_move_accel > max_accel_limit %}
			{% set tvl_move_accel = max_accel_limit %}
		{% endif %}
		SET_VELOCITY_LIMIT ACCEL={tvl_move_accel} ACCEL_TO_DECEL={tvl_move_accel / 2}
	{% elif retract_accel %}
		# do nothing here
	{% else %}
		# do nothing here
	{% endif %}

	_proc_end function=M204

#--------------------------------------------------------------------

[gcode_macro M400]
description: wrap FW proc for userLogging purposes
RENAME_EXISTING: M400.1
gcode:

	_proc_start function=M400 func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	M400.1 {rawparams}

	_proc_end function=M400

#--------------------------------------------------------------------

[gcode_macro SET_VELOCITY_LIMIT]
description: wrap FW proc for userLogging purposes
RENAME_EXISTING: _SET_VELOCITY_LIMIT_STOCK
gcode:

	_proc_start function=SET_VELOCITY_LIMIT func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	_SET_VELOCITY_LIMIT_STOCK {rawparams}

	_proc_end function=SET_VELOCITY_LIMIT

#--------------------------------------------------------------------


