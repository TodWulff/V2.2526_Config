#--------------------------------------------------------------------
# _tts.cfg gcode 'module'
# https://github.com/TodWulff/klipper_speech_synthesis <-- repo documentation
#--------------------------------------------------------------------

## sub-module includes:
# [include _blah.cfg]

#--------------------------------------------------------------------

[delayed_gcode tts_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=tts_loaded func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _printer_vars"].ptr_verb_cfgload %} 
		M118 >>> TTS module Loaded. <<<
		say "TTS module Loaded"
	{% endif %}
	_proc_end function=tts_loaded 

#--------------------------------------------------------------------

[gcode_macro _info_tts_module]				# module prerequisites/documentation/notes/examples/etc.

gcode:
# THIS _info_tts_module macro is for module documentation ony - isn't intended to be called - no runnable gcode here

# [DOCUMENT THE MODULE HERE...]
# Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ex orci, auctor ut mauris eu, iaculis laoreet sem.
# Aliquam erat volutpat. Aliquam dignissim purus ex, sit amet molestie lectus tincidunt sed. Ut vel tincidunt dolor,
# condimentum pulvinar justo. Ut felis orci, malesuada non justo in, eleifend egestas ipsum. Duis bibendum sapien 
# neque, quis vulputate metus bibendum non. Aenean nisl odio, sodales non vestibulum quis, facilisis quis sem.
# Praesent congue purus est. LOL!

# Conditionally call this modules procs by use of the following template code:

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	{% if svv.module_tts_loaded|int and
		  not svv.module_tts_err_flag|int %}
#		some_tts_macro	# [included tts.cfg] module's proc to: short_blah_blurb
	{% endif %}


# /*[DOCUMENT THE MODULE HERE...]*/

	# instrumentation code for macro trace purposes
	_proc_start function=_info_tts_module func_params='"THIS SHOULD NOT HAPPEN...\n{rawparams|string}"'  

	# there is none - this module's code should not be called by other code

	# instrumentation code for macro trace purposes
	_proc_end function=_info_tts_module 


#--------------------------------------------------------------------

[delayed_gcode _tts_module_start]
#description: Sets module-specific state flags for conditional use elsewhere.
#be sure to add in any module-specific init into __startup_autoexec.cfg (i.e. module loaded, error, etc.)
# this should only be ran the one time at module loading and not called from elsewhere
# remember to edit the instrumentation code function=BLAH below
# remember to edit the module_blah_loaded & module_blah_err_flag var names below
initial_duration: 0.5							# have this delayed a bit as init code in _startup_autoexec.cfg runs at 0.1s after start
gcode:

	# instrumentation code for macro trace purposes
	_proc_start function=_tts_module_start func_params='"{rawparams|string}"'  

	#_blah_somehelperproc	#calling of helper procs (macros..., either below or included)

	SAVE_VARIABLE VARIABLE=module_tts_loaded VALUE=1		# flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=module_tts_err_flag VALUE=0			# init error flag via persistent variable that this module is not in error
	# other module-specific initialization here (sample follows)
	#SAVE_VARIABLE VARIABLE=ui_input_to_cycl_def VALUE=-1	#internal decremented counter to force a default response in event of n timeouts.

	M118 >>> TTS Module Config Loaded <<<

	# instrumentation code for macro trace purposes
	_proc_end function=_tts_module_start 

#--------------------------------------------------------------------

[gcode_macro _tts_vars]						# base config default macro variables for the tts module
description:  blah module variables init'd herein - use above module_start macro for persistent/global variable init
# this macro should not be called by other code

# setup module variables here
# variable_blah_default_str:	"string value here"		# init some module specific string var(s) here
# variable_blah_default_val:	0							# init some module specific int|float var(s) here
variable_tts_voice_speed:	0
variable_tts_voice_type:	0

gcode:
	# there is none - for 'blah module' variable use only

	# instrumentation code for macro trace purposes
	_proc_start function=_tts_vars func_params='"THIS SHOULD NOT HAPPEN...\n{rawparams|string}"'  

	# instrumentation code for macro trace purposes
	_proc_end function=_tts_vars 

#--------------------------------------------------------------------

[gcode_macro SAY]
gcode:
	_proc_start function=say func_params='"{rawparams|string}"'  
	
	{% set svv = printer.save_variables.variables %}				# set context for save_variables object
	
	{% if params.S|lower != svv.last_tts_utterance|lower %}
		{% if printer["gcode_macro _printer_vars"].ptr_verb_speech %} 
		##	{% set utterance = params.S %}
		#	{% set utterance = rawparams|string|replace("s=", "") %}
		#	{% set utterance = "\'" ~ utterance|replace("S=", "") ~ "\'" %}
		##	RUN_SHELL_COMMAND CMD=say PARAMS='{utterance}'
			RUN_SHELL_COMMAND CMD=say PARAMS='{params.S}'
			SAVE_VARIABLE VARIABLE=last_tts_utterance VALUE='"{params.S}"'
		{% endif %}
	{% endif %}
	
	_proc_end function=say 

#--------------------------------------------------------------------

[gcode_macro SAY_WAIT]
gcode:
	_proc_start function=say func_params='"{rawparams|string}"'  
	
	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	{% if params.S|lower != svv.last_tts_utterance %}
		{% if printer["gcode_macro _printer_vars"].ptr_verb_speech %} 
		##	{% set utterance = params.S %}
		#	{% set utterance = rawparams|string|replace("s=", "") %}
		#	{% set utterance = "\'" ~ utterance|replace("S=", "") ~ "\'" %}
		##	RUN_SHELL_COMMAND CMD=say_wait PARAMS='{utterance}'
			RUN_SHELL_COMMAND CMD=say_wait PARAMS='{params.S}'
			SAVE_VARIABLE VARIABLE=last_tts_utterance VALUE='"{params.S}"'
		{% endif %}
	{% endif %}
	
	_proc_end function=say 

#--------------------------------------------------------------------
