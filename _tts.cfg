[delayed_gcode _tts_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_tts_loaded func_params='"{rawparams|string}"'
	_module_loaded MODULE=_tts
	_proc_end function=_tts_loaded

#--------------------------------------------------------------------

[delayed_gcode _tts_module_start]
#description: Sets module-specific state flags for conditional use elsewhere.
initial_duration: 1.0							# have this at 0.5s as init code in _startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_tts_module_start func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE=module_tts_loaded VALUE=1					#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=tts_err_flag VALUE=0						#init error flag via persistent variable that this module is not in error

	_proc_end function=_tts_module_start

#--------------------------------------------------------------------

[gcode_shell_command say]
#command: sh /home/pi/printer_data/config/say.sh
command: say
timeout: 2
verbose: false

#--------------------------------------------------------------------

[gcode_shell_command say_wait]
#command: sh /home/pi/printer_data/config/say_wait.sh
command: say_wait
timeout: 10
verbose: false

#--------------------------------------------------------------------

[gcode_macro say]
gcode:
	_proc_start function=say func_params={rawparams|string}

	{% set svv = printer.save_variables.variables %}							# set context for save_variables object

	{% if svv.module_shell_command_loaded %}									# verify we can call host scripts
		{% if params.S|lower != svv.last_tts_phrase|lower %}					# verify we didn't just make the same utterance
#		{% if 1 %}
			{% if printer["gcode_macro _printer_vars"].ptr_verb_speech %}		# and verify that a gag order doesn't exist
				M118 <font color=gray>ðŸ”Š: </font><font color=lime>{params.S}</font> # reflect in console that an utterance was made
				RUN_SHELL_CMD CMD=say PARAMS='{params.S}'						# emits utterance 
				SAVE_VARIABLE VARIABLE=last_tts_phrase VALUE='"{params.S}"'		# and historize this utterance
			{% else %}
				klipper_tts_dont_say S='{params.S} </font><font color=gray>[I am gagged]'
			{% endif %}
		{% else %}
			klipper_tts_dont_say S='{params.S} </font><font color=gray>[I just said this]'
		{% endif %}
	{% else %}
		klipper_tts_dont_say S='{params.S} </font><font color=gray>[I have no shell_commands mojo]'
	{% endif %}

	_proc_end function=say

#--------------------------------------------------------------------

[gcode_macro say_wait]
gcode:
	_proc_start function=say_wait func_params={rawparams|string}

	{% set svv = printer.save_variables.variables %}						# set context for save_variables object

	{% if svv.module_shell_command_loaded %}								# verify we can call host scripts
		{% if params.S|lower != svv.last_tts_phrase|lower %}					# verify we didn't just make the same utterance
#		{% if 1 %}
			{% if printer["gcode_macro _printer_vars"].ptr_verb_speech %}	# and verify that a gag order doesn't exist
				M118 <font color=gray>ðŸ”Š: </font><font color=lime>{params.S}</font> # reflect in console that an utterance was made
				RUN_SHELL_CMD CMD=say_wait PARAMS='{params.S}'             	# emits utterance
				SAVE_VARIABLE VARIABLE=last_tts_phrase VALUE='"{params.S}"'	# and historize this utterance
			{% else %}
				klipper_tts_dont_say S='{params.S} </font><font color=gray>[I am gagged]'
			{% endif %}
		{% else %}
			klipper_tts_dont_say S='{params.S} </font><font color=gray>[I just said this]'
		{% endif %}
	{% else %}
		klipper_tts_dont_say S='{params.S} </font><font color=gray>[I have no shell_commands mojo]'
	{% endif %}

	_proc_end function=say_wait

#--------------------------------------------------------------------

[gcode_macro say_nc]
# use case is saying via tts one thing but has weird spellings for phonetic purposes,
# and want printed console emission to look pretty, so use say_nc/say_wait_nc (nc = no console emission)
# then use klipper_tts_said to affect the console emission...
gcode:
	_proc_start function=say_nc func_params={rawparams|string}

	{% set svv = printer.save_variables.variables %}							# set context for save_variables object

	{% if svv.module_shell_command_loaded %}									# verify we can call host scripts
		{% if params.S|lower != svv.last_tts_phrase|lower %}					# verify we didn't just make the same utterance
#		{% if 1 %}
			{% if printer["gcode_macro _printer_vars"].ptr_verb_speech %}		# and verify that a gag order doesn't exist
				#M118 saying: '{params.S}'										# if not, speak, biotch
				RUN_SHELL_CMD CMD=say PARAMS='{params.S}'						# emits utterance to console
#				M118 <font color=gray>ðŸ”Š: </font><font color=lime>{params.S}</font> # reflect in console that an utterance was made
				SAVE_VARIABLE VARIABLE=last_tts_phrase VALUE='"{params.S}"'		# and historize this utterance
			{% else %}
#				klipper_tts_dont_say S='{params.S} </font><font color=gray>[I am gagged]'
			{% endif %}
		{% else %}
#			klipper_tts_dont_say S='{params.S} </font><font color=gray>[I just said this]'
		{% endif %}
	{% else %}
#		klipper_tts_dont_say S='{params.S} </font><font color=gray>[I have no shell_commands mojo]'
	{% endif %}

	_proc_end function=say_nc

#--------------------------------------------------------------------

[gcode_macro say_wait_nc]
# use case is saying via tts one thing but has weird spellings for phonetic purposes,
# and want printed console emission to look pretty, so use say_nc/say_wait_nc (nc = no console emission)
# then use klipper_tts_said to affect the console emission...
gcode:
	_proc_start function=say_wait_nc func_params={rawparams|string}

	{% set svv = printer.save_variables.variables %}						# set context for save_variables object

	{% if svv.module_shell_command_loaded %}								# verify we can call host scripts
		{% if params.S|lower != svv.last_tts_phrase|lower %}					# verify we didn't just make the same utterance
#		{% if 1 %}
			{% if printer["gcode_macro _printer_vars"].ptr_verb_speech %}	# and verify that a gag order doesn't exist
				#M118 saying: '{params.S}'									# if not, speak, biotch
				RUN_SHELL_CMD CMD=say_wait PARAMS='{params.S}'             	# emits utterance to console
#				M118 <font color=gray>ðŸ”Š: </font><font color=lime>{params.S}</font> # reflect in console that an utterance was made
				SAVE_VARIABLE VARIABLE=last_tts_phrase VALUE='"{params.S}"'	# and historize this utterance
			{% else %}
#				klipper_tts_dont_say S='{params.S} </font><font color=gray>[I am gagged]'
			{% endif %}
		{% else %}
#			klipper_tts_dont_say S='{params.S} </font><font color=gray>[I just said this]'
		{% endif %}
	{% else %}
#		klipper_tts_dont_say S='{params.S} </font><font color=gray>[I have no shell_commands mojo]'
	{% endif %}

	_proc_end function=say_wait_nc

#--------------------------------------------------------------------

[gcode_macro klipper_dialog]
description: makes brody emit a phrase to the klipper user (via console, and tts if enabled)
# use case is to call this from host scripts.
gcode:
	_proc_start function=klipper_dialog func_params={rawparams|string}

	{% set svv = printer.save_variables.variables %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_speech %}		# and verify that a gag order doesn't exist
		# emit the phrase via speech & on screen
		say_wait S="{params.S}"
#		klipper_tts_said S="{params.S}"
		 
	{% else %}
		# emit the phrase on screen
		klipper_tts_dont_say S="{params.S}"
	
	{% endif %}

	_proc_end function=klipper_dialog

#--------------------------------------------------------------------

[gcode_macro klipper_tts_said]
description: makes brody emit a phrase to the klipper console
# use case is saying via tts one thing but has weird spellings for phonetic purposes,
# and want printed console emission to look pretty, so use say_nc/say_wait_nc (nc = no console emission)
# then use this proc to affect the console emission...
gcode:
	_proc_start function=klipper_tts_said func_params={rawparams|string}

	{% set svv = printer.save_variables.variables %}

#	M118 <font color=gray>BrodyðŸ”Š: </font><font color=lime>{params.S}</font>
	M118 <font color=gray>ðŸ”Š: </font><font color=lime>{params.S}</font>
	SAVE_VARIABLE VARIABLE=last_kts_phrase VALUE='"{params.S}"'

	_proc_end function=klipper_tts_said

#--------------------------------------------------------------------

[gcode_macro klipper_tts_dont_say]
description: makes brody emit a phrase to the klipper console
# use case is saying via tts one thing but has weird spellings for phonetic purposes,
# and want printed console emission to look pretty, so use say_nc/say_wait_nc (nc = no console emission)
# then use this proc to affect the console emission...
gcode:
	_proc_start function=klipper_tts_dont_say func_params={rawparams|string}

	{% set svv = printer.save_variables.variables %}

#	M118 <font color=gray>BrodyðŸ”‡: </font><font color=lime>{params.S}</font>
#	M118 <font color=gray>ðŸ”‡: </font><font color=lime>{params.S}</font>
	M118 <font color=lime>{params.S}</font>
	SAVE_VARIABLE VARIABLE=last_ktcs_phrase VALUE='"{params.S}"'

	_proc_end function=klipper_tts_dont_say

#--------------------------------------------------------------------


