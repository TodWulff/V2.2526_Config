#####################################################################
# _userWrap_manual_stepper
#####################################################################

[delayed_gcode _userWrap_manual_stepper_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_manual_stepper_loaded func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'
	_module_loaded MODULE=_userWrap_manual_stepper
	_proc_end function=_manual_stepper_loaded

#--------------------------------------------------------------------

[gcode_macro _info_userWrap_manual_stepper]
gcode:

# user config to wrap FW procs constained in manual_stepper.cfg

#--------------------------------------------------------------------

[gcode_macro _userWrap_manual_stepper_vars]
description: macro for _manual_stepper variables

gcode:

	_proc_start function=_manual_stepper_vars func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	# there is none, this is for module variable use only

	_proc_end function=_manual_stepper_vars

#--------------------------------------------------------------------

[delayed_gcode _userWrap_manual_stepper_module_start]
#description: Inits svv flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5					# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_manual_stepper_module_start func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	SAVE_VARIABLE VARIABLE=module_manual_stepper_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_manual_stepper_err_flag VALUE=0							#init error flag that this module is not in error

	_proc_end function=_manual_stepper_module_start

#--------------------------------------------------------------------

[gcode_macro MANUAL_STEPPER]
description: wrapper for FW proc to handle error conditions, verbosity, and conditionally dwell
# primarily used in ercf
rename_existing: _MANUAL_STEPPER_STOCK
gcode:

	_proc_start function=MANUAL_STEPPER func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	# if in future there are more than ercf man steppers, then need to use conditionals herein.

	{% set svv = printer.save_variables.variables %}				# set easy accesss context for save_variables object

	{% if svv.ercf_err_flag and params.ENABLE|default(1)|int %} 				# if ENABLE not passed or != 0 and in an error, then don't do it.
		{% if printer["gcode_macro _debug__tools_vars"].debug_gmove %}  
			log_gmove S="> MANUAL_STEPPER Skipped - an ercf error condition is asserted <"
		{% endif %}
		M118 > MANUAL_STEPPER Skipped - an error condition is asserted <
	{% else %}
	
		{% if printer["gcode_macro _debug__tools_vars"].debug_gmove %}  
			log_gmove S="MANUAL_STEPPER {rawparams|upper}"
		{% endif %}
	
		_MANUAL_STEPPER_STOCK {rawparams}

		#determine dwell, if applicable
		{% if params.SET_POSITION|default("")|string != "" or params.ENABLE|default(1)|int == 0 %}
			# do no dwell on a set_position or a disable command
		{% elif params.STEPPER|string|lower == "selector_stepper" and params.NODWELL|default(0)|int == 0 %}
			_cart_move_dwell
		{% elif params.STEPPER|string|lower == "gear_stepper" and params.NODWELL|default(0)|int == 0 %}
			_gear_move_dwell
		{% elif params.NODWELL|default(0)|int != 0 %}
			# so NODWELL is set
		{% else %}
			# we shouldn't get here...
			M118 ___ unexpected command: manual_stepper {rawparams} ___
		{%endif %}

	{% endif %}

	_proc_end function=MANUAL_STEPPER

#--------------------------------------------------------------------


