#####################################################################
# _userWrap_heaters
#####################################################################

[delayed_gcode _userWrap_heaters_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_heaters_loaded func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'
	_module_loaded MODULE=_userWrap_heaters
	_proc_end function=_heaters_loaded

#--------------------------------------------------------------------

[gcode_macro _info_userWrap_heaters]
gcode:

# user config to wrap FW procs constained in heaters.cfg

#--------------------------------------------------------------------

[gcode_macro _userWrap_heaters_vars]
description: macro for _heaters variables

gcode:

	_proc_start function=_heaters_vars func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	# there is none, this is for module variable use only

	_proc_end function=_heaters_vars

#--------------------------------------------------------------------

[delayed_gcode _userWrap_heaters_module_start]
#description: Inits svv flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5					# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_heaters_module_start func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	SAVE_VARIABLE VARIABLE=module_heaters_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_heaters_err_flag VALUE=0							#init error flag that this module is not in error

	_proc_end function=_heaters_module_start

#--------------------------------------------------------------------

[gcode_macro M105]
description: wrap FW proc for userLogging purposes
RENAME_EXISTING: M105.1
gcode:

	_proc_start function=M105 func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	M105.1 {rawparams}

	_proc_end function=M105

#--------------------------------------------------------------------

[gcode_macro TEMPERATURE_WAIT]
description: FW Proc wrapper for debug logging purposes
rename_existing: _TEMPERATURE_WAIT_STOCK
gcode:

	_proc_start function=TEMPERATURE_WAIT func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	_TEMPERATURE_WAIT_STOCK {rawparams|lower}

	_proc_end function=TEMPERATURE_WAIT

#--------------------------------------------------------------------

[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE_STOCK
gcode:

	_proc_start function=SET_HEATER_TEMPERATURE func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	SAVE_VARIABLE VARIABLE={params.HEATER|string|lower}_temp_setting VALUE={params.TARGET|int}
	save_variable VARIABLE=boot_{params.HEATER|string|lower}_temp VALUE={params.TARGET|int}
	_SET_HEATER_TEMPERATURE_STOCK {rawparams|lower}
	
	UPDATE_DELAYED_GCODE ID=_report_temps DURATION=1
	# this is a bit of a temporal hack to allow closely timed setting of both bed and extruder while
	# speaking the temps once, after both are set (as long as they are set w/in <1s of one another
	# might add logic to not speak a specific setting if no change.?.  <-- done that...

	_proc_end function=SET_HEATER_TEMPERATURE

#--------------------------------------------------------------------

[gcode_macro TURN_OFF_HEATERS]				# FW Wrapper to reset cached temp settings
description: wrap FW proc to update cached temp settings
RENAME_EXISTING: _TURN_OFF_HEATERS_STOCK
gcode:

	_proc_start function=TURN_OFF_HEATERS func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	# update cached temp settings
	save_variable VARIABLE=boot_extruder_temp VALUE=0
	save_variable VARIABLE=boot_heater_bed_temp VALUE=0
	save_variable VARIABLE=extruder_temp_setting VALUE=0
	save_variable VARIABLE=heater_bed_temp_setting VALUE=0

	say_wait S="Heaters off"
	_TURN_OFF_HEATERS_STOCK

	_proc_end function=TURN_OFF_HEATERS

#--------------------------------------------------------------------



