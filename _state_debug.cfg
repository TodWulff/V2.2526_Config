#####################################################################
# _state_debug
#####################################################################

[delayed_gcode _state_debug_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_state_debug_loaded func_params='"{rawparams|string}"'
	_module_loaded MODULE=_state_debug
	_proc_end function=_state_debug_loaded

#--------------------------------------------------------------------

[gcode_macro _info_state_debug_macros]
gcode:
	#todo
	
#--------------------------------------------------------------------

[gcode_macro _state_debug_vars]
description: macro for _state_debug variables

gcode:

	_proc_start function=_state_debug_vars func_params='"{rawparams|string}"'

	# there is none, this is for module variable use only

	_proc_end function=_state_debug_vars

#--------------------------------------------------------------------

[delayed_gcode _state_debug_module_start]
#description: Inits state flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5					# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_state_debug_module_start func_params='"{rawparams|string}"'
 
	{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _state_debug_module_start Start <<< {% endif %}

	SAVE_VARIABLE VARIABLE=module_state_debug_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_state_debug_err_flag VALUE=0							#init error flag that this module is not in error

	{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _state_debug_module_start End <<< {% endif %}

	_proc_end function=_state_debug_module_start

#--------------------------------------------------------------------

[gcode_macro SAVE_GCODE_STATE]
description: for debug purposes, and to ease resume pains...
rename_existing: _SAVE_GCODE_STATE_STOCK
gcode:

	_proc_start function=SAVE_GCODE_STATE func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _debug_vars"].gcode_state_debug %} M118 >>>>> SAVE_GCODE_STATE {rawparams} <<<<< {% endif %}
	save_variable VARIABLE=last_saved_gcode_state VALUE='"{params.NAME}"'
	_SAVE_GCODE_STATE_STOCK {rawparams}

	_proc_end function=SAVE_GCODE_STATE 

#--------------------------------------------------------------------

[gcode_macro RESTORE_GCODE_STATE]
description: for debug purposes
rename_existing: _RESTORE_GCODE_STATE_STOCK
gcode:

	_proc_start function=RESTORE_GCODE_STATE func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _debug_vars"].gcode_state_debug %} M118 >>>>> RESTORE_GCODE_STATE {rawparams} <<<<< {% endif %}
	save_variable VARIABLE=last_restored_gcode_state VALUE='"{params.NAME}"'
	
	{% if params.NAME != "PAUSE_STATE" %}
		_RESTORE_GCODE_STATE_STOCK {rawparams}
	{% else %}
		# _RESTORE_GCODE_STATE_STOCK NAME=PAUSE_STATE
		{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 _RESTORE_GCODE_STATE_STOCK SKIPPED {% endif %}
	{% endif %}

	_proc_end function=RESTORE_GCODE_STATE 


[gcode_macro _enable_gcode_state_debug]
description: used to enable save_var debug
gcode:

	_proc_start function=_enable_gcode_state_debug func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _enable_save_var_debug <<<<< {% endif %}
	SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=gcode_state_debug VALUE=1
	say_wait S="Gee Code State Debug Enabled"

	_proc_end function=_enable_gcode_state_debug 

#--------------------------------------------------------------------

[gcode_macro _disable_gcode_state_debug]
description: used to disable save_var debug
gcode:

	_proc_start function=_disable_gcode_state_debug func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _disable_save_var_debug <<<<< {% endif %}
	SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=gcode_state_debug VALUE=0
	say_wait S="Gee Code State Debug Disabled"

	_proc_end function=_disable_gcode_state_debug 

#--------------------------------------------------------------------

[gcode_macro enable_gcode_state_debug]
description:
gcode:
	_proc_start function=enable_gcode_state_debug func_params='"{rawparams|string}"'
	_enable_gcode_state_debug
	_proc_end function=enable_gcode_state_debug

#--------------------------------------------------------------------

[gcode_macro disable_gcode_state_debug]
description:
gcode:
	_proc_start function=disable_gcode_state_debug func_params='"{rawparams|string}"'
	_disable_gcode_state_debug
	_proc_end function=disable_gcode_state_debug

