#####################################################################
# 	_klicky-probe
#####################################################################

[delayed_gcode _klicky-probe_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_klicky-probe_loaded func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _printer_vars"].ptr_verb_cfgload %}
		M118 >>> _klicky-probe.cfg Loaded. <<<
	{% endif %}
	_proc_end function=_klicky-probe_loaded 

[gcode_macro _info_klicky_probe]
gcode:


# This macro was provided by discord user Garrettwp to whom i give my thanks for sharing it with me.
# I have tweaked it a lot.
#
# this macro is  based on the great Annex magprobe dockable probe macros 
# "#Originally developed by Mental, modified for better use on K-series printers by RyanG and Trails"
# that macro can be found here https://github.com/Annex-Engineering/Annex-Engineering_Other_Printer_Mods/blob/master/All_Printers/Microswitch_Probe/Klipper_Macros/dockable_probe_macros.cfg
#
# by standing on the shoulders of giants, lets see if we can see further
# User richardjm revised the macro variables and added some functions, thanks a lot

[gcode_macro _klicky_vars]

variable_klicky_verb_error:		1		# set to 0 to mute error reporting (um, errors.  lol)
variable_klicky_verb_info:		0	   # set to 0 to mute info reporting (has data)
variable_klicky_verb_status:	0	   # set to 0 to mute status reporting (useful modes, update, etc.)
variable_klicky_verb_debug:		0	   # set to 0 to mute debugs stuffs I added (proc entry/exit)

variable_klicky_verb_codeflow:	0	   # set to 0 to mute debugs stuffs I added (proc entry/exit)

gcode:
	# there is none - just for module variables

[delayed_gcode _klicky_module_start]
#description:  Inits state flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5							# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_klicky_module_start func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _klicky_module_start Start <<< {% endif %}

	SAVE_VARIABLE VARIABLE=module_klicky_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=klicky_err_flag VALUE=0							#init error flag that this module is not in error

	{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _klicky_module_start End <<< {% endif %}

	_proc_end function=_klicky_module_start 

############################################################################
# _User_Variables
############################################################################

[gcode_macro _User_Variables]

#variable_verbose:					True	# Enable verbose output
variable_verbose:					False	# Enable verbose output

###  ~MHz~ NOTE: THESE SPEEDS ARE MULTIPLIED BY 60 BELOW TO ARRIVE AT Fblah RATES.
###  THIS YIELDED SOME REALLY FUKIN OBNOXIOUS Z SPEEDS THAT WERE BOTH TRIPPING FW STEPPER RATE FAILURES
###  AND RESULTING IN PROBE STRIKING THE BED PRETTY HARD WHEN PROBING (ESPECIALLY ON PROBE ACCURACY TEST PROC)

### THESE ARE MM PER SECOND!
variable_xytravel_speed:			250		# how fast all other XY travel moves will be performed when running these macros
variable_ztravel_speed:				50		# how fast all other Z travel moves will be performed when running these macros
variable_xydock_speed:				50		# how fast should the toolhead move when docking the probe for the final movement
variable_zdock_speed:				5		# how fast should the toolhead move when docking the probe for the final movement
variable_xyrelease_speed:			75		# how fast should the toolhead move to release the hold of the magnets after docking
variable_zrelease_speed:			5		# how fast should the toolhead move to release the hold of the magnets after docking
variable_z_drop_speed:				5		# how fast the z will move when moving to the z location to clear the probe

variable_safe_z:					15		# Minimum Z for attach/dock and homing functions

# if true it will move the bed away from the nozzle when Z is not homed
variable_enable_z_hop:				True	# set this to false for beds that fall significantly under gravity (almost to Z max)

variable_max_bed_y:					350.0	# maximum Bed size avoids doing a probe_accuracy outside the bed
variable_max_bed_x:					350.0	# maximum Bed size avoids doing a probe_accuracy outside the bed

# if a separate Z endstop switch is in
# use, specify the coordinates of the switch here (Voron).
# Set to 0 to have the probe move to center of bed
variable_z_endstop_x:				232.5	# Z-endstop X position
variable_z_endstop_y:				350.0	# Z-endstop Y position

#dock location 
variable_docklocation_x:			321.0	# X Dock position
variable_docklocation_y:			350.0	# Y Dock position
variable_docklocation_z:			-128	# Z dock position (-128 for a gantry mount)

#Dock move (on a V2, there should be no need to adjust these values)
#adjusted anyways as I dock on right and want to be over the z endstop once docked
Variable_dockmove_x:				-88		# Final toolhead movement to release  (+ if dock on Lt, - if dock on Rt)
Variable_dockmove_y:				0		# the probe on the dock
Variable_dockmove_z:				0		# (can be negative)

#Attach move (on a V2, there should be no need to adjust these values)
Variable_attachmove_x:				0		# Final toolhead movement to Dock
Variable_attachmove_y:				30		# the probe on the dock
Variable_attachmove_z:				0		# (can be negative)

#Umbilical to help untangle the umbilical in difficult situations
variable_umbilical:					False	# should we untabgle the umbilical
variable_umbilical_x:				15		# X umbilical position
variable_umbilical_y:				15		# Y umbilical position

# location to park the toolhead
variable_park_toolhead:				False	# Enable toolhead parking
variable_parkposition_x:			175		# X toolhead parking position
variable_parkposition_y:			350		# Y toolhead parking position
variable_parkposition_z:			15 		# Z toolhead parking position

variable_version:					1		# Helps users to update the necessary variables, do not update if the variables above are not updated

############################################################################
# Do not modify below
############################################################################
gcode:

	_proc_start function=_User_Variables func_params='"{rawparams|string}"'  

	{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
	{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
	{% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}
	{% set Oz = printer['configfile'].config["probe"]["z_offset"]|float %}

	# if home_z_height is defined, update safe_z (old versus new variable)
	{% if home_z_height|default(0) != 0 %}
		SET_GCODE_VARIABLE MACRO=_USER_Variables VARIABLE=safe_z VALUE={ home_z_height }
	{% endif %}

	# If x, y coordinates are set for z endstop, assign them
	{% if z_endstop_x != 0 or z_endstop_y != 0 %}
		SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ z_endstop_x }
		SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ z_endstop_y }

	# if no x, y coordinates for z endstop, assume probe is endstop and move toolhead to center of bed
	{% else %}
		SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_x VALUE={ (Mx * 0.5) - Ox }
		SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=z_endstop_y VALUE={ (My * 0.5) - Oy }
	{% endif %}

	_proc_end function=_User_Variables 

############################################################################
# _Probe_Variables
############################################################################
[gcode_macro _Probe_Variables]
variable_probe_attached:			False
variable_probe_state:				False
variable_probe_lock:				False
variable_z_endstop_x:				0
variable_z_endstop_y:				0
gcode:

############################################################################
# checks if the variable definitions are up to date
############################################################################
[gcode_macro _klicky_check_variables_version]
gcode:

	_proc_start function=_klicky_check_variables_version func_params='"{rawparams|string}"'  

	{% set version = printer["gcode_macro _User_Variables"].version|default(0) %}

	{% if version != 1 %}
	   { action_raise_error("Please update your klicky variables, there are some functionality changes") }
	{% endif %}

	_proc_end function=_klicky_check_variables_version 

############################################################################
# _exit_point - this is common and serves to restore gcode state and other stuffs
############################################################################
[gcode_macro _exit_point]
gcode:

	_proc_start function=_exit_point func_params='"{rawparams|string}"'  

	{% set move_speed = printer["gcode_macro _User_Variables"].xytravel_speed %}
	{% set function  = 'pre_' ~ params.FUNCTION %}
	{% set move  = params.MOVE|default(0) %}			# passed goback from caller

	{% if printer["gcode_macro _klicky_vars"].klicky_verb_info %} M118 >>> _____EXITING {function} MOVE={move} <<< {% endif %}

	# mandatory to save the new safe position
	M400	#WAIT FOR MOVES TO FINISH
	RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={move_speed}		#speed IS MM/S

	_proc_end function=_exit_point 

############################################################################
# _entry_point - this is common and serves to save gcode state and other stuffs
############################################################################
[gcode_macro _entry_point]
gcode:

	_proc_start function=_entry_point func_params='"{rawparams|string}"'  

	{% set function  = 'pre_' ~ params.FUNCTION %}

	{% if printer["gcode_macro _klicky_vars"].klicky_verb_info %} M118 >>> _____ENTERING {function} <<< {% endif %}

	# mandatory to save the new safe position
	M400								# WAIT FOR MOVES TO FINISH
	SAVE_GCODE_STATE NAME={function}

	SET_GCODE_OFFSET Z=0				# removes the Z offset for better bed based docking

	go_absolute							# all the macros initially assume absolute positioning

	_proc_end function=_entry_point 

############################################################################
# _Homing_Variables
############################################################################
[gcode_macro _Homing_Variables]
gcode:

	_proc_start function=_Homing_Variables func_params='"{rawparams|string}"'  

	{% set reset  = params.RESET|default(0) %}
	{% if reset %}
		SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
	{% endif %}

	_proc_end function=_Homing_Variables 

############################################################################
# Attach probe and lock it
############################################################################
[gcode_macro Attach_Probe_Lock]
description: Attaches Klicky Probe, can only be docked after unlocking
gcode:

	_proc_start function=Attach_Probe_Lock func_params='"{rawparams|string}"'  

	Attach_Probe
	_Probe_Lock

	_proc_end function=Attach_Probe_Lock 

############################################################################
# Dock probe and lock it
############################################################################
[gcode_macro Dock_Probe_Unlock]
description: Docks Klicky Probe even if it was locked
gcode:

	_proc_start function=Dock_Probe_Unlock func_params='"{rawparams|string}"'  

	_Probe_Unlock
	Dock_Probe

	_proc_end function=Dock_Probe_Unlock 

############################################################################
# Unlock Probe
############################################################################
[gcode_macro _Probe_Unlock]
description: Unlocks Klicky Probe state
gcode:

	_proc_start function=_Probe_Unlock func_params='"{rawparams|string}"'  

	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

	_proc_end function=_Probe_Unlock 

############################################################################
# Lock Probe
############################################################################
[gcode_macro _Probe_Lock]
description: Locks Klicky Probe state
gcode:

	_proc_start function=_Probe_Lock func_params='"{rawparams|string}"'  

	SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

	_proc_end function=_Probe_Lock 

############################################################################
# Attach Probe Routine
############################################################################
[gcode_macro Attach_Probe]
description: Attaches Klicky Probe
gcode:

	_proc_start function=Attach_Probe func_params='"{rawparams|string}"'  

	# See if the position should be restored after the attach
	{% set goback  = params.BACK|default(0) %}
	# Get probe attach status
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	# Get Docking location
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	# Safe Z for travel
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	# Set feedrates
	{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed * 60 %}
	{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed * 60 %}
	{% set xydock_feedrate = printer["gcode_macro _User_Variables"].xydock_speed * 60 %}
	{% set zdock_feedrate = printer["gcode_macro _User_Variables"].zdock_speed * 60 %}
	{% set xyrelease_feedrate = printer["gcode_macro _User_Variables"].xyrelease_speed * 60 %}
	{% set zrelease_feedrate = printer["gcode_macro _User_Variables"].zrelease_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}

	_entry_point function=Attach_Probe

	# If there is no undock movement, fail
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
		{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	# If there is no Attach movement, fail
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
		{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}

	# If x and y are not homed
	{% if not 'xy' in printer.toolhead.homed_axes %}
		{ action_raise_error("Must Home X and Y Axis First!") }

	# If probe not attached and locked
	{% elif not probe_attached and not probe_lock %}
	
		say_wait S="Attaching Klicky"

		{% if verbose %} M118 Attaching Probe {% endif %}

		{% if not 'z' in printer.toolhead.homed_axes %}
			{% if verbose %} M118 Resetting Z position to zero {% endif %}
			SET_KINEMATIC_POSITION Z=0
			{% if not enable_z_hop %} # Disables safe_z
				{% set safe_z = 0 %}
			{% endif %}
		{% endif %}

		# Prior to saving actual position, check if its necessary to move to a safe Z
		# that has enought overhead for the attached probe
		{% if printer.toolhead.position.z < safe_z %}
			{% if verbose %} M118 moving to a safe Z height {% endif %}
			G0 Z{safe_z} F{z_drop_feedrate}
		{% endif %}

		{% if not 'z' in printer.toolhead.homed_axes %}
			{% if verbose %} M118 Resetting Z position to zero {% endif %}
			SET_KINEMATIC_POSITION Z=0
		{% endif %}

		{% if printer.toolhead.position.z < safe_z %}
			G0 Z{safe_z} F{z_drop_feedrate}
		{% endif %}

		_Umbilical_Path

		_entry_point function=Attach_Probe_intern

		# Probe entry location
		G0 X{docklocation_x|float - attachmove_x|float} Y{docklocation_y|float - attachmove_y|float} F{xytravel_feedrate}
		{% if docklocation_z != -128 %}
			G0 Z{docklocation_z|float - attachmove_z|float} F{zdock_feedrate}
		{% endif %}

		# Drop Probe to Probe location
		{% if docklocation_z != -128 %}
			G0 Z{docklocation_z} F{zdock_feedrate}
		{% endif %}
		G0 X{docklocation_x} Y{docklocation_y} F{xydock_feedrate}

		# Probe Attach
		{% if docklocation_z != -128 %}
		G0 Z{docklocation_z|float - attachmove_z|float} F{z_drop_feedrate}
		{% endif %}
		G0 X{docklocation_x|float - attachmove_x|float} Y{docklocation_y|float - attachmove_y|float} F{xyrelease_feedrate}

		# Go to Z safe distance
		{% if printer.toolhead.position.z < safe_z %}
		  G0 Z{safe_z} F{z_drop_feedrate}
		{% endif %}

		_Park_Toolhead

		_CheckProbe action=attach

		_exit_point function=Attach_Probe_intern move={goback}

		say_wait S="Klicky attached"

	{% elif probe_lock %}
		{% if verbose %} M118 Probe locked! {% endif %}

		say_wait S="ATTENTION! Klicky Locked"
		# Probe attached, do nothing
		_CheckProbe action=query

	{% else %}
		{% if verbose %} M118 Probe already attached! {% endif %}

		say_wait S="ATTENTION! Klicky Already Attached!"
		# Probe attached, do nothing
		_CheckProbe action=query

	{% endif %}

	_exit_point function=Attach_Probe move={goback}

	_proc_end function=Attach_Probe 

############################################################################
# Dock Probe Routine
############################################################################
[gcode_macro Dock_Probe]
description: Docks Klicky Probe
gcode:

	_proc_start function=Dock_Probe func_params='"{rawparams|string}"'  

	# See if the position should be restored after the dock
	{% set goback  = params.back|default(0) %}
	# Get probe attach status
	{% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
	{% set probe_lock = printer["gcode_macro _Probe_Variables"].probe_lock %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	# Get Docking location
	{% set dockmove_x = printer["gcode_macro _User_Variables"].dockmove_x|default(0) %}
	{% set dockmove_y = printer["gcode_macro _User_Variables"].dockmove_y|default(0) %}
	{% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
	{% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
	{% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
	{% set docklocation_z = printer["gcode_macro _User_Variables"].docklocation_z %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	# Safe Z for travel
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	# Set feedrates
	{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed * 60 %}
	{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed * 60 %}
	{% set xydock_feedrate = printer["gcode_macro _User_Variables"].xydock_speed * 60 %}
	{% set zdock_feedrate = printer["gcode_macro _User_Variables"].zdock_speed * 60 %}
	{% set xyrelease_feedrate = printer["gcode_macro _User_Variables"].xyrelease_speed * 60 %}
	{% set zrelease_feedrate = printer["gcode_macro _User_Variables"].zrelease_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}

	# If there is no undock movement, fail
	{% if dockmove_x == dockmove_y == dockmove_z == 0 %}
		{ action_raise_error("No dockmove location!! To restore old behavior place 40 in dockmove_x") }
	{% endif %}
	# If there is no Attach movement, fail
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
		{ action_raise_error("No attachmove location!!  To restore old behavior place dockarmslenght value in dockmove_x") }
	{% endif %}

	# If axis aren't homed, fail
	{% if not 'xyz' in printer.toolhead.homed_axes %}
		{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}

	_entry_point function=Dock_Probe

	# If probe is attached and not locked
	{% if probe_attached and not probe_lock %}

		say_wait S="Docking Klicky"

		{% if verbose %} M118 Docking Probe {% endif %}

		{% if printer.toolhead.position.z < safe_z %}
			G0 Z{safe_z} F{z_drop_feedrate}
		{% endif %}

		_Umbilical_Path

		# Probe entry location
		#edge case BS (dock commanded when attached and homed: move Y first, prevents the x move scraping the probe off the head)
		{% if printer.toolhead.position.y > (docklocation_y|float - attachmove_y|float) %}
			G0 Y{docklocation_y|float - attachmove_y|float} F{xytravel_feedrate}
			G0 X{docklocation_x|float - attachmove_x|float} F{xytravel_feedrate}
		{% else %}
			G0 X{docklocation_x|float - attachmove_x|float} Y{docklocation_y|float - attachmove_y|float} F{xytravel_feedrate}
		{% endif %}

	   {% if docklocation_z != -128 %}
			G0 Z{docklocation_z|float - attachmove_z|float} F{zdock_feedrate}
		{% endif %}

		# Drop Probe to Probe location
		G0 X{docklocation_x} Y{docklocation_y} F{xydock_feedrate}
		{% if docklocation_z != -128 %}
			G0 Z{docklocation_z} F{zdock_feedrate}
		{% endif %}

		# Probe decoupling
		{% if docklocation_z != -128 %}
			G0 Z{docklocation_z|float + dockmove_z|float} F{zrelease_feedrate}
		{% endif %}
		G0 X{docklocation_x|float + dockmove_x|float} Y{docklocation_y|float + dockmove_y|float} F{xyrelease_feedrate}

		# Go to Z safe distance
		{% if printer.toolhead.position.z < safe_z %}
		  G0 Z{safe_z} F{z_drop_feedrate}
		{% endif %}

		_Park_Toolhead

		G4 P1000
		_CheckProbe action=dock
		
		say_wait S="Klicky Docked"

	{% elif probe_lock %}
		{% if verbose %} M118 Probe locked {% endif %}

		say_wait S="ATTENTION! Klicky Locked"
		# Probe docked, do nothing
		_CheckProbe action=query

	{% else %}
		{% if verbose %} M118 Probe already docked {% endif %}

		# say_wait S="Klicky Already Docked"
		# Probe docked, do nothing
		_CheckProbe action=query

	{% endif %}

	_exit_point function=Dock_Probe move={goback}

	_proc_end function=Dock_Probe 

############################################################################
# Probe Calibrate
############################################################################
[gcode_macro PROBE_CALIBRATE]
description:Calibrate the probes z_offset with klicky automount
rename_existing: _PROBE_CALIBRATE_STOCK
gcode:

	_proc_start function=PROBE_CALIBRATE func_params='"{rawparams|string}"'  

	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed * 60 %}
	{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed * 60 %}

	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}

	{% if not 'xyz' in printer.toolhead.homed_axes %}
		{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}

	# Protect against PROBE CALIBRATE performed from outside the bed
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
		  or printer['gcode_move'].position.y < probe_offset_y
		  or printer['gcode_move'].position.x > (max_x - probe_offset_x)
		  or printer['gcode_move'].position.x < probe_offset_x %}
	  { action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED!") }
	{% endif %}

	_entry_point function=PROBE_CALIBRATE

	_CheckProbe action=query
	Attach_Probe back=1

	_PROBE_CALIBRATE_STOCK {% for p in params
			%}{'%s=%s ' % (p, params[p])}{%
		   endfor %}

	Dock_Probe back=1

	_exit_point function=PROBE_CALIBRATE move=1

	_proc_end function=PROBE_CALIBRATE 

############################################################################
# Probe Accuracy
############################################################################
[gcode_macro PROBE_ACCURACY]
description:Probe Z-height accuracy at current XY position with klicky automount uses [probe] section configs for non passed vars
rename_existing: _PROBE_ACCURACY_STOCK
gcode:

	_proc_start function=PROBE_ACCURACY func_params='"{rawparams|string}"'  

	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed %}
	{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}

	{% if not 'xyz' in printer.toolhead.homed_axes %}
		{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}

	_entry_point function=PROBE_ACCURACY

	# Protect against PROBE_ACCURACY performed from outside the bed
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
		  or printer['gcode_move'].position.y < probe_offset_y
		  or printer['gcode_move'].position.x > (max_x - probe_offset_x)
		  or printer['gcode_move'].position.x < probe_offset_x %}
	  { action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!") }
	{% endif %}

	_CheckProbe action=query
	Attach_Probe back=1

	_PROBE_ACCURACY_STOCK {% for p in params
			%}{'%s=%s ' % (p, params[p])}{%
		   endfor %}

	Dock_Probe back=1										   

	_exit_point function=PROBE_ACCURACY move=1

	_proc_end function=PROBE_ACCURACY 

############################################################################
# Enable to SET_KINEMATIC_POSITION for Z hop
############################################################################
[force_move]
enable_force_move: True

############################################################################
# Homing Override
############################################################################
[homing_override]
axes: xyz
gcode:

	_proc_start function=homing_override func_params='"{rawparams|string}"'  

 	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"homing"'	# machine state save
	{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> homing <<< {% endif %}
	
	{% if params.X|default(-999)|int == 0 %} {% set xreq = 1 %} {% else %} {% set xreq = 0 %} {% endif %}
	{% if params.Y|default(-999)|int == 0 %} {% set yreq = 1 %} {% else %} {% set yreq = 0 %} {% endif %}
	{% if params.Z|default(-999)|int == 0 %} {% set zreq = 1 %} {% else %} {% set zreq = 0 %} {% endif %}
	
	{% set th = printer.toolhead %}
	
	{% if "x" not in th.homed_axes %} {% set xhomed = 0 %} {% else %} {% set xhomed = 1 %} {% endif %}
	{% if "y" not in th.homed_axes %} {% set yhomed = 0 %} {% else %} {% set yhomed = 1 %} {% endif %}
	{% if "z" not in th.homed_axes %} {% set zhomed = 0 %} {% else %} {% set zhomed = 1 %} {% endif %}

	{% if xhomed and yhomed and zhomed and zreq and not xreq and not yreq %}
		say_wait S="Ree Homing Z"
	{% elif xhomed and yhomed and zhomed %}
		say_wait S="Rehoming tool head"
	{% else %}
		say_wait S="Homing tool head"
	{% endif %}
	
	# collect user state variables
	_User_Variables
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}

	# Safe Z for travel
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
	{% set enable_z_hop = printer["gcode_macro _User_Variables"].enable_z_hop %}
	{% set attachmove_x = printer["gcode_macro _User_Variables"].attachmove_x|default(0) %}
	{% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
	{% set attachmove_z = printer["gcode_macro _User_Variables"].attachmove_z|default(0) %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}

	#checks if the variable definitions are up to date
	_klicky_check_variables_version

	# if there is no Attach movement, fail
	{% if attachmove_x == attachmove_y == attachmove_z == 0 %}
		{ action_raise_error("No attachmove location!") }
	{% endif %}

	_CheckProbe action=query

	# reset parameters
	{% set home_x, home_y, home_z = False, False, False %}

	# which axes have been requested for homing
	{% if not 'X' in params
		and not 'Y' in params
		and not 'Z' in params %}

		{% set home_x, home_y, home_z = True, True, True %}

	{% else %}
		# Frame mount x-endstop - home Y before X
		{% if 'X' in params %}
			{% set home_x = True %}
		{% endif %}

		{% if 'Y' in params %}
			{% set home_y = True %}
		{% endif %}

		{% if 'Z' in params %}
			{% set home_z = True %}
		{% endif %}

		{% if 'X' in params
		  and 'Y' in params
		  and 'Z' in params %}
			# reset homing state variables
			# if homing all axes
			_Homing_Variables reset=1
		 {% endif %}

	{% endif %}

	_entry_point function=homing_override

	# if Z is not homed, do not move the bed if it goes down
	{% if 'z' not in printer.toolhead.homed_axes %}
			{% if not enable_z_hop %} # Disables safe_z
				{% set safe_z = 0 %}
			{% endif %}
	{% endif %}

	{% if home_z %}
		{% if 'z' in printer.toolhead.homed_axes %}
			{% if printer.toolhead.position.z < safe_z %}
				{% if verbose %} M118 Z too low, performing ZHOP {% endif %}
				G0 Z{safe_z} F{z_drop_feedrate}
			{% endif %}
		{% else %}
			{% if verbose %} M118 Z not homed, forcing full G28 {% endif %}
			SET_KINEMATIC_POSITION X=0 Y=0 Z=0
			G0 Z{safe_z} F{z_drop_feedrate}
			{% set home_x, home_y, home_z = True, True, True %}
		{% endif %}
	{% endif %}

	# if the dock is oriented on the Y, first do Y endstop
	{% if attachmove_y == 0 %}
		# Home y
		{% if home_y %}
			{% if verbose %} M118 Homing Y {% endif %}
			G28 Y0
		{% endif %}
		{% set home_y = False %}
	{% endif %}

	# Home x
	{% if home_x %}
		{% if verbose %} M118 Homing X {% endif %}
		G28 X0
	{% endif %}

	# Home y
	{% if home_y %}
		{% if verbose %} M118 Homing Y {% endif %}
		G28 Y0
	{% endif %}
	# Home z
	{% if home_z %}
		{% if verbose %} M118 Homing Z {% endif %}

		# if probe is configured as endstop, attach it, else dock the probe if attached
		{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
			Attach_Probe
		{% else %}
			Dock_Probe
		{% endif %}

		_Home_Z

		# if probe is configured as endstop, dock it
		{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
			Dock_Probe
		{% endif %}
	{% endif %}
	_CheckProbe action=query

	# park the toolhead
	_Park_Toolhead

	_exit_point function=homing_override
 	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"homed"'	# machine state save
	{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> homed <<< {% endif %}
	
	{% if xhomed and yhomed and zhomed and zreq and not xreq and not yreq %}
		say_wait S="Z ree homed"
	{% elif xhomed and yhomed and zhomed %}
		say_wait S="Tool Head rehomed"
	{% else %}
		say_wait S="Tool Head homed"
	{% endif %}


	_proc_end function=homing_override 

############################################################################
# Umbilical path setup
############################################################################
[gcode_macro _Umbilical_Path]
gcode:

	_proc_start function=_Umbilical_Path func_params='"{rawparams|string}"'  

	{% set umbilical = printer["gcode_macro _User_Variables"].umbilical %}
	{% set umbilical_x = printer["gcode_macro _User_Variables"].umbilical_x %}
	{% set umbilical_y = printer["gcode_macro _User_Variables"].umbilical_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed * 60 %}
	{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed * 60 %}

	{% if umbilical %}
		# Used to give the umbilical a better path to follow and coil properly if dock is tight in space
		_entry_point function=Umbilical_Path

		G0 X{umbilical_x} Y{umbilical_y} F{xytravel_feedrate}
		G0 Z{safe_z} F{ztravel_feedrate}

		_exit_point function=Umbilical_Path
	{% endif %}

	_proc_end function=_Umbilical_Path 

############################################################################
# Home Z Routine
############################################################################
[gcode_macro _Home_Z]
gcode:

	_proc_start function=_Home_Z func_params='"{rawparams|string}"'  

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"z_homing"'	# machine state save
	{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> z_homing <<< {% endif %}
	{% set z_endstop_x = printer["gcode_macro _Probe_Variables"].z_endstop_x %}
	{% set z_endstop_y = printer["gcode_macro _Probe_Variables"].z_endstop_y %}
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed * 60 %}
	{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed * 60 %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}

	_entry_point function=Home_Z

	# if x and y are not homed yet, raise error
	{% if not 'xy' in printer.toolhead.homed_axes %}
		{ action_raise_error("Must Home X and Y Axis First!") }
	{% else %}
		{% if not 'z' in printer.toolhead.homed_axes %}
			{% if verbose %} M118 Resetting Z position to zero {% endif %}
			SET_KINEMATIC_POSITION Z=0
		{% endif %}

		# Move tool to safe homing position and home Z axis
		# location of z endstop
		G0 X{z_endstop_x} Y{z_endstop_y} F{xytravel_feedrate}
		G28 Z0
		G0 Z{safe_z} F{z_drop_feedrate}
	{% endif %}

	_exit_point function=Home_Z
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"z_homed"'	# machine state save
	{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> z_homed <<< {% endif %}

	_proc_end function=_Home_Z 

############################################################################
# Check to see if probe is where it is supposed to be after
# attaching/docking maneuver and set homing error or shutdown
############################################################################
[gcode_macro _CheckProbe]
variable_probe_state: 0
gcode:

	_proc_start function=_CheckProbe func_params='"{rawparams|string}"'  

	Query_Probe
	_SetProbeState action={ params.ACTION }

	_proc_end function=_CheckProbe 

############################################################################
# Due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
############################################################################
[gcode_macro _SetProbeState]
gcode:

	_proc_start function=_SetProbeState func_params='"{rawparams|string}"'  

	{% set query_probe_triggered = printer.probe.last_query %}
	{% set action  = params.ACTION|default('') %}

	# If triggered (true), probe not attached
	{% if query_probe_triggered %}
		SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }
	{% else %}
		# If not triggered (false), probe attached
		SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
	{% endif %}

	{% if action == 'query' %}
		  SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
	{% endif %}

	# If probe fails to attach/detach

	# If not docked
	{% if not query_probe_triggered and action == 'dock' %}
		{ action_raise_error("Probe dock failed!") }
	{% endif %}

	# If not attached
	{% if query_probe_triggered and action == 'attach' %}
		{ action_raise_error("Probe attach failed!") }
	{% endif %}

	_proc_end function=_SetProbeState 

############################################################################
# Park Toolhead Routine
############################################################################
[gcode_macro _Park_Toolhead]
gcode:

	_proc_start function=_Park_Toolhead func_params='"{rawparams|string}"'  

	{% set park_toolhead = printer["gcode_macro _User_Variables"].park_toolhead %}
	{% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
	{% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
	{% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
	{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed * 60 %}
	{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed * 60 %}
	{% set verbose = printer["gcode_macro _User_Variables"].verbose %}

	_entry_point function=Park_Toolhead

	{% if park_toolhead and 'xyz' in printer.toolhead.homed_axes %}
		say_wait S="Parking Tool Head"
		{% if verbose %} M118 Parking Toolhead {% endif %}
		G0 X{parkposition_x} Y{parkposition_y} F{xytravel_feedrate}
		G0 Z{parkposition_z} F{ztravel_feedrate}
		say_wait S="Tool Head Parked"
	{% else %}
		# say_wait S="Parking Disabled"
		{% if verbose %} M118 Toolhead Parking Disabled... {% endif %}
	{% endif %}

	_exit_point function=Park_Toolhead

	_proc_end function=_Park_Toolhead 

############################################################################
#Bed mesh calibrate
############################################################################
[gcode_macro BED_MESH_CALIBRATE]
description: Perform [home,] [QGL, and] bed mesh leveling
rename_existing: _BED_MESH_CALIBRATE_STOCK
description: Perform Mesh Bed Leveling with klicky automount
gcode:

	_proc_start function=BED_MESH_CALIBRATE func_params='"{rawparams|string}"'  

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"bed_meshing"'	# machine state save
	{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> bed_meshing <<< {% endif %}
	{% if printer["gcode_macro _User_Variables"].verbose %} M118 Bed Mesh Calibrate {% endif %}

	_ENSURE_QGL							# homes if needed - need to have the gantry leveled

	_CheckProbe action=query
	Attach_Probe

	{% if printer["gcode_macro _klicky_vars"].klicky_verb_info %} M118 >>> ____ BED_MESH_CALIBRATE_STOCK {rawparams} <<< {% endif %}

	# having timer too close errors here with some software - while it could further exaserbate the issue, going to wrap FW proc w/ trace debug 
	# to see if FW code is calling any config procs to see if I can narrow in on if it is something that I've done in the configs that might be
	# contributing to the issues.

	say_wait S="Collecting Bed Mesh"

#	enable_trace_debug
	_BED_MESH_CALIBRATE_STOCK {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
#	disable_trace_debug

	say_wait S="Bed Mesh Collected"

	Dock_Probe
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"bed_meshed"'	# machine state save
	{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> bed_meshed <<< {% endif %}

	_proc_end function=BED_MESH_CALIBRATE 

############################################################################
# Quad Gantry Level
############################################################################
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL_STOCK
description: Conform a moving, twistable gantry to the shape of a stationary bed with klicky automount - rehomez z thereafter
# consider supporting passage of a mesh parameter to activate after the QGL is completed.  Possibly in _ensure_gql (macros)
gcode:

	_proc_start function=QUAD_GANTRY_LEVEL func_params='"{rawparams|string}"'  

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"qgling"'	# machine state save
	{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> QGL'g <<< {% endif %}

 	_ENSURE_HOMED

	_CheckProbe action=query
	Attach_Probe

	{% if printer["gcode_macro _klicky_vars"].klicky_verb_info %} M118 >>> ____ QUAD_GANTRY_LEVEL_STOCK {rawparams} <<< {% endif %}

	BED_MESH_CLEAR
	M118 ... Bed Mesh Cleared as part of QGL
	say_wait S="Cleared Bed Mesh to Level Gantry."

	# having intermittent timer too close errors here with something (bad on LaFrite, intermittent on LePotato, very intermittent on Pi3B+
	# while it could further exaserbate the issue, going to wrap FW proc w/ trace debug to see if FW code is calling any config procs to 
	# see if I can narrow in on if it is something that I've done in the configs that might be contributing to the issues.
	# ... No joy, it didn't reveal anything.

#	enable_trace_debug
	_QUAD_GANTRY_LEVEL_STOCK {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
#	disable_trace_debug

	say_wait S="Gantry Leveled"

	Dock_Probe	
	
	# given we tweaked on the gantry, need to rehome Z for accuracy's sake	
	M118 Cleaning nozzle and rehoming Z after QGL

	clean_nozzle
	
	G28 Z
	
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"qgled"'	# machine state save
	{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> QGL'd <<< {% endif %}

	_proc_end function=QUAD_GANTRY_LEVEL 

### ############################################################################
### # PROBE_Z_ACCURACY
### ############################################################################
### [gcode_macro PROBE_Z_ACCURACY]
### rename_existing: _PROBE_Z_ACCURACY_STOCK
### description: adapts an undocumented FW routine to test z_endstop accuracy
### 
### # adapted to instantiate a codified known end Z position as the FW doesn't do so
### 
### variable_entryexit_z:				15		# Z to go to before/after calibrating
### variable_entryexit_zrate:			900		# rate in mm/min for same before/after calibrating
### 
### gcode:
### 
### 	_proc_start function=PROBE_Z_ACCURACY func_params='"{rawparams|string}"'  
### 
### 	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"pza-ing"'	# machine state save
### 	{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>> pza'g <<< {% endif %}
### 	_ENSURE_QGL							# homes if needed - need to have the gantry leveled
### 	M117 PROBE_Z_ACCURACY
###  	G0 Z{entryexit_z} F{entryexit_zrate}
### 	_PROBE_Z_ACCURACY_STOCK {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
###  	G0 Z{entryexit_z} F{entryexit_zrate}
### 	M117
### 	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"pza-ed"'	# machine state save
### 	{% if printer["gcode_macro _klicky_vars"].klicky_verb_status %} M118 >>>  PZA'd <<< {% endif %}
### 
### 	_proc_end function=PROBE_Z_ACCURACY 

