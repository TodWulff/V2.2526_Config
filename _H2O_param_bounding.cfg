#####################################################################
# 	_H2O_param_bounding
#####################################################################

[gcode_macro _info_HHO_param_bounding]
gcode:

# todo

[gcode_macro _bounds_vars]
description:  vars for bounds checking

variable_bounds_alarm_duration:			1000		# ms	(3 heart-stopping warble iterations)
variable_bounds_alarm_recurse_period:	1800		# secs	(30 min) - the warble alarm is way friggin loud - this is to fire it every __ seconds
													# understand that normal pause alarm (M300 LCD beeper) is in play too, this is just in case
													# one is out of the same room/building/city as the printer is located.
variable_bounds_check_period:			30			# secs	(check bounds every __ seconds)

variable_bounds_check_temp_threshold:	50			# deg C - anything less for extruder temp target and bounds check is bypassed

# @ ~35C coolant temp, flow is ~750 rpm (2mm orifice (drilled out) - 1000 rpm (1.5mm orifice (as shipped)) 
# I set ppr=1 even though this is a 3 ppr unit, using 1 to get higher resolution and direct ppm conversion
variable_h2o_flow_rpm_min:				375
variable_h2o_flow_rpm_max:				1500

# Pump is ~3000 rpm (ppr=2)
variable_h2o_pump_rpm_min:				1500
variable_h2o_pump_rpm_max:				4500

# Fan is ~2000 rpm (ppr=2)
variable_h2o_radfan_rpm_min:			1000
variable_h2o_radfan_rpm_max:			3000

# Temp is ambient to ___ (tbd once stress tested - 100 is a placeholder)
variable_h2o_temp_min:					10			# deg C
variable_h2o_temp_max:					100			# deg C

gcode:
	#there is none - for var use only...

[gcode_macro _fire_warble_alarm]
description:
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_fire_warble_alarm func_params='"{rawparams|string}"'  {% endif %}

		SET_PIN PIN=_Alarm_pin VALUE=1
		G4 P{printer["gcode_macro _bounds_vars"].bounds_alarm_duration}
		SET_PIN PIN=_Alarm_pin VALUE=0
		
		M118
		M118 ___ H2O Cooling Exceedance Alert Alarm ___
		M118 
		M118 run  _stop_bounds_alarm      to cancel Exceedance Alert Alarm once issue is resolved
		M118 or   _stop_bounds_checking   to defeat automatic H2O parameter checking entirely
		M118 and  _start_bounds_checking  to reenable automatic H2O parameter checking when appropriate
		M118
	
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_fire_warble_alarm {% endif %}

[delayed_gcode _recursive_bounds_alarm]
# description: runtime proc to fire a warble alarm (UBER LOUD! https://smile.amazon.com/gp/product/B079L2KBG7)
# alarm fires for a period defined by bounds_alarm_duration (see _bounds_vars above) 
# will also recurse at a period defined by bounds_alarm_recurse_period (see _bounds_vars above)
# use the following macros ('_start_bounds_alarm' to initiate and '_stop_bounds_alarm' to cease the recursive firing)
# added logic to only fire if printing or paused, and to cancel the recursion if 'ready'
# will likely mull on this approach with continuing the recursion or canceling same and tweak the logic in the future...
# err - changed said logic to if extruder temp > 0
initial_duration: 0

gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_recursive_bounds_alarm func_params='"{rawparams|string}"'  {% endif %}

	{% if 
			# printer.idle_timeout.state == "Printing"  or
			# printer.pause_resume.is_paused or
			printer.extruder.target > 0 
		%}

		M118 H2O cooling parameters Exceedance ALERT

		_fire_warble_alarm
		
		UPDATE_DELAYED_GCODE ID=_recursive_bounds_alarm DURATION={printer["gcode_macro _bounds_vars"].bounds_alarm_recurse_period|float}
	
	{% else %}
	# we're not printing nor paused, so must be ready [after user interaction] - so cancel the recursive alarm...

		M118 H2O cooling parameters Exceedance Alert CANCELED

		_stop_bounds_alarm
	
	{% endif %}
	
	
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_recursive_bounds_alarm {% endif %}

[gcode_macro _start_bounds_alarm]
description:  Alert and then set recursive reentry
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_start_bounds_alarm func_params='"{rawparams|string}"'  {% endif %}

		M118 H2O cooling parameters Exceedance ALERT

		_fire_warble_alarm
		
		UPDATE_DELAYED_GCODE ID=_recursive_bounds_alarm DURATION={printer["gcode_macro _bounds_vars"].bounds_alarm_recurse_period|float}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_start_bounds_alarm {% endif %}

[gcode_macro _stop_bounds_alarm]
description: cancels the bound exceedance alarm
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_stop_bounds_alarm func_params='"{rawparams|string}"'  {% endif %}

	UPDATE_DELAYED_GCODE ID=_recursive_bounds_alarm DURATION=0

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_stop_bounds_alarm {% endif %}

[gcode_macro _emit_hho_parameters]	
# macro names cannot have combinations of numbers followed by alpha due to gcode standards
# first letter after a number is considered start of a parameter name - i.e. G1X0Y0 is legit gcode and is parsed as G1 X0 Y0
# calling _emit_h2o_parameters in code would look for a macro named _emit_h2 with a malformed parameter passing of o_parameters
description: emits H2O Cooling Parameters and Bounds on same to console and via telegram bot
gcode:
	
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_emit_hho_parameters func_params='"{rawparams|string}"'  {% endif %}
	
	{% set H2O_Flow_RPM = printer['heater_fan H2O_Flow'].rpm %}
	{% set H2O_Pump_RPM = printer['heater_fan H2O_Pump'].rpm %}
	{% set H2O_RadFan_RPM = printer['heater_fan H2O_RadFan'].rpm %}
	{% set H2O_Temp = printer['temperature_sensor Hotend_H2O'].temperature %}
	
	{% set H2O_Flow_Msg = "H2O_Flow_RPM: " ~ printer["gcode_macro _bounds_vars"].h2o_flow_rpm_min|int ~ " <= " ~ H2O_Flow_RPM|int ~ " <= " ~ printer["gcode_macro _bounds_vars"].h2o_flow_rpm_max|int %}
	{% set H2O_Pump_Msg = "H2O_Pump_RPM: " ~ printer["gcode_macro _bounds_vars"].h2o_pump_rpm_min|int ~ " <= " ~ H2O_Pump_RPM|int ~ " <= " ~ printer["gcode_macro _bounds_vars"].h2o_pump_rpm_max|int %}
	{% set H2O_RadFan_Msg = "H2O_RadFan_RPM: " ~ printer["gcode_macro _bounds_vars"].h2o_radfan_rpm_min|int ~ " <= " ~ H2O_RadFan_RPM|int ~ " <= " ~ printer["gcode_macro _bounds_vars"].h2o_radfan_rpm_max|int %}
	{% set H2O_Temp_Msg = "H2O_Temp: " ~ printer["gcode_macro _bounds_vars"].h2o_temp_min|int ~ " <= " ~ H2O_Temp|int ~ " <= " ~ printer["gcode_macro _bounds_vars"].h2o_temp_max|int %}

#	M118
#	M118 H2O Cooling Parameters:
#	M118
#	M118 {H2O_Flow_Msg} 
#	M118 {H2O_Pump_Msg}  
#	M118 {H2O_RadFan_Msg} 
#	M118 {H2O_Temp_Msg} 
#	M118
	
	#{% set concatenated_H2O_msg = "H2O Cooling Parameters: \n\n" ~ H2O_Flow_Msg ~ "\n" ~ H2O_Pump_Msg ~ "\n" ~ H2O_RadFan_Msg ~ "\n" ~ H2O_Temp_Msg ~ "\n" %}
	#{% set concatenated_H2O_msg = "H2O Cooling Parameters: \r\n\r\n" ~ H2O_Flow_Msg ~ "\r\n" ~ H2O_Pump_Msg ~ "\r\n" ~ H2O_RadFan_Msg ~ "\r\n" ~ H2O_Temp_Msg ~ "\r\n" %}
	#{% set concatenated_H2O_msg = "H2O Cooling Parameters: " ~ "\x0A\x0A" ~ H2O_Flow_Msg ~ "\x0A" ~ H2O_Pump_Msg ~ "\x0A" ~ H2O_RadFan_Msg ~ "\x0A" ~ H2O_Temp_Msg ~ "\x0A\x0A" %}
	#{% set concatenated_H2O_msg = "H2O Cooling Parameters: " ~ '\x0A\x0A' ~ H2O_Flow_Msg ~ '\x0A' ~ H2O_Pump_Msg ~ '\x0A' ~ H2O_RadFan_Msg ~ '\x0A' ~ H2O_Temp_Msg ~ '\x0A\x0A' %}
	#{% set concatenated_H2O_msg = "H2O Cooling Parameters: " ~ \x0A\x0A ~ H2O_Flow_Msg ~ \x0A ~ H2O_Pump_Msg ~ \x0A ~ H2O_RadFan_Msg ~ \x0A ~ H2O_Temp_Msg ~ \x0A\x0A %}
	#{% set concatenated_H2O_msg = "H2O Cooling Parameters: " ~ PHP_EOL ~ PHP_EOL ~ H2O_Flow_Msg ~ PHP_EOL ~ H2O_Pump_Msg ~ PHP_EOL ~ H2O_RadFan_Msg ~ PHP_EOL ~ H2O_Temp_Msg ~ PHP_EOL ~ PHP_EOL %}
	{% set concatenated_H2O_msg = "H2O Cooling Parameters: <br><br>" ~ H2O_Flow_Msg ~ "<br>" ~ H2O_Pump_Msg ~ "<br>" ~ H2O_RadFan_Msg ~ "<br>" ~ H2O_Temp_Msg ~ "<br><br>" %}
	
	M118 {concatenated_H2O_msg}

	#### send via telegram bot too:

	RESPOND PREFIX=tgalarm MSG="H2O Cooling Parameters:"
#	RESPOND PREFIX=tgnotify MSG=""
	RESPOND PREFIX=tgnotify MSG="{H2O_Flow_Msg}"
	RESPOND PREFIX=tgnotify MSG="{H2O_Pump_Msg}"
	RESPOND PREFIX=tgnotify MSG="{H2O_RadFan_Msg}"
	RESPOND PREFIX=tgnotify MSG="{H2O_Temp_Msg}"
#	RESPOND PREFIX=tgnotify MSG=""

	# RESPOND PREFIX=tgnotify MSG="==================================="
#	RESPOND PREFIX=tgalarm MSG="{concatenated_H2O_msg}"

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_emit_hho_parameters {% endif %}

[gcode_macro _check_bounds]
variable_seq_err_count: -1
description: runtime (during printing) proc to check various parameters and initiate a pause & bound_alarm on an exceedence
# _check_bounds REPORT=1 to get some verbosity on the parameters measured and the limits applied.
# added a seq_err_count variable here, to not fire alarm until 2 sequential escapes are captured
# (worried about intermittent/noise affecting stuffs)
gcode:
	
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_check_bounds func_params='"{rawparams|string}"'  {% endif %}

	{% set H2O_Flow_RPM = printer['heater_fan H2O_Flow'].rpm %}
	{% set H2O_Pump_RPM = printer['heater_fan H2O_Pump'].rpm %}
	{% set H2O_RadFan_RPM = printer['heater_fan H2O_RadFan'].rpm %}
	{% set H2O_Temp = printer['temperature_sensor Hotend_H2O'].temperature %}
	
# Following conditional was:	{% if printer.idle_timeout.state == "Printing" and (
# changed to check if target temp >= threshold vs. printing to help avoid cooking the HE if idle and hot...
# also enabling the bounds checking at printer startup vs. starting & stopping based on modes 
# was re-/starting at print_resume/_start and halting/stopping at print_pause/_canx/_end
# this way it can run all the time and just work, when extruder temp meets/exceeds a threshold...

	{% if printer.extruder.target >= printer["gcode_macro _bounds_vars"].bounds_check_temp_threshold and (
	
		(H2O_Flow_RPM 	>	printer["gcode_macro _bounds_vars"].h2o_flow_rpm_max)		or 
		(H2O_Flow_RPM 	<	printer["gcode_macro _bounds_vars"].h2o_flow_rpm_min)		or
		(H2O_Pump_RPM 	>	printer["gcode_macro _bounds_vars"].h2o_pump_rpm_max)		or
		(H2O_Pump_RPM 	<	printer["gcode_macro _bounds_vars"].h2o_pump_rpm_min)		or
		(H2O_RadFan_RPM	>	printer["gcode_macro _bounds_vars"].h2o_radfan_rpm_max)		or
		(H2O_RadFan_RPM	<	printer["gcode_macro _bounds_vars"].h2o_radfan_rpm_min)		or
		(H2O_Temp		>	printer["gcode_macro _bounds_vars"].h2o_temp_max)			or
		(H2O_Temp		<	printer["gcode_macro _bounds_vars"].h2o_temp_min)		
		) %}
		
		# Ok, so there is an escape.  Need to iterate escape counter and fire warble alarm on second iteration 
		# Coded for 2 sequential escape iterations required before panicing, to prevent spurious noise/etc. from tripping this
		
		# Could have used save_variables, but meh, my gray matter must have been in macro var space at the time I guess...
		
		# need to employ namespace workaround to get real-time access to variables/etc.
		{% set this = namespace(err_count=(printer["gcode_macro _check_bounds"].seq_err_count)) %}	# vars snap-shot at entry
		
		# increment a 'live' (non-snapshot) seq counter variable
		{% set this.err_count = this.err_count + 1 %}

		# increment macro variable to match 'live' variable - will be 'visible' once this macro is exited
		SET_GCODE_VARIABLE MACRO=_check_bounds VARIABLE=seq_err_count VALUE={this.err_count}		# incr seq err cnt
		
		# and see if this is a sequential event - if so, then react, else do nothing on first escape iteration
		# -1 is a no-escape context, 0 is a first escape iteration, >0 reflects the number of sequential escapes
		{% if this.err_count > 0 %}

			M118 ... H2O cooling parameters EXCEEDANCE ALERT {this.err_count}

			_emit_hho_parameters				# emit params and bounds to console so user can denote wtf triggered the exceedance
			
			{% if this.err_count == 1 %}		# if this is the triggering escape,
				_start_bounds_alarm				# aurally alert via warble alarm in the event user away from printer/host UI
			
				# could/should consider aggressive action with HE here - i.e. ercf-yank filament and immediately un-heat it?
				
				M118 Pausing to enable resolution of H2O cooling parameters Exceedance {this.err_count}
				
				RESPOND PREFIX=tgalarm MSG="... Pausing to enable resolution of H2O cooling parameters Exceedance {this.err_count}"
				RUN_SHELL_COMMAND CMD=send_sms_h2o_alert
				
				M104.1 S0	# kill he temp and carry on (calling renamed fw proc to overtly nix saving temp setting)

				_stop_bounds_checking

				pause		# As info, this causes a repetative (every 30 secs) M300 beep sequence until programmatically canceled 
							# via stop_pause_alarm or until print is canceled or resumed. pause wrappers Klipper FW PAUSE.
					
			{% endif %}
		
		{% else %}
		
			M118 ... Possible H2O cooling parameters EXCEEDANCE {this.err_count}
			RESPOND PREFIX=tgalarm MSG="... Possible H2O cooling parameters EXCEEDANCE {this.err_count}"

			_emit_hho_parameters				# emit params and bounds to console so user can denote wtf triggered the exceedance
			
		{% endif %}

	{% else %}
		# so we're either within bounds, or the extruder is set below check threshold, so advise no isssues and stop alarm if so enabled

		{% if printer.extruder.target >= printer["gcode_macro _bounds_vars"].bounds_check_temp_threshold %}
			M118 ... H2O cooling parameters OK
		{% else %}
			M118 ... Extruder temp target below threshold ({printer["gcode_macro _bounds_vars"].bounds_check_temp_threshold}deg C)
		{% endif %}
		
		{% if params.REPORT|default(0) %}
			_emit_hho_parameters	# emit params and bounds if so trigger by a manual check
		{% endif %}
	
		_stop_bounds_alarm	# since parameters are w/in bounds, disable any alarm hiding behind a delay
		
		SET_GCODE_VARIABLE MACRO=_check_bounds VARIABLE=seq_err_count VALUE=-1	# and reset err counter to -1
		
	{% endif %}
	
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_check_bounds {% endif %}

[delayed_gcode check_bounds]
initial_duration: 0

gcode:

	M118 H2O cooling automatic parameter check...
	
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=check_bounds func_params='"{rawparams|string}"'  {% endif %}

	_check_bounds	# turned the _check_bounds code into a proper macro to enable manual use via console (_check_bounds REPORT=1)
	
	UPDATE_DELAYED_GCODE ID=check_bounds DURATION={printer["gcode_macro _bounds_vars"].bounds_check_period|int}  # set up recursion

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=check_bounds {% endif %}

[gcode_macro _start_bounds_checking]
description: to start bounding checks - parameter DELAY causes initial iteration delay, otherwise initial check is 'immediate'
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_start_bounds_checking func_params='"{rawparams|string}"'  {% endif %}

	_stop_bounds_alarm	# reset any prior alarm instances that may be lingering behind a delay

	M118 H2O cooling automatic parameter check Enabled
	
	UPDATE_DELAYED_GCODE ID=check_bounds DURATION={params.DELAY|default(0.1)}	# and start the recursive bounds checking

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_start_bounds_checking {% endif %}

[gcode_macro _stop_bounds_checking]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_stop_bounds_checking func_params='"{rawparams|string}"'  {% endif %}
	
	UPDATE_DELAYED_GCODE ID=check_bounds DURATION=0
	_stop_bounds_alarm
	M118 H2O cooling automatic parameter check Disabled
	
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_stop_bounds_checking {% endif %}

