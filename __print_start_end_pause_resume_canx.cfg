#####################################################################
# 	PRINT_START
#####################################################################

[gcode_macro PRINT_START]
# Use PRINT_START for the slicer starting script - please customise for your slicer of choice

# FYSA, SAVE_VARIABLE VARIABLE=maxz VALUE=blah is set by __SetSlicerVar gcode_macro called 
# from sliced gcode (w/ help of post processing plugin)

variable_verbose:			False		# Enable verbose output

variable_purge_len:			10			# Amount of filament, in mm, to purge.
variable_purge_spd:			750			# Speed, in mm/min, of the purge.
variable_purge_temp_min:	180			# Minimum nozzle temperature to permit a purge. Otherwise, purge will not occur.
variable_purge_ret:			0.2			# Retract length, in mm, after purging to prevent slight oozing. Adjust as necessary.
variable_ooze_dwell:		1			# Dwell/wait time, in seconds, after purging and retracting.

gcode:
	# do check to verify that slicer meets requirements (v2_2526_slicer_check = MHz_Cura)
	# this variable is set by the slicer w/ a post-processing script.  some of the 'features'
	# on V2.2526 is handled by the variables that are parsed and set by SAVE_VARIABLES when 
	# the .gcode file is opened
	{% set svv = printer.save_variables.variables %}
	{% if svv.v2_2526_slicer_check != "mhz_cura" %}
		M117 Houston, We have a problem.
		SAVE_VARIABLE VARIABLE=v2_2526_slicer_check VALUE='"NULL"'			# clear SLICER VITALS
		{action_raise_error("WRONG SLICER AND/OR CONFIGURATION USED") }
	{% endif %}
	
	
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_starting"'	# machine state save
	# M118 print_starting
	snd_PrintStart
	reset_noz_cam
	CLEAR_PAUSE
	_HOURMETER_ON
	_PrintLED_On

	M106 S18								# forces small breeze across duct mounted chamber temp sensor
	M141 S60								# set chamber temp to 60
	G90										# force absolute positioning

	_ENSURE_QGL								# homes if needed - need to have the gantry leveled - re homes Z thereafter
    CLEAN_NOZZLE DX={printer.toolhead.axis_maximum.x//2|float}  DY={printer.toolhead.axis_maximum.y|float}  DZ=15.0
	CALIBRATE_Z								# dynamically sets Z-offset for highly predictable prints

	{% if printer.extruder.temperature >= purge_temp_min %}
		# M83      # relative mode  The code for absolute extrusion mode is M82, the code for relative extrusion mode is M83.
		# absolute/relative coordinates: G90, G91  ||  G90 Absolute positioning, G91 incremental positioning
		G1 Z5.0 F3000							# Move Z Axis up little
		G1 X{range(6,70)|random} Y350 F20000	# move to a random position in the bucket
		G1 Z-0.025 F3000						# move down before squirt - 0 was not catching the extruded filament
		G91										# go relative to prep for purge
		M400
		{% if verbose %} { action_respond_info("Purging " + purge_len|string + "mm @ " + purge_spd|string + "mm/min...") } {% endif %}
		G1 E{purge_len} F{purge_spd}			# squirt to ensure filament is in HE/Nozzle
#		G1 E-{purge_ret} F{purge_spd * 5}		# retract
#		G4 P{ooze_dwell * 1000}					# pause a bit for spooge/grool
		G90										# absolute positioning
		G92 E0									# reset extruder
		G1 Y340									# and wipe nozzle tip onto edge of bed
		G0 Z+15
		
		# nix'd due to slicer now post-processing a nozzle scrub at end (and for each Layer 0 in case of a OAAT (one at a time) context)
		# CLEAN_NOZZLE DX={printer.toolhead.axis_maximum.x//2|float}  DY={printer.toolhead.axis_maximum.y|float}  DZ=15.0

	{% else %} 
		RESPOND MSG="No Purge due to Low Temp..."
	{% endif %}

# using slicer's PA/LA plugin from FOD (I wuv that waskalie wabbit!)
#	M900 K0.079 # set K-factor  - fast print corner entry under ext here, but is best with marlin PA test print
#	M900 K0.06 # set K-factor	# disabled for tuning tower	

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_started"'	# machine state save
	# M118 print_started

	M117 Printing

#####################################################################
# 	PRINT_END
#####################################################################

[gcode_macro PRINT_END]

variable_retract_temp_min:      180	         # Minimum nozzle temperature to permit a retract. Otherwise, purge will not occur.

gcode:
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_ending"'	# machine state save
	# M118 print_ending
    # safe anti-stringing move coords
	{% set svv = printer.save_variables.variables %}
	
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 1, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                                     # wait for buffer to clear
    G92 E0                                   # zero the extruder
	{% if printer.extruder.temperature >= retract_temp_min %}
		G1 E-0.4 F3600                       # retract filament
	{% else %} 
		RESPOND MSG="No Retract due to Low Temp..."
	{% endif %}

    G90											# absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F15000		# move nozzle to remove stringing
	
#	{% set exit_z = [svv.maxz,doneZ,z_entry]|max|float %}
    {% set z_safe = [th.position.z + 15, th.axis_maximum.z]|min %}
	
	G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y} Z{z_safe} F15000  # park nozzle at rear
#	G0 Z15 F1500  # then drop down to pre-scrub


## CAUTION!!!  THIS FORCES A NOZZLE SCRUB AT THE END OF THE PRINT, WITH THE MODEL STILL ON THE BED
# BE REALLY FUKIN CAREFUL AND KNOW WHAT IS GOING ON BEFORE ENABLING THIS...
# And having shortened slicer's print bed enough so that no model ever gets printed on back where TH
# could strike it during nozzle scrubs.  Also, if doing between mesh scrubs (in one at a time mode), be
# sure to have the logic to elevate to (tallest model z-height (slicer passes max_z) before and after each.
# Still a wip atm, but is close to being safe and robust (30Jan22).

    CLEAN_NOZZLE DX={printer.toolhead.axis_maximum.x//2|float}  DY={printer.toolhead.axis_maximum.y|float}  DZ=15.0

	M107                                      # turn off fan

    _HOURMETER_OFF
    _PrintLED_Off

    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

    M117 Print Completed
    M300 P10 S1000		# sound off print complete
    M300 P10 S2000
    M300 P10 S3000
	M220 S100			# set feedrate percentage to default in case it was altered by the user during the print
	M221 S100			# set speed percentage to default in case it was altered by the user during the print
    M106 S18			# forces small breeze across duct mounted chamber temp sensor
	M141 S40			# set chamber temp to 40
    CLEAR_PAUSE
	SAVE_VARIABLE VARIABLE=maxz VALUE='"0.0"'			# clear saved print dims
	SAVE_VARIABLE VARIABLE=v2_2526_slicer_check VALUE='"NULL"'			# clear SLICER VITALS
	snd_PrintEnd
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_ended"'	# machine state save
	# M118 print_ended
	
	printer_config_backup

#####################################################################
# 	pause_resume.
#####################################################################

[pause_resume]
recover_velocity: 300.0
#   When capture/restore is enabled, the speed at which to return to
#   the captured position (in mm/s). Default is 50.0 mm/s.

#####################################################################
# 	pause_alarm
#####################################################################

[delayed_gcode pause_alarm]
# provides a repeating alarm to alert on a pause (can get here from filament sensors)
initial_duration: 0
gcode:
  _PrintLED_Off
  M300 P100 S3000
  M300 P100 S3000
  M300 P100 S3000
  _PrintLED_On
  UPDATE_DELAYED_GCODE ID=pause_alarm DURATION=3 # recurse in 3 seconds
  # going to consider self silencing after XX minutes, amybe with a sms or telegram bot notification
  # to give operator a chance to intercede and keep the bed warm.  need to flesh this out moar.

[gcode_macro start_pause_alarm]
gcode:
  UPDATE_DELAYED_GCODE ID=pause_alarm DURATION=3 # start a recursive alarm every 3 seconds

[gcode_macro stop_pause_alarm]
gcode:
  UPDATE_DELAYED_GCODE ID=pause_alarm DURATION=0 # stop the recursion

#####################################################################
# 	PAUSE
#####################################################################

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_pausing"'	# machine state save
	# M118 print_pausing
    _HOURMETER_OFF
    _PrintLED_Off

	SAVE_GCODE_STATE NAME=State_Save_Pause							# save state for restoration at resume

    ##### set defaults #####
	{% set max_x = printer.toolhead.axis_maximum.x|float %}     #max_X is X home (350)
	{% set max_y = printer.toolhead.axis_maximum.y|float %}     #max_Y is Y home (350)
    {% set x = params.X|default(max_x)|float %}      			#X home is max_X
    {% set y = params.Y|default(max_y)|float %}      			#Y home is max_Y
    {% set z = params.Z|default(20)|float %} 					#Z is relative - default to lifting 20mm up from print on a pause
    {% set e = params.E|default(1)|float %}        				#edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####

    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}    
      G1 Z{z_safe}
      G90
      G1 X{x} Y{y} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %}
	snd_PrintPause
    start_pause_alarm
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_paused"'	# machine state save
	# M118 print_paused

#####################################################################
# 	RESUME
#####################################################################

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_resuming"'	# machine state save
	# M118 print_resuming
	snd_PrintResume
    _HOURMETER_ON
    _PrintLED_On

	RESTORE_GCODE_STATE NAME=State_Save_Pause

    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
     G91
     G1 E{e} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
	G90
    stop_pause_alarm

    M300 P10 S1000
    M300 P10 S2000
    RESUME_BASE {get_params}
    CLEAR_PAUSE
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_resumed"'	# machine state save
	# M118 print_resumed

#####################################################################
# 	CANCEL_PRINT
#####################################################################

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_canceling"'	# machine state save
	# M118 print_canceling
	stop_pause_alarm                           				# in event canx called from pause, shut the beeping down

	TURN_OFF_HEATERS                           				# so we've canx'd the print, might as well start to cool it down
	CLEAR_PAUSE                           				    # reset the fw pause state, in case canx called from pause
	SDCARD_RESET_FILE                           				# reset the fw file state

	M300 P10 S3000                           				# play
	M300 P10 S2000                           				# 	descending
	M300 P10 S1000                           				#		tone
	M106 S18													# force small breeze across duct mounted chamber temp sensor

	{% set svv = printer.save_variables.variables %}

	{% set x_park = printer.toolhead.axis_maximum.x//2|float %}	### changed to max x
	{% set y_park = printer.toolhead.axis_maximum.y|float %}	### changed to max y
	{% set max_z = printer.toolhead.axis_maximum.z|float %}	# get maximum Z axis height
	{% set act_z = printer.toolhead.position.z|float %}		# get actual Z axis position
	{% if act_z < (max_z - 20.0) %}							# check to ensure we're not going to exceed max Z when lifting
		{% set z_safe = 20.0 %}								# and if OK, then set the z_safe relative val to the desired lift value
	{% else %}												# otherwise
		{% set z_safe = max_z - act_z %}						# set the z_safe (relative) value to ensure we stop at max z
	{% endif %}

	{% set z_park = [z_safe|float,svv.maxz|float+5.0]|min|float %} # and then choose the parking location

	G91														### go relative
	G1 Z{z_park} F900											### and move up the safe amount
	G90														### go absolute
	G0 X{x_park} Y{y_park} F6000								### and move to absolute XY
	CANCEL_PRINT_BASE											### chain to klipper fw print canx stuffs

	_HOURMETER_OFF                           				# so we're not printing, stop accumulating print hours
	_PrintLED_Off                           					# restore previous switch led state
	SAVE_VARIABLE VARIABLE=maxz VALUE='"0.0"'			# clear saved print dims
	SAVE_VARIABLE VARIABLE=v2_2526_slicer_check VALUE='"NULL"'			# clear SLICER VITALS
 	snd_PrintCancel
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_canceled"'	# machine state save
	# M118 print_canceled
