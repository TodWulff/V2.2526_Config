#####################################################################
# 	_nozzle_scrub
#####################################################################

[delayed_gcode _nozzle_scrub_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_nozzle_scrub_loaded func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _printer_vars"].ptr_verb_cfgload %}
		M118 >>> _nozzle_scrub.cfg Loaded. <<<
	{% endif %}
	_proc_end function=_nozzle_scrub_loaded 

[gcode_macro _info_nozzle_scrub]
gcode:


#######################################################################################################################################

# Sample macro config to be used in conjunction with the Decontaminator Purge Bucket & Nozzle Scrubber mod. Created by Hernsl 
# (hernsl#8860 on Discord) and edited by Edwardyeeks (edwardyeeks#6042 on Discord). Several ideas that made it as features by
# Deutherius (deutherius#3295 on Discord).

# The goal of this macro is to provide a nozzle scrubbing and purging routine that is easily copied/referenced into your  printer.cfg.
# Users can simply change parameters and enable/disable options in the first half. Descriptions are plentiful, making this macro
# look huge but informative and are laid out in sequence to be read first describing the line below# PLEASE READ CAREFULLY.

# This sample config assumes the following: The user has implemented the default decontaminator purge bucket & nozzle scrubber mod
# for the VORON 1/2. It can be tweaked to customised purge bucket geometries and brushes.

# Features in this macro: option of putting the bucket at the rear or front of the bed. Purge routine that can be enabled/disabled.
# By default, bucket is located at rear left of bed and purge routine is enabled. The purge and scrubbing routine is randomized
# in either left or right bucket to ensure as even as possible distribution of filament gunk.

# Default parameters are set for safe speeds and movements. Where necessary, tweak the parameters for the nozzle scrub procedure 
# to fit your printer.

# To avoid adding length of lines to your main printer.cfg config file, one can upload a config file separately into klipper and
# include it into the main printer config. Upload nozzle_scrub.cfg to the same directory as printer.cfg. Usually, it is in /home/pi/.
# Users of Fluidd, Mainsail and other klipper front ends would find it under /home/pi/printer_data/config/.

# Once uploaded, add the following to your printer.cfg in the Macros section: [include /home/pi/nozzle_scrub.cfg] 
# Those running Fluidd, Mainsail and other front ends will need to use the following location instead:
# [include /home/pi/printer_data/config/nozzle_scrub.cfg]

#######################################################################################################################################
[gcode_macro _scrub_vars]
description: nozzle scrub vars macro

variable_scrub_err_flag: 		0

variable_scrub_verb_error:		1		# set to 0 to mute error reporting (um, errors.  lol)
variable_scrub_verb_info:		0		# set to 0 to mute info reporting (has data)
variable_scrub_verb_status:		0		# set to 0 to mute status reporting (useful modes, update, etc.)
variable_scrub_verb_debug:		0		# set to 0 to mute debugs stuffs I added (proc entry/exit)
variable_scrub_verb_codeflow:	0		# set to 0 to mute debugs stuffs I added (proc entry/exit)

variable_no_rescrub_period:		5.0		# period in seconds to disregard a scrub request, if last scrubbed in last ___ seconds

gcode:
	# there is none - just for module variables

#----------------------------------------------------------------------------------

[delayed_gcode _scrub_module_start]
# description:  Inits state flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5							# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_scrub_module_start func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _scrub_module_start Start <<< {% endif %}

	SAVE_VARIABLE VARIABLE=module_scrub_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=scrub_err_flag VALUE=0							#init error flag that this module is not in error
	SAVE_VARIABLE VARIABLE=last_scrub_time VALUE=-1							#init variable

	{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _scrub_module_start End <<< {% endif %}

	_proc_end function=_scrub_module_start 

#----------------------------------------------------------------------------------

[gcode_macro clean_nozzle]

variable_verbose:				False	# Enable verbose output

# If you are putting your purge bucket at the rear left of the bed as per default installation, enable True on your location_bucket_rear 
# variable. If you want to put your purge bucket elsewhere (perhaps the front), then set it to False. See diagrams and description 
# further below on how to set your XY position.
variable_location_bucket_rear:	  True

# If you want the purging routine in your bucket enabled, set to True (and vice versa).
variable_enable_purge:			  False

# These parameters define your filament purging. The retract variable is used to retract right after purging to prevent unnecessary
# oozing. Some filament are particularly oozy and may continue to ooze out of the nozzle for a second or two after retracting. The
# ooze dwell variable makes allowance for this. Update as necessary. If you decided to not enable purge, you can ignore this section.
variable_purge_len:			10			 # Amount of filament, in mm, to purge.
variable_purge_spd:			150			 # Speed, in mm/min, of the purge.
variable_purge_temp_min:	180			 # Minimum nozzle temperature to permit a purge. Otherwise, purge will not occur.
variable_purge_ret:			2			# Retract length, in mm, after purging to prevent slight oozing. Adjust as necessary.
variable_ooze_dwell:		2			# Dwell/wait time, in seconds, after purging and retracting.

# Adjust this so that your nozzle scrubs within the brush. Currently defaulted to be a lot higher for safety. Be careful not to go too low!
variable_brush_top:			2.5

# These parameters define your scrubbing, travel speeds, safe z clearance and how many times you want to wipe. Update as necessary. Wipe 
# direction is randomized based off whether the left or right bucket is randomly selected in the purge & scrubbing routine.
variable_clearance_z:		5			 # When traveling, but not cleaning, the clearance along the z-axis between nozzle and brush.
variable_wipe_qty:			3			 # Number of complete (A complete wipe: left, right, left OR right, left, right) wipes.
variable_prep_spd_xy:		15000			 # Travel (not cleaning) speed along x and y-axis in mm/min.
variable_prep_spd_z:		3000			 # Travel (not cleaning) speed along z axis in mm/min.
variable_wipe_spd_xy:		15000			 # Nozzle wipe speed in mm/min.

# These parameters define the size of the brush. Update as necessary. A visual reference is provided below. Note that orientation of 
# parameters remain the same whether bucket is at rear or front.
# 
#				  ←   brush_width   →
#				   _________________														  ↑
#				  |				 |  ↑					 If you chose location_bucket_rear = True, Y position is acquired
#  brush_start (x) |				 | brush_depth			from your stepper_y position_max. Adjust your brush physically in
#				  |_________________|  ↓							   Y so that the nozzle scrubs within the brush.	   
#						  (y)																 ↓
#					  brush_front
# __________________________________________________________
#					 PRINTER FRONT
# 

## For V2.4 350mm build, uncomment this below:
variable_brush_start:	  84

# This value is defaulted from brush location in CAD (rear left). Change if your brush width is different.
variable_brush_width:	  34

## These are only used if location_bucket_rear is False. You specify a custom location in y axis for your brush - see diagram above. ##
variable_brush_front:	   0		  
variable_brush_depth:	   0		  

# These parameters define the size of your purge bucket. Update as necessary. If you decided to not enable purge, you can ignore 
# this section. A visual reference is provided below. Note that orientation of parameters remain the same whether bucket is at rear 
# or front.
# 
#									 bucket_gap
#									  ← ---- →
#					 __________________________________________
#					|				 |	  |				 |	  
#					|				 |	  |				 |
#  bucket_start (x)  |				 |______|				 |
#					|				 |	  |				 |
#					|				 |	  |				 |
#					|_________________|. . . |_________________|
#					 ← ------------- →		← ------------- →
#					 bucket_left_width		bucket_right_width
#  _______________________________________________________________________________________
#									PRINTER FRONT
#  

## For V2.4 350mm build, uncomment below
variable_bucket_left_width:		92   

# These values are defaulted from bucket geometry in CAD (rear left location). Change only if you're using a custom bucket.
variable_bucket_right_width:	40
variable_bucket_gap:			22

# For V1.8, you may need to measure where your bucket start is and input into bucket_start. Otherwise, a value of 0 is for a default
# installation of purge bucket at rear left.
variable_bucket_start:			0

###############################################################################################################################################
###############################################################################################################################################

### From here on, unless you know what you're doing, it's recommended not to change anything. Feel free to peruse the code and reach out to me
### (edwardyeeks#6042) on Discord if you spot any problems!

###############################################################################################################################################
###############################################################################################################################################

# Placeholder. The variable will later be set to contain, at random, a number representing the left or right bucket.
variable_bucket_pos:			1
 
gcode:

	_proc_start function=clean_nozzle func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _scrub_vars"].scrub_verb_codeflow %} M118 >>> clean_nozzle Start <<<  {% endif %}

	say_wait S="Scrubbing Nozzle"

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"scrubbing"'					# machine state save
	
	{% if printer["gcode_macro _scrub_vars"].scrub_verb_status %}  M118 >>> scrubbing <<< {% endif %}

	# set 'saved variables' context
	{% set svv = printer.save_variables.variables %}

	# init vars from passed params
	{% set doneX = params.DX|default(-9999999)|float %}
	{% set doneY = params.DY|default(-9999999)|float %}
	{% set doneZ = params.DZ|default(-9999999)|float %}
	{% if printer["gcode_macro _scrub_vars"].scrub_verb_info %}  M118 >>> clean_nozzle params:  DX:{params.DX} DY:{params.DY} DZ:{params.DZ} <<< {% endif %}
 
	# init vars from location in which scrub was called to return there, if done_ params aren't passes
	{% set x_entry = printer.toolhead.position.x|float %}
	{% set y_entry = printer.toolhead.position.y|float %}
	{% set z_entry = printer.toolhead.position.z|float %}	  
	{% if printer["gcode_macro _scrub_vars"].scrub_verb_info %}  M118 >>> clean_nozzle Entry from:  X:{x_entry}  Y:{y_entry}  Z:{z_entry} <<< {% endif %}

	# ok, so there is a doneZ, a z_entry, and maxz
	# need to set a exit_minz from the highest of these

	# intent here is to ensure that we take the safest approach considering potential for mid-OAAT-print scrubs...
	; {% set exit_z = [svv.maxz|float,doneZ|float,z_entry|float]|max|float %}
	{% set exit_z = z_entry|float %}
	{% if printer["gcode_macro _scrub_vars"].scrub_verb_info %}  M118 >>> clean_nozzle exit_z: {exit_z} (max of svv.maxz {svv.maxz}  |  doneZ {doneZ}  |  z_entry: {z_entry} ) <<< {% endif %}

	{% set scrub_time_delta = ((((printer.system_stats.cputime - svv.last_scrub_time)*10)|int)/10) %}
	
	# check if nozzle was 'recently' scrubbed	
	{% if scrub_time_delta >= printer["gcode_macro _scrub_vars"].no_rescrub_period %}

		# First, check if the axes are homed.
		{% if "xyz" in printer.toolhead.homed_axes %}

			## Save the gcode state in this macro instance.
			SAVE_GCODE_STATE NAME=clean_nozzle
		  
			go_absolute																# absolute positioning

			## Grab max position of Y-axis from config to use in setting a fixed y position for location_bucket_rear = True.
			{% set Ry = printer.configfile.config["stepper_y"]["position_max"]|float %}

			## Check if user enabled purge option or not.
			{% if enable_purge %}

				### Randomly select left or right bin for purge. 0 = left, 1 = right
				SET_GCODE_VARIABLE MACRO=clean_nozzle VARIABLE=bucket_pos VALUE={(range(2) | random)}

				### Raise Z for travel.
				G1 Z{brush_top + clearance_z} F{prep_spd_z}

				### Check if user chose to use rear location.
				{% if location_bucket_rear %}
					G1 Y{Ry} F{prep_spd_xy}
				{% else %}
					G1 Y{brush_front + (brush_depth / 2)} F{prep_spd_xy}
				{% endif %}

				### Position for purge. Randomly selects middle of left or right bucket. It references from the middle of the left bucket.
				G1 X{bucket_start + (bucket_left_width / (2 - bucket_pos)) + (bucket_pos * bucket_gap) + (bucket_pos * (bucket_right_width / 2))}

				### Perform purge if the temp is up to min temp. If not, it will skip and continue executing rest of macro. Small retract after
				### purging to minimize any persistent oozing at 5x purge_spd. G4 dwell is in milliseconds, hence * 1000 in formula.
				{% if printer.extruder.temperature >= purge_temp_min %}
					{% if verbose %} M118 CLEAN_NOZZLE - {"Purging " + purge_len + "mm @ " + purge_spd + "mm/min..."} {% endif %}
					# {% if verbose %} M118 CLEAN_NOZZLE - Purging {purge_len}mm @ {purge_spd}mm/min... {% endif %}
					# M118 Purging {purge_len}mm @ {purge_spd}mm/min
					# M83	  # relative mode  The code for absolute extrusion mode is M82, the code for relative extrusion mode is M83.
					# absolute/relative coordinates: go_absolute, go_relative  ||  go_absolute absolute positioning, go_relative incremental positioning
					go_relative																# incremental positioning
					G1 E{purge_len} F{purge_spd}
					G1 E-{purge_ret} F{purge_spd * 5}
					G4 P{ooze_dwell * 1000}
					go_absolute																# absolute positioning
					_reset_extruder   # reset extruder
				{% else %} 
					{% if verbose %} M118 CLEAN_NOZZLE - No Purge due to Low Temp... {% endif %}
				{% endif %}
			{% else %}	# no purge
				{% if verbose %} M118 CLEAN_NOZZLE - Purge Disabled... {% endif %}
			{% endif %}	#end purge

			## Position for wipe. Either left or right of brush based off bucket_pos to avoid unnecessary travel.
			go_relative																# incremental positioning
			G1 Z+10 F{prep_spd_z}													# raise a bit
			go_absolute																# absolute positioning
			G1 X{brush_start + (brush_width * bucket_pos)} Y{Ry} F{prep_spd_xy}		# doing concurrent (speedier) XY here as we've raised a bit
			G1 Z{brush_top + clearance_z} F{prep_spd_z}  							# now drop in to prep for scrub

			## Move nozzle down into brush.
			G1 Z{brush_top} F{prep_spd_z}
		   
			## Perform wipe. Wipe direction based off bucket_pos for cool random scrubby routine.
			{% for wipes in range(1, (wipe_qty + 1)) %}
				G1 X{brush_start + (brush_width * (1 - bucket_pos))} F{wipe_spd_xy}
				G1 X{brush_start + (brush_width * bucket_pos)} F{wipe_spd_xy}
			{% endfor %}
		   
			## Clear from area.
			M117 Cleaned!

			# optional parameters can be passed to tell the proc where it is to place the head after the wiped
			# this added to aid with speeding up print_start

			# elevate - exit_z already derived at top of this proc
			G1 Z{exit_z} F{prep_spd_z}
			  
			# then move to xy - either done_ or __entry, or combos thereof, annunciating same in the console
			G1 X{x_entry} Y{y_entry} F{prep_spd_xy}

			; {% if doneX != -9999999.0 %}
				 ; {% if doneY != -9999999.0 %}
					; {% if printer["gcode_macro _scrub_vars"].scrub_verb_info %}  M118 >>> both doneX/doneY asserted - restoring to doneX:{doneX}/doneY:{doneY} <<< {% endif %}
					; G1 X{doneX} Y{doneY} F{prep_spd_xy}
				 ; {% else %}
					; {% if printer["gcode_macro _scrub_vars"].scrub_verb_info %}  M118 >>> only doneX asserted - restoring to doneX:{doneX}/Y_entry:{y_entry} <<< {% endif %}
				   ; G1 X{doneX} Y{y_entry}F{prep_spd_xy}
				 ; {% endif %}
			; {% else %} 
				; {% if doneY != -9999999.0 %}
					; {% if printer["gcode_macro _scrub_vars"].scrub_verb_info %}  M118 >>> only doneY asserted - restoring to X_entry:{x_entry}/doneY:{doneY} <<< {% endif %}
					; G1 X{x_entry} Y{doneY} F{prep_spd_xy}
				; {% else %}
					; {% if printer["gcode_macro _scrub_vars"].scrub_verb_info %}  M118 >>> no done asserted - restoring to X_entry:{x_entry}/Y_entry:{y_entry} <<< {% endif %}
					; G1 X{x_entry} Y{y_entry} F{prep_spd_xy}
				; {% endif %}
			; {% endif %}

			## Restore the gcode state to how it was before the macro.
			RESTORE_GCODE_STATE NAME=clean_nozzle
		  
			SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"scrubbed"'	# machine state save
			{% if printer["gcode_macro _scrub_vars"].scrub_verb_status %}  M118 >>> scrubbed <<< {% endif %}
		  
			SAVE_VARIABLE VARIABLE=last_scrub_time VALUE={printer.system_stats.cputime}		#save last scrub time

			say_wait S="Nozzle Scrubbed"

		{% else %}	# not homed...

			## 'raise error' will abruptly halt any clean_nozzle calling macros because, safety...
			{% if printer["gcode_macro _scrub_vars"].scrub_verb_error %}  M118 >>> Not Homed <<< {% endif %}

			say_wait S="Nozzle Scrub failed - axis not homed"

			M117 Please home first!
			{action_raise_error("Please home your axes.") }
			
			SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"not_scrubbed"'	# machine state save
	 
		{% endif %}
 
	{% else %}	# just scrubbed...
	
#		M300
#		M300
		M300

		say_wait S="Redundant Nozzle Scrub skipped"

		M118 Scrub skipped: Nozzle scrubbed { scrub_time_delta } secs ago
		SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"not_scrubbed"'	# machine state save
			
	{% endif %}
 
	{% if printer["gcode_macro _scrub_vars"].scrub_verb_codeflow %} M118 >>> clean_nozzle End <<< {% endif %}

	_proc_end function=clean_nozzle 

#----------------------------------------------------------------------------------


