###############################################################

# pico lights       mcu: /dev/serial/by-id/usb-Klipper_rp2040_E66058388326382F-if00 
# pico chamber_sens mcu: /dev/serial/by-id/usb-Klipper_rp2040_E660583883698338-if00
# pico ercf         mcu: /dev/serial/by-id/usb-Klipper_rp2040_E660583883995731-if00
# main              mcu: /dev/serial/by-id/usb-Klipper_stm32f446xx_26001F00115053424E363620-if00

#serial:
#   The serial port to connect to the MCU. If unsure (or if it
#   changes) see the "Where's my serial port?" section of the FAQ.
#   This parameter must be provided when using a serial port.
#baud: 250000
#   The baud rate to use. The default is 250000.
#canbus_uuid:
#   If using a device connected to a CAN bus then this sets the unique
#   chip identifier to connect to. This value must be provided when using
#   CAN bus for communication.
#canbus_interface:
#   If using a device connected to a CAN bus then this sets the CAN
#   network interface to use. The default is 'can0'.
#restart_method:
#   This controls the mechanism the host will use to reset the
#   micro-controller. The choices are 'arduino', 'cheetah', 'rpi_usb',
#   and 'command'. The 'arduino' method (toggle DTR) is common on
#   Arduino boards and clones. The 'cheetah' method is a special
#   method needed for some Fysetc Cheetah boards. The 'rpi_usb' method
#   is useful on Raspberry Pi boards with micro-controllers powered
#   over USB - it briefly disables power to all USB ports to
#   accomplish a micro-controller reset. The 'command' method involves
#   sending a Klipper command to the micro-controller so that it can
#   reset itself. The default is 'arduino' if the micro-controller
#   communicates over a serial port, 'command' otherwise.

###############################################################

[mcu]					# This is the Main Printer Control Board
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_26001F00115053424E363620-if00
restart_method: command

###############################################################

[mcu ercf]				# This is the ERCF Eazy Brd mcu
serial: /dev/serial/by-id/usb-Klipper_samd21g18a_80D0BB084134555020312E30202C18FF-if00    # this is the orig Xiao
#serial: /dev/serial/by-id/usb-Klipper_samd21g18a_471FDD423357555020312E36350513FF-if00    # this is the QT Py SAMD21E18 masquerading as a Xiao
#serial: /dev/serial/by-id/usb-Klipper_rp2040_Pico_QTPy-if00							    # this is the QT Py RP2040
#restart_method: rpi_usb	#<-- this no workie
restart_method: command

###############################################################

[mcu pico]				# This is the RP2040 Pico mounted in E&E bay - lighting, discretes, ADXL SPI
serial: /dev/serial/by-id/usb-Klipper_rp2040_E66058388326382F-if00
restart_method: command

# Constants
# BUS_PINS_spi0a		gpio0,gpio3,gpio2
# BUS_PINS_i2c0h		gpio28,gpio29
# BUS_PINS_spi0c		gpio16,gpio19,gpio18
# BUS_PINS_spi0d		gpio20,gpio23,gpio22
# BUS_PINS_i2c0b		gpio4,gpio5
# BUS_PINS_i2c0c		gpio8,gpio9
# BUS_PINS_i2c1c		gpio10,gpio11
# BUS_PINS_i2c0a		gpio0,gpio1
# BUS_PINS_i2c0f		gpio20,gpio21
# BUS_PINS_i2c0g		gpio24,gpio25
# BUS_PINS_i2c1g		gpio26,gpio27
# BUS_PINS_i2c0e		gpio16,gpio17
# BUS_PINS_i2c0d		gpio12,gpio13
# BUS_PINS_i2c1e		gpio18,gpio19
# BUS_PINS_i2c1f		gpio22,gpio23
# BUS_PINS_spi1c		gpio24,gpio27,gpio26
# BUS_PINS_spi1b		gpio12,gpio15,gpio14
# BUS_PINS_spi1a		gpio8,gpio11,gpio10
# STATS_SUMSQ_BASE		256
# BUS_PINS_i2c1d		gpio14,gpio15
# BUS_PINS_i2c1b		gpio6,gpio7
# STEPPER_BOTH_EDGE		1
# BUS_PINS_i2c1a		gpio2,gpio3
# ADC_MAX				4095
# PWM_MAX				255
# BUS_PINS_spi0b		gpio4,gpio7,gpio6
# MCU					rp2040
# CLOCK_FREQ			12000000

# Last stats
# retransmit_seq		0
# receive_seq			305
# send_seq				305
# bytes_invalid			0
# rto					0.025
# freq					12000102
# srtt					0
# stalled_bytes			0
# bytes_write			2421
# mcu_awake				0.009
# mcu_task_avg			0.000006
# rttvar				0
# mcu_task_stddev		0.000005
# bytes_read			227224
# bytes_retransmit		0
# adj					11999783
# ready_bytes			0

###############################################################

# [mcu chamber_sens]	# This is a Xiao
# serial: /dev/serial/by-id/usb-Klipper_samd21g18a_XIAO1_32KHz_8KB-if00
# restart_method: command

# Constants
# STEPPER_BOTH_EDGE		1
# ADC_MAX				4095
# RESERVE_PINS_USB		PA24,PA25
# CLOCK_FREQ			48000000
# PWM_MAX				255
# MCU					samd21g18a
# STATS_SUMSQ_BASE		256

# Last stats
# retransmit_seq		2
# receive_seq			120
# send_seq				120
# bytes_invalid			0
# rto					0.025
# freq					48000442
# srtt					0
# stalled_bytes			0
# bytes_write			839
# mcu_awake				0.001
# mcu_task_avg			0.000012
# rttvar				0
# mcu_task_stddev		0.000008
# bytes_read			4222
# bytes_retransmit		9
# adj					47999353
# ready_bytes			0

###############################################################

# [mcu chamber_sens]	# This is a uChip
# serial: /dev/serial/by-id/usb-Klipper_samd21e18a_uChip0_SAMD21E_32KHz_8KB-if00
# restart_method: command
 
# Constants
# RESERVE_PINS_USB		PA24,PA25
# STEPPER_BOTH_EDGE		1
# ADC_MAX				4095
# RESERVE_PINS_crystal	PA0,PA1
# CLOCK_FREQ			48000000
# PWM_MAX				255
# MCU					samd21e18a
# STATS_SUMSQ_BASE		256

# Last stats
# retransmit_seq		2
# receive_seq			585
# send_seq				585
# bytes_invalid			0
# rto					0.025
# freq					48005594
# srtt					0
# stalled_bytes			0
# bytes_write			3629
# mcu_awake				0.001
# mcu_task_avg			0.000011
# rttvar				0
# mcu_task_stddev		0.000008
# bytes_read			12832
# bytes_retransmit		9
# adj					48004383
# ready_bytes			0

###############################################################

#[mcu chamber_sens]		# This is an Adafruit RP2040 Pico Feather
#serial: /dev/serial/by-id/usb-Klipper_rp2040_Pico_Feather-if00
#restart_method: command

# Constants
# BUS_PINS_spi0a		gpio0,gpio3,gpio2
# BUS_PINS_i2c0h		gpio28,gpio29
# BUS_PINS_spi0c		gpio16,gpio19,gpio18
# BUS_PINS_spi0d		gpio20,gpio23,gpio22
# BUS_PINS_i2c0b		gpio4,gpio5
# BUS_PINS_i2c0c		gpio8,gpio9
# BUS_PINS_i2c1c		gpio10,gpio11
# BUS_PINS_i2c0a		gpio0,gpio1
# BUS_PINS_i2c0f		gpio20,gpio21
# BUS_PINS_i2c0g		gpio24,gpio25
# BUS_PINS_i2c1g		gpio26,gpio27
# BUS_PINS_i2c0e		gpio16,gpio17
# BUS_PINS_i2c0d		gpio12,gpio13
# BUS_PINS_i2c1e		gpio18,gpio19
# BUS_PINS_i2c1f		gpio22,gpio23
# BUS_PINS_spi1c		gpio24,gpio27,gpio26
# BUS_PINS_spi1b		gpio12,gpio15,gpio14
# BUS_PINS_spi1a		gpio8,gpio11,gpio10
# STATS_SUMSQ_BASE		256
# BUS_PINS_i2c1d		gpio14,gpio15
# BUS_PINS_i2c1b		gpio6,gpio7
# STEPPER_BOTH_EDGE		1
# BUS_PINS_i2c1a		gpio2,gpio3
# ADC_MAX				4095
# PWM_MAX				255
# BUS_PINS_spi0b		gpio4,gpio7,gpio6
# MCU					rp2040
# CLOCK_FREQ			12000000

# Last stats
# retransmit_seq		2
# receive_seq			144
# send_seq				144
# bytes_invalid			0
# rto					0.025
# freq					12000077
# srtt					0
# stalled_bytes			0
# bytes_write			992
# mcu_awake				0
# mcu_task_avg			0.000003
# rttvar				0
# mcu_task_stddev		0.000003
# bytes_read			4774
# bytes_retransmit		9
# adj					11999783
# ready_bytes			0

###############################################################

[mcu chamber_sens]		# This is an Adafruit RP2040 QT Py
serial: /dev/serial/by-id/usb-Klipper_rp2040_Pico_QTPy-if00
restart_method: command

# Constants				
# ADC_MAX				4095
# BUS_PINS_i2c0a		gpio0,gpio1
# BUS_PINS_i2c0b		gpio4,gpio5
# BUS_PINS_i2c0c		gpio8,gpio9
# BUS_PINS_i2c0d		gpio12,gpio13
# BUS_PINS_i2c0e		gpio16,gpio17
# BUS_PINS_i2c0f		gpio20,gpio21
# BUS_PINS_i2c0g		gpio24,gpio25
# BUS_PINS_i2c0h		gpio28,gpio29
# BUS_PINS_i2c1a		gpio2,gpio3
# BUS_PINS_i2c1b		gpio6,gpio7
# BUS_PINS_i2c1c		gpio10,gpio11
# BUS_PINS_i2c1d		gpio14,gpio15
# BUS_PINS_i2c1e		gpio18,gpio19
# BUS_PINS_i2c1f		gpio22,gpio23
# BUS_PINS_i2c1g		gpio26,gpio27
# BUS_PINS_spi0a		gpio0,gpio3,gpio2
# BUS_PINS_spi0b		gpio4,gpio7,gpio6
# BUS_PINS_spi0c		gpio16,gpio19,gpio18
# BUS_PINS_spi0d		gpio20,gpio23,gpio22
# BUS_PINS_spi1a		gpio8,gpio11,gpio10
# BUS_PINS_spi1b		gpio12,gpio15,gpio14
# BUS_PINS_spi1c		gpio24,gpio27,gpio26
# CLOCK_FREQ			12000000
# MCU					rp2040
# PWM_MAX				255
# STATS_SUMSQ_BASE		256
# STEPPER_BOTH_EDGE		1

# Last stats
# retransmit_seq		2
# receive_seq			157
# send_seq				157
# bytes_invalid			0
# rto					0.025
# freq					12000109
# srtt					0
# stalled_bytes			0
# bytes_write			1070
# mcu_awake				0
# mcu_task_avg			0.000003
# rttvar				0
# mcu_task_stddev		0.000003
# bytes_read			5017
# bytes_retransmit		9
# adj					11999819
# ready_bytes			0

###############################################################

#[mcu chamber_sens]		# This is a Pico RP2040
#serial: /dev/serial/by-id/usb-Klipper_rp2040_E660583883698338-if00
#restart_method: command
 