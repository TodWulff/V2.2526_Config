#####################################################################
# _userWrap_pause_resume
#####################################################################

[delayed_gcode _userWrap_pause_resume_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_pause_resume_loaded func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'
	_module_loaded MODULE=_userWrap_pause_resume
	_proc_end function=_pause_resume_loaded

#--------------------------------------------------------------------

[gcode_macro _info_userWrap_pause_resume]
gcode:

# user config to wrap FW procs constained in pause_resume.cfg

#--------------------------------------------------------------------

[gcode_macro _userWrap_pause_resume_vars]
description: macro for _pause_resume variables

gcode:

	_proc_start function=_pause_resume_vars func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	# there is none, this is for module variable use only

	_proc_end function=_pause_resume_vars

#--------------------------------------------------------------------

[delayed_gcode _userWrap_pause_resume_module_start]
#description: Inits svv flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5					# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_pause_resume_module_start func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	SAVE_VARIABLE VARIABLE=module_pause_resume_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_pause_resume_err_flag VALUE=0							#init error flag that this module is not in error

	_proc_end function=_pause_resume_module_start

#--------------------------------------------------------------------

[gcode_macro CLEAR_PAUSE]
description: wrap FW proc for userLogging purposes
RENAME_EXISTING: _CLEAR_PAUSE_STOCK
gcode:

	_proc_start function=CLEAR_PAUSE func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	_CLEAR_PAUSE_STOCK {rawparams}

	_proc_end function=CLEAR_PAUSE

#--------------------------------------------------------------------

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running or paused print
variable_retract_temp_min:		180			 # Minimum nozzle temperature to permit a retract. Otherwise, purge will not occur.
variable_print_end_scrub:		False
rename_existing: _CANCEL_PRINT_STOCK
gcode:

	_proc_start function=CANCEL_PRINT func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	# this proc gets entered when a print is cancelled from printing OR when cancelled from pause
	# so need to logically assess moving Z before (if printing) or after XY (if paused)

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	say_wait S="Cancelling"

	_start_bounds_checking # re-enable automatic periodic H2O cooling parameter checks (in case canx'd by user or bounds tripped)

	# wondering if this is contributing to the ercf timer too close issue.?.
#	M220 S100														# set feedrate percentage to default
#	M221 S100														# set speed percentage to default

	{% set th = printer.toolhead %}									# set context for printer.toolhead object

	{% set canx_entry_ptr_state = svv.last_ptr_state %}					# store state for conditional use later herein

	M118 CANCEL_PRINT @ S{printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X{printer.toolhead.position.x|round(3,'common')} Y{printer.toolhead.position.y|round(3,'common')} Z{printer.toolhead.position.z|round(3,'common')}

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_canceling"'	# machine state save

	stop_pause_alarm						 						# in event canx called from pause, shut the beeping down

	SAVE_GCODE_STATE NAME=STATE_PRINT_CANX

# ok, so were cancelling a print. if not paused, wipe and, if paused, don't wipe.
# actually, I think wiping on a cancel might be over engineering shite. But this was
# an effort to harmonize print cancel and print end as much as practical.
# actually, Ima overtly nix the wipe.

###	{% if printer.pause_resume.is_paused == true %}
###		#do not wipe
###	{% else %}
###		######################### safe anti-stringing print-canx wipe coords
###		{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
###		{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
###		{% set z_safe = [(th.position.z|float + 1), th.axis_maximum.z|float]|min %}
###		# {% set z_safe = [svv.maxz|float+1, th.axis_maximum.z]|min %}	# because, OAAT/SEQ context
###
###		_reset_extruder													# zero the extruder
###		{% if printer.extruder.temperature|int >= retract_temp_min|int %}
###			G1 E-0.4 F3600					 							# retract filament
###		{% else %}
###			M118 No print_end retract due to Low Temp...
###		{% endif %}
###		G0 X{x_safe} Y{y_safe} Z{z_safe} F15000							# move nozzle to remove stringing
###
###		M400															# wait for buffer to clear
###	{% endif %}

	######################## old park
	# ## {% set z_safe = [svv.maxz|float + 15, th.axis_maximum.z|float]|min|float %}
	# {% set z_safe = [(th.position.z|float + 15), th.axis_maximum.z|float]|min %}
	# G0 Z{z_safe} F6000 											# Move Up
	# G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y} F15000		# park nozzle at center rear

	_park_head ENTRY='{canx_entry_ptr_state|string}'
	# _park_head ENTRY='print_cancelling'

	## CAUTION!!! THIS FORCES A NOZZLE SCRUB AT THE END OF THE PRINT, WITH THE MODEL STILL ON THE BED
	# BE REALLY FUKIN CAREFUL AND KNOW WHAT IS GOING ON BEFORE ENABLING THIS...
	# And having shortened slicer's print bed enough so that no model ever gets printed on back where TH
	# could strike it during nozzle scrubs. Also, if doing between mesh scrubs (i.e. OAAT/SEQ mode), be
	# sure to have the logic to elevate to (tallest model z-height (slicer passes maxz) before and after each.
	# Still a wip atm, but is close to being safe and robust (30Jan22).

	; {% if print_end_scrub or params.SCRUB|default(0)|int %}
		; # assumes that we're at rear center
		; G0 Z15 F1500 # drop down to pre-scrub Z15 absolute
		; CLEAN_NOZZLE DX={th.axis_maximum.x//2|float} DY={th.axis_maximum.y|float} DZ=15.0
	; {% endif %}

	RESTORE_GCODE_STATE NAME=STATE_PRINT_CANX

	_HOURMETER_OFF
	_PrintLED_Off

	{% if svv.module_ledeff_loaded %}
		_set_ledeff_mode CHAIN=chamber_lights	EFFECT=normal			# use LED_EFFECTS code
		_set_ledeff_mode CHAIN=lcd_lights 	EFFECT=normal			# use LED_EFFECTS code
		# _set_ledeff_mode CHAIN=ercf_lights	EFFECT=off				# use LED_EFFECTS code
		# _set_ledeff_mode CHAIN=dash_lights	EFFECT=off				# use LED_EFFECTS code
	{% else %}
		ChLts_Normal												# use Klipper Dotstar code
		LcdLts_Normal												# use Klipper Neopixel code
		# ERCFLts_off													# use Klipper Neopixel code
		# DBLts_off													# use Klipper Neopixel code
	{% endif %}

	M107															# turn off part cooling fan
	M117 Print Cancelled
	M106 S26														# forces small breeze across duct mounted chamber temp sensor

	CLEAR_PAUSE						 								# reset the fw's pause state, in case canx called from pause
	# SDCARD_RESET_FILE						 						# reset the fw's file state

	M300 P10 S3000						 							# play
	M300 P10 S2000						 							# 	descending
	M300 P10 S1000						 							#		tone
	# snd_PrintCancel

	_CANCEL_PRINT_STOCK												# chain to klipper fw print canx stuffs

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_canceled"'	# save the machine state
	SAVE_VARIABLE VARIABLE=maxz VALUE=0.0							# clear saved print height
	SAVE_VARIABLE VARIABLE=has_wipe_tower VALUE=-1					# print state initialization
	SAVE_VARIABLE VARIABLE=v2_2526_slicer_check VALUE='"NULL"'		# clear slicer check val to enable later update/check
	SAVE_VARIABLE VARIABLE=last_saved_gcode_state VALUE='"NULL"'
#	SAVE_VARIABLE VARIABLE=ercf_swaps_last_complete_print VALUE={svv.ercf_swaps}	# save current swaps
	SAVE_VARIABLE VARIABLE=ercf_swaps_last_canx_print VALUE={svv.ercf_swaps}	# save current swaps
	SAVE_VARIABLE VARIABLE=ercf_swaps VALUE=0									# clear swap

	# using delay here, so that FW print canx dialog can happen before this UI Prompt.
	save_variable VARIABLE=print_canx_unload VALUE={params.UNLOAD|default(1)|int} 	# needed for _print_canx_ui_unload
	get_user_input_delay DELAY=1.0 PROMPT="Turn Heaters Off? (YES/no):" RCVR_MACRO=_print_canx_ui_cooldown TO_PERIOD=60 TO_CYCL_DEF=0 TO_RESP_DEF=YES

	_proc_end function=CANCEL_PRINT

#--------------------------------------------------------------------

[gcode_macro PAUSE]
#####################################################################
# 	PAUSE + ERCF adaptations
#####################################################################
description: Pause the actual running print
rename_existing: _PAUSE_STOCK
gcode:

	_proc_start function=PAUSE func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	say_wait S="Pausing"

	# prevent stacking pauses - fracks with resume...
	{% if printer.pause_resume.is_paused %}

		M118 Printer Already Paused - No Further Action...

	{% else %}

		#nix ercf encoder_sensor ops at pause, in case user wants to do stuff - will be enabled at resume.
		{% if svv.module_ercf_loaded|int %}
			{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
				SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
			{% endif %}
			M118 ERCF Interactions: {svv.ercf_interactions}				# advise Interaction Count
		{% endif %}

		SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_pausing"'	# machine state save

		{% if svv.ercf_err_flag %}
			#state ERCF_state already saved in ercf_pause macro
			save_variable VARIABLE=pause_ercf_error VALUE=1				# set ercf_pause flag for use in resume
			RUN_SHELL_COMMAND CMD=send_sms_pause_alert					# send sms once on an error pause - not for manual pause.
		{% else %}
			SAVE_GCODE_STATE NAME=State_Save_Pause						# save state for restoration at resume
			save_variable VARIABLE=pause_ercf_error VALUE=0				# set ercf_pause flag for use in resume
		{% endif %}

		_HOURMETER_OFF
		_PrintLED_Off

		# set paused lighting state here (consider a timeout countdown, etc)
		{% if printer.save_variables.variables.module_ledeff_loaded %}
			_set_ledeff_mode CHAIN=chamber_lights	EFFECT=normal	RESET=1		# uses LED_EFFECTS code
			_set_ledeff_mode CHAIN=lcd_lights 	EFFECT=normal	RESET=1		# uses LED_EFFECTS code
			; _set_ledeff_mode CHAIN=ercf_lights	EFFECT=off		RESET=1		# uses LED_EFFECTS code
			; _set_ledeff_mode CHAIN=dash_lights	EFFECT=off		RESET=1		# uses LED_EFFECTS code
		{% else %}
			ChLts_Normal		# set chamber lights to normal	- uses Klipper Dotstar code
			LcdLts_Normal		# set lcd lights to normal		- uses Klipper Neopixel code
			; ERCFLts_off			# set ercf lights to normal		- uses Klipper Neopixel code
			; DBLts_off			# set dash lights to normal		- uses Klipper Neopixel code
		{% endif %}

		# prep for nozzle move away from the print and prevent oozing with a retract
		##### set defaults #####
		{% set max_x = printer.toolhead.axis_maximum.x|float %}
		{% set max_y = printer.toolhead.axis_maximum.y|float %}
		{% set x = params.X|default(max_x//2)|float %}
		{% set y = params.Y|default(0)|float %}
		{% set z = params.Z|default(20)|float %} 					#Z is relative - default to lifting 20mm up from print on a pause

		{% set e = params.E|default(printer["gcode_macro _printer_vars"].pause_retract_default|float)|float %}

		##### calculate save lift position #####
		{% set max_z = printer.toolhead.axis_maximum.z|float %}
		{% set act_z = printer.toolhead.position.z|float %}
		{% set lift_z = z|abs %}									#z is relative
		{% if act_z < (max_z - lift_z) %}
			{% set z_safe = lift_z %}
		{% else %}
			{% set z_safe = max_z - act_z %}
		{% endif %}
		##### end of definitions #####

		M118 _PAUSE_STOCK @ S{printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X{printer.toolhead.position.x} Y{printer.toolhead.position.y} Z{printer.toolhead.position.z}

		_PAUSE_STOCK	# ceases processing of gcode - pause_resume.py forces save gcode state PAUSE_STATE

		go_relative	REASON='"Pause Extruder Retract and Z Lift"'	#set relative for following (E and Z stuffs)

		# retract a bit
		{% if printer.extruder.can_extrude|lower == 'true' %}
			G1 E-{e} F2100 REASON='"resume deretract"'
		{% else %}
			M118 No Pause Retract as Extruder not hot enough
		{% endif %}

		{% if "xyz" in printer.toolhead.homed_axes %}
			#remember, we're relative atm
			G0 Z{z_safe}
			go_absolute	REASON='"Extruder and Z Lift done, going abs for X/Y parking"'	# go absolute for XY
			G0 X{x} Y{y} F6000
		{% else %}
		 M118 Printer not homed
		{% endif %}

		go_absolute REASON='"All Pause relative stuff done"'

		snd_PrintPause
		start_pause_alarm

		M118 PAUSE @ S{printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X{printer.toolhead.position.x|round(3,'common')} Y{printer.toolhead.position.y|round(3,'common')} Z{printer.toolhead.position.z|round(3,'common')}

		SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_paused"'	# machine state save

	{% endif %}

	say_nc S="Paused"

	_proc_end function=PAUSE

#--------------------------------------------------------------------

[gcode_macro RESUME]
description: Resume the actual running print - adapted for ERCF
rename_existing: _RESUME_STOCK
gcode:

	_proc_start function=RESUME func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	say_wait S="Print Resuming"

	{% set resume_flag = 0|int %}

	{% if svv.module_ercf_loaded %}
		{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int != 0 %}
			M118 You can't resume the print without unlocking the ERCF first.
			M118 Run ERCF_UNLOCK and solve any issue before hitting Resume again
			# don't flag a resume here as ercf is paused - user must ercf_unlock first...
			# .?.consider an ercf_unlock here so user can just fix and resume thereafter.?.
		{% else %}
			{% set resume_flag = 1|int %}
			{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
				SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
			{% endif %}
		{% endif %}
	{% else %}
		{% set resume_flag = 1|int %}
	{% endif %}

	#######################################################
	# Above is logic to fire the following, if applicable
	#######################################################

	{% if resume_flag %}

		SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_resuming"'		# machine state save

		M118 RESUME @ S{printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X{printer.toolhead.position.x|round(3,'common')} Y{printer.toolhead.position.y|round(3,'common')} Z{printer.toolhead.position.z|round(3,'common')}

		snd_PrintResume
		_HOURMETER_ON
		_PrintLED_On

		# reset lighting context before resuming print
		{% if svv.module_ledeff_loaded %}
			_set_ledeff_mode CHAIN=chamber_lights	EFFECT=normal	RESET=1		# uses LED_EFFECTS code
			_set_ledeff_mode CHAIN=lcd_lights 	EFFECT=normal	RESET=1		# uses LED_EFFECTS code
			# _set_ledeff_mode CHAIN=ercf_lights	EFFECT=off		RESET=1		# uses LED_EFFECTS code
			# _set_ledeff_mode CHAIN=dash_lights	EFFECT=off		RESET=1		# uses LED_EFFECTS code
		{% else %}
			ChLts_Normal		# set chamber lights to normal	- uses Klipper Dotstar code
			LcdLts_Normal		# set lcd lights to normal		- uses Klipper Neopixel code
			# ERCFLts_off			# set ercf lights to normal		- uses Klipper Neopixel code
			# DBLts_off			# set dash lights to normal		- uses Klipper Neopixel code
		{% endif %}

		go_absolute REASON='"forcing absolute before restoring gcode state"'

		{% if svv.pause_ercf_error %}
			RESTORE_GCODE_STATE NAME=ERCF_state MOVE=1 MOVE_SPEED=300.0000
		{% else %}
			RESTORE_GCODE_STATE NAME=State_Save_Pause MOVE=1 MOVE_SPEED=300.0000
		{% endif %}

		##### set defaults #####
		{% set e = params.E|default(printer["gcode_macro _printer_vars"].pause_retract_default|float)|float %}

		#### get VELOCITY parameter if specified ####
		{% if 'VELOCITY' in params|upper %}
			{% set get_params = ('VELOCITY=' ~ params.VELOCITY) %}
		{%else %}
			{% set get_params = "" %}
		{% endif %}
		##### end of definitions #####

		{% if printer.extruder.can_extrude|lower == 'true' %}
			go_relative REASON='"resume extruder deretract"'
			G1 E{e} F2100 REASON='"resume deretract"'
		{% else %}
			M118 No Resume Deretract as Extruder not hot enough
		{% endif %}

		go_absolute REASON='"in case we are relative for deretract"'

		stop_pause_alarm
		M300 P10 S1000
		M300 P10 S2000

		M118 _RESUME_STOCK @ S{printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X{printer.toolhead.position.x|round(3,'common')} Y{printer.toolhead.position.y|round(3,'common')} Z{printer.toolhead.position.z|round(3,'common')}
		_RESUME_STOCK {get_params}	# resumes processing of gcode - hard coded in pause_resume.py to do a moving restore of saved gcode state: PAUSE_STATE

		CLEAR_PAUSE
		SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_resumed"'	# machinestatesave

		_start_bounds_checking # re-enable automatic periodic H2O cooling parameter checks (in case canx'd by user or tripped bounds)

		_proc_end function=RESUME

	{% endif %}

	say_nc S="Resumed"

	_proc_end function=RESUME

