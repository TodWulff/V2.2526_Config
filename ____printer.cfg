#############################################################################
#   Baseline Printer Config
#############################################################################

[gcode_macro _info_printer]
gcode:

# ~MHz mods 12 NOV 2021 for New Fab V2.4 (not v2.4r2)
# - 7OW/PT1000 Dragon WHF HE (Watercooled)
# - AB Toolhead PCB Chamber Temp Sens=0805 10K 1% B=3950K(25/50C)
# - HE0=HE_HTR, HE3=HOUR_METER
# - M0=B, M1=A, M2.1=Z0, M3=Z1, M4=Z2, M5=Z3, M6=E
# - F0=PCF, F1=HEF
# - DIAG0=XES, DIAG1=YES, DIAG2=ZES, DIAG3=PL-08 Bed Sens (blocking diode on AB PCB)
# - DIAG4=SFS
# - RGB LED IO (PB0) unused
# - TB=BED, T0=HE, T1=AB_PCB(CHAMBER)
# - Display Aural Xdcr on uC IO PE8
# - Power and LED Control via RP2040 GPIO is in moonraker.conf

# - https://github.com/TodWulff/V2.2526_Config/blob/main/V2.2526_Hardware/__WDM/V2.2526%20Wiring%20Diagram.pdf

# 10.0.0.22
# Pico usb-Klipper_rp2040_E66058388326382F-if00  https://i.imgur.com/uENqwNa.png

# Xiao usb-Klipper_samd21g18a_80D0BB084134555020312E30202C18FF-if00  https://i.imgur.com/qeVSKRV.png
# for Xiao, bin2uf2 Tool: https://github.com/lancaster-university/codal/blob/master/utils/uf2conv.py Usage https://i.imgur.com/oyn8TXP.png

# Octopus usb-Klipper_stm32f446xx_26001F00115053424E363620-if00  https://i.imgur.com/Z2xTg2X.png


## Voron Design VORON2.4 350mm BigTreeTech OctoPus V1.1 TMC2209 UART config
[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_26001F00115053424E363620-if00
restart_method: command

# 10.0.0.22
# usb-Klipper_rp2040_E66058388326382F-if00
# usb-Klipper_samd21g18a_80D0BB084134555020312E30202C18FF-if00
# usb-Klipper_stm32f446xx_26001F00115053424E363620-if00

#serial:
#   The serial port to connect to the MCU. If unsure (or if it
#   changes) see the "Where's my serial port?" section of the FAQ.
#   This parameter must be provided when using a serial port.
#baud: 250000
#   The baud rate to use. The default is 250000.
#canbus_uuid:
#   If using a device connected to a CAN bus then this sets the unique
#   chip identifier to connect to. This value must be provided when using
#   CAN bus for communication.
#canbus_interface:
#   If using a device connected to a CAN bus then this sets the CAN
#   network interface to use. The default is 'can0'.
#restart_method:
#   This controls the mechanism the host will use to reset the
#   micro-controller. The choices are 'arduino', 'cheetah', 'rpi_usb',
#   and 'command'. The 'arduino' method (toggle DTR) is common on
#   Arduino boards and clones. The 'cheetah' method is a special
#   method needed for some Fysetc Cheetah boards. The 'rpi_usb' method
#   is useful on Raspberry Pi boards with micro-controllers powered
#   over USB - it briefly disables power to all USB ports to
#   accomplish a micro-controller reset. The 'command' method involves
#   sending a Klipper command to the micro-controller so that it can
#   reset itself. The default is 'arduino' if the micro-controller
#   communicates over a serial port, 'command' otherwise.

[printer]
kinematics: corexy
max_velocity: 500
max_accel: 4000
max_accel_to_decel: 3000
max_z_velocity: 50
max_z_accel: 350
square_corner_velocity: 20.0

#[printer]
#kinematics:
#   The type of printer in use. This option may be one of: cartesian,
#   corexy, corexz, hybrid_corexy, hybrid_corexz, rotary_delta, delta,
#   polar, winch, or none. This
#   parameter must be specified.
#max_velocity:
#   Maximum velocity (in mm/s) of the toolhead (relative to the
#   print). This parameter must be specified.
#max_accel:
#   Maximum acceleration (in mm/s^2) of the toolhead (relative to the
#   print). This parameter must be specified.
#max_accel_to_decel:
#   A pseudo acceleration (in mm/s^2) controlling how fast the
#   toolhead may go from acceleration to deceleration. It is used to
#   reduce the top speed of short zig-zag moves (and thus reduce
#   printer vibration from these moves). The default is half of
#   max_accel.
#square_corner_velocity: 5.0
#   The maximum velocity (in mm/s) that the toolhead may travel a 90
#   degree corner at. A non-zero value can reduce changes in extruder
#   flow rates by enabling instantaneous velocity changes of the
#   toolhead during cornering. This value configures the internal
#   centripetal velocity cornering algorithm# corners with angles
#   larger than 90 degrees will have a higher cornering velocity while
#   corners with angles less than 90 degrees will have a lower
#   cornering velocity. If this is set to zero then the toolhead will
#   decelerate to zero at each corner. The default is 5mm/s.

[gcode_macro HOST_SHUTDOWN]
gcode:
  {action_call_remote_method("shutdown_machine")}

[gcode_macro HOST_REBOOT]
gcode:
  {action_call_remote_method("reboot_machine")}

# [exclude_object]

[idle_timeout] 
timeout: 18000  #in seconds - 18000= 5hr, 3600 = 1hr
gcode:
  M84
  TURN_OFF_HEATERS
## TODO:  add dly for HE to cool to some threshold (HeatCreep Prevention)
  UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=60

[gcode_macro _printer_vars]
# prototype: {% if printer["gcode_macro _printer_vars"].ptr_verb_debug %}  M118 >>> _linadv_module_start Start <<< {% endif %}

variable_ptr_verb_error:			1 	# set to 0 to mute error reporting (um, errors.  lol)
variable_ptr_verb_info:				0   # set to 0 to mute info reporting (has data)
variable_ptr_verb_status:			0   # set to 0 to mute status reporting (useful modes, update, etc.)
variable_ptr_verb_debug:			0   # set to 0 to mute debugs stuffs I added
variable_ptr_verb_modload:			0   # set to 0 to mute debugs stuffs I added
		
variable_ptr_verb_codeflow:			0   # set to 0 to mute debugs stuffs I added (proc entry/exit)
variable_show_proc_exit:			1	# 1 enables display of nesting depth btics on procedure exit
variable_show_proc_exit_details:	1	# previous needs to be enabled for this to work, 1 displays function on exit, if passed

# similar module-specific verbosity settings contained in file | proc:
	# _kicky-probe.cfg | _klicky_vars
	# _debug_macros.cfg | _debug_vars
	# _ercf_software.cfg | ercf_var
	# _nozzle_scrub.cfg | _scrub_vars
	# _led_effects.cfg | _ledeff_vars
	# _gcode_processing.cfg | _gcodeproc_vars
	# _linear_advance.cfg | _linadv_vars

variable_pause_retract_default:		1.0	# default retract amount at pause - is also default deretract amount at resume


gcode:
	#there is none, this is for broad variable access

[gcode_macro _proc_start]
description:  for trace debug purposes - presents depth as leading back-tics
# passed params:
#	function=_some_macro_name
#	func_params='"{rawparams|string}"'		#<-- can have spaces (i.e. multiple paramaters) thus need to encapsulate as string
gcode:
	{% set svv = printer.save_variables.variables %}					# set eazy accesss context for save_variables object
	
	_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE={svv.proc_depth + 1|int}	# increment depth counter

	{% set this1 = namespace(depth_indent = "`") %} 					# btic is proc_depth indicator
																		# using namespace so it can be manipulated in for loop

	{% for iter in range(svv.proc_depth|int) %}
		{% set this1.depth_indent = this1.depth_indent + "`" %}			# add a btic for each layer of nested code
	{% endfor %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %}
		{% set new_params = rawparams|replace("function=", "") %}		# strip function= from passed params 
		{% set new_params = new_params|replace("func_params=", "") %}	# strip func_params=
		{% set new_params = new_params|replace("'", "") %}				# strip ' portion of string encapsulation
		{% set new_params = new_params|replace("\"", "") %}				# strip " portion of string encapsulation
		M118 {this1.depth_indent ~ " " ~ new_params|upper}				# concatenate depth btics and (macro and params) and display in console
	{% endif %}

[gcode_macro _proc_end]
description:  for trace debug purposes - presents depth as leading back-tics
#	function=_some_macro_name
gcode:
	{% set svv = printer.save_variables.variables %}						# set eazy accesss context for save_variables object

	{% set this1 = namespace(depth_indent = "`") %} 						# proc_depth
	
	_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE={svv.proc_depth - 1|int}	# decrement depth counter
	
	{% if svv.proc_depth|int < 0 %}
		_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE=0						# in theory, we should never get here...
	{% endif %}
	
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow or params.FORCE|default(0)|int %} 
	
		{% for iter in range(svv.proc_depth - 1|int) %}
			{% set this1.depth_indent = this1.depth_indent ~ "`" %}
		{% endfor %}
		
		{% if printer["gcode_macro _printer_vars"].show_proc_exit %} 
		
			{% if params.FUNCTION|string != "" and printer["gcode_macro _printer_vars"].show_proc_exit_details %} 
#				M118 {this1.depth_indent ~ " " ~ params.FUNCTION ~ " End"}
#				M118 {this1.depth_indent ~ " [" ~ params.FUNCTION|lower ~ "]"}
#				M118 {this1.depth_indent ~ " [" ~ params.FUNCTION|lower ~ "] exit"}
				M118 {this1.depth_indent ~ " [" ~ params.FUNCTION|lower ~ "] done"}
			{% else %}
				M118 {this1.depth_indent}
			{% endif %}
			
		{% endif %}
		
	{% endif %}

[gcode_macro _enable_trace_debug]
description: sets codeflow verbosity flag and inits depth counter
gcode:
	{% set entry_trace_enabled_flag = printer["gcode_macro _printer_vars"].ptr_verb_codeflow|default(0)|int %} # silence console emissions if already enabled

	SET_GCODE_VARIABLE MACRO=_printer_vars VARIABLE=ptr_verb_codeflow VALUE=1
		
	{% if entry_trace_enabled_flag == 0 %}	# emit a couple of blank lines to visually indicate state change
		M118
		M118
	{% endif %}

	_proc_start function=_enable_trace_debug func_params='"{rawparams|string}"'
	
	_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE=1	# reset depth counter
	## note: proc depth counter may be out of sync until un-nested fully and then will get sync'd up
	## as, at time of enablement, when not previously tracked, depth is unknown...
	
	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _enable_trace_debug <<<<< {% endif %}

	_proc_end function=_enable_trace_debug

[gcode_macro _disable_trace_debug]
description: sets codeflow verbosity flag and inits depth counter
gcode:

	{% set entry_trace_enabled_flag = printer["gcode_macro _printer_vars"].ptr_verb_codeflow|default(1)|int  %} # silence console emissions if already disabled

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_disable_trace_debug func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _disable_trace_debug <<<<< {% endif %}
	SET_GCODE_VARIABLE MACRO=_printer_vars VARIABLE=ptr_verb_codeflow VALUE=0

	_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE=0	# reset depth counter
	## note, proc depth counter may be out of sync until un-nested fully and then will be sync'd up
	## due to, when not previously tracked, depth is unknown at time of enablement...
	
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_disable_trace_debug {% endif %}
	
	{% if entry_trace_enabled_flag %}	# emit a couple of blank lines to visually indicate state change
		_proc_end function=_disable_trace_debug FORCE=1
		M118
		M118
	{% endif %}


# [] Includes

# Reportedly, load order is a thing, so I must have gotten lucky.
# Anyways, be cognitive that altering the order may have implications...

[include mainsail.cfg]
[include shell_command.cfg]
[include _console_response.cfg]
[include _persistent_variables.cfg]
[include _pico_expander.cfg]
[include _debug_macros.cfg]
[include _git_repo_ops.cfg]
[include _gcode_buttons.cfg]
[include _led_effects.cfg]
[include _dotstar_leds.cfg]
[include _neopixel_leds.cfg]
[include _ercf_user_vars.cfg]
[include _ercf_hardware.cfg]	# <-- for ercf - this affects the Xiao in unknown ways (gpio stops acting correctly) - something in ercf.py...
[include _ercf_software.cfg]	# <-- chain loads _ercf_software_mods.cfg
[include _nozzle_scrub.cfg]
[include _stepstick_config.cfg]
[include _lcd_module.cfg]
# [include _lcd_tweaks.cfg]		# from Voron Docs - candidate for inclusion
[include _sensors_heaters.cfg]
[include _steppers_printer.cfg]
[include _fans_cooling.cfg]
[include _gcode_macros.cfg]
[include _io_defs.cfg]
[include _m300_sounds.cfg]		 # <-- chain loads gcode songs
[include _qgl_bedmesh.cfg]
[include _resonance_compensation.cfg]
[include _klicky-probe.cfg]
[include _z_calibration.cfg]
[include _linear_advance.cfg]
[include _hw_retract.cfg]
[include _gcode_arcs.cfg]
[include _park_procs.cfg]
[include _gcode_processing.cfg]
[include __print_start.cfg]
[include __print_pause.cfg]
[include __print_resume.cfg]
[include __print_cancel.cfg]
[include __print_end.cfg]
[include ___startup_autoexec.cfg]
[include _corexy_gantry_speed_test.cfg]
[include _H2O_param_bounding.cfg]	# <-- in-print monitoring of H2O temps/rates/speeds and pausing/alerting on an escape
