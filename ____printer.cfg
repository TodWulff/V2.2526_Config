#############################################################################
# BRODY 22 ____printer Baseline Printer Config
#############################################################################

[delayed_gcode ____printer_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=____printer_loaded func_params='"{rawparams|string}"'
	_module_loaded MODULE=____printer
	_proc_end function=____printer_loaded

[gcode_macro _info____printer]
gcode:

	_proc_start function=_info____printer func_params='"{rawparams|string}"'

	say_wait S="Woo Who?"

	# ~MHz mods 12 NOV 2021 for New Fab V2.4 (not v2.4r2)
	# - 7OW/PT1000 Dragon WHF HE (Watercooled)
	# - AB Toolhead PCB Chamber Temp Sens=0805 10K 1% B=3950K(25/50C)
	# - HE0=HE_HTR, HE3=HOUR_METER
	# - M0=B, M1=A, M2.1=Z0, M3=Z1, M4=Z2, M5=Z3, M6=E
	# - F0=PCF, F1=HEF
	# - DIAG0=XES, DIAG1=YES, DIAG2=ZES, DIAG3=PL-08 Bed Sens (blocking diode on AB PCB)
	# - DIAG4=SFS
	# - RGB LED IO (PB0) unused
	# - TB=BED, T0=HE, T1=AB_PCB(CHAMBER)
	# - Display Aural Xdcr on uC IO PE8
	# - Power and LED Control via RP2040 GPIO is in moonraker.conf

	# - https://github.com/TodWulff/V2.2526_Config/blob/main/V2.2526_Hardware/__WDM/V2.2526%20Wiring%20Diagram.pdf

	# 10.0.0.22
	# Pico usb-Klipper_rp2040_E66058388326382F-if00 https://i.imgur.com/uENqwNa.png

	# Xiao usb-Klipper_samd21g18a_80D0BB084134555020312E30202C18FF-if00 https://i.imgur.com/qeVSKRV.png
	# for Xiao, bin2uf2 Tool: https://github.com/lancaster-university/codal/blob/master/utils/uf2conv.py Usage https://i.imgur.com/oyn8TXP.png

	# Octopus usb-Klipper_stm32f446xx_26001F00115053424E363620-if00 https://i.imgur.com/Z2xTg2X.png

	## Voron Design VORON2.4 350mm BigTreeTech OctoPus V1.1 TMC2209 UART config

	_proc_end function=_info____printer
	
#--------------------------------------------------------------------


[gcode_macro _printer_vars]
# ; prototype: {% if printer["gcode_macro _printer_vars"].ptr_verb_debug %} M118 >>> _linadv_module_start Start <<< {% endif %}

variable_ptr_verb_error:			1 	# set to 0 to mute error reporting (um, errors. lol)
variable_ptr_verb_info:				0 # set to 0 to mute info reporting (has data)
variable_ptr_verb_status:			0 # set to 0 to mute status reporting (useful modes, update, etc.)
variable_ptr_verb_debug:			0 # set to 0 to mute debugs stuffs I added
variable_ptr_verb_modload:			0 # set to 0 to mute debugs stuffs I added

variable_ptr_verb_cfgload:			0 # ENABLE TO SEE CFG FILES LOADING AND THEIR LOAD SEQUENCE

variable_ptr_verb_speech:			0	# when 0 mutes speech feedback stuffs I added 

# these are for trace debug purposes
variable_ptr_verb_codeflow:			0	# when 0 mutes debugs stuffs I added (proc entry/exit)
# these are relevant only when the above is set to 1
variable_log_trace_to_file:			0	# set to 1 to log to the trace_debug.log file, else log to console
variable_show_proc_exit:			1	# 1 enables display of nesting depth backtics on procedure exit
# this is relevant only when the above is set to 1
variable_show_proc_exit_details:	1	# previous needs to be enabled for this to work, 1 displays function on exit, if passed

# similar module-specific verbosity settings contained in file | proc:
	# _kicky-probe.cfg | _klicky_vars
	# _debug_macros.cfg | _debug__tools_vars
	# _ercf_software.cfg | ercf_var
	# _nozzle_scrub.cfg | _scrub_vars
	# _led_effects.cfg | _ledeff_vars
	# _gcode_processing.cfg | _gcodeproc_vars
	# _linear_advance.cfg | _linadv_vars

variable_pause_retract_default:		1.0	# default retract amount at pause - is also default deretract amount at resume

variable_min_speed_factor:			10.0	#

gcode:

	_proc_start function=_printer_vars func_params='"{rawparams|string}"'

	#there is none, this is for broad variable access

	_proc_end function=_printer_vars
	
#--------------------------------------------------------------------

[delayed_gcode ____printer_start]
#description: Sets state flags for conditional use elsewhere.
initial_duration: 0.5							# have this at 0.5s as init code in _startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=____printer_start func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE=module____printer_loaded VALUE=1					#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=____printer_err_flag VALUE=0						#init error flag via persistent variable that this module is not in error
	
	_proc_end function=____printer_start
	
#--------------------------------------------------------------------

[printer]
kinematics: corexy
max_velocity: 500
max_accel: 5000
max_accel_to_decel: 5000
square_corner_velocity: 5
max_z_velocity: 50
max_z_accel: 350

#[printer]
#kinematics:
# The type of printer in use. This option may be one of: cartesian,
# corexy, corexz, hybrid_corexy, hybrid_corexz, rotary_delta, delta,
# polar, winch, or none. This
# parameter must be specified.
#max_velocity:
# Maximum velocity (in mm/s) of the toolhead (relative to the
# print). This parameter must be specified.
#max_accel:
# Maximum acceleration (in mm/s^2) of the toolhead (relative to the
# print). This parameter must be specified.
#max_accel_to_decel:
# A pseudo acceleration (in mm/s^2) controlling how fast the
# toolhead may go from acceleration to deceleration. It is used to
# reduce the top speed of short zig-zag moves (and thus reduce
# printer vibration from these moves). The default is half of
# max_accel.
#square_corner_velocity: 5.0
# The maximum velocity (in mm/s) that the toolhead may travel a 90
# degree corner at. A non-zero value can reduce changes in extruder
# flow rates by enabling instantaneous velocity changes of the
# toolhead during cornering. This value configures the internal
# centripetal velocity cornering algorithm# corners with angles
# larger than 90 degrees will have a higher cornering velocity while
# corners with angles less than 90 degrees will have a lower
# cornering velocity. If this is set to zero then the toolhead will
# decelerate to zero at each corner. The default is 5mm/s.


#############################################################################
# [] Includes
#############################################################################

# LOOK --> Reportedly, load order is a thing, so I must have gotten lucky.
# When mucking around, I was able to cause a repetative timer too close at startup
# I perceive it was related to svv, but that is speculation, admittedly.
# Anyways, be cognitive that altering the order may have implications... <-- LOOK


[include _tts.cfg]
[include mainsail.cfg]
[include _persistent_variables.cfg]
[include _console_response.cfg]


[include __mcus.cfg]
[include _io_defs.cfg]
[include _pico_expander.cfg]
[include _lcd_module.cfg]
# [include _lcd_tweaks.cfg]		# from Voron Docs - candidate for inclusion

#[include _pico_oled.cfg]		# Pico OLED display (for v0.1)
#[include _servo_test.cfg]		# testing for v0
#[include _buzzer_test.cfg]		# testing for v0
#[include _chamber_air.cfg]		# air quality stuffs

[include ___startup_autoexec.cfg]
[include _temp_capture.cfg]

[include _shell_command.cfg]
[include _host_control.cfg]
[include _service_control.cfg]
[include _hardware_control.cfg]
[include _cameras.cfg]
[include _git_repo_ops.cfg]
[include _somafm.cfg]

#[include _sys_load_validation.cfg]

[include _exclude_object.cfg]
[include _user_interaction.cfg]	# <-- chain loads _ui_test.cfg

[include _debug__tools.cfg]		# <-- includes scoped _blah_debug.cfgs
	# moved these to _debug__tools.cfg...
	# [include _debug_trace.cfg]
	# [include _debug_svv.cfg]
	# [include _debug_state.cfg]
	# [include _debug_gmove.cfg]
[include _debug_userlogs.cfg]		# macro based
 
[include _debug_userlogger.cfg]		# klipper module based
	
[include _gcode_buttons.cfg]
[include _led_effects.cfg]
[include _dotstar_leds.cfg]
[include _neopixel_leds.cfg]

[include _ercf_user_vars.cfg]
[include _ercf_hardware.cfg]	# <-- chains in _ercf_mcu_[...] - also this affects Xiao (gpio stops acting correctly) - something in ercf.py - using QT Py now...
[include _ercf_software.cfg]	# <-- chain loads _ercf_software_mods.cfg

[include _stepstick_config.cfg]
[include _sensors_heaters.cfg]
[include _steppers_printer.cfg]
[include _fans_cooling.cfg]
[include _gcode_macros.cfg]
[include _m300_sounds.cfg]		 # <-- chain loads gcode songs [/me rolls eyes]
[include _qgl_bedmesh.cfg]
[include _resonance_compensation.cfg]

[include _nozzle_scrub.cfg]
[include _klicky-probe.cfg]
#[include _z_calibration.cfg]

[include _linear_advance.cfg]
[include _hw_retract.cfg]
[include _gcode_arcs.cfg]
[include _park_procs.cfg]
[include _gcode_processing.cfg]

[include __print_start.cfg]
[include __print_pause.cfg]
[include __print_resume.cfg]
[include __print_cancel.cfg]
[include __print_end.cfg]

[include _corexy_gantry_speed_test.cfg]
[include _slicer_fixes.cfg]		# <-- temp work around attempt

[include _H2O_param_bounding.cfg]	# <-- in-print monitoring of H2O temps/rates/speeds and pausing/alerting on an escape
