#####################################################################
# _ercf_hardware - MCU-specific config - Pimoroni Tiny2040 INVERTED ORIENTATION!!!!!!
#####################################################################
[gcode_macro _info_ercf_hardware]
gcode:
# DON'T CHANGE SENSOR NAMES - HARDCODED IN ERCF.PY...

# Enraged Rabbit : Carrot Feeder config file for ERCF EASY BRD v1.1
# This config sample assumes two J6 jumpers are installed on 2-3 and 4-5, i.e. .[..][..] (ties tmc idx to gpio6 for sensorless homing/stall guard)
# https://shop.pimoroni.com/products/tiny-2040?variant=39560012300371
# ATTENTION!!!  THIS IS A 16-PIN DIP BOARD - WITH A NON-XIAO/NON-QT PY PIN LAYOUT - HEADERS MUST BE INSTALLED AND DONE SO IN AN INVERTED MANNER, WITH PINS 8 AND 9 CANTILEVERED AND HANGING IN SPACE
# SEE PAGE 2 OF THIS DOCUMENT https://github.com/TodWulff/V2.2526_Config/blob/main/V2.2526_Hardware/__WDM/Pimoroni%20Tiny2040%20Pinouts%20(incl%20inverted).pdf

# Line #s that need edits for new MCU: 17,26,33,42-45,59-60,71-75,91,101,135

[ercf]
encoder_pin: ^ercf:gpio29
encoder_resolution: 1.346348 # 1000 11

long_moves_speed: 80   # mm/s. Default value is 100mm/s.
long_moves_accel: 400  # mm/s². Default value is 400mm/s²
short_moves_speed: 40  # mm/s. Default value is 25mm/s.
short_moves_accel: 400 # mm/s². Default value is 400mm/s²

[duplicate_pin_override]
pins: ercf:gpio29, PG15

[tmc2209 manual_stepper gear_stepper]
#######################################################################################
### Filament Drive Gear Stepper Motor and Driver ######################################
#######################################################################################

uart_pin: ercf:gpio4
uart_address: 0
interpolate: True
run_current: 1.8
hold_current: 0.1
sense_resistor: 0.110
stealthchop_threshold: 0

[manual_stepper gear_stepper]
enable_pin: !ercf:gpio0
step_pin: ercf:gpio1
dir_pin: !ercf:gpio2
endstop_pin: ^ercf:gpio8			# MHz: Bogus (unused but needed by Klipper)

rotation_distance: 22.81048901638	# Bondtech 5mm Drive Gears
gear_ratio: 80:20
microsteps: 16
full_steps_per_rotation: 200		# 200 for 1.8 degree, 400 for 0.9 degree
velocity: 50						# default speed if move cmd sans speed
accel: 200							# default accel if move cmd sans accel

[tmc2209 manual_stepper selector_stepper]
#######################################################################################
### Color Selector Stepper Motor and Driver ###########################################
#######################################################################################

uart_pin: ercf:gpio4
diag_pin: ^ercf:gpio27				# Set to MCU pin connected to TMC DIAG pin for sensorless homing/stall guard

uart_address: 1
run_current: 0.6
hold_current: 0.1
interpolate: True
sense_resistor: 0.110
stealthchop_threshold: 5000			# 0
driver_SGTHRS: 64					# 255 is most sensitive value, 0 is least sensitive

[manual_stepper selector_stepper]
step_pin: ercf:gpio5
dir_pin: ercf:gpio6
enable_pin: !ercf:gpio3
endstop_pin: tmc2209_selector_stepper:virtual_endstop		# using the stallguard (via diag output) of the driver
# endstop_pin: ^ercf:gpio26									# MHz - if using NC contacts

rotation_distance: 40
microsteps: 16
full_steps_per_rotation: 200		# 200 for 1.8 degree, 400 for 0.9 degree
velocity: 100						# was 200
accel: 300							# was 600
position_endstop: 0
homing_speed: 100


[servo ercf_servo]
#######################################################################################
### Idler Gear Engagement Servo Motor #################################################
#######################################################################################

# pin: ercf:gpio28
# maximum_servo_angle: 150
# minimum_pulse_width: 0.0005
# maximum_pulse_width: 0.0025


#mod for SAVOX SH0255MG
pin: ercf:gpio28
maximum_servo_angle: 180
minimum_pulse_width: 0.00085
maximum_pulse_width: 0.00215


[filament_motion_sensor encoder_sensor]
#######################################################################################
### Selector Cart Filament Encoder ####################################################
#######################################################################################

switch_pin: ^ercf:gpio29	# this is a 'shared' signal - doubles as the ERCF encoder - see ercf_software.cfg
pause_on_runout: false		# pause is handled in ERCF_ENCODER_MOTION_ISSUE
detection_length: 4.0
extruder: extruder

runout_gcode:
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=encoder_sensor_runout {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	# slicer wipetower ops effs with the encoder so ignoring any issues during same...
	{% if svv.type|lower != "wipe tower" %}
		# fil_ecdr_rel
		ERCF_ENCODER_MOTION_ISSUE
	{% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=encoder_sensor_runout {% endif %}

insert_gcode:
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=encoder_sensor_insert {% endif %}

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object

	# slicer wipetower ops effs with the encoder so ignoring any issues during same...
	{% if svv.type|lower != "wipe tower" %}
		# fil_ecdr_prs
	{% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=encoder_sensor_insert {% endif %}

event_delay: 0.1
pause_delay: 0.5

#  [neopixel ercf_mcu]
#  pin: ercf:gpio12
#
#  [gcode_macro ercf_mcu_led_Off]
#  gcode:
#   	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ercf_mcu_led_Off {% endif %}
#  	SET_LED LED=ercf_mcu RED=0 GREEN=0 BLUE=0
#  	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ercf_mcu_led_Off {% endif %}
#
#  #----------------------------------------------------------------------------------
#
#  [gcode_macro ercf_mcu_led_Normal]
#  gcode:
#   	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ercf_mcu_led_Normal {% endif %}
#  	SET_LED LED=ercf_mcu RED=0.5 GREEN=0.5 BLUE=0.5
#  	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ercf_mcu_led_Normal {% endif %}
#
#  #----------------------------------------------------------------------------------
#
#  [gcode_macro ercf_mcu_led_Full]
#  gcode:
#   	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ercf_mcu_led_Full {% endif %}
#  	SET_LED LED=ercf_mcu RED=1 GREEN=1 BLUE=1
#  	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ercf_mcu_led_Full {% endif %}
#
#  #----------------------------------------------------------------------------------
#
#  [gcode_macro ercf_mcu_led_Red]
#  gcode:
#   	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ercf_mcu_led_Red {% endif %}
#  	SET_LED LED=ercf_mcu RED=0.5 GREEN=0 BLUE=0
#  	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ercf_mcu_led_Red {% endif %}
#
#  #----------------------------------------------------------------------------------
#
#  [gcode_macro ercf_mcu_led_Green]
#  gcode:
#   	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ercf_mcu_led_Green {% endif %}
#  	SET_LED LED=ercf_mcu RED=0 GREEN=0.5 BLUE=0
#  	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ercf_mcu_led_Green {% endif %}
#
#  #----------------------------------------------------------------------------------
#
#  [gcode_macro ercf_mcu_led_Blue]
#  gcode:
#   	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ercf_mcu_led_Blue {% endif %}
#  	SET_LED LED=ercf_mcu RED=0 GREEN=0 BLUE=0.5
#  	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ercf_mcu_led_Blue {% endif %}
#
#  #----------------------------------------------------------------------------------
#
#  [gcode_macro ercf_mcu_led_Orange]
#  gcode:
#   	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ercf_mcu_led_Orange {% endif %}
#  	SET_LED LED=ercf_mcu RED=0.3 GREEN=0.1 BLUE=0
#  	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ercf_mcu_led_Orange {% endif %}
#
#  #----------------------------------------------------------------------------------
#
#  [gcode_macro ercf_mcu_led_Test]
#  gcode:
#   	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=ercf_mcu_led_Test {% endif %}
#  	SET_LED LED=ercf_mcu RED=0.1 GREEN=0.1 BLUE=0.5
#  	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=ercf_mcu_led_Test {% endif %}
