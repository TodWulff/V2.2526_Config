#####################################################################
#  debug variables & startup module init
#####################################################################

[delayed_gcode _debug_macros_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_debug_macros_loaded func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _printer_vars"].ptr_verb_cfgload %} 
		M118 >>> _debug_macros.cfg Loaded. <<<
	{% endif %}
	_proc_end function=_debug_macros_loaded 

[gcode_macro _info_debug_macros]
gcode:


## Some examples:
##	{% if printer["gcode_macro _debug_vars"].gcode_state_debug %} M118 >>>>> RESTORE_GCODE_STATE {rawparams} <<<<< {% endif %}
##	SAVE_VARIABLE VARIABLE=ercf_calib_{params.TOOL|int} VALUE=1.0
##	SET_GCODE_VARIABLE MACRO=ERCF_CALIB_UNLOAD VARIABLE=ref VALUE={printer['ercf'].encoder_pos|float}

## The following are in ____printer.cfg
#	[gcode_macro _proc_start]
#	[gcode_macro _proc_end]
#	[gcode_macro _enable_trace_debug]
#	[gcode_macro _disable_trace_debug]

## ____printer.cfg macros to toggle debug stuff
#	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object
	
	######################### debug stuffs proc start
#	{% if svv.module_debug_loaded %} _enable_trace_debug REASON='"blah"' {% endif %}
#	{% if svv.module_debug_loaded %} _enable_gmove_debug REASON='"blah"' {% endif %}
#	{% if svv.module_debug_loaded %} _enable_save_var_debug REASON='"blah"' {% endif %}

	######################### debug stuffs proc end
#	{% if svv.module_debug_loaded %} _disable_save_var_debug {% endif %}	# make sure svv debug off
#	{% if svv.module_debug_loaded %} _disable_gmove_debug {% endif %}
#	{% if svv.module_debug_loaded %} _disable_trace_debug {% endif %}




## For trace purposes, instrument each macro with the following:
## if wrapping a FW proc, be sure to do a rename_existing: and then call the renamed FW proc inside the wrapper's gcode

# rename_existing: _BLAH_STOCK
# gcode:

	# ## proc trace entry instrument code
	# _proc_start function=MACRO_NAME func_params='"{rawparams|string}"'  

	# ## wrapper start
	# ... customized pre-execute macro gcode here ...	# do w/e one wishes here, as pre-execute wrapper gcode
	
	# _BLAH_STOCK {rawparams}							# call the organic fw proc by it's rename
	
	# ## wrapper end
	# ... customized post-execute macro gcode here ...	# do w/e one wishes here, as post-execute wrapper gcode

	# ## proc trace exit instrument code
	# _proc_end function=xxyyzz 


## File: _debug_macros.cfg (this file)
## Macro: _debug_vars
# debug_verb_error:				1	# set to 0 to mute error reporting (um, errors.  lol)
# debug_verb_info:				0	# set to 0 to mute info reporting (has data)
# debug_verb_status:			0	# set to 0 to mute status reporting (useful modes, update, etc.)
# debug_verb_debug:				0	# set to 0 to mute debugs stuffs I added
# debug_verb_codeflow:			0	# set to 0 to mute debugs stuffs I added (proc entry/exit)
# gmove_debug:					0	# start with gmove debug disabled
# save_var_debug:				0	# start with svv debug disabled
# gcode_state_debug:			0	# start with gcode_state debug disabled

## macros herein to toggle debug flags
# _enable_gcode_state_debug
# _disable_gcode_state_debug
# _enable_gmove_debug
# _disable_gmove_debug
# _enable_save_var_debug
# _disable_save_var_debug

## File: _ercf_software.cfg
## Macro: ERCF_VAR
# ercf_verb_error:				1	# set to 0 to mute error reporting (um, errors.  lol)
# ercf_verb_info:				0	# set to 0 to mute info reporting (has data)
# ercf_verb_status:				0	# set to 0 to mute status reporting (useful modes, update, etc.)
# ercf_verb_debug:				0	# set to 0 to mute debugs stuffs I added
# ercf_verb_codeflow:			0	# set to 0 to mute code flow stuffs I added (proc entry/exit)
# ercf_verb_loadunload:			0	# set to 0 to mute filament load/unload stuffs I added
# ercf_verb_motors:				0	# set to 0 to mute motor movement/dwell stuffs I added
# home_ercf_at_boot:			1
# test_ercf_load_seq_at_boot:	0
# test_ercf_load_seq_at_print:	0

## File: _gcode_processing.cfg
## Macro: _gcodeproc_vars
# gcodeproc_verb_error:			1	# set to 0 to mute error reporting (um, errors.  lol)
# gcodeproc_verb_info:			0	# set to 0 to mute info reporting (has data)
# gcodeproc_verb_status:		0	# set to 0 to mute status reporting (useful modes, update, etc.)
# gcodeproc_verb_debug:			0	# set to 0 to mute debugs stuffs I added (proc entry/exit)
# gcodeproc_verb_codeflow:		0	# set to 0 to mute code flow stuffs I added (proc entry/exit)
# dynamic_extrate_enable:		0
# dynamic_spdrate_enable:		0

## File: _klicky-probe.cfg
## Macro: _klicky_vars
# klicky_verb_error:			1	# set to 0 to mute error reporting (um, errors.  lol)
# klicky_verb_info:				0	# set to 0 to mute info reporting (has data)
# klicky_verb_status:			0	# set to 0 to mute status reporting (useful modes, update, etc.)
# klicky_verb_debug:			0	# set to 0 to mute debugs stuffs I added (proc entry/exit)
# klicky_verb_codeflow:			0	# set to 0 to mute debugs stuffs I added (proc entry/exit)

## File: _led_effects.cfg
## Macro: _ledeff_vars
# ledeff_verb_error:			1	# set to 0 to mute error reporting (um, errors.  lol)
# ledeff_verb_info:				0	# set to 0 to mute info reporting (has data)
# ledeff_verb_status:			0	# set to 0 to mute status reporting (useful modes, update, etc.)
# ledeff_verb_debug:			0	# set to 0 to mute debugs stuffs I added (proc entry/exit)

## File: _linear_advance.cfg
## Macro: _linadv_vars
# linadv_verb_error:			1	# set to 0 to mute error reporting (um, errors.  lol)
# linadv_verb_info:				0	# set to 0 to mute info reporting (has data)
# linadv_verb_status:			0	# set to 0 to mute status reporting (useful modes, update, etc.)
# linadv_verb_debug:			0	# set to 0 to mute debugs stuffs I added (proc entry/exit)
# linadv_verb_codeflow:			0	# set to 0 to mute code flow stuffs I added (proc entry/exit)
# dynamic_pa_enable:			0

## File: _nozzle_scrub.cfg
## Macro: _scrub_vars
# scrub_verb_error:				1	# set to 0 to mute error reporting (um, errors.  lol)
# scrub_verb_info:				0	# set to 0 to mute info reporting (has data)
# scrub_verb_status:			0	# set to 0 to mute status reporting (useful modes, update, etc.)
# scrub_verb_debug:				0	# set to 0 to mute debugs stuffs I added (proc entry/exit)
# scrub_verb_codeflow:			0	# set to 0 to mute debugs stuffs I added (proc entry/exit)

## File: ____printer.cfg
## Macro: _printer_vars
# ptr_verb_error:				1 	# set to 0 to mute error reporting (um, errors.  lol)
# ptr_verb_info:				0   # set to 0 to mute info reporting (has data)
# ptr_verb_status:				0   # set to 0 to mute status reporting (useful modes, update, etc.)
# ptr_verb_debug:				0   # set to 0 to mute debugs stuffs I added
# ptr_verb_modload:				0   # set to 0 to mute debugs stuffs I added
# ptr_verb_codeflow:			0   # set to 0 to mute debugs stuffs I added (proc entry/exit)
# show_proc_exit:				0	# 1 enables display of nesting depth btics on procedure exit
# show_proc_exit_details:		0	# previous needs to be enabled for this to work, 1 displays function on exit, if passed

[gcode_macro _debug_vars]
description: macro for debug variables

variable_debug_verb_error:		1 		# set to 0 to mute error reporting (um, errors.  lol)
variable_debug_verb_info:		0   	# set to 0 to mute info reporting (has data)
variable_debug_verb_status:		0   	# set to 0 to mute status reporting (useful modes, update, etc.)
variable_debug_verb_debug:		0   	# set to 0 to mute debugs stuffs I added

variable_debug_verb_codeflow:	0   	# set to 0 to mute debugs stuffs I added (proc entry/exit)

variable_gmove_debug:			0		# start with gmove debug disabled
variable_save_var_debug:		0		# start with svv debug disabled
variable_gcode_state_debug:		0		# start with gcode_state debug disabled

variable_force_svv_typing:		1		# if enabled, forces type conv from str to int/flt, if numbers are stringified

gcode:
	# there is none, this is for module variable use only

[delayed_gcode _debug_module_start]
#description:  Inits state flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5					# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_debug_module_start func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _debug_module_start Start <<< {% endif %}

	SAVE_VARIABLE VARIABLE=module_debug_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=debug_err_flag VALUE=0							#init error flag that this module is not in error

	{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _debug_module_start End <<< {% endif %}

	_proc_end function=_debug_module_start 

#####################################################################
#  Dump Parameter & Print Area Limits
#####################################################################

# Use:
# - DUMP_PARAMETER                            print all parameter expect configfile
# - DUMP_PARAMETER P='gcode_macro _TEST'    print the defined parameter group
# - DUMP_PARAMETER C='printer'                print the defined config values
# - DUMP_PARAMETER S='printer'                print the defined settings values
[gcode_macro DUMP_PARAMETERS]
description: Debug: Print entries of the printer object
gcode:
  {% set config = True if params.C or params.S else False %}
  {% set path = 'config'   if params.C 
           else 'settings' if params.S %}
  {% set search = params.C if params.C
             else params.S if params.S
             else params.P if params.P %}
  {% set out = [] %}
  {% for name1 in printer|sort %}
    {% if config %} ; print the searched printer.configfile[path] parameter
      {% if name1 is in ['configfile'] %}
        {% for name2 in printer[name1][path]|sort %}
          {% if name2 is in [search] %}
            {% for name3, value in printer[name1][path][name2].items()|sort %}
              {% set _dummy = out.append("printer.configfile.%s['%s'].%s = %s" % 
                          (path, name2, name3, value)) %}
            {% endfor %}
          {% endif %}
        {% endfor %}
      {% endif %}
    {% else %}
      {% for name2, value in printer[name1].items()|sort %} ; search for anything expext printer.configfile
        {% if search is not defined and name1 is not in ['configfile'] %} ; print all printer. parameter
          {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
        {% elif search is defined and name1 is in [search] %} ; print the searched printer. parameter
          {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
        {% endif %}
      {% endfor %}
    {% endif %}
  {% endfor %}
  {% if out|length > 0 %}
    {action_respond_info(out|join("\n"))}
  {% else %}
    {action_respond_info("Nothing found for \"DUMP_PARAMETER %s\"" % rawparams)}
  {% endif %}

# Use:
# - DUMP_PARAMETER                       print all parameter expect configfile
# - DUMP_PARAMETER P='gcode_macro _TEST' print the defined parameter group
# - DUMP_PARAMETER C='printer'           print the defined config values
# - DUMP_PARAMETER S='printer'           print the defined settings values
[gcode_macro DUMP_PARAMETER]
description: Debug: Print entries of the printer object
gcode:
  {% set config = True if params.C or params.S else False %}
  {% set path = 'config'   if params.C 
           else 'settings' if params.S %}
  {% set search = params.C if params.C
             else params.S if params.S
             else params.P if params.P %}
  {% set out = [] %}
  {% for name1 in printer|sort %}
    {% if config %} ; print the searched printer.configfile[path] parameter
      {% if name1 is in ['configfile'] %}
        {% for name2 in printer[name1][path]|sort %}
          {% if name2 is in [search] %}
            {% for name3, value in printer[name1][path][name2].items()|sort %}
              {% set _dummy = out.append("printer.configfile.%s['%s'].%s = %s" % 
                          (path, name2, name3, value)) %}
            {% endfor %}
          {% endif %}
        {% endfor %}
      {% endif %}
    {% else %}
      {% for name2, value in printer[name1].items()|sort %} ; search for anything expext printer.configfile
        {% if search is not defined and name1 is not in ['configfile'] %} ; print all printer. parameter
          {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
        {% elif search is defined and name1 is in [search] %} ; print the searched printer. parameter
          {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
        {% endif %}
      {% endfor %}
    {% endif %}
  {% endfor %}
  {% if out|length > 0 %}
    {action_respond_info(out|join("\n"))}
  {% else %}
    {action_respond_info("Nothing found for \"DUMP_PARAMETER %s\"" % rawparams)}
  {% endif %}

[gcode_macro SEARCH_VARS]
gcode:
	{ action_respond_info("-------------------------------------------------------") }
	{ action_respond_info("-------------------------------------------------------") }
	{ action_respond_info("-------------------------------------------------------") }
	
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}
	
	{ action_respond_info("-------------------------------------------------------") }
	{ action_respond_info("-------------------------------------------------------") }
	{ action_respond_info("-------------------------------------------------------") }

[gcode_macro DUMP_PRINT_AREA_LIMITS]
description: Debug: Print information about print volume and probeable area
gcode:
  {% set min = printer.toolhead.axis_minimum %}
  {% set max = printer.toolhead.axis_maximum %}
  {% set probe_offset = {'x' : printer.configfile.settings.probe.x_offset,
						 'y' : printer.configfile.settings.probe.y_offset} %}
  {% set probe_area = {'min' : {'x' : [min.x,(min.x-probe_offset.x)]|max,
								'y' : [min.y,(min.y-probe_offset.y)]|max},
					   'max' : {'x' : [max.x,(max.x-probe_offset.x)]|min,
								'y' : [max.y,(max.y-probe_offset.y)]|min}} %}
  {action_respond_info("Print Volume Limits:
						Min X:%7.1f, Y:%7.1f, Z:%7.1f
						Max X:%7.1f, Y:%7.1f, Z:%7.1f
						Probe Area Limits:
						Min X:%7.1f, Y:%7.1f
						Max X:%7.1f, Y:%7.1f" % 
	(min.x,min.y,min.z,max.x,max.y,max.z,probe_area.min.x,probe_area.min.y, probe_area.max.x,probe_area.max.y))}

#####################################################################
#  realtime save_var debug echo
#####################################################################

[gcode_macro SAVE_VARIABLE]
description: SAVE_VARIABLE, with console echo if so enabled
# does type conversion of numbers too, pulling them out of strings
# optional param RAW, if passed and != 0, bypasses the type conversion
rename_existing: _SAVE_VARIABLE_STOCK
gcode:

	_proc_start function=SAVE_VARIABLE func_params='"{rawparams|string}"'  

	{% set save_var = params.VARIABLE|lower %}			# lower case var names are required
	{% set save_val = params.VALUE %}
	{% set save_raw = params.RAW|default(0)|int %}

	{% if printer["gcode_macro _debug_vars"].force_svv_typing and save_raw == 0 %}

		## forcibly save numbers as numbers (int/float) and not within strings, 
		## even though passed numbers may be stringified
		{% if save_val|replace("\"","")|int|string == save_val|replace("\"","")|string %}		# test for int
			{% set svv_VALUE = save_val|replace("\"","")|int %}									# it's an int, so strip any string encapsulations
		{% elif save_val|replace("\"","")|float|string == save_val|replace("\"","")|string %}	# test for float
			{% set svv_VALUE = save_val|replace("\"","")|float %}								# it's a float, so strip any string encapsulations
		{% else %}																				# it's not a number
			{% set svv_VALUE = "'" + save_val|string + "'" %}									# so wrap in string encapsulation chars
		{% endif %}
	
	{% endif %}
	
	{% if printer["gcode_macro _debug_vars"].save_var_debug %} M118 _>_ _SAVE_VARIABLE_STOCK: VARIABLE={save_var} VALUE={svv_VALUE} _<_ {% endif %}

	_SAVE_VARIABLE_STOCK VARIABLE={save_var} VALUE={svv_VALUE}

	_proc_end function=SAVE_VARIABLE 

#####################################################################
#  realtime gcode move debug echo - use selectively...
#####################################################################

[gcode_macro G0]
description: G0, with console echo if enabled
rename_existing: G0.1
gcode:
	_proc_start function=G0 func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _debug_vars"].gmove_debug %} M118 G0 {rawparams|upper} {% endif %}
	G0.1 {rawparams}			# debating with the other me if this should be above conditional...
	_proc_end function=G0 

[gcode_macro G1]
description: G1, with console echo if enabled
rename_existing: G1.1
gcode:
	_proc_start function=G1 func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _debug_vars"].gmove_debug %} M118 G1 {rawparams|upper} {% endif %}
	G1.1 {rawparams}			# debating with the other me if this should be above conditional...
	_proc_end function=G1 
	
[gcode_macro G4]
description: G4 Delay, with console echo if enabled
rename_existing: G4.1
gcode:
	_proc_start function=G4 func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _debug_vars"].gmove_debug %} M118 G4 {rawparams|upper} {% endif %}
#	say S="Dwell"
	G4.1 {rawparams}			# debating with the other me if this should be above conditional...
	_proc_end function=G4 

[gcode_macro G10]
description: G10 Retract, with console echo if enabled
rename_existing: G10.1
gcode:
	_proc_start function=G10 func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _debug_vars"].gmove_debug %} M118 G10 {rawparams|upper} {% endif %}
	G10.1 {rawparams}			# debating with the other me if this should be above conditional...
	_proc_end function=G10 

[gcode_macro G11]
description: G11 Deretract, with console echo if enabled
rename_existing: G11.1
gcode:
	_proc_start function=G11 func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _debug_vars"].gmove_debug %} M118 G11 {rawparams|upper} {% endif %}
	G11.1 {rawparams}			# debating with the other me if this should be above conditional...
	_proc_end function=G11 

[gcode_macro M220]
description: M220 Speed Rate, with console echo if enabled
rename_existing: M220.1
gcode:
	_proc_start function=M220 func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _debug_vars"].gmove_debug %} M118 M220 {rawparams|upper} {% endif %}
	say_wait S="Speed Factor set to {params.S|int} percent"
	M220.1 {rawparams}			# debating with the other me if this should be above conditional...
	_proc_end function=M220 

[gcode_macro M221]
description: M221 Extrusion Rate, with console echo if enabled
rename_existing: M221.1
gcode:
	_proc_start function=M221 func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _debug_vars"].gmove_debug %} M118 M221 {rawparams|upper} {% endif %}
	say_wait S="Extrusion Factor set to {params.S|int} percent"
	M221.1 {rawparams}			# debating with the other me if this should be above conditional...
	_proc_end function=M221 

#####################################################################
#  Temp setting captures
#####################################################################

[gcode_macro M104]
description:  capture and set target HE temp, non-blocking
rename_existing: M104.1
gcode:

	_proc_start function=M104 func_params='"{rawparams|string}"'  

	SAVE_VARIABLE VARIABLE=extruder_temp_setting VALUE={params.S|int}
	save_variable VARIABLE=boot_extruder_temp VALUE={params.S|int}
	
	say_wait S="Extruder Temp set to {params.S|int}"

	M104.1 {rawparams}

	_proc_end function=M104 

[gcode_macro M106]
description:  capture and set PCF Setting
rename_existing: M106.1
gcode:

	_proc_start function=M106 func_params='"{rawparams|string}"'  

	SAVE_VARIABLE VARIABLE=pcf_setting VALUE={params.S|int}	# provisional
	save_variable VARIABLE=boot_pcf VALUE={params.S|int}	# provisional
	
	say_wait S="PCF set to {((params.S|int/255)*100)|int} percent"

	M106.1 {rawparams}

	_proc_end function=M106 

[gcode_macro M109]
description:  capture and set target HE temp, waiting for temp attainment
rename_existing: M109.1
gcode:

	_proc_start function=M109 func_params='"{rawparams|string}"'   

	SAVE_VARIABLE VARIABLE=extruder_temp_setting VALUE={params.S|int}
	save_variable VARIABLE=boot_extruder_temp VALUE={params.S|int}
	M109.1 {rawparams}
	
	say_wait S="Extruder Temp Hold Until {params.S|int}"

	_proc_end function=M109 

[gcode_macro M140]
description:  capture and set target heater_bed temp, non-blocking
rename_existing: M140.1
gcode:

	_proc_start function=M140 func_params='"{rawparams|string}"'  

	SAVE_VARIABLE VARIABLE=heater_bed_temp_setting VALUE={params.S|int}
	save_variable VARIABLE=boot_heater_bed_temp VALUE={params.S|int}

	say_wait S="Bed Temp set to {params.S|int}"

	M140.1 {rawparams}

	_proc_end function=M140 

[gcode_macro M190]
description:  capture and set target heater_bed temp, waiting for temp attainment
rename_existing: M190.1
gcode:

	_proc_start function=M190 func_params='"{rawparams|string}"'  

	SAVE_VARIABLE VARIABLE=heater_bed_temp_setting VALUE={params.S|int}
	save_variable VARIABLE=boot_heater_bed_temp VALUE={params.S|int}

	say_wait S="Bed Temp Hold Until {params.S|int}"

	M190.1 {rawparams} 

	_proc_end function=M190 

[gcode_macro M191.1]
description:  capture and set target chamber temp, waiting for temp attainment
variable_min_bed_tmp:		60
variable_min_he_tmp:		180
variable_min_chamb_tmp:		40
variable_max_chamb_tmp:		60
# param S = chamber heat temp setting
gcode:

	_proc_start function=M191.1 func_params='"{rawparams|string}"'  

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object
	{% set th = printer.toolhead %}									# set eazy accesss context for printer.toolhead object

	
	{% set S = params.S | default(0) | float %}

	# this is a fully blocking proc.  As such, we need to ensure that 
	# the relevant heaters are on - namely bed and extruder
	# and that the chamber temp setting is w/in reasonable bounds
	
#	M118 M191.1 S 	min:{min_chamb_tmp}		set:{S}		max:{max_chamb_tmp}
#	M118 Bed: min:{min_bed_tmp} 	set:{svv.heater_bed_temp_setting}	act:{printer.heater_bed.temperature}
#	M118 Ext: min:{min_he_tmp} 		set:{svv.extruder_temp_setting}		act:{printer.extruder.temperature}	

	{% if	S <= max_chamb_tmp							and
			S >= min_chamb_tmp							and
			svv.extruder_temp_setting >= min_he_tmp		and
			svv.heater_bed_temp_setting >= min_bed_tmp 
			%}
			
		SAVE_VARIABLE VARIABLE=chamber_temp_setting VALUE={params.S|int}
		M118 Waiting for Chamber to heat to {S}°C
		say_wait S="Chamber Temp Hold Until {S|int}"
		TEMPERATURE_WAIT SENSOR="temperature_fan Chamber" MINIMUM={S}
		M118 Chamber heated to {printer['temperature_fan Chamber'].temperature}°C.
		say_wait S="Chamber Temp Attained"

	{% else %}

		M118 Chamber Temp Params out of bounds - continuing...
		say_wait S="ATTENTION! Chamber Temp Bypass!"

	{% endif %}

	_proc_end function=M191.1 

[gcode_macro list_sensors]
gcode:
	M118 Sensor List:
  { action_respond_info(printer.heaters.available_heaters | join(', ')) }
  { action_respond_info(printer.heaters.available_sensors | join(', ')) }
	M118 -- Sensor List End --

[gcode_macro SET_HEATER_TEMPERATURE]
description:  capture and set target bed temp, waiting for temp attainment
rename_existing: _SET_HEATER_TEMPERATURE_STOCK
gcode:

	_proc_start function=SET_HEATER_TEMPERATURE func_params='"{rawparams|string}"'  

	SAVE_VARIABLE VARIABLE={params.HEATER|string|lower}_temp_setting VALUE={params.TARGET|int}
	save_variable VARIABLE=boot_{params.HEATER|string|lower}_temp VALUE={params.TARGET|int}
	_SET_HEATER_TEMPERATURE_STOCK {rawparams} 
	say_wait S="{params.HEATER|replace("heater_bed", "bed temp")|string|lower} set to {params.TARGET|int}"

	_proc_end function=SET_HEATER_TEMPERATURE 

#####################################################################
#  realtime gcode_state echo
#####################################################################

[gcode_macro SAVE_GCODE_STATE]
description: for debug purposes, and to ease resume pains...
rename_existing: _SAVE_GCODE_STATE_STOCK
gcode:

	_proc_start function=SAVE_GCODE_STATE func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _debug_vars"].gcode_state_debug %} M118 >>>>> SAVE_GCODE_STATE {rawparams} <<<<< {% endif %}
	save_variable VARIABLE=last_saved_gcode_state VALUE='"{params.NAME}"'
	_SAVE_GCODE_STATE_STOCK {rawparams}

	_proc_end function=SAVE_GCODE_STATE 

[gcode_macro RESTORE_GCODE_STATE]
description: for debug purposes
rename_existing: _RESTORE_GCODE_STATE_STOCK
gcode:

	_proc_start function=RESTORE_GCODE_STATE func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _debug_vars"].gcode_state_debug %} M118 >>>>> RESTORE_GCODE_STATE {rawparams} <<<<< {% endif %}
	save_variable VARIABLE=last_restored_gcode_state VALUE='"{params.NAME}"'
	
	{% if params.NAME != "PAUSE_STATE" %}
		_RESTORE_GCODE_STATE_STOCK {rawparams}
	{% else %}
		# _RESTORE_GCODE_STATE_STOCK NAME=PAUSE_STATE
		{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 _RESTORE_GCODE_STATE_STOCK SKIPPED {% endif %}
	{% endif %}

	_proc_end function=RESTORE_GCODE_STATE 

#####################################################################
#  TMC Debugging
#####################################################################

[gcode_macro M122]
description: dumps tmc_stepper status stuffs
gcode:

	_proc_start function=M122 func_params='"{rawparams|string}"'  

	M118
	M118 >>>> M122 TMC Debug Start <<<<
	M118

	M118 >>> stepper_x <<<
	M118
	DUMP_TMC STEPPER=stepper_x

	M118
	M118 >>> stepper_y <<<
	M118
	DUMP_TMC STEPPER=stepper_y

	M118
	M118 >>> stepper_z <<<
	M118
	DUMP_TMC STEPPER=stepper_z

	M118
	M118 >>> stepper_z1 <<<
	M118
	DUMP_TMC STEPPER=stepper_z1

	M118
	M118 >>> stepper_z2 <<<
	M118
	DUMP_TMC STEPPER=stepper_z2

	M118
	M118 >>> stepper_z3 <<<
	M118
	DUMP_TMC STEPPER=stepper_z3

	M118
	M118 >>> extruder <<<
	M118
	DUMP_TMC STEPPER=extruder

	M118
	M118 >>> selector_stepper <<<
	M118
	DUMP_TMC STEPPER=selector_stepper

	M118
	M118 >>> gear_stepper <<<
	M118
	DUMP_TMC STEPPER=gear_stepper

	M118
	M118 >>>> M122 TMC Debug End <<<<
	M118

	_proc_end function=M122 

[gcode_macro TMC_Debug_Dump_M122]
gcode:
	M122	# see previous proc
	
[gcode_macro _enable_gcode_state_debug]
description: used to enable save_var debug
gcode:

	_proc_start function=_enable_gcode_state_debug func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _enable_save_var_debug <<<<< {% endif %}
	SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=gcode_state_debug VALUE=1
	say_wait S="Gee Code State Debug Enabled"

	_proc_end function=_enable_gcode_state_debug 

[gcode_macro _disable_gcode_state_debug]
description: used to disable save_var debug
gcode:

	_proc_start function=_disable_gcode_state_debug func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _disable_save_var_debug <<<<< {% endif %}
	SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=gcode_state_debug VALUE=0
	say_wait S="Gee Code State Debug Disabled"

	_proc_end function=_disable_gcode_state_debug 

[gcode_macro _enable_gmove_debug]
description: used to enable gmove debug
gcode:

	_proc_start function=_enable_gmove_debug func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _enable_gmove_debug <<<<< {% endif %}
	SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=gmove_debug VALUE=1
	say_wait S="Gee Code Move Debug Enabled"

	_proc_end function=_enable_gmove_debug 

[gcode_macro _disable_gmove_debug]
description: used to disable gmove debug
gcode:

	_proc_start function=_disable_gmove_debug func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _disable_gmove_debug <<<<< {% endif %}
	SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=gmove_debug VALUE=0
	say_wait S="Gee Code Move Debug Disabled"

	_proc_end function=_disable_gmove_debug 

[gcode_macro _enable_save_var_debug]
description: used to enable save_var debug
gcode:

	_proc_start function=_enable_save_var_debug func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _enable_save_var_debug <<<<< {% endif %}
	SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=save_var_debug VALUE=1
	say_wait S="Save Variable Debug Enabled"

	_proc_end function=_enable_save_var_debug 

[gcode_macro _disable_save_var_debug]
description: used to disable save_var debug
gcode:

	_proc_start function=_disable_save_var_debug func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _disable_save_var_debug <<<<< {% endif %}
	SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=save_var_debug VALUE=0
	say_wait S="Save Variable Debug Disabled"

	_proc_end function=_disable_save_var_debug 

[gcode_macro _proc_start]
description:  for trace debug purposes - presents depth as leading back-tics
# passed params:
#	function=_some_macro_name
#	func_params='"{rawparams|string}"'		#<-- can have spaces (i.e. multiple paramaters) thus need to encapsulate as string
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} 

		{% set svv = printer.save_variables.variables %}					# set eazy accesss context for save_variables object
		
		_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE={svv.proc_depth + 1|int}	# increment depth counter

		{% set this1 = namespace(depth_indent = "`") %} 					# btic is proc_depth indicator
																			# using namespace so it can be manipulated in for loop

		{% for iter in range(svv.proc_depth|int) %}
			{% set this1.depth_indent = this1.depth_indent + "`" %}			# add a btic for each layer of nested code
		{% endfor %}

		{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %}
			{% set new_params = rawparams|replace("function=", "") %}		# strip function= from passed params 
			{% set new_params = new_params|replace("func_params=", "") %}	# strip func_params=
			{% set new_params = new_params|replace("'", "") %}				# strip ' portion of string encapsulation
			{% set new_params = new_params|replace("\"", "") %}				# strip " portion of string encapsulation
			M118 {this1.depth_indent ~ " " ~ new_params|upper}				# concatenate depth btics and (macro and params) and display in console
		{% endif %}
		
	{% endif %}

[gcode_macro _proc_end]
description:  for trace debug purposes - presents depth as leading back-tics
#	function=_some_macro_name
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} 

		{% set svv = printer.save_variables.variables %}						# set eazy accesss context for save_variables object

		{% set this1 = namespace(depth_indent = "`") %} 						# proc_depth
		
		_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE={svv.proc_depth - 1|int}	# decrement depth counter
		
		{% if svv.proc_depth|int < 0 %}
			_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE=0						# in theory, we should never get here...
		{% endif %}
		
		{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow or params.FORCE|default(0)|int %} 
		
			{% for iter in range(svv.proc_depth - 1|int) %}
				{% set this1.depth_indent = this1.depth_indent ~ "`" %}
			{% endfor %}
			
			{% if printer["gcode_macro _printer_vars"].show_proc_exit %} 
			
				{% if params.FUNCTION|string != "" and printer["gcode_macro _printer_vars"].show_proc_exit_details %} 
	#				M118 {this1.depth_indent ~ " " ~ params.FUNCTION ~ " End"}
	#				M118 {this1.depth_indent ~ " [" ~ params.FUNCTION|lower ~ "]"}
	#				M118 {this1.depth_indent ~ " [" ~ params.FUNCTION|lower ~ "] exit"}
					M118 {this1.depth_indent ~ " [" ~ params.FUNCTION|lower ~ "] done"}
				{% else %}
					M118 {this1.depth_indent}
				{% endif %}
				
				# print a null line if fully exited
				{% if this1.depth_indent == "`" %}
					M118
				{% endif %}
				
			{% endif %}

		{% endif %}

	{% endif %}

[gcode_macro _enable_trace_debug]
description: sets codeflow verbosity flag and inits depth counter
gcode:
	{% set entry_trace_enabled_flag = printer["gcode_macro _printer_vars"].ptr_verb_codeflow|default(0)|int %} # silence console emissions if already enabled

	SET_GCODE_VARIABLE MACRO=_printer_vars VARIABLE=ptr_verb_codeflow VALUE=1
		
	{% if entry_trace_enabled_flag == 0 %}	# emit a couple of blank lines to visually indicate state change
#		M118
		M118
	{% endif %}

	_proc_start function=_enable_trace_debug func_params='"{rawparams|string}"'
	
	_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE=1	# reset depth counter
	## note: proc depth counter may be out of sync until un-nested fully and then will get sync'd up
	## as, at time of enablement, when not previously tracked, depth is unknown...
	
	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _enable_trace_debug <<<<< {% endif %}
	say_wait S="Code Trace Debug Enabled"

	_proc_end function=_enable_trace_debug

[gcode_macro _disable_trace_debug]
description: sets codeflow verbosity flag and inits depth counter
gcode:

	{% set entry_trace_enabled_flag = printer["gcode_macro _printer_vars"].ptr_verb_codeflow|default(1)|int  %} # silence console emissions if already disabled

	_proc_start function=_disable_trace_debug func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _disable_trace_debug <<<<< {% endif %}
	SET_GCODE_VARIABLE MACRO=_printer_vars VARIABLE=ptr_verb_codeflow VALUE=0

	_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE=0	# reset depth counter
	## note, proc depth counter may be out of sync until un-nested fully and then will be sync'd up
	## due to, when not previously tracked, depth is unknown at time of enablement...

	say_wait S="Code Trace Debug Disabled"
	
	_proc_end function=_disable_trace_debug 
	
	{% if entry_trace_enabled_flag %}	# emit a couple of blank lines to visually indicate state change
		_proc_end function=_disable_trace_debug FORCE=1
		M118
#		M118
	{% endif %}
 
[gcode_macro enable_gcode_state_debug]
gcode:
	_enable_gcode_state_debug
	
[gcode_macro disable_gcode_state_debug]
gcode:
	_disable_gcode_state_debug
	
[gcode_macro enable_gmove_debug]
gcode:
	_enable_gmove_debug
	
[gcode_macro disable_gmove_debug]
gcode:
	_disable_gmove_debug
	
[gcode_macro enable_save_var_debug]
gcode:
	_enable_save_var_debug
	
[gcode_macro disable_save_var_debug]
gcode:
	_disable_save_var_debug
	
[gcode_macro enable_trace_debug]
gcode:
	_enable_trace_debug
	
[gcode_macro disable_trace_debug]
gcode:
	_disable_trace_debug
	
[gcode_macro enable_speech_feedback]
gcode:

	_proc_start function=enable_speech_feedback func_params='"{rawparams|string}"'  

	SET_GCODE_VARIABLE MACRO=_printer_vars VARIABLE=ptr_verb_speech VALUE=1
	say S="Hi there"

	_proc_end function=enable_speech_feedback 
	
[gcode_macro disable_speech_feedback]
gcode:

	_proc_start function=disable_speech_feedback func_params='"{rawparams|string}"'  

	say S="Good bye"
	SET_GCODE_VARIABLE MACRO=_printer_vars VARIABLE=ptr_verb_speech VALUE=0

	_proc_end function=disable_speech_feedback 
	
