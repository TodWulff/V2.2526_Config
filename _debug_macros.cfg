#####################################################################
#  debug variables & startup module init
#####################################################################
[gcode_macro _debug_vars]
description: macro for debug variables

variable_debug_verb_error:	1 		# set to 0 to mute error reporting (um, errors.  lol)
variable_debug_verb_info:	1   	# set to 0 to mute info reporting (has data)
variable_debug_verb_status:	0   	# set to 0 to mute status reporting (useful modes, update, etc.)
variable_debug_verb_debug:	1   	# set to 0 to mute debugs stuffs I added (proc entry/exit)

variable_gmove_debug:		0		# start with gmove debug disabled
variable_save_var_debug:	0		# start with svv debug disabled
variable_gcode_state_debug:	0		# start with gcode_state debug disabled

gcode:
	# there is none, this is for module variable use only

[delayed_gcode _debug_module]
#description:  Inits state flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5							# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _debug_module_start Start <<< {% endif %}

	SAVE_VARIABLE VARIABLE=module_debug_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=debug_err_flag VALUE=0							#init error flag that this module is not in error

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _debug_module_start End <<< {% endif %}

#####################################################################
#  Dump Parameter & Print Area Limits
#####################################################################

# Use:
# - DUMP_PARAMETER							print all parameter expect configfile
# - DUMP_PARAMETER P='gcode_macro _TEST'	print the defined parameter group
# - DUMP_PARAMETER C='printer'				print the defined config values
# - DUMP_PARAMETER S='printer'				print the defined settings values
[gcode_macro DUMP_PARAMETER]
description: Debug: Print entries of the printer object
gcode:
  {% set config = True if params.C or params.S else False %}
  {% set path = 'config'   if params.C 
		   else 'settings' if params.S %}
  {% set search = params.C if params.C
			 else params.S if params.S
			 else params.P if params.P %}
  {% set out = [] %}
  {% for name1 in printer|sort %}
	{% if config %} ; print the searched printer.configfile[path] parameter
	  {% if name1 is in ['configfile'] %}
		{% for name2 in printer[name1][path]|sort %}
		  {% if name2 is in [search] %}
			{% for name3, value in printer[name1][path][name2].items()|sort %}
			  {% set _dummy = out.append("printer.configfile.%s['%s'].%s = %s" % 
						  (path, name2, name3, value)) %}
			{% endfor %}
		  {% endif %}
		{% endfor %}
	  {% endif %}
	{% else %}
	  {% for name2, value in printer[name1].items()|sort %} ; search for anything expext printer.configfile
		{% if search is not defined and name1 is not in ['configfile'] %} ; print all printer. parameter
		  {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
		{% elif search is defined and name1 is in [search] %} ; print the searched printer. parameter
		  {% set _dummy = out.append("printer['%s'].%s = %s" % (name1, name2, value)) %}
		{% endif %}
	  {% endfor %}
	{% endif %}
  {% endfor %}
  {% if out|length > 0 %}
	{action_respond_info(out|join("\n"))}
  {% else %}
	{action_respond_info("Nothing found for \"DUMP_PARAMETER %s\"" % rawparams)}
  {% endif %}

[gcode_macro DUMP_PRINT_AREA_LIMITS]
description: Debug: Print information about print volume and probeable area
gcode:
  {% set min = printer.toolhead.axis_minimum %}
  {% set max = printer.toolhead.axis_maximum %}
  {% set probe_offset = {'x' : printer.configfile.settings.probe.x_offset,
						 'y' : printer.configfile.settings.probe.y_offset} %}
  {% set probe_area = {'min' : {'x' : [min.x,(min.x-probe_offset.x)]|max,
								'y' : [min.y,(min.y-probe_offset.y)]|max},
					   'max' : {'x' : [max.x,(max.x-probe_offset.x)]|min,
								'y' : [max.y,(max.y-probe_offset.y)]|min}} %}
  {action_respond_info("Print Volume Limits:
						Min X:%7.1f, Y:%7.1f, Z:%7.1f
						Max X:%7.1f, Y:%7.1f, Z:%7.1f
						Probe Area Limits:
						Min X:%7.1f, Y:%7.1f
						Max X:%7.1f, Y:%7.1f" % 
	(min.x,min.y,min.z,max.x,max.y,max.z,probe_area.min.x,probe_area.min.y, probe_area.max.x,probe_area.max.y))}

#####################################################################
#  realtime save_var debug echo
#####################################################################

[gcode_macro _enable_save_var_debug]
description: used to enable save_var debug
gcode:
	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _enable_save_var_debug <<<<< {% endif %}
	SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=save_var_debug VALUE=1

[gcode_macro _disable_save_var_debug]
description: used to disable save_var debug
gcode:
	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _disable_save_var_debug <<<<< {% endif %}
	SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=save_var_debug VALUE=0

[gcode_macro SAVE_VARIABLE]
description: SAVE_VARIABLE, with console echo if so enabled
rename_existing: SAVE_VARIABLE_STOCK
gcode:
	{% if printer["gcode_macro _debug_vars"].save_var_debug %} M118 SAVE_VARIABLE {rawparams} {% endif %}
	SAVE_VARIABLE_STOCK {rawparams}			# debating with the other me if this should be above conditional...

#####################################################################
#  realtime gcode move debug echo - use selectively...
#####################################################################

[gcode_macro _enable_gmove_debug]
description: used to enable gmove debug
gcode:
	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _enable_gmove_debug <<<<< {% endif %}
	SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=gmove_debug VALUE=1

[gcode_macro _disable_gmove_debug]
description: used to disable gmove debug
gcode:
	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _disable_gmove_debug <<<<< {% endif %}
	SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=gmove_debug VALUE=0

[gcode_macro G0]
description: G0, with console echo if enabled
rename_existing: G0.1
gcode:
	{% if printer["gcode_macro _debug_vars"].gmove_debug %} M118 G0 {rawparams|upper} {% endif %}
	G0.1 {rawparams}			# debating with the other me if this should be above conditional...

[gcode_macro G1]
description: G1, with console echo if enabled
rename_existing: G1.1
gcode:
	{% if printer["gcode_macro _debug_vars"].gmove_debug %} M118 G1 {rawparams|upper} {% endif %}
	G1.1 {rawparams}			# debating with the other me if this should be above conditional...

#####################################################################
#  Temp setting captures
#####################################################################

[gcode_macro M104]
description:  capture and set target HE temp
rename_existing: M104.1
gcode:
	SAVE_VARIABLE VARIABLE=extruder_temp_setting VALUE={params.S|int}
	M104.1 {rawparams}

[gcode_macro M109]
description:  capture and set target HE temp, waiting for temp attainment
rename_existing: M109.1
gcode:
	SAVE_VARIABLE VARIABLE=extruder_temp_setting VALUE={params.S|int}
	M109.1 {rawparams}

[gcode_macro M140]
description:  capture and set target heater_bed temp
rename_existing: M140.1
gcode:
	SAVE_VARIABLE VARIABLE=heater_bed_temp_setting VALUE={params.S|int}
	M140.1 {rawparams}

[gcode_macro M190]
description:  capture and set target heater_bed temp, waiting for temp attainment
rename_existing: M190.1
gcode:
	SAVE_VARIABLE VARIABLE=heater_bed_temp_setting VALUE={params.S|int}
	M190.1 {rawparams} 

[gcode_macro SET_HEATER_TEMPERATURE]
description:  capture and set target bed temp, waiting for temp attainment
rename_existing: SET_HEATER_TEMPERATURE_A
gcode:
	SAVE_VARIABLE VARIABLE={params.HEATER|string}_temp_setting VALUE={params.TARGET|int}
	SET_HEATER_TEMPERATURE_A {rawparams} 

#####################################################################
#  realtime gcode_state echo
#####################################################################

[gcode_macro _enable_gcode_state_debug]
description: used to enable save_var debug
gcode:
	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _enable_save_var_debug <<<<< {% endif %}
	SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=gcode_state_debug VALUE=1

[gcode_macro _disable_gcode_state_debug]
description: used to disable save_var debug
gcode:
	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _disable_save_var_debug <<<<< {% endif %}
	SET_GCODE_VARIABLE MACRO=_debug_vars VARIABLE=gcode_state_debug VALUE=0

[gcode_macro SAVE_GCODE_STATE]
description: for debug purposes, and to ease resume pains...
rename_existing: _SAVE_GCODE_STATE
gcode:
	{% if printer["gcode_macro _debug_vars"].gcode_state_debug %} M118 >>>>> SAVE_GCODE_STATE {rawparams} <<<<< {% endif %}
	save_variable VARIABLE=last_saved_gcode_state VALUE='"{params.NAME}"'
	_SAVE_GCODE_STATE {rawparams}

[gcode_macro RESTORE_GCODE_STATE]
description: for debug purposes
rename_existing: _RESTORE_GCODE_STATE
gcode:
	{% if printer["gcode_macro _debug_vars"].gcode_state_debug %} M118 >>>>> RESTORE_GCODE_STATE {rawparams} <<<<< {% endif %}
	_RESTORE_GCODE_STATE {rawparams}

#####################################################################
#  TMC Debugging
#####################################################################

[gcode_macro M122]
description: dumps tmc_stepper status stuffs
gcode:
	M118
	M118 >>>> M122 TMC Debug Start <<<<
	M118

	M118 >>> stepper_x <<<
	M118
	DUMP_TMC STEPPER=stepper_x

	M118
	M118 >>> stepper_y <<<
	M118
	DUMP_TMC STEPPER=stepper_y

	M118
	M118 >>> stepper_z <<<
	M118
	DUMP_TMC STEPPER=stepper_z

	M118
	M118 >>> stepper_z1 <<<
	M118
	DUMP_TMC STEPPER=stepper_z1

	M118
	M118 >>> stepper_z2 <<<
	M118
	DUMP_TMC STEPPER=stepper_z2

	M118
	M118 >>> stepper_z3 <<<
	M118
	DUMP_TMC STEPPER=stepper_z3

	M118
	M118 >>> extruder <<<
	M118
	DUMP_TMC STEPPER=extruder

	M118
	M118 >>> selector_stepper <<<
	M118
	DUMP_TMC STEPPER=selector_stepper

	M118
	M118 >>> gear_stepper <<<
	M118
	DUMP_TMC STEPPER=gear_stepper

	M118
	M118 >>>> M122 TMC Debug End <<<<
	M118
	