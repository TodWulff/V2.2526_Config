#####################################################################
# 	_debug_userlogs 
#####################################################################
# instantiate 1+ log files so user can log printer events thereto.
# employing logrotate to support programmatic rollover, etc.

[userlogger]
# enables and configures the extras module userlogger.py

# This requires the userlogger.py python module file being placed in .../klippy/extras
# ended up adopting an approach to use logrotater that is installed by default on the klipper hosts I've used so far.

# in the event not all 5 logs are intending to be used, user is to still provide all 10 parameters as reflected below, else klipper/module will bork

cmpst_log_filename:	~/printer_data/logs/user_cmpst.log	# composite log file which get a log entry from each of the discrete logs
cmpst_log_format:	'%(asctime)s: %(message)s'			# level is moot - everything sent is logged - sub log module automatically prepended to %(message)

trace_log_filename:	~/printer_data/logs/user_trace.log	# discrete log file - effect log entry with TRACE_LOG MSG="Trace User Log Test Message"
trace_log_format:	'%(asctime)s: %(message)s'			# level is moot - everything sent is logged

savar_log_filename:	~/printer_data/logs/user_savar.log	# discrete log file - effect log entry with SAVAR_LOG MSG="SaVar User Log Test Message"
savar_log_format:	'%(asctime)s: %(message)s'			# level is moot - everything sent is logged

state_log_filename:	~/printer_data/logs/user_state.log	# discrete log file - effect log entry with STATE_LOG MSG="State User Log Test Message"
state_log_format:	'%(asctime)s: %(message)s'			# level is moot - everything sent is logged

gmove_log_filename:	~/printer_data/logs/user_gmove.log	# discrete log file - effect log entry with GMOVE_LOG MSG="gMove User Log Test Message"
gmove_log_format:	'%(asctime)s: %(message)s'			# level is moot - everything sent is logged

#--------------------------------------------------------------------

[delayed_gcode _debug_userlogs_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_debug_userlogs_loaded func_params='"{rawparams|string}"'
	_module_loaded MODULE=_debug_userlogs
	_proc_end function=_debug_userlogs_loaded

#--------------------------------------------------------------------

[gcode_macro _info_debug_userlogs]
gcode:

# todo - write up on module's purpose/function/implementation/use
# see user_interaction for an example of intended use

#in user macros, affect a log entry by use of the kulog command
#log_gmove S="G0 {rawparams|upper}"
#ulog log_file S="log entry"		
	
#--------------------------------------------------------------------

[gcode_macro _debug_userlogs_vars]
description: macro for _debug_userlogs variables

gcode:

	_proc_start function=_debug_userlogs_vars func_params='"{rawparams|string}"'

	# there is none, this is for module variable use only

	_proc_end function=_debug_userlogs_vars

#--------------------------------------------------------------------

[delayed_gcode _debug_userlogs_module_start]
#description: Sets module-specific state flags for conditional use elsewhere.
initial_duration: 0.5							# have this at 0.5s as init code in _startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_debug_userlogs_module_start func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE=module_debug_userlogs_loaded VALUE=1					#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_debug_userlogs_err_flag VALUE=0						#init error flag via persistent variable that this module is not in error

	_proc_end function=_debug_userlogs_module_start
	
#--------------------------------------------------------------------

[gcode_macro log_gmove]
description: wrapper around module proc for logging purposes
# I was too deep down the rabbit hole - logging logger activity...
gcode:

	#_proc_start function=log_gmove func_params='"{rawparams|string}"'

	GMOVE_LOG MSG='{params.S}'

	#_proc_end function=log_gmove

#--------------------------------------------------------------------
[gcode_macro log_trace]
description: wrapper around module proc for logging purposes
# I was too deep down the rabbit hole - logging logger activity...
gcode:

# RECURSION	... 	_proc_start function=log_trace func_params='"{rawparams|string}"'

	TRACE_LOG MSG='{params.S}'

# RECURSION	... 	_proc_end function=log_trace

#--------------------------------------------------------------------
[gcode_macro log_savar]
description: wrapper around module proc for logging purposes
# I was too deep down the rabbit hole - logging logger activity...
gcode:

	#_proc_start function=log_svv func_params='"{rawparams|string}"'

	SAVAR_LOG MSG='{params.S}'

	#_proc_end function=log_svv

#--------------------------------------------------------------------
[gcode_macro log_state]
description: wrapper around module proc for logging purposes
# I was too deep down the rabbit hole - logging logger activity...
gcode:

	#_proc_start function=log_state func_params='"{rawparams|string}"'

	STATE_LOG MSG='{params.S}'

	#_proc_end function=log_state

#--------------------------------------------------------------------

[gcode_shell_command user_log_rotate]
# the script below leans on log rotate which requires sudo priv
# OMG, see the script file for the toils and steps I took to get this working
#command: sudo logrotate -v -f /etc/logrotate.d/klipper_userlogs
#command: sh rotate_klipper_userlogs
command: sh /home/pi/printer_data/config/rotate_klipper_userlogs.sh
timeout: 180
verbose: false

#--------------------------------------------------------------------

[gcode_macro rotate_logs_KLIPPER_RESTART]
# this is a manual rotation macro and the script below forces a klipper restart
# intend to toss a confirmation dialog up to the user, to prevent errorneous stroke
# fucking up a print.
# Also, be advised that the automatic logrotation scripts only advise user that the logs
# were rotated via console emission (echo to klippy serial port) so that an automatic
# rotation doesn't cause a klipper restart - would majorly suck to have that happen
# mid-print, especially somewhere in a big print...
gcode:

	_proc_start function=rotate_logs_(KLIPPER_RESTART) func_params='"{rawparams|string}"'

	{% set temp_ui_prompt = 
							"<font color=orange face=arial size=1>" ~
							"Manual Rotation of the User Logs will impute a soft Klipper restart.<BR>" ~
							"</font><font color=Khaki face=arial size=1>" ~
							"CANCEL/NO buttons Aborts. Any other UI input button to Rotate." ~
							"</font>"
							%}

	get_user_input prompt="{temp_ui_prompt}" RMDR_PERIOD=60 TYPE=str RCVR_MACRO=rotate_logs_continue TO_PERIOD=60 TO_CYCL_DEF=0 TO_RESP_DEF="CANCEL"


	_proc_end function=rotate_logs_(KLIPPER_RESTART)

#--------------------------------------------------------------------
[gcode_macro rotate_logs_continue]
description: UI response receiver proc for user to affirm/cancel a manual rotation/restart event
gcode:

	_proc_start function=rotate_logs_continue func_params='"{rawparams|string}"'
	
	# this seems way excessive and, obviously, I don't have a good grasp on parameter passing/encapsulation/etc.
	{% if 
			params.UI_INPUT|string|upper == CANCEL or
			params.UI_INPUT|string|upper == "CANCEL" or
			params.UI_INPUT|string|upper == '"CANCEL"' or
			params.UI_INPUT|string|upper == 'CANCEL' or
			params.UI_INPUT|string|upper == NO or
			params.UI_INPUT|string|upper == "NO" or
			params.UI_INPUT|string|upper == '"NO"' or
			params.UI_INPUT|string|upper == 'NO'
		%}
		# M118 Manual Log Rotation Canceled.
		say_wait S="Manual Log Rotation Canceled"
	{% else %}

		TRACE_LOG MSG="Rotating Log File"
		GMOVE_LOG MSG="Rotating Log File"
		SAVAR_LOG MSG="Rotating Log File"
		STATE_LOG MSG="Rotating Log File"

		RUN_SHELL_CMD CMD=user_log_rotate # nixed RESTART OF KLIPPER IFO giving user opportunity to not RESTART
		
		{% set temp_ui_prompt = "<font color=orange face=arial size=1>" ~
							"Manual User Log rotation presumably finished.<BR>" ~
							"If no errors, a Klipper RESTART is recommended.<BR>" ~
							"</font><font color=Khaki face=arial size=1>" ~
							"CANCEL/NO buttons Abort. Any other UI input button to RESTART." ~
							"</font>"
						%}

		GET_USER_INPUT_DELAY DELAY=1.5 prompt="{temp_ui_prompt}" RMDR_PERIOD=60 TYPE=str RCVR_MACRO=rotate_logs_finish TO_PERIOD=60 TO_CYCL_DEF=0 TO_RESP_DEF="CANCEL"

	{% endif %}

	_proc_end function=rotate_logs_continue

#--------------------------------------------------------------------

[gcode_macro rotate_logs_finish]
description: UI response receiver proc for user to affirm/cancel a manual rotation/restart event
gcode:

	_proc_start function=rotate_logs_finish func_params='"{rawparams|string}"'
	
	# this seems way excessive and, obviously, I don't have a good grasp on parameter passing/encapsulation/etc.
	{% if 
			params.UI_INPUT|string|upper == CANCEL or
			params.UI_INPUT|string|upper == "CANCEL" or
			params.UI_INPUT|string|upper == '"CANCEL"' or
			params.UI_INPUT|string|upper == 'CANCEL' or
			params.UI_INPUT|string|upper == NO or
			params.UI_INPUT|string|upper == "NO" or
			params.UI_INPUT|string|upper == '"NO"' or
			params.UI_INPUT|string|upper == 'NO'
		%}
		# M118 Manual Log Rotation Canceled.
		say_wait S="NOT Restarting Klipper.<BR>Please do so as soon as practical,<BR>especially if logs were rotated..."
	{% else %}

		RESTART

	{% endif %}

	_proc_end function=rotate_logs_finish

#--------------------------------------------------------------------

[gcode_macro Show_LogTail_Links]
description: this leans on custom url protocol handlers being instantiated on the client
# for windows clients, see top answer here: 
# https://stackoverflow.com/questions/80650/how-do-i-register-a-custom-url-protocol-in-windows
# this worked for me in Chrome (24 MAR 2023)
# for linux client, I defer to others to advise.
gcode:

	_proc_start function=Show_LogTail_Links func_params='"{rawparams|string}"'
	
	{% set emission =	"<font color=skyblue face=arial size=1>" ~
							"Click the following links to open local ssh session(s):<BR>" ~
							"<a target=_blank style=color:khaki face=arial size=1 href=tailcmpst://tail-f-n40/home/pi/printer_data/logs/user_cmpst.log>" ~
								"Composite" ~                                      
								"</a>" ~                                               
							", " ~                                                   
							"<a target=_blank style=color:khaki face=arial size=1 href=tailtrace://tail-f-n40/home/pi/printer_data/logs/user_trace.log>" ~
								"Code Trace" ~                                         
								"</a>" ~                                               
							", " ~                                                   
							"<a target=_blank style=color:khaki face=arial size=1 href=tailsavar://tail-f-n40/home/pi/printer_data/logs/user_savar.log>" ~
								"Saved Var" ~                                 
								"</a>" ~                                               
							", " ~                                                   
							"<a target=_blank style=color:khaki face=arial size=1 href=tailgmove://tail-f-n40/home/pi/printer_data/logs/user_gmove.log>" ~
								"Gcode Move" ~                                     
								"</a>" ~                                               
							", " ~                                                   
							"<a target=_blank style=color:khaki face=arial size=1 href=tailstate://tail-f-n40/home/pi/printer_data/logs/user_state.log>" ~
								"Gcode State" ~
								"</a>" ~
							"</font>"
						%}

	M118 {emission}

	_proc_end function=Show_LogTail_Links

#--------------------------------------------------------------------

[gcode_macro Show_SSH_Links]
description: generates hyperlinks in console to ease user accessing klipper host
# provides ssh links only - couldn't get it to be more expressive except as how addressed in previous proc
gcode:

	_proc_start function=Show_SSH_Links func_params='"{rawparams|string}"'
	
	{% set emission =	"<font color=skyblue face=arial size=1>" ~
							"Click the following links to open local ssh session(s):<BR>" ~
							"<a target=_blank style=color:khaki face=arial size=1 href=ssh://pi@10.0.0.22:22 tail -f /home/pi/printer_data/logs/user_cmpst.log>" ~
								"Composite" ~                                      
								"</a>" ~                                               
							", " ~                                                   
							"<a target=_blank style=color:khaki face=arial size=1 href=ssh://pi@10.0.0.22:22 tail -f /home/pi/printer_data/logs/user_trace.log>" ~
								"Code Trace" ~                                          
								"</a>" ~                                               
							", " ~                                                   
							"<a target=_blank style=color:khaki face=arial size=1 href=ssh://pi@10.0.0.22:22 tail -f /home/pi/printer_data/logs/user_savar.log>" ~
								"Saved Var" ~                                 
								"</a>" ~                                               
							", " ~                                                   
							"<a target=_blank style=color:khaki face=arial size=1 href=ssh://pi@10.0.0.22:22 tail -f /home/pi/printer_data/logs/user_gmove.log>" ~
								"Gcode Move" ~                                     
								"</a>" ~                                               
							", " ~                                                   
							"<a target=_blank style=color:khaki face=arial size=1 href=ssh://pi@10.0.0.22:22 tail -f /home/pi/printer_data/logs/user_state.log>" ~
								"Gcode State" ~
								"</a>" ~
							"</font>"
						%}

	M118 {emission}

	_proc_end function=Show_SSH_Links

#--------------------------------------------------------------------

[gcode_macro test_user_logging_module]
description: for testing

# note can tail -f on the discrete logs
# also can tail -f on the user_cmpst.log which is composite
# of these four discrete logs.

gcode:

	_proc_start function=test_user_logging_module func_params='"{rawparams|string}"'
	
	#these are organic logger calls
	#above log_blahs are these wrapped with trace debug calls
	#might be too much granularity in the logging - lol
	
	TRACE_LOG MSG="Trace User Log Test Message"
	GMOVE_LOG MSG="gMove User Log Test Message"
	SAVAR_LOG MSG="SaVar User Log Test Message"
	STATE_LOG MSG="State User Log Test Message"

	_proc_end function=test_user_logging_module

