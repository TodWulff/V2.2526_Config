#--------------------------------------------------------------------
# _blah.cfg gcode 'module'
# https://github.com/TodWulff/blah <-- repo documentation placeholder
#--------------------------------------------------------------------

## sub-module includes:
# [include _blah.cfg]

#--------------------------------------------------------------------

[delayed_gcode XXXXXXXXXX_loaded]
initial_duration: 4.501
gcode:
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=XXXXXXXXXX_loaded func_params='"{rawparams|string}"'  {% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_cfgload %} 
		M118 >>> XXXXXXXXXX Loaded. <<<
		say "XXXXXXXXXX Loaded"
	{% endif %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=XXXXXXXXXX_loaded {% endif %}

#--------------------------------------------------------------------

[gcode_macro _INFO_blah_module]				# module prerequisites/documentation/notes/examples/etc.
# remember to edit the instrumentation code function=BLAH below
# remember to edit the module_blah_loaded & module_blah_err_flag var names below

gcode:
# THIS _info_blah_module macro is for module documentation ony - isn't intended to be called - no runnable gcode here

# [DOCUMENT THE MODULE HERE...]
# Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nunc ex orci, auctor ut mauris eu, iaculis laoreet sem.
# Aliquam erat volutpat. Aliquam dignissim purus ex, sit amet molestie lectus tincidunt sed. Ut vel tincidunt dolor,
# condimentum pulvinar justo. Ut felis orci, malesuada non justo in, eleifend egestas ipsum. Duis bibendum sapien 
# neque, quis vulputate metus bibendum non. Aenean nisl odio, sodales non vestibulum quis, facilisis quis sem.
# Praesent congue purus est. LMMFAO!

# Conditionally call this modules procs by use of the following template code:

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	{% if	svv.module_blah_loaded|int and
		not svv.module_blah_err_flag|int %}
#		some_blah_macro	# [included blah.cfg] module's proc to: short_blah_blurb
	{% endif %}


# /[DOCUMENT THE MODULE HERE...]

	# instrumentation code for macro trace purposes
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_INFO_blah_module func_params='"THIS SHOULD NOT HAPPEN...\n{rawparams|string}"'  {% endif %}

	# there is none - this module's code should not be called by other code

	# instrumentation code for macro trace purposes
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_INFO_blah_module {% endif %}


#--------------------------------------------------------------------

[delayed_gcode _blah_module_start]
#description: Sets module-specific state flags for conditional use elsewhere.
#be sure to add in any module-specific init into __startup_autoexec.cfg (i.e. module loaded, error, etc.)
# this should only be ran the one time at module loading and not called from elsewhere
# remember to edit the instrumentation code function=BLAH below
# remember to edit the module_blah_loaded & module_blah_err_flag var names below
initial_duration: 0.5							# have this delayed a bit as init code in _startup_autoexec.cfg runs at 0.1s after start
gcode:

	# instrumentation code for macro trace purposes
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_blah_module_start func_params='"{rawparams|string}"'  {% endif %}

	#_blah_somehelperproc	#calling of helper procs (macros..., either below or included)

	SAVE_VARIABLE VARIABLE=module_blah_loaded VALUE=1		# flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=module_blah_err_flag VALUE=0			# init error flag via persistent variable that this module is not in error
	# other module-specific initialization here (sample follows)
	#SAVE_VARIABLE VARIABLE=ui_input_to_cycl_def VALUE=-1	#internal decremented counter to force a default response in event of n timeouts.

	M118 >>> Blah Module Config Loaded <<<

	# instrumentation code for macro trace purposes
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_blah_module_start {% endif %}

#--------------------------------------------------------------------

[gcode_macro _blah_vars]						# base config default macro variables for the _blah module
description:  blah module variables init'd herein - use above module_start macro for persistent/global variable init
# remember to edit the instrumentation code function=BLAH below
# this macro should not be called by other code

# setup module variables here
# variable_blah_default_str:	"string value here"		# init some module specific string var(s) here
# variable_blah_default_val:	0							# init some module specific int|float var(s) here

gcode:
	# there is none - for 'blah module' variable use only

	# instrumentation code for macro trace purposes
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_blah_vars func_params='"THIS SHOULD NOT HAPPEN...\n{rawparams|string}"'  {% endif %}

	# instrumentation code for macro trace purposes
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_blah_vars {% endif %}

#--------------------------------------------------------------------

[delayed_gcode _blah_delayed_gcode_macro_template]
# description: template for module's delayed_gcode macros
# remember to edit the instrumentation code function=[BLAH] below
initial_duration: 0

# delayed_gcode doesn't support variables nor parameter passing, so need to use svv or other means for same

gcode:

	# instrumentation code for macro trace entry purposes
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_blah_delayed_gcode_macro_template func_params='"{rawparams|string}"'  {% endif %}

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	# do some blahy stuffs here - this could be used for one-time stuffss (like _blah_module_start above)
	# or for an interative looping construct - the UI module adopts this for checking for user input and
	# annunciating an awaiting user input bleeping every so often.

	# instrumentation code for macro trace exit purposes
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_blah_delayed_gcode_macro_template {% endif %}

#--------------------------------------------------------------------

[gcode_macro _blah_macro_template]
# description: template for module's gcode macros
# remember to edit the instrumentation code function=[BLAH] below

# gcode macros support variables and parameter passing - can use svv or other means for same, obv
# variable_blah_var: val 

gcode:

	# instrumentation code for macro trace entry purposes
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_blah_macro_template func_params='"{rawparams|string}"'  {% endif %}

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	# do some blahy stuffs here

	# instrumentation code for macro trace exit purposes
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_blah_macro_template {% endif %}

#--------------------------------------------------------------------


