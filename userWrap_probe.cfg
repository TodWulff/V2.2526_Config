#####################################################################
# _userWrap_probe
#####################################################################

[delayed_gcode _userWrap_probe_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_probe_loaded func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'
	_module_loaded MODULE=_userWrap_probe
	_proc_end function=_probe_loaded

#--------------------------------------------------------------------

[gcode_macro _info_userWrap_probe]
gcode:

# user config to wrap FW procs constained in probe.cfg

#--------------------------------------------------------------------

[gcode_macro _userWrap_probe_vars]
description: macro for _probe variables

gcode:

	_proc_start function=_probe_vars func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	# there is none, this is for module variable use only

	_proc_end function=_probe_vars

#--------------------------------------------------------------------

[delayed_gcode _userWrap_probe_module_start]
#description: Inits svv flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5					# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_probe_module_start func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	SAVE_VARIABLE VARIABLE=module_probe_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_probe_err_flag VALUE=0							#init error flag that this module is not in error

	_proc_end function=_probe_module_start

#--------------------------------------------------------------------

[gcode_macro PROBE]
description: wrap FW proc for userLogging purposes
RENAME_EXISTING: _PROBE_STOCK
gcode:

	_proc_start function=PROBE func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	_PROBE_STOCK {rawparams}

	_proc_end function=PROBE

#--------------------------------------------------------------------

[gcode_macro QUERY_PROBE]
description: wrap FW proc for userLogging purposes
RENAME_EXISTING: _QUERY_PROBE_STOCK
gcode:

	_proc_start function=QUERY_PROBE func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	_QUERY_PROBE_STOCK {rawparams}

	_proc_end function=QUERY_PROBE

#--------------------------------------------------------------------

[gcode_macro Z_OFFSET_APPLY_PROBE]
description: wrap FW proc for userLogging purposes
RENAME_EXISTING: _Z_OFFSET_APPLY_PROBE_STOCK
gcode:

	_proc_start function=Z_OFFSET_APPLY_PROBE func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	_Z_OFFSET_APPLY_PROBE_STOCK {rawparams}

	_proc_end function=Z_OFFSET_APPLY_PROBE

#--------------------------------------------------------------------

[gcode_macro PROBE_CALIBRATE]
description:Calibrate the probes z_offset with klicky automount
rename_existing: _PROBE_CALIBRATE_STOCK
gcode:

	_proc_start function=PROBE_CALIBRATE func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed * 60 %}
	{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed * 60 %}

	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}

	{% if not 'xyz' in printer.toolhead.homed_axes %}
		{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}

	# Protect against PROBE CALIBRATE performed from outside the bed
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
		 or printer['gcode_move'].position.y < probe_offset_y
		 or printer['gcode_move'].position.x > (max_x - probe_offset_x)
		 or printer['gcode_move'].position.x < probe_offset_x %}
	 { action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED!") }
	{% endif %}

	_entry_point function=PROBE_CALIBRATE

	_CheckProbe action=query
	Attach_Probe back=1

	_PROBE_CALIBRATE_STOCK {% for p in params
			%}{'%s=%s ' % (p, params[p])}{%
		 endfor %}

	Dock_Probe back=1

	_exit_point function=PROBE_CALIBRATE move=1

	_proc_end function=PROBE_CALIBRATE

#--------------------------------------------------------------------

[gcode_macro PROBE_ACCURACY]
description:Probe Z-height accuracy at current XY position with klicky automount uses [probe] section configs for non passed vars
rename_existing: _PROBE_ACCURACY_STOCK
gcode:

	_proc_start function=PROBE_ACCURACY func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
	{% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
	{% set xytravel_feedrate = printer["gcode_macro _User_Variables"].xytravel_speed %}
	{% set ztravel_feedrate = printer["gcode_macro _User_Variables"].ztravel_speed %}
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}

	{% if not 'xyz' in printer.toolhead.homed_axes %}
		{ action_raise_error("Must Home X, Y and Z Axis First!") }
	{% endif %}

	_entry_point function=PROBE_ACCURACY

	# Protect against PROBE_ACCURACY performed from outside the bed
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
		 or printer['gcode_move'].position.y < probe_offset_y
		 or printer['gcode_move'].position.x > (max_x - probe_offset_x)
		 or printer['gcode_move'].position.x < probe_offset_x %}
	 { action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!") }
	{% endif %}

	_CheckProbe action=query
	Attach_Probe back=1

	_PROBE_ACCURACY_STOCK {% for p in params
			%}{'%s=%s ' % (p, params[p])}{%
		 endfor %}

	Dock_Probe back=1										

	_exit_point function=PROBE_ACCURACY move=1

	_proc_end function=PROBE_ACCURACY

