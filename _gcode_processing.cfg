#--------------------------------------------------------------------

[gcode_macro _SetSlicerVar]
description: Used to runtime set slicer variables contained in gcode (done at slice time w/ regex post processing) 
# added ability to call dynamic PA setting based on mesh line type (Cura has a plugin, PS doesn't...)
# added logic to prevent inadvertent mid-print lowering of maxz due to OAAT/Sequential printing.
# WIP stuffs that I nix'd for now...
gcode:

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object
	
	#check for floats/ints wrapped in a string (pseudo atof/atoi)
	# not used {% set passed_value_destringed = params.VALUE|replace("\"","") %}
	# {% set passed_value_restringed = params.VALUE|replace("\"","")|string %}
	# {% set passed_value_integer = params.VALUE|replace("\"","")|int %}
	# {% set passed_value_float = params.VALUE|replace("\"","")|float %}
		# M118 >> raw: {params.VALUE} << 
		# M118 >> destringified: {passed_value_destringed} <<
		# M118 >> restringified: {passed_value_restringed} <<
		# M118 >> integerized: {passed_value_integer} <<
		# M118 >> floatified: {passed_value_float} <<

	## ;works with above vars being set
	# {% if passed_value_integer|string == passed_value_restringed %}
		# M118 >> is integer <<
	# {% elif passed_value_float|string == passed_value_restringed %}
		# M118 >> is float <<
	# {% else %}
		# M118 >> is string <<
	# {% endif %}

	## ;works with inlined
	# {% if params.VALUE|replace("\"","")|int|string == params.VALUE|replace("\"","")|string %}
		# M118 >> is integer <<
	# {% elif params.VALUE|replace("\"","")|float|string == params.VALUE|replace("\"","")|string %}
		# M118 >> is float <<
	# {% else %}
		# M118 >> is string <<
	# {% endif %}

	## ;works for str vs. number using inlined
	# {% if params.VALUE|replace("\"","")|int|string != params.VALUE|replace("\"","")|string and params.VALUE|replace("\"","")|float|string != params.VALUE|replace("\"","")|string %}
		# M118 >> is string <<
	# {% else %}
		# M118 >> is number <<
	# {% endif %}


	## ;testing
	# {% if params.VALUE|replace("\"","")|int|string == params.VALUE|replace("\"","")|string %}
		# M118 >> is integer <<
		# {% set svv_VALUE = passed_value_integer|int %}
	# {% elif params.VALUE|replace("\"","")|float|string == params.VALUE|replace("\"","")|string %}
		# M118 >> is float <<
		# {% set svv_VALUE = passed_value_float|float %}
	# {% else %}
		# M118 >> is string <<
		# {% set svv_VALUE = params.VALUE|string %}
	# {% endif %}
	
	# M118 >> svv params: VARIABLE={params.VARIABLE} VALUE={svv_VALUE} <<


	# allow dynamic PA setting, based on mesh/line type
	# assumes amodule _linear_advance.cfg is loaded - need to add a check for this
	{% if params.VARIABLE|string == "TYPE" %}
		_SetDynamicPA MESH={params.VALUE|string}
#		save_variable VARIABLE='last_spd_fact' VALUE={printer.gcode_move.speed_factor|float}	# store current speed factor (below WIP)
	{% endif %}
	
	# fix maxz to not overwrite a equal or higher saved value as a
	# 'one at a time'/'sequential' context will have implications
	# https://help.prusa3d.com/en/article/sequential-printing_124589
	# print start/end/canx overtly resets maxz to 0.0 between prints
	
	{% if params.VARIABLE|string == "maxz" %}
		{% set svv_VALUE = params.VALUE|replace("\"","")|float %}	# convert float string to a proper float
		M118 >>> maxz raw:{params.VALUE} val:{svv_VALUE} <<<
		{% if svv.maxz|float < svv_VALUE|float %}
			M118 >>> SAVING MAXZ:{svv.maxz|float} THIS:{svv_VALUE|float} <<<
			SAVE_VARIABLE VARIABLE={params.VARIABLE|string} VALUE={svv_VALUE|float}
		{% else %}
			M118 >>> SKIPPED MAXZ UPDATE - SAVED:{svv.maxz|float} THIS:{params.VALUE|float} <<<
		{% endif %}
	{% else %}

		#SAVE_VARIABLE {rawparams}

		## save numbers as numbers (int/float) and not within strings, even though numbers are stringified
		
		{% if params.VALUE|replace("\"","")|int|string == params.VALUE|replace("\"","")|string %}		# test for int
			{% set svv_VALUE = params.VALUE|replace("\"","")|int %}
			SAVE_VARIABLE VARIABLE={params.VARIABLE|string} VALUE={svv_VALUE}
		{% elif params.VALUE|replace("\"","")|float|string == params.VALUE|replace("\"","")|string %}	# test for float
			{% set svv_VALUE = params.VALUE|replace("\"","")|float %}
			SAVE_VARIABLE VARIABLE={params.VARIABLE|string} VALUE={svv_VALUE}
		{% else %}									
			{% set svv_VALUE = "'\"" + params.VALUE|string + "\"'" %}									# it's not a number
			SAVE_VARIABLE {rawparams}
		{% endif %}

	{% endif %}
	
	# # WIP:  added herein to forcibly slow down nozzle, based on mesh type Overhang perimeter, until I found out I was wrong. lol
	# # I am seeing issues at high pring speeds with internal external perimeters where the filament strands pluck away from
	# # the inner radii (regardless of radius) - prolly sumptin I am doing wrong (i.e. printing too damn fast.?.)  I thought
	# # overhang perimeters were where I was seeing the issue, but those aren't it.  Seems a new line type may be warranted.?.
	# {% if params.VARIABLE|string == "TYPE" and params.VALUE|string == "Overhang perimeter" %}	# if ;TYPE:Overhang perimeter
		# save_variable VARIABLE='last_spd_fact' VALUE={printer.gcode_move.speed_factor|float}	# store current speed factor
		# M220 S50																				# force a 50% slowdown
        # M300 S200 P1    																		# emit shortest possible low-freq bloop, a low-irritation get-user-attention thing
		# M118 >>> Forced a 50% speed factor due to Overhang Perimeter Line Type <<<				# advise user
		# _SetDynamicPA MESH={params.VALUE|string|lower}											# and set PA by type
	# {% elif params.VARIABLE|string == "TYPE" %}													# if ;TYPE:not Overhang perimeter
		# _SetDynamicPA MESH={params.VALUE|string|lower}											# set PA by type
		# {% if printer.gcode_move.speed_factor|float != printer.save_variables.variables.last_spd_fact|float %} #see if spd factor needs to be restored
			# M300 S1200 P1    																		# emit shortest possible low-freq bloop, a low-irritation get-user-attention thing
			# M118 >>> Restoring Speed Factor: {printer.save_variables.variables.last_spd_fact} <<<	# if so, advise user, and
			# M220 {printer.save_variables.variables.last_spd_fact|float}								# restore last saved speed factor
		# {% endif %}
	# {% endif %}

#--------------------------------------------------------------------

[gcode_macro M117.1]
description:  workaround for fixing a zero-based layer display - slicer is zero-based, gray matter is 1-based...
# params = L=LAYERNUM T=TOTALLAYERS
# sample slicer use: M117.1 L[layer_num] T[total_layer_count]
gcode:
	M117 Layer {(params.L|int + 1)|int}/{params.T|int}

