#####################################################################
#  gcode processing
#####################################################################

[gcode_macro _SetSlicerVar]
description: Used to runtime set slicer variables contained in gcode (done at slice time w/ regex post processing) 
# added ability to call dynamic PA setting based on mesh line type (Cura has a plugin, PS doesn't...)
# added logic to prevent inadvertent mid-print lowering of maxz due to OAAT/Sequential printing.
# WIP stuffs that I nix'd for now...
gcode:

	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object
	
	# allow dynamic PA setting, based on mesh/line type
	# assumes module _linear_advance.cfg is loaded - need to add a check for this

	{% if svv.module_linadv_loaded %}
		{% if params.VARIABLE|string == "TYPE" %}
			_SetDynamicPA MESH={params.VALUE|string}
		{% endif %}
	{% endif %}
	
	# fix maxz to not overwrite a equal or higher saved value as a
	# 'one at a time'/'sequential' context will have implications
	# https://help.prusa3d.com/en/article/sequential-printing_124589
	# print start/end/canx overtly resets maxz to 0.0 between prints
	
	{% if params.VARIABLE|string == "maxz" %}
		{% set svv_VALUE = params.VALUE|replace("\"","")|float %}	# convert float string to a proper float
		{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
			M118 >>> maxz raw:{params.VALUE} val:{svv_VALUE} <<<
		{% endif %}
		{% if svv.maxz|float < svv_VALUE|float %}
			{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
				M118 >>> SAVING MAXZ:{svv.maxz|float} THIS:{svv_VALUE|float} <<<
			{% endif %}
			SAVE_VARIABLE VARIABLE={params.VARIABLE|string} VALUE={svv_VALUE|float}
		{% else %}
			{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
				M118 >>> SKIPPED MAXZ UPDATE - SAVED:{svv.maxz|float} THIS:{params.VALUE|float} <<<
			{% endif %}
		
		{% endif %}
	{% else %}
		## save numbers as numbers (int/float) and not within strings, even though passed numbers are stringified
		{% if params.VALUE|replace("\"","")|int|string == params.VALUE|replace("\"","")|string %}		# test for int
			{% set svv_VALUE = params.VALUE|replace("\"","")|int %}
			SAVE_VARIABLE VARIABLE={params.VARIABLE|string} VALUE={svv_VALUE}
		{% elif params.VALUE|replace("\"","")|float|string == params.VALUE|replace("\"","")|string %}	# test for float
			{% set svv_VALUE = params.VALUE|replace("\"","")|float %}
			SAVE_VARIABLE VARIABLE={params.VARIABLE|string} VALUE={svv_VALUE}
		{% else %}									
			{% set svv_VALUE = "'\"" + params.VALUE|string + "\"'" %}									# it's not a number
			SAVE_VARIABLE {rawparams}
		{% endif %}
	{% endif %}

#--------------------------------------------------------------------

[gcode_macro M117.1]
description:  workaround for fixing a zero-based layer display - slicer is zero-based, gray matter is 1-based...
# params = L=LAYERNUM T=TOTALLAYERS
# sample slicer use: M117.1 L[layer_num] T[total_layer_count]
gcode:
	M117 Layer {(params.L|int + 1)|int}/{params.T|int}

