#####################################################################
# 	_host_control
#####################################################################

[delayed_gcode _host_control_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_host_control_loaded func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'  
	_module_loaded MODULE=_host_control
	_proc_end function=_host_control_loaded 

#--------------------------------------------------------------------

[gcode_macro _info_host_control]
gcode:

# todo - write up on module's purpose/function/implementation/use
# see user_interaction for an example of intended use

#--------------------------------------------------------------------

[gcode_macro _host_control_vars]
description: macro for _host_control variables

variable_def_idle_timeout:	18000	#in seconds - 18000= 5hr, 3600 = 1hr 

gcode:

	_proc_start function=_host_control_vars func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	# there is none, this is for module variable use only

	_proc_end function=_host_control_vars

#--------------------------------------------------------------------

[delayed_gcode _host_control_start]
#description: Sets module-specific state flags for conditional use elsewhere.
initial_duration: 0.5							# have this at 0.5s as init code in _startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_host_control_start func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	SAVE_VARIABLE VARIABLE=module_host_control_loaded VALUE=1					#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_host_control_err_flag VALUE=0						#init error flag via persistent variable that this module is not in error

	_proc_end function=_host_control_start
	
#--------------------------------------------------------------------

[idle_timeout]
timeout: 3600 # 1-hour arbitrary.  Is overtly set to def_idle_timeout in vars above, at boot.
gcode:

	_proc_start function=idle_timeout func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

#	{% set emission =	"<font color=lightcoral face=arial size=1>" ~
#							"Idle Timeout period expired." ~
#							"</font>"
#						%}
#
#	M118 {emission}

	say_wait S="Idle Timeout Period Expired"
	
	_ito_shutdown_query

	_proc_end function=idle_timeout
	
#--------------------------------------------------------------------

[gcode_macro _ito_shutdown_query]
description: toss ITO query to user
gcode:

	_proc_start function=_ito_shutdown_query func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	say_wait S="Prepare for Shut Down in 120 Seconds"

	{% set temp_ui_prompt = "</font><font color=yellow face=arial size=1>" ~
							"Press Cancel/No to abort & reset Idle Timeout,<BR>" ~
							"Press Up to upload config and shutdown,<BR>" ~
							"Other input will commence with shutdown.<BR></font>" ~
							"<font color=gray face=arial size=1>" ~
							"[CONFIRM/YES, cancel/no, up]" ~
							"</font>"
						%}

	get_user_input prompt="{temp_ui_prompt}" RMDR_PERIOD=60 TYPE=str RCVR_MACRO=_ito_shutdown_response TO_PERIOD=120 TO_CYCL_DEF=0 TO_RESP_DEF="CONFIRM"

	_proc_end function=_ito_shutdown_query

[gcode_macro _ito_shutdown_response]
description: process user's response
gcode:

	_proc_start function=_ito_shutdown_response func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'
	
	{% if params.UI_INPUT == CANCEL or
		 params.UI_INPUT == 'CANCEL' or
		 params.UI_INPUT == "CANCEL" or
		 params.UI_INPUT == '"CANCEL"' or
		 params.UI_INPUT == NO or
		 params.UI_INPUT == 'NO' or
		 params.UI_INPUT == "NO" or
		 params.UI_INPUT == '"NO"'
		 %}
		# CANCEL/NO selected, so cancel the shutdown and reset ITO
		say_wait S="Shutdown Canceled, Resetting Idle Timeout Period."
		UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=0
		SET_IDLE_TIMEOUT TIMEOUT={printer["gcode_macro _host_control_vars"].def_idle_timeout}	# auto emits to console

	{% elif params.UI_INPUT == UP or
			params.UI_INPUT == 'UP' or
			params.UI_INPUT == "UP" or
			params.UI_INPUT == '"UP"'
			%}
		# UP selected, so push configs then power down
		push_configs
		UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=0.1
	{% else %} 
		# power down 
		UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=0.1
	{% endif %}
	
	_proc_end function=_ito_shutdown_response

[gcode_shell_command system_shutdown]
# gracefully shuts down the klipper host immediately - be careful... ;)
command: sudo shutdown now
timeout: 2
verbose: false

#--------------------------------------------------------------------

[gcode_macro power_on_printer]
description: Power on the printer
gcode:

	_proc_start function=power_on_printer func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	say_wait S="Powering Up Printer."
	RUN_SHELL_COMMAND CMD=power_on_printer_outlet

	_proc_end function=power_on_printer

#--------------------------------------------------------------------

[gcode_macro power_off_printer]
description: Power off the printer
gcode:

	_proc_start function=power_off_printer func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	say_wait S="ATTENTION! Saving Configs and Shutting Down Printer. Host will remain up."
	RUN_SHELL_COMMAND CMD=power_off_printer_outlet

	_proc_end function=power_off_printer

#--------------------------------------------------------------------

[gcode_macro system_shutdown]
description: Power off the entire system (printer AND host)
gcode:

	_proc_start function=system_shutdown func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	Say_wait S="ATTENTION! Saving Configs and Shutting Down Printer AND Host"
	## RUN_SHELL_COMMAND CMD=backup_ configs  <-- nix'd this in favor of possible User Interaction
	RUN_SHELL_COMMAND CMD=power_off_printer_outlet
	RUN_SHELL_COMMAND CMD=system_shutdown

	_proc_end function=system_shutdown

#--------------------------------------------------------------------

[gcode_macro restart_klipper]
description: Restart Klipper Service
gcode:

	_proc_start function=restart_klipper func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	say_wait S="Restarting Klipper"
	RUN_SHELL_COMMAND CMD=klipper_restart

	_proc_end function=restart_klipper

#--------------------------------------------------------------------

[delayed_gcode delayed_printer_off]
#description: Power off the printer when/if timed out
initial_duration: 0
gcode:

	_proc_start function=delayed_printer_off func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	## FIXME: add dly for HE to cool to some threshold (HeatCreep Prevention)

#	{% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
		say_wait S="Shutting Down Printer. Host will remain up."
		{action_call_remote_method("set_device_power",
									device="Printer",
									state="off")}
		# system_shutdown		# disabled to keep the klipper host alive...
#	 {% endif %}

	_proc_end function=delayed_printer_off

#--------------------------------------------------------------------

[gcode_macro HOST_SHUTDOWN]
gcode:

	_proc_start function=HOST_SHUTDOWN func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	Say_Wait S="ATTENTION! I am shutting myself down - good bye."
	{action_call_remote_method("shutdown_machine")}

	_proc_end function=HOST_SHUTDOWN

#--------------------------------------------------------------------

[gcode_macro HOST_REBOOT]
gcode:

	_proc_start function=HOST_REBOOT func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	Say_Wait S="ATTENTION! I am rebooting myself"
	{action_call_remote_method("reboot_machine")}

	_proc_end function=HOST_REBOOT

