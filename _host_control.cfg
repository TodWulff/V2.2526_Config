#####################################################################
# 	_host_control
#####################################################################

[delayed_gcode _host_control_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_host_control_loaded func_params='"{rawparams|string}"'  
	_module_loaded MODULE=_host_control
	_proc_end function=_host_control_loaded 

#--------------------------------------------------------------------

[gcode_macro _info_host_control]
gcode:

# todo - write up on module's purpose/function/implementation/use
# see user_interaction for an example of intended use

#--------------------------------------------------------------------

[gcode_macro _host_control_vars]
description: macro for _host_control variables

gcode:

	_proc_start function=_host_control_vars func_params='"{rawparams|string}"'

	# there is none, this is for module variable use only

	_proc_end function=_host_control_vars

#--------------------------------------------------------------------

[delayed_gcode _host_control_start]
#description: Sets module-specific state flags for conditional use elsewhere.
initial_duration: 0.5							# have this at 0.5s as init code in _startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_host_control_start func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE=module_host_control_loaded VALUE=1					#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_host_control_err_flag VALUE=0						#init error flag via persistent variable that this module is not in error

	_proc_end function=_host_control_start
	
#--------------------------------------------------------------------

[idle_timeout]
timeout: 18000 #in seconds - 18000= 5hr, 3600 = 1hr
gcode:

	_proc_start function=idle_timeout func_params='"{rawparams|string}"'

	M84
	TURN_OFF_HEATERS
	## TODO: add dly for HE to cool to some threshold (HeatCreep Prevention)
	UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=60

	_proc_end function=idle_timeout
	
#--------------------------------------------------------------------

[gcode_shell_command system_shutdown]
# gracefully shuts down the klipper host immediately - be careful... ;)
command: sudo shutdown now
timeout: 2
verbose: false

#--------------------------------------------------------------------

[gcode_macro power_on_printer]
description: Power on the printer
gcode:

	_proc_start function=power_on_printer func_params='"{rawparams|string}"'

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> RUN_SHELL_CMD CMD=power_on_printer_outlet <<< {% endif %}
	say_wait S="Powering Up Printer."
	RUN_SHELL_CMD CMD=power_on_printer_outlet

# now happens in __autoexec
#	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> RUN_SHELL_CMD CMD=restore_configs <<< {% endif %}
#	RUN_SHELL_CMD CMD=restore_configs

	_proc_end function=power_on_printer

#--------------------------------------------------------------------

[gcode_macro power_off_printer]
description: Power off the printer
gcode:

	_proc_start function=power_off_printer func_params='"{rawparams|string}"'

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> RUN_SHELL_CMD CMD=power_off_printer_outlet <<< {% endif %}
	say_wait S="ATTENTION! Saving Configs and Shutting Down Printer. Host will remain up."
	RUN_SHELL_CMD CMD=power_off_printer_outlet

	_proc_end function=power_off_printer

#--------------------------------------------------------------------

[gcode_macro system_shutdown]
description: Power off the entire system (printer AND host)
gcode:

	_proc_start function=system_shutdown func_params='"{rawparams|string}"'

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> system_shutdown <<< {% endif %}
	Say_wait S="ATTENTION! Saving Configs and Shutting Down Printer AND Host"
	## RUN_SHELL_CMD CMD=backup_ configs  <-- nix'd this in favor of possible User Interaction
	RUN_SHELL_CMD CMD=power_off_printer_outlet
	RUN_SHELL_CMD CMD=system_shutdown

	_proc_end function=system_shutdown

#--------------------------------------------------------------------

[gcode_macro restart_klipper]
description: Restart Klipper Service
gcode:

	_proc_start function=restart_klipper func_params='"{rawparams|string}"'

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> restart_klipper <<< {% endif %}
	say_wait S="Restarting Klipper"
	RUN_SHELL_CMD CMD=klipper_restart

	_proc_end function=restart_klipper

#--------------------------------------------------------------------

[delayed_gcode delayed_printer_off]
#description: Power off the printer when/if timed out
initial_duration: 0
gcode:

	_proc_start function=delayed_printer_off func_params='"{rawparams|string}"'

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> delayed_printer_off <<< {% endif %}
	{% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
		say_wait S="ATTENTION! Saving Configs and Shutting Down Printer. Host will remain up."
		## RUN_SHELL_CMD CMD=backup_ configs  <-- nix'd this in favor of possible User Interaction
		#	RUN_SHELL_CMD CMD=power_off_printer		# causes sync issues between Mainsail/Moonraker and the Tasmota Outlet
		#M118 _!_ Commanding Printer Power Shutdown _!_
		{action_call_remote_method("set_device_power",
									device="Printer",
									state="off")}
		# system_shutdown		# disabled to keep the klipper host alive...
	 {% endif %}

	_proc_end function=delayed_printer_off

#--------------------------------------------------------------------

[gcode_macro HOST_SHUTDOWN]
gcode:

	_proc_start function=HOST_SHUTDOWN func_params='"{rawparams|string}"'

	Say_Wait S="ATTENTION! I am shutting myself down - good bye."
	{action_call_remote_method("shutdown_machine")}

	_proc_end function=HOST_SHUTDOWN

#--------------------------------------------------------------------

[gcode_macro HOST_REBOOT]
gcode:

	_proc_start function=HOST_REBOOT func_params='"{rawparams|string}"'

	Say_Wait S="ATTENTION! I am rebooting myself"
	{action_call_remote_method("reboot_machine")}

	_proc_end function=HOST_REBOOT

