#####################################################################
# 	PRINT_START - includes ercf stuffs
#####################################################################
# FYSA, SAVE_VARIABLE VARIABLE= maxz VALUE=blah is cleared at start and repeatedly set by __SetSlicerVar gcode_macro called 
# on each layer from sliced gcode (w/ help of post processing) - disallowed mid-print lowering of same (OAAT/Seq printing)

[gcode_macro PRINT_START]

variable_swapcounter:		0										# to display swap count in an ercf context

gcode:
	{% set svv = printer.save_variables.variables %}				# set eazy accesss context for save_variables object
	{% set th = printer.toolhead %}									# set eazy accesss context for printer.toolhead object

	SAVE_VARIABLE VARIABLE=maxz VALUE='"0.0"'						# clear any prior saved print height

	M220 S100			# set feedrate percentage to default in case it was altered by the user previously
	M221 S100			# set speed percentage to default in case it was altered by the user previously

	#nix ercf encoder_sensor ops at start of print, if so enabled (per ercf guidance), as filament unloaded
	{% if svv.module_ercf_loaded %}
		{% if printer["gcode_macro ERCF_VAR"].clog_detection|int == 1 %}
			SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
		{% endif %}
	{% endif %}

	# do check to verify that slicer meets requirements (v2_2526_slicer_check = MHz_Cura or MHz_PS)
	# this variable is set by the slicer w/ a post-processing script.  some of the 'features'
	# on V2.2526 is handled by the variables that are parsed and set by SAVE_VARIABLES when 
	# the .gcode file is printed
	
	{% if svv.v2_2526_slicer_check != "mhz_cura"  and svv.v2_2526_slicer_check != "mhz_ps" %}
		M117 Houston, We have a problem...
		SAVE_VARIABLE VARIABLE=v2_2526_slicer_check VALUE='"NULL"'			# clear SLICER VITALS
		# {action_respond_info("WRONG SLICER AND/OR CONFIGURATION USED") }
		{action_raise_error("WRONG SLICER AND/OR CONFIGURATION USED: " + svv.v2_2526_slicer_check|string) }
	{% else %}
		{action_respond_info("Slicer Check Passed: " + svv.v2_2526_slicer_check|string) }
	{% endif %}
	
	{% if svv.module_led_effect_loaded %}
		set_light_mode CHAIN=chamber_lights	EFFECT=normal	RESET=1		# uses LED_EFFECTS code
		set_light_mode CHAIN=lcd_lights 	EFFECT=normal	RESET=1		# uses LED_EFFECTS code
		# set_light_mode CHAIN=ercf_lights	EFFECT=off		RESET=1		# uses LED_EFFECTS code
		# set_light_mode CHAIN=dash_lights	EFFECT=off		RESET=1		# uses LED_EFFECTS code
	{% else %}
		ChLts_Normal		# set chamber lights to normal	- uses Klipper Dotstar code
		LcdLts_Normal		# set lcd lights to normal		- uses Klipper Neopixel code
		# ERCFLts_off			# set ercf lights to normal		- uses Klipper Neopixel code
		# DBLts_off			# set dash lights to normal		- uses Klipper Neopixel code
	{% endif %}
	
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_starting"'	# machine state save
	# M118 print_starting
	snd_PrintStart
	
	#if ercf and a paused condition exists, nuke it
	{% if svv.module_ercf_loaded %}
		{% if printer["gcode_macro ERCF_PAUSE"].is_paused|int %}
			# in case was paused for previous ercf_issue, need to nuke it so it doesn't do a heater timeout mid-print...
			UPDATE_DELAYED_GCODE ID=disable_heater DURATION=0
			SET_GCODE_VARIABLE MACRO=ERCF_PAUSE VARIABLE=is_paused VALUE=0
			
			#this is in ercf_unlock, disabling for now
			# {% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == False %}
				# ERCF_UNSELECT_TOOL
			# {% else %}
				# ERCF_UNSELECT_TOOL FORCED=0
			# {% endif %}

		{% endif %}
	{% endif %}
	
	reset_noz_cam
	CLEAR_PAUSE
	_HOURMETER_ON
	_PrintLED_On

	M106 S26								# forces small breeze across duct mounted chamber temp sensor
	M141 S60								# set chamber temp to 60
	go_absolute								# force absolute positioning

	_ENSURE_QGL								# homes if needed - need to have the gantry leveled - re homes Z thereafter
	CLEAN_NOZZLE DX={th.axis_maximum.x//2|float}  DY={th.axis_maximum.y|float}  DZ=15.0
	CALIBRATE_Z								# dynamically sets Z-offset for highly predictable prints

	{% if svv.module_ercf_loaded %}
		# {% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == False %}
			# # no purge here as ecrf empties bowden at end of print and not yet stuffed by any tool selection commands
			# # slicer cmds purge after tool selection stuffs the filament home.
			# # RESPOND MSG="No Purge due to no filament in toolhead..."	# nope, overtly added to the slicer start gcode...
		# {% else %}
			# #prolly shouldn't get here, but just in case filament is loaded...
			# # print_start_purge	# nope, overtly added to the slicer start gcode...
		# {% endif %}
	{% else %}
		print_start_purge
	{% endif %}

	M118 Printing Started
	M117 Printing

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_started"'	# machine state save

	{% if svv.module_ercf_loaded %}
		#reenable encoder_sensor ops at start of print, if so enabled (per ercf guidance), as filament will be loaded
		{% if printer["gcode_macro ERCF_VAR"].clog_detection|int == 1 %}
			SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
		{% endif %}
		# and enumerate swap count
		{ action_respond_info("Swap Count: " + swapcounter|string ) }
	{% endif %}

#-------------------------------------------------------------------------

[gcode_macro print_start_purge]

variable_verbose:			False		# Enable verbose output
variable_purge_temp_min:	180			# Minimum nozzle temperature to permit a purge. Otherwise, purge will not occur.
variable_purge_len:			20			# Amount of filament, in mm, to purge.
variable_purge_spd:			750			# Speed, in mm/min, of the purge.
variable_purge_ret:			0.2			# Retract length, in mm, after purging to prevent slight oozing. Adjust as necessary.
variable_ooze_dwell:		1			# Dwell/wait time, in seconds, after purging and retracting.

gcode:
	{% set th = printer.toolhead %}									# set context for printer.toolhead object
	
	{% if printer.extruder.temperature >= purge_temp_min %}
		# M83	  # relative mode  The code for absolute extrusion mode is M82, the code for relative extrusion mode is M83.
		G1 Z5.0 F3000							# Move Z Axis up little
		G1 X{range(6,70)|random} Y350 F20000	# move to a random position in the bucket
		G1 Z-0.025 F3000						# move down before squirt - 0 was not catching filament on plate edge
		go_relative								# go relative to prep for purge
		M400									# finish moves
		{% if verbose %} { action_respond_info("Purging " + purge_len|string + "mm @ " + purge_spd|string + "mm/min...") } {% endif %}
		G1 E{purge_len} F{purge_spd}			# squirt to ensure filament is in HE/Nozzle
		# G1 E-{purge_ret} F{purge_spd * 5}		# retract
		# G4 P{ooze_dwell * 1000}				# pause a bit for spooge/grool
		go_absolute								# absolute positioning
		G92 E0									# reset extruder
		G1 Y340									# and wipe nozzle tip onto edge of bed
		G0 Z+15									# move up to prep for w/e is next

		# nix'd due to slicer now post-processing a nozzle scrub at end and, (with Cura, currently) 
		# for each Layer 0 in case of a OAAT (one at a time) context.
		
		# BUT, reenabled this due to adoption of PS
		CLEAN_NOZZLE DX={th.axis_maximum.x//2|float}  DY={th.axis_maximum.y|float}  DZ=15.0
		
	{% else %} 
		RESPOND MSG="No Purge due to Low Temp..."
	{% endif %}
