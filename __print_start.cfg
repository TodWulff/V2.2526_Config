#####################################################################
# 	PRINT_START - includes ercf stuffs
#####################################################################
# FYSA, SAVE_VARIABLE VARIABLE= maxz VALUE=blah is cleared at start and repeatedly set by __SetSlicerVar gcode_macro called
# on each layer from sliced gcode (w/ help of post processing) - disallowed mid-print lowering of same (OAAT/Seq printing)

[delayed_gcode __print_start_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=__print_start_loaded func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'
	_module_loaded MODULE=__print_start
	_proc_end function=__print_start_loaded

[gcode_macro PRINT_START]
# PS Call: print_start EXTRUDER=[first_layer_temperature] BED=[first_layer_bed_temperature] CHAMBER=45

gcode:

	_proc_start function=PRINT_START func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'
	
	{% set svv = printer.save_variables.variables %}				# set context for save_variables object
	
	# VALIDATE THAT SYSTEM LOAD IS NOT EXCESSIVE BEFORE CONTINUING
	{% if svv.module_sys_load_validation_loaded|int and not svv.module_sys_load_validation_err_flag|int %}
		check_system_load	# [included sys_load_validation.cfg] module's proc to ensure that system not tasksat @ print start
	{% endif %}

	say_wait S="Print Starting"

	# do check to verify that slicer meets requirements (v2_2526_slicer_check = MHz_Cura or MHz_PS)
	# this variable is set by the slicer w/ a post-processing script. some of the 'features'
	# on V2.2526 is handled by the variables that are parsed and set by SAVE_VARIABLES when
	# the .gcode file is printed, which is implemented via post processing with regex in the slicers

	{% if svv.v2_2526_slicer_check != "mhz_cura" and svv.v2_2526_slicer_check != "mhz_ps" %}
		M117 Houston, We have a problem...
		SAVE_VARIABLE VARIABLE=v2_2526_slicer_check VALUE='"NULL"'			# clear SLICER VITALS
		{action_raise_error("WRONG SLICER AND/OR CONFIGURATION USED: " + svv.v2_2526_slicer_check|string) }
	{% else %}
		M118 { "Slicer Check Passed: " ~ svv.v2_2526_slicer_check }
	{% endif %}

#	fix_cameras

	{% set th = printer.toolhead %}									# set easy accesss context for printer.toolhead object

	SAVE_VARIABLE VARIABLE=maxz VALUE=0.0							# clear any prior saved print height
	SAVE_VARIABLE VARIABLE=ercf_swaps VALUE=0						# clear any prior saves
	SAVE_VARIABLE VARIABLE=type VALUE='"Startup"'					# clear any prior saves
	SAVE_VARIABLE VARIABLE=ercf_interactions VALUE=0				# clear any prior saves

	save_variable VARIABLE=sys_load_escapes VALUE=0					# clear any prior saves

	# Check and offer a prompt to advise at print startup of speed/feed rates deviating from standard
	# to either allow it, or to reset it.
	_check_factors_start

	M104 S{params.EXTRUDER|int}										# start heating HE - will wait below
	M140 S{params.BED|int}											# start heating bed - will wait below

	{% if svv.module_ercf_loaded|int %}

		#nix ercf encoder_sensor ops at start of print, if so enabled (per ercf guidance), as filament unloaded
		{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
			SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
		{% endif %}

		# test for ercf and then test for boot load deq testing
		{% if printer["gcode_macro _ERCF_VAR"].test_ercf_load_seq_at_print %}
			M118 PrintStart ERCF Fil Load Test Seq Starting
			ERCF_TEST_LOAD_SEQUENCE LOOP=1
			# TODO: test ercf error flag here and report if error
			M118 PrintStart ERCF Fil Load Test Seq Completed
		{% endif %}

	{% endif %}

	# advise dynamic PA enablement (see _linear_advance | _linadv_vars)
	{% if svv.module_linadv_loaded %}
		{% if printer["gcode_macro _linadv_vars"].dynamic_pa_enable %}
			M118 -- Line-Specific Dynamic PA Enabled --
		{% else %}
			M118 -- Line-Specific Dynamic PA DISABLED --
		{% endif %}
	{% endif %}

	# advise dynamic ExtMult enablement (see _gcode_processing.cfg | _gcodeproc_vars)
	{% if svv.module_gcodeproc_loaded %}
		{% if printer["gcode_macro _gcodeproc_vars"].dynamic_extrate_enable %}
			M118 -- Line-Specific Dynamic ExtRate Enabled --
		{% else %}
			M118 -- Line-Specific Dynamic ExtRate DISABLED --
		{% endif %}
	{% endif %}

	# advise dynamic SpeedRate enablement (see _gcode_processing.cfg | _gcodeproc_vars)
	{% if svv.module_gcodeproc_loaded %}
		{% if printer["gcode_macro _gcodeproc_vars"].dynamic_spdrate_enable %}
			M118 -- Line-Specific Dynamic SpdRate Enabled --
		{% else %}
			M118 -- Line-Specific Dynamic SpdRate DISABLED --
		{% endif %}
	{% endif %}

	# set lights as needed
	{% if svv.module_ledeff_loaded %}
		_set_ledeff_mode CHAIN=chamber_lights	EFFECT=normal	RESET=1		# uses LED_EFFECTS code
		_set_ledeff_mode CHAIN=lcd_lights 	EFFECT=normal	RESET=1		# uses LED_EFFECTS code
		; _set_ledeff_mode CHAIN=ercf_lights	EFFECT=off		RESET=1		# uses LED_EFFECTS code
		; _set_ledeff_mode CHAIN=dash_lights	EFFECT=off		RESET=1		# uses LED_EFFECTS code
	{% else %}
		ChLts_Normal		# set chamber lights to normal	- uses Klipper Dotstar code
		LcdLts_Normal		# set lcd lights to normal		- uses Klipper Neopixel code
		; ERCFLts_off			# set ercf lights to normal		- uses Klipper Neopixel code
		; DBLts_off			# set dash lights to normal		- uses Klipper Neopixel code
	{% endif %}

# now that we're logging via extra module to proper logs, this can be left on.?. 
#	{% if svv.module_debug_loaded %} _disable_debug_save_var {% endif %}	# make sure svv debug off

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_starting"'	# machine state save
	snd_PrintStart

	#if ercf, and an ercf paused condition is asserted, nuke it
	{% if svv.module_ercf_loaded %}
		{% if printer["gcode_macro _ERCF_PAUSE"].is_paused|int == 1 %}
			# in case was paused for previous ercf_issue, need to nuke it so it doesn't do a heater timeout mid-print...
			UPDATE_DELAYED_GCODE ID=disable_heater DURATION=0
			SET_GCODE_VARIABLE MACRO=_ERCF_PAUSE VARIABLE=is_paused VALUE=0

			# ## this is in ercf_unlock, disabling for now
			# {% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == False %}
				# _ERCF_UNSELECT_TOOL
			# {% else %}
				# _ERCF_UNSELECT_TOOL FORCED=0
			# {% endif %}

		{% endif %}
	{% endif %}

	reset_noz_cam
	CLEAR_PAUSE
	_HOURMETER_ON
	_PrintLED_On

	M106 S26									# forces small breeze across duct mounted chamber temp sensor
	M141 S60									# set exhaust fan trip temp to 60 so printed parts of the 
												# printer don't suffer too much heat deflection

	M190 S{params.BED|int}						# wait for bed to come up to temp before proceeding

	# rearranged this so that the chamber can be heated to temp before a qgl is done
	{% if svv.v2_2526_slicer_check == "mhz_ps" %}
		{% if params.CHAMBER|default(45)|int <= printer['temperature_fan Chamber'].temperature|int %}
			say_wait S="Chamber Heated Sufficiently"
		{% else %}
			say_wait S="{"Dwelling so chamber air can heat to " ~ params.CHAMBER|default(45)|int ~ "Â°"}"
			M191.1 S{params.CHAMBER|default(45)|int}	# wait for chamber to come up to temp before proceeding
		{% endif %}
	{% endif %}

	go_absolute									# force absolute positioning
	G0 F15000									# set a sane 250mm/sec speed == feedrate of 15000mm/min

# QGL then MESH then Z_Calibrate

	_ENSURE_QGL									# homes if needed - need to have the gantry leveled - re homes Z thereafter, with nozzle scrubbing
	G28 Z

# need to do 2+ things here:
# 1 - look for a mesh parameter to see if a specific mesh is to be loaded
# 2 - offer a short fused option to the user to choose a specific profile
# for now, just load default
	BED_MESH_PROFILE LOAD="default"

## ugh, this is causing me moar problems than it is worth... FIXME...........
#	CALIBRATE_Z FORCE=1							# force dynamically setting Z-offset for highly predictable prints
#	CALIBRATE_Z									# force dynamically setting Z-offset for highly predictable prints

# ... I wonder if my z-limit switch is getting noisy, or if Klicky is getting loose or some such shite
# I've mucked with z calibrate a lot recently and it just doesn't make sense what I am seeing (way too much vairiance)
# still troubleshooting when not focused elsewhere (15MAR23)

	{% if svv.v2_2526_slicer_check == "mhz_ps" %}
		M109 S{params.EXTRUDER|int}				# wait for HE coming up to temp
	{% endif %}

	# PS, with or without ERCF, overtly calls a purge itself, so do not call a purge herein
	{% if svv.v2_2526_slicer_check != "mhz_ps" %}
		{% if svv.module_ercf_loaded and printer['filament_switch_sensor toolhead_sensor'].filament_detected != False %}
			# ercf is loaded, so should verify that filament is in the toolhead before we purge...
			# _print_purge	# <-- can't recall at this time (18FEB23) why I commented this out - prolly done inside of filament load code
		{% else %}
			# so ercf not loaded, so toolhead sensor not defined, so just purge (assume filament is loaded)
			_print_purge
		{% endif %}
	{% endif %}

	M118 PRINT_START @ S{printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X{printer.toolhead.position.x|round(3,'common')} Y{printer.toolhead.position.y|round(3,'common')} Z{printer.toolhead.position.z|round(3,'common')}

	M117 Printing

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_started"'	# machine state save

	_start_bounds_checking # re-enable automatic periodic H2O cooling parameter checks (in case canx'd by user)

	{% if svv.module_ercf_loaded %}
		#reenable encoder_sensor ops at start of print, if so enabled (per ercf guidance), as filament will be loaded
		{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
			SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
		{% endif %}
	{% endif %}

	# M118 { "printer.configfile.config.stepper_z.position_endstop: " ~ printer.configfile.config.stepper_z.position_endstop }

	say_wait S="Started"

	_proc_end function=_PRINT_START

#----------------------------------------------------------------------------------

[gcode_macro print_start_purge]
description: purge at start of print, if param.TOWER is passed (see https://i.imgur.com/taLnlli.png)
gcode:

	_proc_start function=print_start_purge func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	{% if params.TOWER|default(0)|int %}
		# so if there is a tower (meaning a multi-material print) then we should purge here at start only
		# tower gets the purges thereafter, once it is built.
		_print_purge
	{% endif %}

	_proc_end function=print_start_purge

#----------------------------------------------------------------------------------

[gcode_macro _print_purge]
description: purge with return to entry position

variable_verbose:			False				# Enable verbose output
variable_purge_temp_min:	180					# Minimum nozzle temperature to permit a purge. Otherwise, purge will not occur.
variable_purge_len:			30					# Amount of filament, in linear mm, to purge.
# SET_GCODE_VARIABLE MACRO=_print_purge VARIABLE=purge_len VALUE=75
variable_purge_spd:			750					# Speed, in mm/min, of the purge.
variable_purge_ret:			0.2					# Retract length, in mm, after purging to prevent slight oozing. Adjust as necessary.
variable_ooze_dwell:		1					# Dwell/wait time, in seconds, after purging and retracting.
variable_wipe_zheight:		0.25				# absolute height for the after-purge wipe onto bed edge

gcode:

	_proc_start function=_print_purge func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	{% set svv = printer.save_variables.variables %}				# set easy access context for save_variables object
	{% set th = printer.toolhead %}									# set easy access context for printer.toolhead object

	{% set z_entry = th.position.z|float %}

	save_gcode_state NAME=print_purge_entry

	# mod'd to allow a mock purge if the toolhead is empty of filament   <-- past me didn't state why.  Ugh.  I hate past me sometimes...
	{% if (		printer['filament_switch_sensor toolhead_sensor'].filament_detected == True and
				printer.extruder.temperature >= purge_temp_min 
				) or 
			printer['filament_switch_sensor toolhead_sensor'].filament_detected == False 
		%}
		# M83	 # relative E mode The code for absolute extrusion mode is M82, the code for relative extrusion mode is M83.
		
		say S="Purging"

		go_relative								#
		G0 Z5.0 F3000							# Move Z Axis up little
		go_absolute								#

		G0 X{range(6,70)|random} Y350 F20000	# move to a random lateral position in the bucket
		G0 Z{wipe_zheight} F3000				# move down to absolute height before squirt

		go_relative								# go relative to prep for purge
		M400									# finish moves
		{% if verbose %} M118 {"Purging " ~ purge_len ~ "mm @ " ~ purge_spd ~ "mm/min..."} {% endif %}
		G1 E{purge_len} F{purge_spd}			# squirt to ensure filament is in HE/Nozzle
		# G1 E-{purge_ret} F{purge_spd * 5}		# retract
		# G4 P{ooze_dwell * 1000}				# pause a bit for spooge/grool
		go_absolute								# absolute positioning

		_reset_extruder							# reset extruder
		G0 Y340									# and wipe nozzle tip onto edge of bed

		G0 Z15									# move up to prep for w/e is next

		say_nc S="Purged"

		# had nix'd due to slicer now post-processing a nozzle scrub at end and, (with Cura, currently)
		# for each Layer 0 in case of a OAAT (one at a time) context.

		# BUT, reenabled this due to adoption of PS
		CLEAN_NOZZLE 							# DX={th.axis_maximum.x//2|float} DY={th.axis_maximum.y|float} DZ=15.0

	{% else %}
		say_wait S="No Purge due to Low Temp..."
	{% endif %}

	# move up to entry z first, before doing the restore w/ move, to ensure stuff don't get bumped
	G0 Z{z_entry}

	restore_gcode_state NAME=print_purge_entry MOVE=1 MOVE_SPEED=250	# restore states w/ move back to proc entry loc

	_proc_end function=_print_purge

#----------------------------------------------------------------------------------

[gcode_macro _check_factors_start]
description:  used to check speed and extrusion factors at print start and offer to reset them if not 100%
gcode:

	_proc_start function=_check_factors_start func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	#if extrusion factor <> 100
	{% if printer.gcode_move.extrude_factor*100|int != 100 %}
		#query user to reset it, receiver macro is _PRINT_START_CONT1
		{% set temp_ui_prompt = "<font color=yellow face=arial size=1>" ~
									"Reset custom Extrusion Factor currently applied?: " ~
								"</font><font color=orange face=arial size=1>" ~
									((printer.gcode_move.extrude_factor*100)|int) ~ "ï¼" ~
								"</font><br>"
								"<font color=gray face=arial size=1>" ~
									" (YES/no defaults in 60s)" ~
								"</font>"
							%}

		get_user_input prompt="{temp_ui_prompt}" RMDR_PERIOD=15 TYPE=str RCVR_MACRO=_check_factors_cont TO_PERIOD=60 TO_CYCL_DEF=0 TO_RESP_DEF="YES"
	{% else %}
		# chain immediately to _check_factors_cont with "SKIP" as UI_INPUT
		_check_factors_cont UI_INPUT="SKIP"
	{% endif %}
	
	_proc_end function=_check_factors_start

#----------------------------------------------------------------------------------

[gcode_macro _check_factors_cont]
description:  used to check speed and extrusion factors at print start and offer to reset them if not 100%
gcode:

	_proc_start function=_check_factors_cont func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	# PROCESS EXTRUDER FACTOR DEVIATION RESPONSE
	{% if params.UI_INPUT != "SKIP" %} # above proc mocks a UI_INPUT of "SKIP" if Extrusion Factor is 100%
		#process ui-input to reset as needed
		{% if params.UI_INPUT == YES or
			 params.UI_INPUT == 'YES' or
			 params.UI_INPUT == "YES" or
			 params.UI_INPUT == '"YES"'
			 %}
			#reset
			M221 S100			# set EXTRUDER FEED RATE percentage to default if so desired by user
			# say_wait S="Extrusion Factor reset to 100ï¼"
		{% else %}
			# leave speed factor alone and carry on
			say_wait S="{((printer.gcode_move.extrude_factor*100)|int) ~ "ï¼ Extrusion Factor Retained"}"
		{% endif %}
	{% endif %}

	# CHECK FOR SPEED FACTOR DEVIATION, OFFERING AN OPPORTUNITY TO RESET
	{% if printer.gcode_move.speed_factor*100|int != 100 %}
		#query user to reset it, receiver macro is _PRINT_START_CONT2
		{% set temp_ui_prompt = "<font color=yellow face=arial size=1>" ~
									"Reset custom Speed Factor currently applied?: " ~
								"</font><font color=orange face=arial size=1>" ~
									((printer.gcode_move.speed_factor*100)|int) ~ "ï¼" ~
								"</font><br>"
								"<font color=gray face=arial size=1>" ~
									" (YES/no defaults in 60s)" ~
								"</font>"
							%}

		get_user_input prompt="{temp_ui_prompt}" RMDR_PERIOD=15 TYPE=str RCVR_MACRO=_check_factors_finish TO_PERIOD=60 TO_CYCL_DEF=0 TO_RESP_DEF="YES"
	{% else %}
		# chain immediately to _check_factors_finish with "SKIP" as UI_INPUT
		_check_factors_finish UI_INPUT="SKIP"
	{% endif %}

	_proc_end function=_check_factors_cont

#----------------------------------------------------------------------------------

[gcode_macro _check_factors_finish]
description:  used to check speed and extrusion factors at print start and offer to reset them if not 100%
gcode:

	_proc_start function=_check_factors_finish func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	# PROCESS SPEED FACTOR DEVIATION RESPONSE
	{% if params.UI_INPUT != "SKIP" %} # above proc mocks a UI_INPUT of "SKIP" if Speed Factor is 100%
		#process ui-input to reset as needed
		{% if params.UI_INPUT == YES or
			 params.UI_INPUT == 'YES' or
			 params.UI_INPUT == "YES" or
			 params.UI_INPUT == '"YES"'
			 %}
			#reset
			M220 S100			# set Speed Factor percentage to default if so desired by user
			# say_wait S="Speed Factor Reset to 100ï¼"
		{% else %}
			# leave speed factor alone and carry on
			say_wait S="{((printer.gcode_move.speed_factor*100)|int) ~ "ï¼ Speed Factor Retained"}"
		{% endif %}
	{% endif %}

	_proc_end function=_check_factors_finish
