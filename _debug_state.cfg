#####################################################################
# _debug_state
#####################################################################

[delayed_gcode _debug_state_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_debug_state_loaded func_params='"{rawparams|string}"'
	_module_loaded MODULE=_debug_state
	_proc_end function=_debug_state_loaded

#--------------------------------------------------------------------

[gcode_macro _info_debug_state_macros]
gcode:

# todo - write up on module's purpose/function/implementation/use
# see user_interaction for an example of intended use

#--------------------------------------------------------------------

[gcode_macro _debug_state_vars]
description: macro for _debug_state variables

gcode:

	_proc_start function=_debug_state_vars func_params='"{rawparams|string}"'

	# there is none, this is for module variable use only

	_proc_end function=_debug_state_vars

#--------------------------------------------------------------------

[delayed_gcode _debug_state_module_start]
#description: Inits state flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5					# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_debug_state_module_start func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE=module_debug_state_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_debug_state_err_flag VALUE=0							#init error flag that this module is not in error

	_proc_end function=_debug_state_module_start

#--------------------------------------------------------------------

[gcode_macro SAVE_GCODE_STATE]
description: for debug purposes, and to ease resume pains...
rename_existing: _SAVE_GCODE_STATE_STOCK
gcode:

	_proc_start function=SAVE_GCODE_STATE func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _debug__tools_vars"].debug_gcode_state %}  
		{% set newparams = rawparams|upper|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")%}
		log_state S="SAVE: {newparams}"
	{% endif %}

	save_variable VARIABLE=last_saved_gcode_state VALUE='"{params.NAME}"'
	_SAVE_GCODE_STATE_STOCK {rawparams}

	_proc_end function=SAVE_GCODE_STATE 

#--------------------------------------------------------------------

[gcode_macro RESTORE_GCODE_STATE]
description: for debug purposes
rename_existing: _RESTORE_GCODE_STATE_STOCK
gcode:

	_proc_start function=RESTORE_GCODE_STATE func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _debug__tools_vars"].debug_gcode_state %}  
		{% set newparams = rawparams|upper|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")%}
		log_state S="RSTR: {newparams}"
	{% endif %}

	save_variable VARIABLE=last_restored_gcode_state VALUE='"{params.NAME}"'
	
	{% if params.NAME != "PAUSE_STATE" %}
		_RESTORE_GCODE_STATE_STOCK {rawparams}
	{% else %}
		# _RESTORE_GCODE_STATE_STOCK NAME=PAUSE_STATE
		{% if printer["gcode_macro _debug__tools_vars"].debug_gcode_state %}  
			log_state S="RESTORE_GCODE_STATE >>>SKIPPED<<<"
		{% endif %}

	{% endif %}

	_proc_end function=RESTORE_GCODE_STATE 

[gcode_macro _enable_debug_gcode_state]
description: used to enable save_var debug
gcode:

	_proc_start function=_enable_debug_gcode_state func_params='"{rawparams|string}"'

	{% if printer["gcode_macro _debug__tools_vars"].debug_gcode_state %}  
		log_state S=">>>>> _enable_debug_state <<<<<"
	{% endif %}
	
	say S="Gcode State Debug Enabled"

	_proc_end function=_enable_debug_gcode_state 

#--------------------------------------------------------------------

[gcode_macro _disable_debug_gcode_state]
description: used to disable save_var debug
gcode:

	_proc_start function=_disable_debug_gcode_state func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _debug__tools_vars"].debug_gcode_state %}  
		log_state S=">>>>> _disable_debug_state <<<<<"
	{% endif %}
	
	say S="Gcode State Debug Disabled"

	_proc_end function=_disable_debug_gcode_state 

	SET_GCODE_VARIABLE MACRO=_debug__tools_vars VARIABLE=debug_gcode_state VALUE=0

#--------------------------------------------------------------------

[gcode_macro enable_debug_gcode_state]
description:
gcode:
	_proc_start function=enable_debug_gcode_state func_params='"{rawparams|string}"'
	
	SET_GCODE_VARIABLE MACRO=_debug__tools_vars VARIABLE=debug_gcode_state VALUE=1
	
	_enable_debug_gcode_state
	
	_proc_end function=enable_debug_gcode_state

#--------------------------------------------------------------------

[gcode_macro disable_debug_gcode_state]
description:
gcode:
	_proc_start function=disable_debug_gcode_state func_params='"{rawparams|string}"'
	_disable_debug_gcode_state
	_proc_end function=disable_debug_gcode_state

