#####################################################################
# 	PRINT_END
#	largely harmonized with CANCEL_PRINT procs
#####################################################################

[delayed_gcode __print_end_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=__print_end_loaded func_params='"{rawparams|string}"'
	_module_loaded MODULE=__print_end
	_proc_end function=__print_end_loaded

[gcode_macro PRINT_END]
description: Naturally end the running print
variable_retract_temp_min:		180			 # Minimum nozzle temperature to permit a retract. Otherwise, purge will not occur.
variable_print_end_scrub:		False
#rename_existing: _END_PRINT_STOCK <-- there is no stock print_end macro
gcode:

	_proc_start function=PRINT_END func_params='"{rawparams|string}"'

	# this proc gets entered when a print completes naturally, so no need to logically assess moving Z before/after XY
	# like is done in Print_Cancel (can be cancelled from pause, or from a print)

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	say S="Print Ending"

	_start_bounds_checking # re-enable automatic periodic H2O cooling parameter checks (in case canx'd by user or bounds tripped)

	######################### debug stuffs
#	{% if svv.module_debug_loaded %} _enable_trace_debug REASON='" ugh - Final Eject Too Much"' {% endif %}
#	{% if svv.module_debug_loaded %} _enable_gmove_debug REASON='" ugh - Final Eject Too Much"' {% endif %}
#	{% if svv.module_debug_loaded %} _enable_save_var_debug REASON='" ugh - Final Eject Too Much"' {% endif %}

	# wondering if this is contributing to the ercf timer too close issue.?.
#	M220 S100														# set feedrate percentage to default
#	M221 S100														# set speed percentage to default

	{% set th = printer.toolhead %}									# set context for printer.toolhead object

	{% set end_entry_ptr_state = svv.last_ptr_state %}					# store state for conditional use later herein
	{% if printer["gcode_macro _printer_vars"].ptr_verb_debug %} M118 _____ PRINT_END | end_entry_ptr_state: {end_entry_ptr_state} _____ {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
		M118 >>> Print Ending - svv.maxz:{svv.maxz} th.z:{th.position.z|float} <<<
	{% endif %}

	M118 PRINT_END @ S{printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%: X{printer.toolhead.position.x|round(3,'common')} Y{printer.toolhead.position.y|round(3,'common')} Z{printer.toolhead.position.z|round(3,'common')}

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_ending"'	# machine state save

#	stop_pause_alarm				# can't naturally end while paused, so no pause alarm to stop...

	######################### safe anti-stringing print-end wipe coords
	{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
	{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
	{% set z_safe = [(th.position.z|float + 1), th.axis_maximum.z|float]|min %}
	# {% set z_safe = [svv.maxz|float+1, th.axis_maximum.z]|min %}	# because, OAAT/SEQ context

	SAVE_GCODE_STATE NAME=STATE_PRINT_END

	_reset_extruder													# zero the extruder
	{% if printer.extruder.temperature|int >= retract_temp_min|int %}
		G1 E-0.4 F3600					  							# retract filament
	{% else %}
		M118 No print_end retract due to Low Temp...
	{% endif %}
	G0 X{x_safe} Y{y_safe} Z{z_safe} F15000							# move nozzle to remove stringing

	M400															# wait for buffer to clear

	########################  old park
	# ## {% set z_safe = [svv.maxz|float + 15, th.axis_maximum.z|float]|min|float %}
	# {% set z_safe = [(th.position.z|float + 15), th.axis_maximum.z|float]|min %}
	# G0 Z{z_safe} F6000  											# Move Up
	# G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y} F15000		# park nozzle at center rear

#	_park_head ENTRY='"{end_entry_ptr_state|string}"'
	_park_head ENTRY='print_ending'

	## CAUTION!!!  THIS FORCES A NOZZLE SCRUB AT THE END OF THE PRINT, WITH THE MODEL STILL ON THE BED
	# BE REALLY FUKIN CAREFUL AND KNOW WHAT IS GOING ON BEFORE ENABLING THIS...
	# And having shortened slicer's print bed enough so that no model ever gets printed on back where TH
	# could strike it during nozzle scrubs.  Also, if doing between mesh scrubs (i.e. OAAT/SEQ mode), be
	# sure to have the logic to elevate to (tallest model z-height (slicer passes maxz) before and after each.
	# Still a wip atm, but is close to being safe and robust (30Jan22).

	# {% if print_end_scrub or params.SCRUB|default(0)|int %}
		# # assumes that we're at rear center
		# G0 Z15 F1500  # drop down to pre-scrub Z15 absolute
		# CLEAN_NOZZLE DX={th.axis_maximum.x//2|float}  DY={th.axis_maximum.y|float}  DZ=15.0
	# {% endif %}

	_HOURMETER_OFF
	_PrintLED_Off

	RESTORE_GCODE_STATE NAME=STATE_PRINT_END

	{% if svv.module_ledeff_loaded %}
		_set_ledeff_mode CHAIN=chamber_lights	EFFECT=normal			# use LED_EFFECTS code
		_set_ledeff_mode CHAIN=lcd_lights 	EFFECT=normal			# use LED_EFFECTS code
		# _set_ledeff_mode CHAIN=ercf_lights	EFFECT=off				# use LED_EFFECTS code
		# _set_ledeff_mode CHAIN=dash_lights	EFFECT=off				# use LED_EFFECTS code
	{% else %}
		ChLts_Normal												# use Klipper Dotstar code
		LcdLts_Normal												# use Klipper Neopixel code
		# ERCFLts_off													# use Klipper Neopixel code
		# DBLts_off													# use Klipper Neopixel code
	{% endif %}

	M107															# turn off part cooling fan
	M117 Print Completed
	M106 S26														# forces small breeze across duct mounted chamber temp sensor
	M141 S40														# set chamber temp to 40 to help cool it down

	CLEAR_PAUSE						   								# reset the fw's pause state
	# SDCARD_RESET_FILE						   						# reset the fw's file state

	M300 P10 S1000													# sound off as print complete
	M300 P10 S2000
	M300 P10 S3000
	# snd_PrintEnd

	# _END_PRINT_STOCK <-- there is no stock print_end macro

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_ended"'						# machine state save
	SAVE_VARIABLE VARIABLE=maxz VALUE=0.0											# clear saved print dims
	SAVE_VARIABLE VARIABLE=has_wipe_tower VALUE=-1									# print state initialization
	SAVE_VARIABLE VARIABLE=v2_2526_slicer_check VALUE='"NULL"'						# clear slicer vitals
	SAVE_VARIABLE VARIABLE=last_saved_gcode_state VALUE='"NULL"'					# clear state variable
	SAVE_VARIABLE VARIABLE=ercf_swaps_last_complete_print VALUE={svv.ercf_swaps}	# save current swaps
#	SAVE_VARIABLE VARIABLE=ercf_swaps_last_canx_print VALUE={svv.ercf_swaps}	# save current swaps
	SAVE_VARIABLE VARIABLE=ercf_swaps VALUE=0										# clear swap

	printer_config_backup

	# need for an input prompt delay here due to klipper end print dialog (qol ya know)
	save_variable VARIABLE=print_end_unload  VALUE={params.UNLOAD|default(1)|int} 	# needed for _print_end_ui_unload
	GET_USER_INPUT_DELAY Delay=1.0 PROMPT="Turn Heaters Off? (YES/no):" RCVR_MACRO=_print_end_ui_cooldown TO_PERIOD=60 TO_CYCL_DEF=0 TO_RESP_DEF="YES"

	######################### debug stuffs
#	{% if svv.module_debug_loaded %} _disable_save_var_debug {% endif %}	# make sure svv debug off
#	{% if svv.module_debug_loaded %} _disable_gmove_debug {% endif %}
#	{% if svv.module_debug_loaded %} _disable_trace_debug {% endif %}

	_proc_end function=PRINT_END

[gcode_macro _print_end_ui_cooldown]
gcode:

	_proc_start function=_print_end_ui_cooldown func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	{% if params.UI_INPUT == YES or
		  params.UI_INPUT == 'YES' or
		  params.UI_INPUT == "YES" or
		  params.UI_INPUT == '"YES"' %}
		M118 Heaters to be turned off.
#		TURN_OFF_HEATERS
		save_variable VARIABLE=print_end_cool  VALUE=1 	# needed for _print_end_summary
	{% else %}
		M118 Heaters to be left on.
		save_variable VARIABLE=print_end_cool  VALUE=0 	# needed for _print_end_summary
	{% endif %}

	{% if svv.module_ercf_loaded %}
		{% if svv.print_end_unload %}
			# no need for an input prompt delay here...
			get_user_input PROMPT="Unload Filament? (YES/no):" RCVR_MACRO=_print_end_ui_unload TO_PERIOD=60 TO_CYCL_DEF=0 TO_RESP_DEF="YES"
			# _print_end_ui_unload chains to _print_end_summary
		{% else %}
			_print_end_summary
		{% endif %}
	{% else %}
		_print_end_summary
	{% endif %}

	_proc_end function=_print_end_ui_cooldown

[gcode_macro _print_end_ui_unload]
gcode:

	_proc_start function=_print_end_ui_unload func_params='"{rawparams|string}"'

	{% if params.UI_INPUT == YES or
		  params.UI_INPUT == 'YES' or
		  params.UI_INPUT == "YES" or
		  params.UI_INPUT == '"YES"' %}
		M118 Unloading Filament...
#fix: check for ercf module loaded??
		{% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
			SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0		#nix ercf encoder_sensor ops at end so unload doesn't trip a pause.
		{% endif %}
		{% if printer['filament_switch_sensor toolhead_sensor'].filament_detected == True %}
			SET_FILAMENT_SENSOR SENSOR=toolhead_sensor ENABLE=0		#nix ercf toolhead_sensor ops at end so unload doesn't trip a pause.
			ERCF_EJECT FINAL=1
		{% else %}
			# unload here via unknown
			SET_FILAMENT_SENSOR SENSOR=toolhead_sensor ENABLE=0		#nix ercf toolhead_sensor ops at end so unload doesn't trip a pause.
			ERCF_EJECT_UNKNOW_STATE
		{% endif %}
		M118 Filament unloaded.
	{% else %}
		M118 Filament load retained.
	{% endif %}

	_print_end_summary

	_proc_end function=_print_end_ui_unload

[gcode_macro _print_end_summary]
gcode:

	_proc_start function=_print_end_summary func_params='"{rawparams|string}"'

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object

	{% if svv.print_end_cool %}
		M141 S40														# set chamber temp to 40 to help cool it down
		TURN_OFF_HEATERS
		M118 Heaters off.
	{% else %}
		M118 Heaters remain on.
	{% endif %}

	# emit dialog in console/on lcd
	# {% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
	{% if svv.module_ercf_loaded %}
		{% if svv.ercf_swaps_last_complete_print > 1 %}
			M118 { ">>> Print Complete - " ~ svv.ercf_swaps_last_complete_print ~ " swaps with " ~ svv.ercf_interactions ~ " interactions. <<<" }
			M117 Done - {svv.ercf_swaps_last_complete_print} swaps
		{% else %}
			{% if svv.ercf_interactions %}
				M118 { ">>> Print Complete - " ~ svv.ercf_swaps_last_complete_print ~ " swaps with 1 interactions. <<<"  }
			{% else %}
				M118 { ">>> Print Complete - " ~ svv.ercf_swaps_last_complete_print ~ " swaps with no interactions. <<<"  }
			{% endif %}
			M117 Done - {svv.ercf_swaps_last_complete_print} swap
		{% endif %}
	{% else %}
		M118 >>> Print Complete <<<
		M117 Print Complete
		say S="Print Ended"
	{% endif %}

	get_user_input PROMPT="Unpload configs? (yes/NO):" RCVR_MACRO=cfg_upload_resp TO_PERIOD=60 TO_CYCL_DEF=0 TO_RESP_DEF="NO"

	_proc_end function=_print_end_summary
