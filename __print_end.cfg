#####################################################################
# 	PRINT_END
#####################################################################

[gcode_macro PRINT_END]
variable_retract_temp_min:		180			 # Minimum nozzle temperature to permit a retract. Otherwise, purge will not occur.
variable_print_end_scrub:		False
gcode:
	# this proc gets entered when a print completes naturally, so no need to logically assess moving Z before/after XY
	# like is done in Print_Cancel (can be cancelled from pause, or from a print)

	{% set svv = printer.save_variables.variables %}				# set context for save_variables object
	{% set th = printer.toolhead %}									# set context for printer.toolhead object

	{% set entry_ptr_state = svv.last_ptr_state %}				# store state for conditional use later herein

	{% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
		M118 >>> Print Ending - svv.maxz:{svv.maxz} th.z:{th.position.z|float} <<<
	{% endif %}

	# {% if svv.module_debug_loaded %} _enable_gmove_debug {% endif %}		# enable gmove_debug
	{% if svv.module_debug_loaded %} _disable_save_var_debug {% endif %}	# make sure svv debug off

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_ending"'	# machine state save

	######################### safe anti-stringing print-end wipe coords
	{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
	{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
	{% set z_safe = [(th.position.z|float + 1), th.axis_maximum.z|float]|min %}
	# {% set z_safe = [svv.maxz|float+1, th.axis_maximum.z]|min %}	# because, OAAT/SEQ context

	SAVE_GCODE_STATE NAME=STATE_PRINT_END

	_reset_extruder													# zero the extruder
	{% if printer.extruder.temperature|int >= retract_temp_min|int %}
		G1 E-0.4 F3600					  							# retract filament
	{% else %} 
		RESPOND MSG="No print_end retract due to Low Temp..."
	{% endif %}
	G0 X{x_safe} Y{y_safe} Z{z_safe} F15000							# move nozzle to remove stringing

	M400															# wait for buffer to clear

	########################  old park
	# ## {% set z_safe = [svv.maxz|float + 15, th.axis_maximum.z|float]|min|float %}
	# {% set z_safe = [(th.position.z|float + 15), th.axis_maximum.z|float]|min %}
	# G0 Z{z_safe} F6000  											# Move Up
	# G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y} F15000		# park nozzle at center rear

#	_park_head ENTRY='"{entry_ptr_state|string}"'
	_park_head ENTRY='print_ending'

	{% if params.UNLOAD|default(0)|int %}
		ERCF_EJECT
	{% endif %}

	## CAUTION!!!  THIS FORCES A NOZZLE SCRUB AT THE END OF THE PRINT, WITH THE MODEL STILL ON THE BED
	# BE REALLY FUKIN CAREFUL AND KNOW WHAT IS GOING ON BEFORE ENABLING THIS...
	# And having shortened slicer's print bed enough so that no model ever gets printed on back where TH
	# could strike it during nozzle scrubs.  Also, if doing between mesh scrubs (i.e. OAAT/SEQ mode), be
	# sure to have the logic to elevate to (tallest model z-height (slicer passes maxz) before and after each.
	# Still a wip atm, but is close to being safe and robust (30Jan22).

	{% if print_end_scrub or params.SCRUB|default(0)|int %}
		# assumes that we're at rear center
		G0 Z15 F1500  # drop down to pre-scrub Z15 absolute
		CLEAN_NOZZLE DX={th.axis_maximum.x//2|float}  DY={th.axis_maximum.y|float}  DZ=15.0
	{% endif %}

	M107															# turn off part cooling fan

	_HOURMETER_OFF
	_PrintLED_Off

	RESTORE_GCODE_STATE NAME=STATE_PRINT_END

	M117 Print Completed
	M220 S100														# set feedrate percentage to default
	M221 S100														# set speed percentage to default
	M106 S26														# forces small breeze across duct mounted chamber temp sensor
	M141 S40														# set chamber temp to 40 to help cool it down

	TURN_OFF_HEATERS						   						# so we've completed the print, might as well start to cool it down
	CLEAR_PAUSE						   								# reset the fw's pause state
	# SDCARD_RESET_FILE						   						# reset the fw's file state

	M300 P10 S1000													# sound off print complete
	M300 P10 S2000
	M300 P10 S3000
	# snd_PrintEnd

	{% if svv.module_ledeff_loaded %}
		set_light_mode CHAIN=chamber_lights	EFFECT=normal	RESET=1	# uses LED_EFFECTS code
		set_light_mode CHAIN=lcd_lights 	EFFECT=normal	RESET=1	# uses LED_EFFECTS code
		set_light_mode CHAIN=ercf_lights	EFFECT=off		RESET=1	# uses LED_EFFECTS code
		set_light_mode CHAIN=dash_lights	EFFECT=off		RESET=1	# uses LED_EFFECTS code
	{% else %}
		ChLts_Normal		# set chamber lights to normal	- uses Klipper Dotstar code
		LcdLts_Normal		# set lcd lights to normal		- uses Klipper Neopixel code
		ERCFLts_off			# set ercf lights to normal		- uses Klipper Neopixel code
		DBLts_off			# set dash lights to normal		- uses Klipper Neopixel code
	{% endif %}

	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"print_ended"'		# machine state save
	SAVE_VARIABLE VARIABLE=final_maxz VALUE={svv.maxz}				# clear saved print dims
	SAVE_VARIABLE VARIABLE=maxz VALUE=0.0							# clear saved print dims
	SAVE_VARIABLE VARIABLE=has_wipe_tower VALUE=-1					# print state initialization
	SAVE_VARIABLE VARIABLE=v2_2526_slicer_check VALUE='"NULL"'		# clear slicer vitals
	SAVE_VARIABLE VARIABLE=last_saved_gcode_state VALUE='"NULL"'

	# emit dialog in console/on lcd
	# {% if printer["gcode_macro _printer_vars"].ptr_verb_info %}
	{% if 1 %}
		{% if svv.module_ercf_loaded %}
			{ action_respond_info(">>> Print Complete - " + svv.ercf_swaps|string + " swaps. <<<" ) }
			M117 Done - {svv.ercf_swaps} swaps.
		{% else %}
			M118 >>> Print Complete <<<
			M117 Print Complete
		{% endif %}
	{% endif %}

	printer_config_backup

	{% if svv.module_debug_loaded %} _disable_gmove_debug {% endif %}

