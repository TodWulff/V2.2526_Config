#####################################################################
# _svv_debug
#####################################################################

[delayed_gcode _svv_debug_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_svv_debug_loaded func_params='"{rawparams|string}"'
	_module_loaded MODULE=_svv_debug
	_proc_end function=_svv_debug_loaded

#--------------------------------------------------------------------

[gcode_macro _info_svv_debug_macros]
gcode:
	#todo
	
#--------------------------------------------------------------------

[gcode_macro _svv_debug_vars]
description: macro for _svv_debug variables

gcode:

	_proc_start function=_svv_debug_vars func_params='"{rawparams|string}"'

	# there is none, this is for module variable use only

	_proc_end function=_svv_debug_vars

#--------------------------------------------------------------------

[delayed_gcode _svv_debug_module_start]
#description: Inits svv flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5					# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_svv_debug_module_start func_params='"{rawparams|string}"'
 
	{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _svv_debug_module_start Start <<< {% endif %}

	SAVE_VARIABLE VARIABLE=module_svv_debug_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_svv_debug_err_flag VALUE=0							#init error flag that this module is not in error

	{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _svv_debug_module_start End <<< {% endif %}

	_proc_end function=_svv_debug_module_start

#--------------------------------------------------------------------

[gcode_macro SAVE_VARIABLE]
#####################################################################
#  realtime save_var debug echo
#####################################################################
description: SAVE_VARIABLE, with console echo if so enabled
# does type conversion of numbers too, pulling them out of strings
# optional param RAW, if passed and != 0, bypasses the type conversion
rename_existing: _SAVE_VARIABLE_STOCK
gcode:

	_proc_start function=SAVE_VARIABLE func_params='"{rawparams|string}"'  

	{% set save_var = params.VARIABLE|lower %}			# lower case var names are required
	{% set save_val = params.VALUE %}
	{% set save_raw = params.RAW|default(0)|int %}

	{% if printer["gcode_macro _debug_tools_vars"].force_svv_typing and save_raw == 0 %}

		## forcibly save numbers as numbers (int/float) and not within strings, 
		## even though passed numbers may be stringified
		{% if save_val|replace("\"","")|int|string == save_val|replace("\"","")|string %}		# test for int
			{% set svv_VALUE = save_val|replace("\"","")|int %}									# it's an int, so strip any string encapsulations
		{% elif save_val|replace("\"","")|float|string == save_val|replace("\"","")|string %}	# test for float
			{% set svv_VALUE = save_val|replace("\"","")|float %}								# it's a float, so strip any string encapsulations
		{% else %}																				# it's not a number
			{% set svv_VALUE = "'" + save_val|string + "'" %}									# so wrap in string encapsulation chars
		{% endif %}
	
	{% endif %}
	
	{% if printer["gcode_macro _debug_tools_vars"].save_var_debug %} M118 _>_ _SAVE_VARIABLE_STOCK: VARIABLE={save_var} VALUE={svv_VALUE} _<_ {% endif %}

	_SAVE_VARIABLE_STOCK VARIABLE={save_var} VALUE={svv_VALUE}

	_proc_end function=SAVE_VARIABLE 

#--------------------------------------------------------------------

[gcode_macro _enable_save_var_debug]
description: used to enable save_var debug
gcode:

	_proc_start function=_enable_save_var_debug func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _debug_tools_vars"].debug_verb_status %} M118 >>>>> _enable_save_var_debug <<<<< {% endif %}
	SET_GCODE_VARIABLE MACRO=_debug_tools_vars VARIABLE=save_var_debug VALUE=1
	say_wait S="Save Variable Debug Enabled"

	_proc_end function=_enable_save_var_debug 

#--------------------------------------------------------------------

[gcode_macro _disable_save_var_debug]
description: used to disable save_var debug
gcode:

	_proc_start function=_disable_save_var_debug func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _debug_tools_vars"].debug_verb_status %} M118 >>>>> _disable_save_var_debug <<<<< {% endif %}
	SET_GCODE_VARIABLE MACRO=_debug_tools_vars VARIABLE=save_var_debug VALUE=0
	say_wait S="Save Variable Debug Disabled"

	_proc_end function=_disable_save_var_debug 

#--------------------------------------------------------------------

[gcode_macro enable_save_var_debug]
description:
gcode:
	_proc_start function=enable_save_var_debug func_params='"{rawparams|string}"'
	_enable_save_var_debug
	_proc_end function=enable_save_var_debug

#--------------------------------------------------------------------

[gcode_macro disable_save_var_debug]
description:
gcode:
	_proc_start function=disable_save_var_debug func_params='"{rawparams|string}"'
	_disable_save_var_debug
	_proc_end function=disable_save_var_debug
