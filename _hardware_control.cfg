#####################################################################
# _hardware_control
#####################################################################

#--------------------------------------------------------------------

[delayed_gcode _hardware_control_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_hardware_control_loaded func_params='"{rawparams|string}"'
	_module_loaded MODULE=_hardware_control
	_proc_end function=_hardware_control_loaded

#--------------------------------------------------------------------

[gcode_macro _info_hardware_control_macros]
gcode:
	#todo
	
#--------------------------------------------------------------------

[gcode_macro _hardware_control_vars]
description: macro for _hardware_control variables

gcode:

	_proc_start function=_hardware_control_vars func_params='"{rawparams|string}"'

	# there is none, this is for module variable use only

	_proc_end function=_hardware_control_vars

#--------------------------------------------------------------------

[delayed_gcode _hardware_control_module_start]
#description: Inits state flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5					# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_hardware_control_module_start func_params='"{rawparams|string}"'
 
	{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _hardware_control_module_start Start <<< {% endif %}

	SAVE_VARIABLE VARIABLE=module_hardware_control_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_hardware_control_err_flag VALUE=0							#init error flag that this module is not in error

	{% if printer["gcode_macro _printer_vars"].ptr_verb_modload %} M118 >>> _hardware_control_module_start End <<< {% endif %}

	_proc_end function=_hardware_control_module_start

#--------------------------------------------------------------------

[idle_timeout]
timeout: 18000 #in seconds - 18000= 5hr, 3600 = 1hr
gcode:

	_proc_start function=idle_timeout func_params='"{rawparams|string}"'

	M84
	TURN_OFF_HEATERS
	## TODO: add dly for HE to cool to some threshold (HeatCreep Prevention)
	UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=60

	_proc_end function=idle_timeout
	
#--------------------------------------------------------------------

[gcode_shell_command power_off_printer_outlet]
# tasmota sonoff outlet control
command: curl "http://10.0.0.25/cm?cmnd=Backlog%3BDelay%200%3BPower%20OFF"
timeout: 2
verbose: false

#--------------------------------------------------------------------

[gcode_shell_command power_on_printer_outlet]
# tasmota sonoff outlet control
command: curl "http://10.0.0.25/cm?cmnd=Backlog%3BDelay%200%3BPower%20ON"
timeout: 2
verbose: false

