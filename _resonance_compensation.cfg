#####################################################################
# Resonance compensation Config
#####################################################################

[delayed_gcode _resonance_compensation_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_resonance_compensation_loaded func_params='"{rawparams|string}"'  
	_module_loaded MODULE=_resonance_compensation
	_proc_end function=_resonance_compensation_loaded 

[gcode_macro _info_resonance_compensation]
gcode:

# todo

[input_shaper]
shaper_type_x = 2hump_ei
shaper_freq_x = 62.2
shaper_type_y = mzv
shaper_freq_y = 34.4

[adxl345]
cs_pin: pico:gpio1
#rate: 1600
 
[resonance_tester]
accel_chip: adxl345
probe_points:
	175,175,20  # an example

#####################################################################
# Resonance compensation¶
#####################################################################

#	https://www.klipper3d.org/Resonance_Compensation.html
#	https://www.klipper3d.org/Measuring_Resonances.html

#	ACCELEROMETER_QUERY
#	MEASURE_AXES_NOISE 
#	TEST_RESONANCES AXIS=X
#	TEST_RESONANCES AXIS=Y
#	~/klipper/scripts/calibrate_shaper.py /tmp/resonances_x_*.csv -o /tmp/shaper_calibrate_x.png
#	~/klipper/scripts/calibrate_shaper.py /tmp/resonances_y_*.csv -o /tmp/shaper_calibrate_y.png

#
#	The table below shows some (usually approximate) parameters of each shaper.
#
#	Input		Shaper					Vibration reduction 20x			Vibration reduction 10x
#	shaper		duration				(5% vibration tolerance)		(10% vibration tolerance)
#	------------------------------------------------------------------------------------
#	ZV			0.5 / shaper_freq			N/A							± 5% shaper_freq
#	MZV			0.75 / shaper_freq		± 4% shaper_freq				-10%...+15% shaper_freq
#	ZVD			1 / shaper_freq			± 15% shaper_freq				± 22% shaper_freq
#	EI			1 / shaper_freq			± 20% shaper_freq				± 25% shaper_freq
#	2HUMP_EI	1.5 / shaper_freq		± 35% shaper_freq				± 40 shaper_freq
#	3HUMP_EI	2 / shaper_freq			-45...+50% shaper_freq			-50%...+55% shaper_freq
#
#	A note on vibration reduction: the values in the table above are approximate. If the damping 
#	ratio of the printer is known for each axis, the shaper can be configured more precisely and it 
#	will then reduce the resonances in a bit wider range of frequencies. However, the damping ratio 
#	is usually unknown and is hard to estimate without a special equipment, so Klipper uses 0.1 value
#	by default, which is a good all-round value. The frequency ranges in the table cover a number of 
#	different possible damping ratios around that value (approx. from 0.05 to 0.2).
#
#	Also note that EI, 2HUMP_EI, and 3HUMP_EI are tuned to reduce vibrations to 5%, so the values for
#	10% vibration tolerance are provided only for the reference.
#
#	How to use this table:
#
#	Shaper duration affects the smoothing in parts - the larger it is, the more smooth the parts are. 
#	This dependency is not linear, but can give a sense of which shapers 'smooth' more for the same 
#	frequency. The ordering by smoothing is like this: ZV < MZV < ZVD ≈ EI < 2HUMP_EI < 3HUMP_EI. Also,
#	it is rarely practical to set shaper_freq = resonance freq for shapers 2HUMP_EI and 3HUMP_EI (they
#	should be used to reduce vibrations for several frequencies).
#
#	One can estimate a range of frequencies in which the shaper reduces vibrations. For example, MZV 
#	with shaper_freq = 35 Hz reduces vibrations to 5% for frequencies [33.6, 36.4] Hz. 3HUMP_EI with 
#	shaper_freq = 50 Hz reduces vibrations to 5% in range [27.5, 75] Hz.
#
#	One can use this table to check which shaper they should be using if they need to reduce vibrations
#	at several frequencies. For example, if one has resonances at 35 Hz and 60 Hz on the same axis: a) EI
#	shaper needs to have shaper_freq = 35 / (1 - 0.2) = 43.75 Hz, and it will reduce resonances until 
#	43.75 * (1 + 0.2) = 52.5 Hz, so it is not sufficient# b) 2HUMP_EI shaper needs to have shaper_freq =
#	35 / (1 - 0.35) = 53.85 Hz and will reduce vibrations until 53.85 * (1 + 0.35) = 72.7 Hz - so this is 
#	an acceptable configuration. Always try to use as high shaper_freq as possible for a given shaper 
#	(perhaps with some safety margin, so in this example shaper_freq ≈ 50-52 Hz would work best), and try
#	to use a shaper with as small shaper duration as possible.
#
#	If one needs to reduce vibrations at several very different frequencies (say, 30 Hz and 100 Hz), they
#	may see that the table above does not provide enough information. In this case one may have more luck
#	with scripts/graph_shaper.py script, which is more flexible.

#####################################################################
#  [input_shaper]¶
#####################################################################

# Enables resonance compensation. Also see the command reference.

#	SET_PRESSURE_ADVANCE ADVANCE=0
#	SET_INPUT_SHAPER SHAPER_TYPE=MZV
#	TUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1250 FACTOR=100 BAND=5
#

#[input_shaper]
#shaper_freq_x: 0
#   A frequency (in Hz) of the input shaper for X axis. This is
#   usually a resonance frequency of X axis that the input shaper
#   should suppress. For more complex shapers, like 2- and 3-hump EI
#   input shapers, this parameter can be set from different
#   considerations. The default value is 0, which disables input
#   shaping for X axis.
#shaper_freq_y: 0
#   A frequency (in Hz) of the input shaper for Y axis. This is
#   usually a resonance frequency of Y axis that the input shaper
#   should suppress. For more complex shapers, like 2- and 3-hump EI
#   input shapers, this parameter can be set from different
#   considerations. The default value is 0, which disables input
#   shaping for Y axis.
#shaper_type: mzv
#   A type of the input shaper to use for both X and Y axes. Supported
#   shapers are zv, mzv, zvd, ei, 2hump_ei, and 3hump_ei. The default
#   is mzv input shaper.
#shaper_type_x:
#shaper_type_y:
#   If shaper_type is not set, these two parameters can be used to
#   configure different input shapers for X and Y axes. The same
#   values are supported as for shaper_type parameter.
#damping_ratio_x: 0.1
#damping_ratio_y: 0.1
#   Damping ratios of vibrations of X and Y axes used by input shapers
#   to improve vibration suppression. Default value is 0.1 which is a
#   good all-round value for most printers. In most circumstances this
#   parameter requires no tuning and should not be changed.

#--------------------------------------------------------------------
#  Input Shaper Command¶
#--------------------------------------------------------------------
# The following command is enabled if an input_shaper config section has been 
# enabled (also see the resonance compensation guide):

# SET_INPUT_SHAPER [SHAPER_FREQ_X=<shaper_freq_x>] [SHAPER_FREQ_Y=<shaper_freq_y>] 
# [DAMPING_RATIO_X=<damping_ratio_x>] [DAMPING_RATIO_Y=<damping_ratio_y>] [SHAPER_TYPE=<shaper>] 
# [SHAPER_TYPE_X=<shaper_type_x>] [SHAPER_TYPE_Y=<shaper_type_y>]: Modify input shaper parameters.
# Note that SHAPER_TYPE parameter resets input shaper for both X and Y axes even if different shaper 
# types have been configured in [input_shaper] section. SHAPER_TYPE cannot be used together with 
# either of SHAPER_TYPE_X and SHAPER_TYPE_Y parameters. See config reference for more details on 
# each of these parameters.

#####################################################################
# 	ADXL345 Definitions
#####################################################################

#[adxl345]
#cs_pin:
#   The SPI enable pin for the sensor. This parameter must be provided.
#spi_speed: 5000000
#   The SPI speed (in hz) to use when communicating with the chip.
#   The default is 5000000.
#   The default may depends on the type of device.
#spi_bus:
#   If the micro-controller supports multiple SPI busses then one may
#   specify the micro-controller bus name here. The default depends on
#   the type of micro-controller.
#spi_software_sclk_pin:
#spi_software_mosi_pin:
#spi_software_miso_pin:
#   Specify the above parameters to use "software based SPI". This
#   mode does not require micro-controller hardware support (typically
#   any general purpose pins may be used). The default is to not use
#   "software spi".
#axes_map: x,y,z
#   The accelerometer axis for each of the printer's x, y, and z axes.
#   This may be useful if the accelerometer is mounted in an
#   orientation that does not match the printer orientation. For
#   example, one could set this to "y,x,z" to swap the x and y axes.
#   It is also possible to negate an axis if the accelerometer
#   direction is reversed (eg, "x,z,-y"). The default is "x,y,z".
#rate: 1600
#   Output data rate for ADXL345. ADXL345 supports the following data
#   rates: 3200, 1600, 800, 400, 200, 100, 50, and 25. Note that it is
#   not recommended to change this rate from the default 3200, and
#   rates below 800 will considerably affect the quality of resonance
#   measurements.

#--------------------------------------------------------------------
#  Adxl345 Accelerometer Commands¶
#--------------------------------------------------------------------

#The following commands are available when an adxl345 config section is enabled:

#ACCELEROMETER_MEASURE [CHIP=<config_name>] [NAME=<value>]: Starts accelerometer 
# measurements at the requested number of samples per second. If CHIP is not specified  
# it defaults to "adxl345". The command works in a start-stop mode: when executed for  
# the first time, it starts the measurements, next execution stops them. The results  
# of measurements are written to a file named /tmp/adxl345-<chip>-<name>.csv where  
# <chip> is the name of the accelerometer chip (my_chip_name from [adxl345 my_chip_name])  
# and <name> is the optional NAME parameter. If NAME is not specified it defaults to  
# the current time in "YYYYMMDD_HHMMSS" format. If the accelerometer does not have a  
# name in its config section (simply [adxl345]) then <chip> part of the name is not generated.

#ACCELEROMETER_QUERY [CHIP=<config_name>] [RATE=<value>]: queries accelerometer for the  
# current value. If CHIP is not specified it defaults to "adxl345". If RATE is not specified,  
# the default value is used. This command is useful to test the connection to the ADXL345  
# accelerometer: one of the returned values should be a free-fall acceleration (+/- some  
# noise of the chip).

#ACCELEROMETER_DEBUG_READ [CHIP=<config_name>] REG=<register>: queries ADXL345 register (e.g.  
# 44 or 0x2C). Can be useful for debugging purposes.

#ACCELEROMETER_DEBUG_WRITE [CHIP=<config_name>] REG=<reg> VAL=<value>: writes raw into a  
# register . Both and can be a decimal or a hexadecimal integer. Use with care, and refer  
# to ADXL345 data sheet for the reference.

#####################################################################
# 	Resonance Testing Definitions
#####################################################################

#[resonance_tester]
#probe_points:
#   A list of X,Y,Z coordinates of points (one point per line) to test
#   resonances at. At least one point is required. Make sure that all
#   points with some safety margin in XY plane (~a few centimeters)
#   are reachable by the toolhead.
#accel_chip:
#   A name of the accelerometer chip to use for measurements. If
#   adxl345 chip was defined without an explicit name, this parameter
#   can simply reference it as "accel_chip: adxl345", otherwise an
#   explicit name must be supplied as well, e.g. "accel_chip: adxl345
#   my_chip_name". Either this, or the next two parameters must be
#   set.
#accel_chip_x:
#accel_chip_y:
#   Names of the accelerometer chips to use for measurements for each
#   of the axis. Can be useful, for instance, on bed slinger printer,
#   if two separate accelerometers are mounted on the bed (for Y axis)
#   and on the toolhead (for X axis). These parameters have the same
#   format as 'accel_chip' parameter. Only 'accel_chip' or these two
#   parameters must be provided.
#max_smoothing:
#   Maximum input shaper smoothing to allow for each axis during shaper
#   auto-calibration (with 'SHAPER_CALIBRATE' command). By default no
#   maximum smoothing is specified. Refer to Measuring_Resonances guide
#   for more details on using this feature.
#min_freq: 5
#   Minimum frequency to test for resonances. The default is 5 Hz.
#max_freq: 120
#   Maximum frequency to test for resonances. The default is 120 Hz.
#accel_per_hz: 75
#   This parameter is used to determine which acceleration to use to
#   test a specific frequency: accel = accel_per_hz * freq. Higher the
#   value, the higher is the energy of the oscillations. Can be set to
#   a lower than the default value if the resonances get too strong on
#   the printer. However, lower values make measurements of
#   high-frequency resonances less precise. The default value is 75
#   (mm/sec).
#hz_per_sec: 1
#   Determines the speed of the test. When testing all frequencies in
#   range [min_freq, max_freq], each second the frequency increases by
#   hz_per_sec. Small values make the test slow, and the large values
#   will decrease the precision of the test. The default value is 1.0
#   (Hz/sec == sec^-2).

#--------------------------------------------------------------------
#  Resonance Testing Commands¶
#--------------------------------------------------------------------

#The following commands are available when a resonance_tester config 
# section is enabled (also see the measuring resonances guide):

#MEASURE_AXES_NOISE: Measures and outputs the noise for all axes of all 
# enabled accelerometer chips.

#TEST_RESONANCES AXIS=<axis> OUTPUT=<resonances,raw_data> [NAME=<name>] 
# [FREQ_START=<min_freq>] [FREQ_END=<max_freq>] [HZ_PER_SEC=<hz_per_sec>] 
# [INPUT_SHAPING=[<0:1>]]: Runs the resonance test in all configured probe  
# points for the requested and measures the acceleration using the  
# accelerometer chips configured for the respective axis. can either be X or Y,  
# or specify an arbitrary direction as AXIS=dx,dy, where dx and dy are floating  
# point numbers defining a direction vector (e.g. AXIS=X, AXIS=Y, or AXIS=1,-1  
# to define a diagonal direction). Note that AXIS=dx,dy and AXIS=-dx,-dy is  
# equivalent. If INPUT_SHAPING=0 or not set (default), disables input shaping  
# for the resonance testing, because it is not valid to run the resonance  
# testing with the input shaper enabled. OUTPUT parameter is a comma-separated  
# list of which outputs will be written. If raw_data is requested, then the raw  
# accelerometer data is written into a file or a series of files  
# /tmp/raw_data_<axis>_[<point>_]<name>.csv with (<point>_ part of the name  
# generated only if more than 1 probe point is configured). If resonances is  
# specified, the frequency response is calculated (across all probe points) and  
# written into /tmp/resonances_<axis>_<name>.csv file. If unset, OUTPUT defaults  
# to resonances, and NAME defaults to the current time in "YYYYMMDD_HHMMSS" format.

#SHAPER_CALIBRATE [AXIS=<axis>] [NAME=<name>] [FREQ_START=<min_freq>]  
# [FREQ_END=<max_freq>] [HZ_PER_SEC=<hz_per_sec>] [MAX_SMOOTHING=<max_smoothing>]:  
# Similarly to TEST_RESONANCES, runs the resonance test as configured, and tries to  
# find the optimal parameters for the input shaper for the requested axis (or both X  
# and Y axes if AXIS parameter is unset). If MAX_SMOOTHING is unset, its value is taken  
# from [resonance_tester] section, with the default being unset. See the Max smoothing  
# of the measuring resonances guide for more information on the use of this feature.  
# The results of the tuning are printed to the console, and the frequency responses a 
# nd the different input shapers values are written to a CSV file(s)  
# /tmp/calibration_data_<axis>_<name>.csv. Unless specified, NAME defaults to the current  
# time in "YYYYMMDD_HHMMSS" format. Note that the suggested input shaper parameters can  
# be persisted in the config by issuing SAVE_CONFIG command.

