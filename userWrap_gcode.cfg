#####################################################################
# _userWrap_gcode
#####################################################################

[delayed_gcode _userWrap_gcode_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_gcode_loaded func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'
	_module_loaded MODULE=_userWrap_gcode
	_proc_end function=_gcode_loaded

#--------------------------------------------------------------------

[gcode_macro _info_userWrap_gcode]
gcode:

# user config to wrap FW procs constained in gcode.cfg

#--------------------------------------------------------------------

[gcode_macro _userWrap_gcode_vars]
description: macro for _gcode variables

gcode:

	_proc_start function=_gcode_vars func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	# there is none, this is for module variable use only

	_proc_end function=_gcode_vars

#--------------------------------------------------------------------

[delayed_gcode _userWrap_gcode_module_start]
#description: Inits svv flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5					# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_gcode_module_start func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	SAVE_VARIABLE VARIABLE=module_gcode_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_gcode_err_flag VALUE=0							#init error flag that this module is not in error

	_proc_end function=_gcode_module_start

#--------------------------------------------------------------------

# [gcode_macro default]
# description: wrap FW proc for userLogging purposes  - ACTUALLY DUNNO WTF THIS IS FOR IN FW...
# RENAME_EXISTING: _default_STOCK
# gcode:
# 
# 	_proc_start function=default func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'
# 
# 	_default_STOCK {rawparams}
# 
# 	_proc_end function=default

#--------------------------------------------------------------------

[gcode_macro ECHO]
description: wrap FW proc for userLogging purposes
RENAME_EXISTING: _ECHO_STOCK
gcode:

	_proc_start function=ECHO func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	_ECHO_STOCK {rawparams}

	_proc_end function=ECHO

#--------------------------------------------------------------------

[gcode_macro HELP]
description: wrap FW proc for userLogging purposes
RENAME_EXISTING: _HELP_STOCK
gcode:

	_proc_start function=HELP func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	_HELP_STOCK {rawparams}

	_proc_end function=HELP

#--------------------------------------------------------------------

[gcode_macro M110]
description: wrap FW proc for userLogging purposes
RENAME_EXISTING: M110.1
gcode:

	_proc_start function=M110 func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	M110.1 {rawparams}

	_proc_end function=M110

#--------------------------------------------------------------------

[gcode_macro M115]
description: wrap FW proc for userLogging purposes
RENAME_EXISTING: M115.1
gcode:

	_proc_start function=M115 func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	M115.1 {rawparams}

	_proc_end function=M115

#--------------------------------------------------------------------

[gcode_macro M112]				# FOR TESTING QUEUE BYPASS ATTEMPTS
description: test wrapper to see if queue bypass is possible - it is not in this manner
rename_existing: M112.1
gcode:

	_proc_start function=M112 func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	{% if params.INJECT %}
		#do process'g here?
		#save_variable VARIABLE=test_m112_inject	VALUE={printer.system_stats.cputime}
		{ action_respond_info("fired @ " ~ printer.system_stats.cputime) }
		# use tail _globals.pvar -n75 -f in ssh session to see if update is immediate
	{% else %}
		M112.1 {rawparams}
	{% endif %}

	_proc_end function=M112

#--------------------------------------------------------------------

[gcode_macro STATUS]
description: wrap FW proc for userLogging purposes
RENAME_EXISTING: _STATUS_STOCK
gcode:

	_proc_start function=STATUS func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	_STATUS_STOCK {rawparams}

	_proc_end function=STATUS

#--------------------------------------------------------------------

[gcode_macro FIRMWARE_RESTART]				# FW Wrapper to save existing heat settings at a FIRMWARE_RESTART
description: wrap FW proc to save existing heat settings at a FIRMWARE_RESTART
RENAME_EXISTING: _FIRMWARE_RESTART_STOCK
gcode:

	_proc_start function=FIRMWARE_RESTART func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	{% set svv = printer.save_variables.variables %}

	# see if any heat is applied and, if so, flag for restoration at boot
	save_variable VARIABLE=boot_extruder_temp VALUE={svv.extruder_temp_setting}
	save_variable VARIABLE=boot_heater_bed_temp VALUE={svv.heater_bed_temp_setting}

	say_wait S="Restarting Printer Firmware"

	_FIRMWARE_RESTART_STOCK

	_proc_end function=FIRMWARE_RESTART

#--------------------------------------------------------------------

[gcode_macro RESTART]
description: wrap FW proc to save existing heat settings at a restart
RENAME_EXISTING: _RESTART_STOCK
gcode:

	_proc_start function=RESTART func_params='"{rawparams|string|replace("\\\"", "")|replace("\\\'", "")|replace("\"", "")|replace("\'", "")}"'

	{% set svv = printer.save_variables.variables %}

	# see if any heat is applied and, if so, flag for restoration at boot
	save_variable VARIABLE=boot_extruder_temp VALUE={svv.extruder_temp_setting}
	save_variable VARIABLE=boot_heater_bed_temp VALUE={svv.heater_bed_temp_setting}

	stop_music

	say_wait S="Restarting Klipper"

#	FIRMWARE_RESTART #<-- had used this because of silly case error, but now RESTART_STOCK works (RESTART_stock wasn't and that is due to casing. ugh...)
	_RESTART_STOCK

	_proc_end function=RESTART

#--------------------------------------------------------------------

