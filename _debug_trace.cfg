#####################################################################
# _debug_trace
#####################################################################

[delayed_gcode _debug_trace_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_debug_trace_loaded func_params='"{rawparams|string}"'
	_module_loaded MODULE=_debug_trace
	_proc_end function=_debug_trace_loaded

#--------------------------------------------------------------------

[gcode_macro _info_debug_trace_macros]
gcode:

# todo - write up on module's purpose/function/implementation/use
# see user_interaction for an example of intended use
	
#--------------------------------------------------------------------

[gcode_macro _debug_trace_vars]
description: macro for _debug_trace variables

variable_modload_debug_emissions:			0	# set to 0 to mute annun of _module_loaded proc running

gcode:

	_proc_start function=_debug_trace_vars func_params='"{rawparams|string}"'

	# there is none, this is for module variable use only

	_proc_end function=_debug_trace_vars

#--------------------------------------------------------------------

[delayed_gcode _debug_trace_module_start]
#description: Inits trace flags & other stuffs for conditional use elsewhere.
# module load verbosity controlled by _printer_vars in printer.cfg
# module specific verbosity controlled by above
initial_duration: 0.5					# have this at 0.5s as init code in ___startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_debug_trace_module_start func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE=module_debug_trace_loaded VALUE=1						#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_debug_trace_err_flag VALUE=0							#init error flag that this module is not in error

	_proc_end function=_debug_trace_module_start

#--------------------------------------------------------------------

[gcode_macro _module_loaded]				# Enables Module Loading Annciation
description: This is used by each included .cfg to enable annunciation of its being loaded
gcode:

	# added a bool to suppress this macro's announcements, if debug is enabled, so that
	# stuff I am chasing at startup doesn't get lost in the noise of this macro announcing
	# that is is running to enable all the configs announcing that they are loading... lol
	{% if printer["gcode_macro _debug_trace_vars"].modload_debug_emissions %}
		_proc_start function=_module_loaded func_params='"{rawparams|string}"'
	{% endif %}
	 
	{% if printer["gcode_macro _debug__tools_vars"].ptr_verb_cfgload %}
		log_trace S=">>> {params.MODULE|lower} Loaded <<<"
	{% endif %}

	{% if printer["gcode_macro _debug_trace_vars"].modload_debug_emissions %}
		_proc_end function=_module_loaded
	{% endif %}

#--------------------------------------------------------------------

[gcode_macro _proc_start]
description: for trace debug purposes - presents nesting depth as leading back-tics
# passed params:
#	function=_some_macro_name
#	func_params='"{rawparams|string}"'		#<-- can have spaces (i.e. multiple paramaters) thus need to encapsulate as string

variable_depth_color =	["khaki", "lightcoral", "skyblue", "violet", "gray", "lemonchiffon", "lime", "white", "yellow", "lightsalmon"]

gcode:

# RECURSION	... _proc_start function=_proc_start func_params='"{rawparams|string}"'

	{% if printer["gcode_macro _debug__tools_vars"].debug_codetrace %}

		{% set svv = printer.save_variables.variables %}					# set easy accesss context for save_variables object

		_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE={svv.proc_depth + 1|int}	# increment depth counter

		{% set this1 = namespace(depth_indent = "`") %} 					# btic is proc_depth indicator

		{% for iter in range(svv.proc_depth|int) %}							# using namespace so it can be manipulated within this for loop
			{% set this1.depth_indent = this1.depth_indent + "`" %}			# add a btic for each layer of nested code
		{% endfor %}

		{% set new_params = rawparams|replace("function=", "") %}		# strip function= from passed params
		{% set new_params = new_params|replace("func_params=", "") %}	# strip func_params=
		
		{% set new_params = new_params|replace("\\\"", "")|replace("\\\'", "") %}	# strip string encapsulation escapes
		
		{% set new_params = new_params|replace("'", "") %}				# strip ' portion of string encapsulation
		{% set new_params = new_params|replace("\"", "") %}				# strip " portion of string encapsulation

		#debug logging
		log_trace S="{this1.depth_indent ~ " " ~ new_params|upper}"

	{% endif %}

# RECURSION	... 	_proc_end function=_proc_start

#--------------------------------------------------------------------

[gcode_macro _proc_end]
description: for trace debug purposes - presents depth as leading back-tics
#	function=_some_macro_name

# See color array in _proc_start - this might be useful for dim colors on exit.?.
# variable_depth_color =	["brown", "red", "orange", "yellow", "green", "blue", "violet", "gray", "white"]

gcode:

# RECURSION	... _proc_start function=_proc_end func_params='"{rawparams|string}"'

	{% if printer["gcode_macro _debug__tools_vars"].debug_codetrace %}

		{% set svv = printer.save_variables.variables %}						# set easy accesss context for save_variables object

		{% set this1 = namespace(depth_indent = "`") %} 						# proc_depth

		_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE={svv.proc_depth - 1|int}	# decrement depth counter

		{% if svv.proc_depth|int < 0 %}
			_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE=0						# in theory, we should never get here...
		{% endif %}

		{% if printer["gcode_macro _debug__tools_vars"].debug_codetrace or params.FORCE|default(0)|int %}

			{% for iter in range(svv.proc_depth - 1|int) %}
				{% set this1.depth_indent = this1.depth_indent ~ "`" %}
			{% endfor %}

			{% if printer["gcode_macro _debug__tools_vars"].show_proc_exit %}

				{% if params.FUNCTION|string != "" and printer["gcode_macro _debug__tools_vars"].show_proc_exit_details %}
					log_trace S="{this1.depth_indent ~ " [" ~ params.FUNCTION|lower ~ "] done"}"
				{% else %}
					log_trace S="{this1.depth_indent}"
				{% endif %}

				# print a null line if fully exited back to 'main'
				{% if this1.depth_indent == "`" %}
					log_trace
				{% endif %}

			{% endif %}

		{% endif %}

	{% endif %}

# RECURSION	... _proc_end function=_proc_end

#--------------------------------------------------------------------

[gcode_macro _enable_debug_trace]
description: helper macro to set codeflow verbosity flag and inits depth counter - don't call directly - use ENABLE_CODE_TRACE
# accepts DEPTH=n to init depth - if known, caller can pass it.
gcode:

	_proc_start function=_enable_debug_trace func_params='"{rawparams|string}"'

	{% if printer["gcode_macro _debug__tools_vars"].debug_codetrace %}  
		log_trace S=">>>>> _enable_debug_trace <<<<<"
	{% endif %}

#	_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE={((params.DEPTH|default(0)|int) + 1)}	# init process depth counter
	## note: proc depth counter may be out of sync until un-nested fully and then will get sync'd up
	## as, at time of enablement, when not previously tracked, depth is unknown - user can pass DEPTH to force it
	## but if forced to a depth greather then code actually is, will never get to 'MAIN' depth of 0...
	## +1 here as we are inside of the _enable and fixing to bust out and want post _enable correct
	
	say S="Code Trace Debug Enabled"

	_proc_end function=_enable_debug_trace

#--------------------------------------------------------------------

[gcode_macro _disable_debug_trace]
description: helper macro to set codeflow verbosity flag and inits depth counter - don't call directly - use DISABLE_CODE_TRACE
gcode:

	_proc_start function=_disable_debug_trace func_params='"{rawparams|string}"' 

	{% if printer["gcode_macro _debug__tools_vars"].debug_codetrace %}  
		log_trace S=">>>>> _disable_debug_trace <<<<<"
	{% endif %}

	say S="Code Trace Debug Disabled"

	_proc_end function=_disable_debug_trace 

#--------------------------------------------------------------------

[gcode_macro enable_code_trace]
description: QOL button macro - passes raw params that should only include a DEPTH=n, if known.
gcode:

	_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE=1	# set depth counter - assume depth of 0 - will eventually sync
	
	SET_GCODE_VARIABLE MACRO=_debug__tools_vars VARIABLE=debug_codetrace VALUE=1

	_proc_start function=enable_code_trace func_params='"{rawparams|string}"'
	
	_enable_debug_trace {rawparams}		# speaks & forces a depth if passes same
 
	_proc_end function=enable_code_trace

#--------------------------------------------------------------------

[gcode_macro disable_code_trace]
description: QOL button macro - 
gcode:

	
	_proc_start function=disable_code_trace func_params='"{rawparams|string}"'
	
	_disable_debug_trace {rawparams}	# speaks
	
	_proc_end function=disable_code_trace
	
	_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE=1	# reset depth counter
	
	SET_GCODE_VARIABLE MACRO=_debug__tools_vars VARIABLE=debug_codetrace VALUE=0
	

