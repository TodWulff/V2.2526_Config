#####################################################################
# 	Macros
#####################################################################

[delayed_gcode _gcode_macros_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_gcode_macros_loaded func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _printer_vars"].ptr_verb_cfgload %} 
		M118 >>> _gcode_macros.cfg Loaded. <<<
	{% endif %}
	_proc_end function=_gcode_macros_loaded 

[gcode_macro _info_gcode_macros]
gcode:

#--------------------------------------------------------------------


[gcode_macro HOST_SHUTDOWN]
gcode:
	Say_Wait S="ATTENTION! I am shutting myself down - good bye."
	{action_call_remote_method("shutdown_machine")}

[gcode_macro HOST_REBOOT]
gcode:
	Say_Wait S="ATTENTION! I am rebooting myself"
	{action_call_remote_method("reboot_machine")}

[gcode_macro M1170]
description:  workaround for fixing a zero-based layer display - slicer is zero-based, gray matter is 1-based...
# params = L=LAYERNUM T=TOTALLAYERS  Weirdly, while PS layer is 0-based, PS's total layer count is 1-based, and their gcode viewer is 1-based...
# sample slicer use: M1170 L[layer_num] T[total_layer_count]
# chose this approach vs. renaming stock M117, as M117 works otherwise - this addresses a specific slicer behaviour.
# also using this to report sd card/th position at each layer change (for disaster recovery) in console and saving
# had to adopt use of ﹪ vs. % as recent changes (Sep '22 - Feb '23) cause the use of % to impute errors with save var scripting...
gcode:

	_proc_start function=M1170 func_params='"{rawparams|string}"'  
	
	{% set pvsd = printer.virtual_sdcard %}
	{% set ptp = printer.toolhead.position %}

#	M117 L:{(params.L|int + 1)|int}/{params.T|int}|{(printer.virtual_sdcard.progress*100)|round(2,'common')}%

	{% set lcd_layer_chg_msg = "L:" ~ (params.L|int + 1)|int ~ "/" ~ params.T|int %}
	say_wait S="Layer {(params.L|int + 1)|int} of {params.T|int}"
	M117 {lcd_layer_chg_msg}
	Save_Variable VARIABLE=last_lcd_layer_chg_msg VALUE='"{lcd_layer_chg_msg}"'

	{% set layer_chg_msg = "L:" ~ (params.L|int + 1)|int ~ "/" ~ params.T|int ~ "-S" ~ pvsd.file_position ~ " | " ~ (pvsd.progress*100)|round(2,'common') ~ "％: X" ~ ptp.x|round(3,'common') ~ " Y" ~ ptp.y|round(3,'common') ~ " Z" ~ ptp.z|round(3,'common') %}
	M118 {layer_chg_msg}
	Save_Variable VARIABLE=last_layer_chg_msg VALUE='"{layer_chg_msg}"'

	_proc_end function=M1170 

#--------------------------------------------------------------------

[gcode_macro M118]
description: To trap/wrap FW M118 w/ action_respond_info vs. FW's implementation (supports numeric/special char starts)
rename_existing: M118.1
gcode:
	{ action_respond_info(rawparams) }
	
[gcode_macro M1181]
description: To implement a more expressive tool change notification (called at tool change start, hence the +1 on swaps)
# parameters are CE for integer current extruder, NE for integer next extruder, TC for integer total tool changes
# reports total tool changes when wipe tower (WT) is in play, as WT is req'd for slicer to report total tool changes
# called from slicer tool change M1181 CE1 NE2 TC6 (or M1181 CE-1 NE2 TC6 for initial load)
# had to adopt use of ﹪ vs. % as recent changes (Sep '22 - Feb '23) cause the use of % to impute errors with save var scripting...
gcode:
	{% set svv = printer.save_variables.variables %}
	
	{% set sp = " " %}
	{% set sl = "/" %}
	{% set at = "@" %}
	{% set gt = ">" %}
	{% set pi = "|" %}
	{% set op = "(" %}
	{% set cp = ")" %}
	{% set ps = "％" %}  # % °/o ٪  ﹪ ％  <-- % is bad with new klipper/save_variables.py
#	{% set co = "," %}
#	{% set ns = "-" %}
	
	{% set ce = params.CE|int|default(-2) %}
	{% set ne = params.NE|int|default(-2) %}
	{% set tc = params.TC|int|default(0) %}
	
	{% if tc == 0 %}
		{% set this_tool = sp ~ "T" ~ ce %}
	{% else %}
		{% set this_tool = "T" ~ ce %}
	{% endif %}
	
	{% set this_swap = "S:" ~ (svv.ercf_swaps + 1) %}
	{% set total_swaps = sl ~ tc ~ sp %}
	{% set next_tool = gt ~ "T" ~ ne ~ sp %} 
	{% set sdcard_pos = at ~ "S" ~ printer.virtual_sdcard.file_position %}
	{% set sdcard_pct = sp ~ op ~ (printer.virtual_sdcard.progress*100)|round(2,'common') ~ ps ~ cp ~ sp %}
	{% set interactions = sp ~ "I:" ~ svv.ercf_interactions ~ sp %}
	{% set xyz_pos = 	pi ~ "X" ~ printer.toolhead.position.x|round(3,'common') ~
						sp ~ "Y" ~ printer.toolhead.position.y|round(3,'common') ~ 
						sp ~ "Z" ~ printer.toolhead.position.z|round(3,'common') %}

	# initial swap
	{% if ce == -1  %}
		{% if tc > 0  %}
			# wipe tower initial
			{% set swap_msg = this_swap ~ total_swaps ~ " (Initial Load): " ~ next_tool ~ interactions ~ sdcard_pos ~ sdcard_pct ~ xyz_pos %}
			{% set lcd_swap_msg = this_swap ~ total_swaps ~ next_tool ~ interactions %}
			
			say_wait S="Loading tool {next_tool}, Purge to Wipe Tower"
			M118 {swap_msg}

			save_variable VARIABLE=last_swap_msg VALUE='"{swap_msg}"'
			save_variable VARIABLE=last_lcd_swap_msg VALUE='"{lcd_swap_msg}"'

		{% else %}
			# non-wipe tower initial
			{% set swap_msg = this_swap ~ " (Initial Load): " ~ next_tool ~ interactions ~ sdcard_pos ~ sdcard_pct ~ xyz_pos %}
			{% set lcd_swap_msg = this_swap ~ next_tool ~ interactions %}

			say_wait S="Loading tool {next_tool}, Purge to Bucket"
			M118 {swap_msg}

			save_variable VARIABLE=last_swap_msg VALUE='"{swap_msg}"'
			save_variable VARIABLE=last_lcd_swap_msg VALUE='"{lcd_swap_msg}"'

		{% endif %}
	{% elif ce == ne %}
		#do nothing as no swap will occur - shouldn't get here in theory.?.
	
	# non-initial swaps
	{% else %}				
		{% if tc > 0  %} 
			# in process with wipe tower
			{% set swap_msg = this_swap ~ total_swaps ~ this_tool ~ next_tool ~ interactions ~ sdcard_pos ~ sdcard_pct ~ xyz_pos %}
			{% set lcd_swap_msg = this_swap ~ total_swaps ~ this_tool ~ next_tool ~ interactions %}
			
			say_wait S="Unloading tool {this_tool}, loading tool {next_tool}, Purge to Wipe Tower"
			M118 {swap_msg}

			save_variable VARIABLE=last_swap_msg VALUE='"{swap_msg}"'
			save_variable VARIABLE=last_lcd_swap_msg VALUE='"{lcd_swap_msg}"'

		{% else %}
			#in process no wipe tower
			{% set swap_msg = this_swap ~ this_tool ~ next_tool ~ interactions ~ sdcard_pos ~ sdcard_pct ~ xyz_pos %}
			{% set lcd_swap_msg = this_swap ~ this_tool ~ next_tool ~ interactions %}
			
			say_wait S="Unloading tool {this_tool}, loading tool {next_tool}, Purge to Bucket"
			M118 {swap_msg}
			
			save_variable VARIABLE=last_swap_msg VALUE='"{swap_msg}"'
			save_variable VARIABLE=last_lcd_swap_msg VALUE='"{lcd_swap_msg}"'

		{% endif %}
	{% endif %}
	
[gcode_macro M112]
description: test wrapper to see if queue bypass is possible - it is not in this manner
rename_existing: M112.1
gcode:

	_proc_start function=M112 func_params='"{rawparams|string}"'  

	{% if params.INJECT %} 
		#do process'g here?
		#save_variable VARIABLE=test_m112_inject	VALUE={printer.system_stats.cputime}
		{ action_respond_info("fired @ " ~ printer.system_stats.cputime) }
		# use  tail _globals.pvar -n75 -f in ssh session to see if update is immediate
	{% else %}
		M112.1 {rawparams}
	{% endif %}

	_proc_end function=M112 

[gcode_macro testmacro]
description: testing jinja2 operations & :expressions
gcode:

	_proc_start function=testmacro func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> testmacro <<< {% endif %} 
	{% if printer["gcode_macro _printer_vars"].ptr_verb_info %} M118 sonoff_ipaddr:{ printer.save_variables.variables.sonoff_ipaddr } {% endif %}

	_proc_end function=testmacro 

## These codes assume the shell_command extension is installed and 
## that shell_command.cfg is config'd to support same

#--------------------------------------------------------------------

[gcode_macro wcdaymode]
description: Kill IR LEDs/Deploy IR Filter
gcode:

	_proc_start function=wcdaymode func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> wcdaymode <<< {% endif %} 
#	RUN_SHELL_COMMAND CMD=wcv2_1_ircut_on
#	RUN_SHELL_COMMAND CMD=wcv2_1_irled_off
#	RUN_SHELL_COMMAND CMD=wcv2_2_ircut_on
#	RUN_SHELL_COMMAND CMD=wcv2_2_irled_off
#	RUN_SHELL_COMMAND CMD=wcv2_3_ircut_on
#	RUN_SHELL_COMMAND CMD=wcv2_3_irled_off
	RUN_SHELL_COMMAND CMD=force_day_mode_wcv2_1
	RUN_SHELL_COMMAND CMD=force_day_mode_wcv2_2
	RUN_SHELL_COMMAND CMD=force_day_mode_wcv2_3

	_proc_end function=wcdaymode 

#--------------------------------------------------------------------

[gcode_macro wcnightmode]
description: Enable IR LEDs/Stow IR Filter
gcode:

	_proc_start function=wcnightmode func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> wcnightmode <<< {% endif %} 
#	RUN_SHELL_COMMAND CMD=wcv2_1_ircut_off
#	RUN_SHELL_COMMAND CMD=wcv2_1_irled_on
#	RUN_SHELL_COMMAND CMD=wcv2_2_ircut_off
#	RUN_SHELL_COMMAND CMD=wcv2_2_irled_on
#	RUN_SHELL_COMMAND CMD=wcv2_3_ircut_off
#	RUN_SHELL_COMMAND CMD=wcv2_3_irled_on
	RUN_SHELL_COMMAND CMD=force_nt_mode_wcv2_1
	RUN_SHELL_COMMAND CMD=force_nt_mode_wcv2_2
	RUN_SHELL_COMMAND CMD=force_nt_mode_wcv2_3

	_proc_end function=wcnightmode 

#--------------------------------------------------------------------

[gcode_macro power_on_printer]
description: Power on the printer
gcode:

	_proc_start function=power_on_printer func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> RUN_SHELL_COMMAND CMD=power_on_printer_outlet <<< {% endif %} 
	say_wait S="Powering Up Printer."
	RUN_SHELL_COMMAND CMD=power_on_printer_outlet

# now happens in __autoexec
#	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> RUN_SHELL_COMMAND CMD=restore_configs <<< {% endif %} 
#	RUN_SHELL_COMMAND CMD=restore_configs

	_proc_end function=power_on_printer 

#--------------------------------------------------------------------

[gcode_macro power_off_printer]
description: Power off the printer
gcode:

	_proc_start function=power_off_printer func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> RUN_SHELL_COMMAND CMD=power_off_printer_outlet <<< {% endif %} 
	say_wait S="ATTENTION! Saving Configs and Shutting Down Printer.  Host will remain up."
	RUN_SHELL_COMMAND CMD=power_off_printer_outlet

	_proc_end function=power_off_printer 

#--------------------------------------------------------------------

[gcode_macro go_absolute]
description: does a G90 - just for readability's sake
gcode:

	_proc_start function=go_absolute func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> ABSOLUTE <<< {% endif %} 
	G90

	_proc_end function=go_absolute 

#--------------------------------------------------------------------

[gcode_macro go_relative]
description: does a G91 - just for readability's sake
gcode:

	_proc_start function=go_relative func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> RELATIVE <<< {% endif %} 
	G91

	_proc_end function=go_relative 

#--------------------------------------------------------------------
### 
### [gcode_macro Z_Probe_Calibrate]
### description: hmm - just found another probe thing in klickyp-probe
### gcode:
### 
### 	_proc_start function=Z_Probe_Calibrate func_params='"{rawparams|string}"'  
### 
### 	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Z_Probe_Calibrate <<< {% endif %} 
### 	_ENSURE_QGL					# homes if needed, QGLs, rehomes Z - need to have the gantry level
### 	PROBE_CALIBRATE	{rawparams}	# this calls a a klicky_probe proc
### 
### 	_proc_end function=Z_Probe_Calibrate 
### 
### #--------------------------------------------------------------------
### 
### [gcode_macro Z_Calibrate]
### description: Automatically calibrates the nozzles offset to the print surface (used in Print_Start)
### gcode:
### 
### 	_proc_start function=Z_Calibrate func_params='"{rawparams|string}"'  
### 
### 	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Z_Calibrate <<< {% endif %} 
### 	_ENSURE_QGL					# homes if needed, QGLs, rehomes Z - need to have the gantry level
### 	CALIBRATE_Z	{rawparams}				# this calls a z_calibration.py proc and uses z_calibration.cfg stuffs
### 
### 	_proc_end function=Z_Calibrate 
### 
### #--------------------------------------------------------------------
### 
### [gcode_macro Z_EndStop_Accuracy]
### description: Probe Z-Endstop accuracy at Nozzle-Endstop position
### gcode:
### 
### 	_proc_start function=Z_EndStop_Accuracy func_params='"{rawparams|string}"'  
### 
### 	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Z_EndStop_Accuracy <<< {% endif %} 
### 	_ENSURE_QGL					# homes if needed, QGLs, rehomes Z - need to have the gantry level
### 	PROBE_Z_ACCURACY	{rawparams}	# this calls a z_calibration.py proc and uses z_calibration.cfg stuffs
### 
### 	_proc_end function=Z_EndStop_Accuracy 
### 
### #--------------------------------------------------------------------
### 
### [gcode_macro Z_Probe_Accuracy]
### description: Test and report Probe accuracy at current location, moving to 175,175 if outside of bed
### gcode:
### 
### 	_proc_start function=Z_Probe_Accuracy func_params='"{rawparams|string}"'  
### 
### 	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Z_Probe_Accuracy <<< {% endif %} 
### 	# referencing _User_Variables macro in klickyp-probe.cfg (no wheel reinvention)
### 	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
### 	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
### 	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
### 	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
### 
### 	_ENSURE_QGL					# homes if needed, QGLs, rehomes Z - need to have the gantry level
### 
### 	# Protect against PROBE CALIBRATE performed from outside the bed (refs Klicky stuffs)
### 	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
### 		  or printer['gcode_move'].position.y < probe_offset_y
### 		  or printer['gcode_move'].position.x > (max_x - probe_offset_x)
### 		  or printer['gcode_move'].position.x < probe_offset_x %}
### 		M118 Z_Probe_Accuracy - PROBE_CALIBRATE requires probe above the BED - moving to bed center...
### 		go_absolute
### 		G0 X{(max_x / 2)} Y{(max_y / 2)} F15000 #mm/min .. 250mm/s - at center of bed
### 	{% endif %}
### 
### 	# organic klipper, as modified by klickyp-probe and uses [probe] section configs for items not defined below
### 	PROBE_ACCURACY PROBE_SPEED=10 SAMPLES=5 SAMPLE_RETRACT_DIST=2 LIFT_SPEED=15
### 
### 	_proc_end function=Z_Probe_Accuracy 

#--------------------------------------------------------------------

[gcode_macro system_shutdown] 
description: Power off the entire system (printer AND host)
gcode:

	_proc_start function=system_shutdown func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> system_shutdown <<< {% endif %} 
	Say_wait S="ATTENTION! Saving Configs and Shutting Down Printer AND Host"
	RUN_SHELL_COMMAND CMD=backup_configs
	RUN_SHELL_COMMAND CMD=power_off_printer_outlet
	RUN_SHELL_COMMAND CMD=system_shutdown

	_proc_end function=system_shutdown 

#--------------------------------------------------------------------

[gcode_macro restart_klipper] 
description: Restart Klipper Service
gcode:

	_proc_start function=restart_klipper func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> restart_klipper <<< {% endif %} 
	say_wait S="Restarting Klipper"
	RUN_SHELL_COMMAND CMD=klipper_restart

	_proc_end function=restart_klipper 

#--------------------------------------------------------------------

[delayed_gcode delayed_printer_off]
#description: Power off the printer when/if timed out
initial_duration: 0
gcode:

	_proc_start function=delayed_printer_off func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> delayed_printer_off <<< {% endif %} 
	{% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready" %}
		say_wait S="ATTENTION! Saving Configs and Shutting Down Printer.  Host will remain up."
		RUN_SHELL_COMMAND CMD=backup_configs
		#	RUN_SHELL_COMMAND CMD=power_off_printer		# causes sync issues between Mainsail/Moonraker and the Tasmota Outlet
		#M118 _!_ Commanding Printer Power Shutdown _!_
		{action_call_remote_method("set_device_power",
									device="Printer",
									state="off")}
		#   system_shutdown		# disabled to keep the klipper host alive...
	 {% endif %}

	_proc_end function=delayed_printer_off 

[gcode_macro _PrintLED_Off]
#--------------------------------------------------------------------

##  These codes assume moonraker.conf is config'd to support same

#--------------------------------------------------------------------
description: Extinguish the Halo Sw Red LED
gcode:

	_proc_start function=_PrintLED_Off func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _PrintLED_Off <<< {% endif %} 
	SET_PIN PIN=_sw_red_led VALUE=0

	_proc_end function=_PrintLED_Off 

#--------------------------------------------------------------------

[gcode_macro _PrintLED_On]
description: Illuminate the Halo Sw Red LED
gcode:

	_proc_start function=_PrintLED_On func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _PrintLED_On <<< {% endif %} 
	SET_PIN PIN=_sw_red_led VALUE=1

	_proc_end function=_PrintLED_On 

#--------------------------------------------------------------------

[gcode_macro _IdleLED_Off]
description: Extinguish the Halo Sw Greeen LED
gcode:

	_proc_start function=_IdleLED_Off func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _IdleLED_Off <<< {% endif %} 
	SET_PIN PIN=_sw_grn_led VALUE=0

	_proc_end function=_IdleLED_Off 

#--------------------------------------------------------------------

[gcode_macro _IdleLED_On]
description: Illuminate the Halo Sw Green LED
gcode:

	_proc_start function=_IdleLED_On func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _IdleLED_On <<< {% endif %} 
	SET_PIN PIN=_sw_grn_led VALUE=1

	_proc_end function=_IdleLED_On 

#--------------------------------------------------------------------

[gcode_macro _PwrLED_Off]
description: Extinguish the Halo Sw Blue LED
gcode:

	_proc_start function=_PwrLED_Off func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _PwrLED_Off <<< {% endif %} 
	SET_PIN PIN=_sw_blu_led VALUE=0

	_proc_end function=_PwrLED_Off 

#--------------------------------------------------------------------

[gcode_macro _PwrLED_On]
description: Illuminate the Halo Sw Blue LED
gcode:

	_proc_start function=_PwrLED_On func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _PwrLED_On <<< {% endif %} 
	SET_PIN PIN=_sw_blu_led VALUE=1

	_proc_end function=_PwrLED_On 

#--------------------------------------------------------------------

[gcode_macro PrintLED_Off]
gcode:

	_proc_start function=PrintLED_Off func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> PrintLED_Off <<< {% endif %} 
	_PrintLED_Off

	_proc_end function=PrintLED_Off 

#--------------------------------------------------------------------

[gcode_macro PrintLED_On]
gcode:

	_proc_start function=PrintLED_On func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> PrintLED_On <<< {% endif %} 
	_PrintLED_On

	_proc_end function=PrintLED_On 

#--------------------------------------------------------------------

[gcode_macro IdleLED_Off]
gcode:

	_proc_start function=IdleLED_Off func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> IdleLED_Off <<< {% endif %} 
	_IdleLED_Off

	_proc_end function=IdleLED_Off 

#--------------------------------------------------------------------

[gcode_macro IdleLED_On]
gcode:

	_proc_start function=IdleLED_On func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> IdleLED_On <<< {% endif %} 
	_IdleLED_On

	_proc_end function=IdleLED_On 

#--------------------------------------------------------------------

[gcode_macro PwrLED_Off]
gcode:

	_proc_start function=PwrLED_Off func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> PwrLED_Off <<< {% endif %} 
	_PwrLED_Off

	_proc_end function=PwrLED_Off 

#--------------------------------------------------------------------

[gcode_macro PwrLED_On]
gcode:

	_proc_start function=PwrLED_On func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> PwrLED_On <<< {% endif %} 
	_PwrLED_On

	_proc_end function=PwrLED_On 

#####################################################################
# 	Manually Disable Steppers
#####################################################################

[gcode_macro disable_steppers]
description: Disable Stepper Motors
gcode:

	_proc_start function=disable_steppers func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> disable_steppers <<< {% endif %} 
	SAVE_VARIABLE VARIABLE=z_axis_cal VALUE=0						# since machine just started, flag a z_axis_cal is not complete
	SAVE_VARIABLE VARIABLE=ercf_selector_homed VALUE=0
	SAVE_VARIABLE VARIABLE=maxz VALUE=0.0							# init global var
	M18
	say_wait S="Stepper Motors Disabled"

	_proc_end function=disable_steppers 

#####################################################################
# 	Hour Meter Control
#####################################################################

[gcode_macro _HOURMETER_OFF]
description: Turn Hour Meter Off
gcode:

	_proc_start function=_HOURMETER_OFF func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _HOURMETER_OFF <<< {% endif %} 
	SET_PIN PIN=_hourmeter VALUE=0

	_proc_end function=_HOURMETER_OFF 

#--------------------------------------------------------------------

[gcode_macro _HOURMETER_ON]
description: Turn Hour Meter On
gcode:

	_proc_start function=_HOURMETER_ON func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _HOURMETER_ON <<< {% endif %} 
	SET_PIN PIN=_hourmeter VALUE=1

	_proc_end function=_HOURMETER_ON 

#--------------------------------------------------------------------

[gcode_macro HOURMETER_TOGGLE]
description: Toggle Hour Meter
gcode:

	_proc_start function=HOURMETER_TOGGLE func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> HOURMETER_TOGGLE <<< {% endif %} 
	{% if printer["output_pin _hourmeter"].value == 1 %}
		_HOURMETER_OFF
	{% else %}
		_HOURMETER_ON
	{% endif %}

	_proc_end function=HOURMETER_TOGGLE 

#--------------------------------------------------------------------

# this is for runtime updates to Klipper - pushes shite to the bottom of the printer.cfg
[gcode_macro save_conf]
description: Execute a Save Configuration
gcode:

	_proc_start function=save_conf func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> save_conf <<< {% endif %} 
	
	say_wait S="Saving Config and restarting Klipper"
	SAVE_CONFIG

	_proc_end function=save_conf 

#####################################################################
# 	Other Shite
#####################################################################

# [gcode_macro clean_bed]
# description: Heat bed and position head to allow cleaning of the heated print surface
# gcode:

  # SAVE_GCODE_STATE NAME=clean_bed
  # {% if printer.heater_bed.temperature < 60 %}
	# M117 Heating
	# M190 S60				#wait until bed warms - helps with cleaning
  # {% endif %}
  # M117 Homing
  # _ENSURE_HOMED					 #home
  # go_relative
  # G0 Z75				  #move head up and out of the way
  # M117 Elevating Gantry
  # RESTORE_GCODE_STATE NAME=clean_bed
  # M300 S1000 P100 
  # M300 S1000 P100
  # M117 Clean the bed...
  # go_absolute

#--------------------------------------------------------------------

[gcode_macro G32]
description: Do a Quad Gantry Level (QGL)
gcode:
	# BED_MESH_CLEAR
	_ENSURE_QGL							# also homes if needed - need to have the gantry leveled
	G28									# 
	G0 X175 Y350 Z30 F3600				# parks head at rear center

#--------------------------------------------------------------------

[gcode_macro DO_BED_MESH]
description: Heat bed and then perform a bed mesh sequence
variable_bed_temp: 60
variable_extruder_temp: 230
gcode:

	_proc_start function=DO_BED_MESH func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> DO_BED_MESH <<< {% endif %} 
	M117 Heating...
	M140 S{bed_temp}			   # set bed final temp
	M104 S{extruder_temp}		  # set extruder final temp
	M190 S{bed_temp}			   # wait for bed final temp
	M109 S{extruder_temp}		  # wait for extruder final temp
	
	
	{% if params.CHAMBER|default(45)|int > printer['temperature_fan Chamber'].temperature|int %}
		say_wait S="Waiting for chamber to come up to temp"
		M118 Waiting for chamber to come up to temp
		M191.1 S{params.CHAMBER|default(45)|int}			# wait for chamber to come up to temp before proceeding
	{% endif %}

	say_wait S="Chamber is up to temp"
	M118 Chamber Heated Sufficiently
	
	
	
  # _HOURMETER_ON
	_PrintLED_On
	M300
	_ENSURE_QGL							# homes if needed - need to have the gantry leveled
	
	BED_MESH_CALIBRATE
	G28
	M300
	M300
  # _HOURMETER_OFF
	_PrintLED_Off
	SAVE_CONFIG		# this is for runtime updates to Klipper - pushes shite to the bottom of the printer.cfg

	_proc_end function=DO_BED_MESH 

#--------------------------------------------------------------------

[gcode_macro _ENSURE_HOMED]
description: Home only if needed - no wasted cycles/power
gcode:

	_proc_start function=_ENSURE_HOMED func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> ENSURING HOMED <<< {% endif %} 
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"checking_home"'	# machine state save
	{% if "z" not in printer.toolhead.homed_axes %}
		# if z is homed, xy are explicitly homed as well
		{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 Homing {% endif %} 
		M118 Homing Toolhead, with nozzle clean and Z rehome
		G28
		clean_nozzle
		G28 Z
		SAVE_VARIABLE VARIABLE=z_axis_cal VALUE=0		# since homed, flag a z_axis_cal (zcal.cfg) is not complete
	{% else %}
		say_wait S="Tool Head already homed"
	{% endif %}
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"home_checked"'	# machine state save
	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> ENSURED HOMED <<< {% endif %} 

	_proc_end function=_ENSURE_HOMED 

#--------------------------------------------------------------------

[gcode_macro _ENSURE_QGL]
description: QGL only if needed - no wasted cycles/power
# consider supporting passage of a mesh parameter to activate after the QGL is completed.  Possibly in _gql code (klicky)
gcode:

	_proc_start function=_ENSURE_QGL func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _ENSURE_QGL <<< {% endif %} 
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"checking_qgl"'	# machine state save
	_ENSURE_HOMED					# needs to be homed else qgl is not practical, if homed, no wasted cycles
	{% if not printer.quad_gantry_level.applied %} 
		{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 QGL'g {% endif %} 
		say_wait S="Performing Quad Gantry Level"
		M118 QGL'g Gantry
		QUAD_GANTRY_LEVEL			# in klicky's QGL, I wrapped to include a post-level G28 Z rehome https://i.imgur.com/rMTRcaH.png
#		G28 Z						# uncomment for those without that mod to klicky's code, if so desired
		SAVE_VARIABLE VARIABLE=z_axis_cal VALUE=0		# since QGL'd, flag a z_axis_cal (zcal.cfg) is not complete
	{% endif %}
	say_wait S="Gantry is Leveled"
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"qgl_checked"'	# machine state save
	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 qgl_checked {% endif %} 

	_proc_end function=_ENSURE_QGL 

#--------------------------------------------------------------------

[gcode_macro M141]
description: Implement a pseudo chamber heat control
# example: M141 S50 this turns on the exhaust fan if the target temp is too high
# new approach serves to more closely mimmic a proper chamber heat process
# FIXME with newer approach or, more properly, both the following commented code for lower limit and the current code for upper limit

##	{% if params.CHAMBER|default(45)|int > printer['temperature_fan Chamber'].temperature|int %}
##		say_wait S="Waiting for chamber to come up to temp"
##		M118 Waiting for chamber to come up to temp
##		M191.1 S{params.CHAMBER|default(45)|int}			# wait for chamber to come up to temp before proceeding
##	{% endif %}
##
##	say_wait S="Chamber is up to temp"
##	M118 Chamber Heated Sufficiently

gcode:

	_proc_start function=M141 func_params='"{rawparams|string}"'  

	{% set ch_tmp_tgt = params.S|default(0)|int %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_info %} M118 >>> M141 S{ch_tmp_tgt} <<< {% endif %} 
	SET_TEMPERATURE_FAN_TARGET temperature_fan=Exhaust target={ch_tmp_tgt} min_speed=0.0 max_speed=1.0

	_proc_end function=M141 

#--------------------------------------------------------------------

[gcode_macro _reset_extruder]
description: for readability - execute G92 E0
gcode:

	_proc_start function=_reset_extruder func_params='"{rawparams|string}"'  

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _reset_extruder <<< {% endif %} 
	G92 E0

	_proc_end function=_reset_extruder 

#--------------------------------------------------------------------

[gcode_macro M600]
######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

gcode:
    {% set X = params.X|default(175)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(50)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

#--------------------------------------------------------------------

[gcode_macro M204]
description: wrap FW proc to trap and make use of set_velocity_limit in a manner that I want
rename_existing: M204.1
gcode:

	_proc_start function=M204 func_params='"{rawparams|string}"'  
	
	{% set ext_move_accel = params.P|default(0)|int %}
	{% set tvl_move_accel = params.T|default(0)|int %}
	{% set all_move_accel = params.S|default(0)|int %}
	{% set retract_accel  = params.R|default(0)|int %}
	
	{% set max_accel_limit = printer.toolhead.max_accel %}
	
	{% if all_move_accel %}
		# S param passed - cap at max accel limit and do it
		{% if all_move_accel > max_accel_limit %}
			{% set all_move_accel = max_accel_limit %}
		{% endif %}
		SET_VELOCITY_LIMIT ACCEL={all_move_accel} ACCEL_TO_DECEL={all_move_accel / 2}
	{% elif ext_move_accel and tvl_move_accel %}
		# P and T params passed - choose lesser of P and T, cap at max accel limit, and do it
		{% if ext_move_accel < tvl_move_accel %}
			{% set tgt_move_accel = ext_move_accel %}
		{% else %}
			{% set tgt_move_accel = tvl_move_accel %}
		{% endif %}
		{% if tgt_move_accel > max_accel_limit %}
			{% set tgt_move_accel = max_accel_limit %}
		{% endif %}
		SET_VELOCITY_LIMIT ACCEL={tgt_move_accel} ACCEL_TO_DECEL={tgt_move_accel / 2}
	{% elif ext_move_accel and not tvl_move_accel %}
		# P not T params passed - cap P at max accel limit, and do it
		{% if ext_move_accel > max_accel_limit %}
			{% set ext_move_accel = max_accel_limit %}
		{% endif %}
		SET_VELOCITY_LIMIT ACCEL={ext_move_accel} ACCEL_TO_DECEL={ext_move_accel / 2}
	{% elif tvl_move_accel and not ext_move_accel %}
		# T not P params passed - cap T at max accel limit, and do it
		{% if tvl_move_accel > max_accel_limit %}
			{% set tvl_move_accel = max_accel_limit %}
		{% endif %}
		SET_VELOCITY_LIMIT ACCEL={tvl_move_accel} ACCEL_TO_DECEL={tvl_move_accel / 2}
	{% elif retract_accel %}
		# do nothing here
	{% else %}
		# do nothing here
	{% endif %}
	
	
	_proc_end function=M204 

#--------------------------------------------------------------------

[gcode_macro SET_GCODE_OFFSET]
description: wrap FW proc to reset z_axis_cal flag if a z axis offset is entered/cleared through ui
rename_existing: SET_GCODE_OFFSET_STOCK
gcode:

	_proc_start function=SET_GCODE_OFFSET func_params='"{rawparams|string}"'  
	
	# see if z offset is being set/cleared and if so, clear z autocal flag
	{% set z_flag = params.Z|default(-999999.99)|float %}
	{% if z_flag != -999999.99 %}
		save_variable VARIABLE=z_axis_cal VALUE=0
		N300
		N300
		N300
#		M118 z_axis_cal cleared
	{% endif %}
	
	SET_GCODE_OFFSET_STOCK {rawparams}
	
	_proc_end function=SET_GCODE_OFFSET 

#--------------------------------------------------------------------

[gcode_macro RESTART]
description: wrap FW proc to save existing heat settings at a restart
RENAME_EXISTING: RESTART_STOCK
gcode:

	_proc_start function=RESTART func_params='"{rawparams|string}"'  
	
	{% set svv = printer.save_variables.variables %}
	
	# see if any heat is applied and, if so, flag for restoration at boot
	save_variable VARIABLE=boot_extruder_temp VALUE={svv.extruder_temp_setting}
	save_variable VARIABLE=boot_heater_bed_temp VALUE={svv.heater_bed_temp_setting}
	
	say_wait S="Restarting Klipper"
	
#	FIRMWARE_RESTART  #<-- had used this because of silly case error, but now RESTART_STOCK works (RESTART_stock wasn't and that is due to casing. ugh...)
	RESTART_STOCK
	
	_proc_end function=RESTART 

#--------------------------------------------------------------------

[gcode_macro TURN_OFF_HEATERS]
description: wrap FW proc to update cached temp settings
RENAME_EXISTING: TURN_OFF_HEATERS_STOCK
gcode:

	_proc_start function=TURN_OFF_HEATERS func_params='"{rawparams|string}"'  
	
	# update cached temp settings
	save_variable VARIABLE=boot_extruder_temp VALUE=0
	save_variable VARIABLE=boot_heater_bed_temp VALUE=0
	save_variable VARIABLE=extruder_temp_setting VALUE=0
	save_variable VARIABLE=heater_bed_temp_setting VALUE=0

	say_wait S="Heaters off"
	TURN_OFF_HEATERS_STOCK
	
	_proc_end function=TURN_OFF_HEATERS 

#--------------------------------------------------------------------

[gcode_macro FILKAM_IRLED_OFF]
# these require special first time use - see shell command.cfg for comments
gcode:
	RUN_SHELL_COMMAND CMD=wcv2_1_irled_off

#--------------------------------------------------------------------

[gcode_macro FILKAM_IRLED_ON]
# these require special first time use - see shell command.cfg for comments
gcode:
	RUN_SHELL_COMMAND CMD=wcv2_1_irled_on

#--------------------------------------------------------------------

[gcode_macro FILKAM_IRCUT_OFF]
# these require special first time use - see shell command.cfg for comments
gcode:
	RUN_SHELL_COMMAND CMD=wcv2_1_ircut_off

#--------------------------------------------------------------------

[gcode_macro FILKAM_IRCUT_ON]
# these require special first time use - see shell command.cfg for comments
gcode:
	RUN_SHELL_COMMAND CMD=wcv2_1_ircut_on

#--------------------------------------------------------------------

[gcode_macro BEDKAM_IRLED_OFF]
# these require special first time use - see shell command.cfg for comments
gcode:
	RUN_SHELL_COMMAND CMD=wcv2_2_irled_off

#--------------------------------------------------------------------

[gcode_macro BEDKAM_IRLED_ON]
# these require special first time use - see shell command.cfg for comments
gcode:
	RUN_SHELL_COMMAND CMD=wcv2_2_irled_on

#--------------------------------------------------------------------

[gcode_macro BEDKAM_IRCUT_OFF]
# these require special first time use - see shell command.cfg for comments
gcode:
	RUN_SHELL_COMMAND CMD=wcv2_2_ircut_off

#--------------------------------------------------------------------

[gcode_macro BEDKAM_IRCUT_ON]
# these require special first time use - see shell command.cfg for comments
gcode:
	RUN_SHELL_COMMAND CMD=wcv2_2_ircut_on

#--------------------------------------------------------------------

[gcode_macro SAY]
gcode:
	_proc_start function=say func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _printer_vars"].ptr_verb_speech %} 
	##	{% set utterance = params.S %}
	#	{% set utterance = rawparams|string|replace("s=", "") %}
	#	{% set utterance = "\'" ~ utterance|replace("S=", "") ~ "\'" %}
	##	RUN_SHELL_COMMAND CMD=say PARAMS='{utterance}'
		RUN_SHELL_COMMAND CMD=say PARAMS='{params.S}'
	{% endif %}
	_proc_end function=say 

#--------------------------------------------------------------------

[gcode_macro SAY_WAIT]
gcode:
	_proc_start function=say func_params='"{rawparams|string}"'  
	{% if printer["gcode_macro _printer_vars"].ptr_verb_speech %} 
	##	{% set utterance = params.S %}
	#	{% set utterance = rawparams|string|replace("s=", "") %}
	#	{% set utterance = "\'" ~ utterance|replace("S=", "") ~ "\'" %}
	##	RUN_SHELL_COMMAND CMD=say_wait PARAMS='{utterance}'
		RUN_SHELL_COMMAND CMD=say_wait PARAMS='{params.S}'
	{% endif %}
	_proc_end function=say 

#--------------------------------------------------------------------

[gcode_macro FIRMWARE_RESTART]
description: wrap FW proc to save existing heat settings at a FIRMWARE_RESTART
RENAME_EXISTING: FIRMWARE_RESTART_STOCK
gcode:

	_proc_start function=FIRMWARE_RESTART func_params='"{rawparams|string}"'  
	
	{% set svv = printer.save_variables.variables %}
	
	# see if any heat is applied and, if so, flag for restoration at boot
	save_variable VARIABLE=boot_extruder_temp VALUE={svv.extruder_temp_setting}
	save_variable VARIABLE=boot_heater_bed_temp VALUE={svv.heater_bed_temp_setting}
	
	say_wait S="Restarting Printer Firmware"
	
	FIRMWARE_RESTART_STOCK
	
	_proc_end function=FIRMWARE_RESTART 

#--------------------------------------------------------------------

