#####################################################################
# 	Macros
#####################################################################

# [exclude_object]

[gcode_macro _info_gcode_macros]
gcode:

#--------------------------------------------------------------------


[gcode_macro HOST_SHUTDOWN]
gcode:
  {action_call_remote_method("shutdown_machine")}

[gcode_macro HOST_REBOOT]
gcode:
  {action_call_remote_method("reboot_machine")}

[idle_timeout] 
timeout: 18000  #in seconds - 18000= 5hr, 3600 = 1hr
gcode:
  M84
  TURN_OFF_HEATERS
## TODO:  add dly for HE to cool to some threshold (HeatCreep Prevention)
  UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=60

[gcode_macro _printer_vars]
# prototype: {% if printer["gcode_macro _printer_vars"].ptr_verb_debug %}  M118 >>> _linadv_module_start Start <<< {% endif %}

variable_ptr_verb_error:			1 	# set to 0 to mute error reporting (um, errors.  lol)
variable_ptr_verb_info:				0   # set to 0 to mute info reporting (has data)
variable_ptr_verb_status:			0   # set to 0 to mute status reporting (useful modes, update, etc.)
variable_ptr_verb_debug:			0   # set to 0 to mute debugs stuffs I added
variable_ptr_verb_modload:			0   # set to 0 to mute debugs stuffs I added
		
variable_ptr_verb_codeflow:			0   # set to 0 to mute debugs stuffs I added (proc entry/exit)
variable_show_proc_exit:			1	# 1 enables display of nesting depth btics on procedure exit
variable_show_proc_exit_details:	1	# previous needs to be enabled for this to work, 1 displays function on exit, if passed

# similar module-specific verbosity settings contained in file | proc:
	# _kicky-probe.cfg | _klicky_vars
	# _debug_macros.cfg | _debug_vars
	# _ercf_software.cfg | ercf_var
	# _nozzle_scrub.cfg | _scrub_vars
	# _led_effects.cfg | _ledeff_vars
	# _gcode_processing.cfg | _gcodeproc_vars
	# _linear_advance.cfg | _linadv_vars

variable_pause_retract_default:		1.0	# default retract amount at pause - is also default deretract amount at resume


gcode:
	#there is none, this is for broad variable access

[gcode_macro _proc_start]
description:  for trace debug purposes - presents depth as leading back-tics
# passed params:
#	function=_some_macro_name
#	func_params='"{rawparams|string}"'		#<-- can have spaces (i.e. multiple paramaters) thus need to encapsulate as string
gcode:
	{% set svv = printer.save_variables.variables %}					# set eazy accesss context for save_variables object
	
	_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE={svv.proc_depth + 1|int}	# increment depth counter

	{% set this1 = namespace(depth_indent = "`") %} 					# btic is proc_depth indicator
																		# using namespace so it can be manipulated in for loop

	{% for iter in range(svv.proc_depth|int) %}
		{% set this1.depth_indent = this1.depth_indent + "`" %}			# add a btic for each layer of nested code
	{% endfor %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %}
		{% set new_params = rawparams|replace("function=", "") %}		# strip function= from passed params 
		{% set new_params = new_params|replace("func_params=", "") %}	# strip func_params=
		{% set new_params = new_params|replace("'", "") %}				# strip ' portion of string encapsulation
		{% set new_params = new_params|replace("\"", "") %}				# strip " portion of string encapsulation
		M118 {this1.depth_indent ~ " " ~ new_params|upper}				# concatenate depth btics and (macro and params) and display in console
	{% endif %}

[gcode_macro _proc_end]
description:  for trace debug purposes - presents depth as leading back-tics
#	function=_some_macro_name
gcode:
	{% set svv = printer.save_variables.variables %}						# set eazy accesss context for save_variables object

	{% set this1 = namespace(depth_indent = "`") %} 						# proc_depth
	
	_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE={svv.proc_depth - 1|int}	# decrement depth counter
	
	{% if svv.proc_depth|int < 0 %}
		_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE=0						# in theory, we should never get here...
	{% endif %}
	
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow or params.FORCE|default(0)|int %} 
	
		{% for iter in range(svv.proc_depth - 1|int) %}
			{% set this1.depth_indent = this1.depth_indent ~ "`" %}
		{% endfor %}
		
		{% if printer["gcode_macro _printer_vars"].show_proc_exit %} 
		
			{% if params.FUNCTION|string != "" and printer["gcode_macro _printer_vars"].show_proc_exit_details %} 
#				M118 {this1.depth_indent ~ " " ~ params.FUNCTION ~ " End"}
#				M118 {this1.depth_indent ~ " [" ~ params.FUNCTION|lower ~ "]"}
#				M118 {this1.depth_indent ~ " [" ~ params.FUNCTION|lower ~ "] exit"}
				M118 {this1.depth_indent ~ " [" ~ params.FUNCTION|lower ~ "] done"}
			{% else %}
				M118 {this1.depth_indent}
			{% endif %}
			
		{% endif %}
		
	{% endif %}

[gcode_macro _enable_trace_debug]
description: sets codeflow verbosity flag and inits depth counter
gcode:
	{% set entry_trace_enabled_flag = printer["gcode_macro _printer_vars"].ptr_verb_codeflow|default(0)|int %} # silence console emissions if already enabled

	SET_GCODE_VARIABLE MACRO=_printer_vars VARIABLE=ptr_verb_codeflow VALUE=1
		
	{% if entry_trace_enabled_flag == 0 %}	# emit a couple of blank lines to visually indicate state change
		M118
		M118
	{% endif %}

	_proc_start function=_enable_trace_debug func_params='"{rawparams|string}"'
	
	_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE=1	# reset depth counter
	## note: proc depth counter may be out of sync until un-nested fully and then will get sync'd up
	## as, at time of enablement, when not previously tracked, depth is unknown...
	
	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _enable_trace_debug <<<<< {% endif %}

	_proc_end function=_enable_trace_debug

[gcode_macro _disable_trace_debug]
description: sets codeflow verbosity flag and inits depth counter
gcode:

	{% set entry_trace_enabled_flag = printer["gcode_macro _printer_vars"].ptr_verb_codeflow|default(1)|int  %} # silence console emissions if already disabled

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_disable_trace_debug func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _debug_vars"].debug_verb_status %} M118 >>>>> _disable_trace_debug <<<<< {% endif %}
	SET_GCODE_VARIABLE MACRO=_printer_vars VARIABLE=ptr_verb_codeflow VALUE=0

	_SAVE_VARIABLE_STOCK VARIABLE=proc_depth VALUE=0	# reset depth counter
	## note, proc depth counter may be out of sync until un-nested fully and then will be sync'd up
	## due to, when not previously tracked, depth is unknown at time of enablement...
	
	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_disable_trace_debug {% endif %}
	
	{% if entry_trace_enabled_flag %}	# emit a couple of blank lines to visually indicate state change
		_proc_end function=_disable_trace_debug FORCE=1
		M118
		M118
	{% endif %}


[gcode_macro M1170]
description:  workaround for fixing a zero-based layer display - slicer is zero-based, gray matter is 1-based...
# params = L=LAYERNUM T=TOTALLAYERS  Weirdly, while PS layer is 0-based, PS's total layer count is 1-based, and their gcode viewer is 1-based...
# sample slicer use: M1170 L[layer_num] T[total_layer_count]
# chose this approach vs. renaming stock M117, as M117 works otherwise - this addresses a specific slicer behaviour.
# also using this to report sd card/th position at each layer change (for disaster recovery) in console and saving
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M1170 func_params='"{rawparams|string}"'  {% endif %}
	
	{% set pvsd = printer.virtual_sdcard %}
	{% set ptp = printer.toolhead.position %}

#	M117 L:{(params.L|int + 1)|int}/{params.T|int}|{(printer.virtual_sdcard.progress*100)|round(2,'common')}%

	{% set lcd_layer_chg_msg = "L:" ~ (params.L|int + 1)|int ~ "/" ~ params.T|int ~ "-" ~ (pvsd.progress*100)|round(2,'common') ~ "%" %}
	M117 {lcd_layer_chg_msg}
	Save_Variable VARIABLE=last_lcd_layer_chg_msg VALUE='"{lcd_layer_chg_msg}"'

	{% set layer_chg_msg = "L:" ~ (params.L|int + 1)|int ~ "/" ~ params.T|int ~ "-" ~ pvsd.file_position ~ " | " ~ (pvsd.progress*100)|round(2,'common') ~ "%: X:" ~ ptp.x|round(3,'common') ~ " Y:" ~ ptp.y|round(3,'common') ~ " Z:" ~ ptp.z|round(3,'common') %}
	M118 {layer_chg_msg}
	Save_Variable VARIABLE=last_layer_chg_msg VALUE='"{layer_chg_msg}"'

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M1170 {% endif %}

#--------------------------------------------------------------------

[gcode_macro M118]
description: To trap/wrap FW M118 w/ action_respond_info vs. FW's implementation (supports numeric/special char starts)
rename_existing: M118.1
gcode:
	{ action_respond_info(rawparams) }
	
[gcode_macro M1181]
description: To implement a more expressive tool change notification (called at tool change start, hence the +1 on swaps)
# parameters are CE for integer current extruder, NE for integer next extruder
# reports total tool changes when wipe tower is in play, as that is needed for slicer to report total tool changes
# called from slicer tool change M1181 CE1 NE2 TC6
gcode:
	{% set svv = printer.save_variables.variables %}
	{% if params.CE|int < 0  %}	# initial swap
		{% if params.TC|int > 0  %} 
			M118 S:{svv.ercf_swaps + 1}/{params.TC|int} (Initial Load): T{params.NE|int} @ {printer.virtual_sdcard.file_position} - {(printer.virtual_sdcard.progress*100)|round(2,'common')}%
		{% else %}
			M118 S:{svv.ercf_swaps + 1} (Initial Load): T{params.NE|int} @ {printer.virtual_sdcard.file_position} | {(printer.virtual_sdcard.progress*100)|round(2,'common')}%
		{% endif %}
	{% elif params.CE == params.NE %}
		#do nothing as no swap will occur - shouldn't get here in theory.?.
	{% else %}				# other swaps
		{% if params.TC|int > 0  %} 
			M118 S:{svv.ercf_swaps + 1}/{params.TC|int}: T{params.CE|int}>T{params.NE|int} I:{svv.ercf_interactions} S{printer.virtual_sdcard.file_position} X{printer.toolhead.position.x|round(3,'common')} Y{printer.toolhead.position.y|round(3,'common')} Z{printer.toolhead.position.z|round(3,'common')}
		{% else %}
			M118 S:{svv.ercf_swaps + 1}: T{params.CE|int} -> T{params.NE|int} @ {printer.virtual_sdcard.file_position} | {(printer.virtual_sdcard.progress*100)|round(2,'common')}%
		{% endif %}
	{% endif %}
	
[gcode_macro M112]
description: test wrapper to see if queue bypass is possible - it is not in this manner
rename_existing: M112.1
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M112 func_params='"{rawparams|string}"'  {% endif %}

	{% if params.INJECT %} 
		#do process'g here?
		#save_variable VARIABLE=test_m112_inject	VALUE={printer.system_stats.cputime}
		{ action_respond_info("fired @ " ~ printer.system_stats.cputime) }
		# use  tail _globals.pvar -n75 -f in ssh session to see if update is immediate
	{% else %}
		M112.1 {rawparams}
	{% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M112 {% endif %}

[gcode_macro testmacro]
description: testing jinja2 operations & :expressions
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=testmacro func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> testmacro <<< {% endif %} 
	{% if printer["gcode_macro _printer_vars"].ptr_verb_info %} M118 sonoff_ipaddr:{ printer.save_variables.variables.sonoff_ipaddr } {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=testmacro {% endif %}

## These codes assume the shell_command extension is installed and 
## that shell_command.cfg is config'd to support same

#--------------------------------------------------------------------

[gcode_macro wcdaymode]
description: Kill IR LEDs/Deploy IR Filter
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=wcdaymode func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> wcdaymode <<< {% endif %} 
	RUN_SHELL_COMMAND CMD=wcv2_ircut_on
	RUN_SHELL_COMMAND CMD=wcv2_irled_off

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=wcdaymode {% endif %}

#--------------------------------------------------------------------

[gcode_macro wcnightmode]
description: Enable IR LEDs/Stow IR Filter
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=wcnightmode func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> wcnightmode <<< {% endif %} 
	RUN_SHELL_COMMAND CMD=wcv2_ircut_off
	RUN_SHELL_COMMAND CMD=wcv2_irled_on

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=wcnightmode {% endif %}

#--------------------------------------------------------------------

[gcode_macro power_on_printer]
description: Power on the printer
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=power_on_printer func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> RUN_SHELL_COMMAND CMD=power_on_printer <<< {% endif %} 
	RUN_SHELL_COMMAND CMD=power_on_printer
	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> RUN_SHELL_COMMAND CMD=restore_configs <<< {% endif %} 
	RUN_SHELL_COMMAND CMD=restore_configs

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=power_on_printer {% endif %}

#--------------------------------------------------------------------

[gcode_macro power_off_printer]
description: Power off the printer
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=power_off_printer func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> RUN_SHELL_COMMAND CMD=power_off_printer <<< {% endif %} 
	RUN_SHELL_COMMAND CMD=power_off_printer

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=power_off_printer {% endif %}

#--------------------------------------------------------------------

[gcode_macro go_absolute]
description: does a G90 - just for readability's sake
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=go_absolute func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> ABSOLUTE <<< {% endif %} 
	G90

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=go_absolute {% endif %}

#--------------------------------------------------------------------

[gcode_macro go_relative]
description: does a G91 - just for readability's sake
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=go_relative func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> RELATIVE <<< {% endif %} 
	G91

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=go_relative {% endif %}

#--------------------------------------------------------------------

[gcode_macro Z_Probe_Calibrate]
description: hmm - just found another probe thing in klickyp-probe
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=Z_Probe_Calibrate func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Z_Probe_Calibrate <<< {% endif %} 
	_ENSURE_QGL					# homes if needed, QGLs, rehomes Z - need to have the gantry level
	PROBE_CALIBRATE				# this calls a a klicky_probe proc

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=Z_Probe_Calibrate {% endif %}

#--------------------------------------------------------------------

[gcode_macro Z_Calibrate]
description: Automatically calibrates the nozzles offset to the print surface (used in Print_Start)
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=Z_Calibrate func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Z_Calibrate <<< {% endif %} 
	_ENSURE_QGL					# homes if needed, QGLs, rehomes Z - need to have the gantry level
	CALIBRATE_Z					# this calls a z_calibration.py proc and uses z_calibration.cfg stuffs

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=Z_Calibrate {% endif %}

#--------------------------------------------------------------------

[gcode_macro Z_EndStop_Accuracy]
description: Probe Z-Endstop accuracy at Nozzle-Endstop position
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=Z_EndStop_Accuracy func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Z_EndStop_Accuracy <<< {% endif %} 
	_ENSURE_QGL					# homes if needed, QGLs, rehomes Z - need to have the gantry level
	PROBE_Z_ACCURACY			# this calls a z_calibration.py proc and uses z_calibration.cfg stuffs

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=Z_EndStop_Accuracy {% endif %}

#--------------------------------------------------------------------

[gcode_macro Z_Probe_Accuracy]
description: Test and report Probe accuracy at current location, moving to 175,175 if outside of bed
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=Z_Probe_Accuracy func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> Z_Probe_Accuracy <<< {% endif %} 
	# referencing _User_Variables macro in klickyp-probe.cfg (no wheel reinvention)
	{% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
	{% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
	{% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
	{% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}

	_ENSURE_QGL					# homes if needed, QGLs, rehomes Z - need to have the gantry level

	# Protect against PROBE CALIBRATE performed from outside the bed (refs Klicky stuffs)
	{% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
		  or printer['gcode_move'].position.y < probe_offset_y
		  or printer['gcode_move'].position.x > (max_x - probe_offset_x)
		  or printer['gcode_move'].position.x < probe_offset_x %}
		M118 Z_Probe_Accuracy - PROBE_CALIBRATE requires probe above the BED - moving to bed center...
		go_absolute
		G0 X{(max_x / 2)} Y{(max_y / 2)} F15000 #mm/min .. 250mm/s - at center of bed
	{% endif%}

	# organic klipper, as modified by klickyp-probe and uses [probe] section configs for items not defined below
	PROBE_ACCURACY PROBE_SPEED=10 SAMPLES=5 SAMPLE_RETRACT_DIST=2 LIFT_SPEED=15

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=Z_Probe_Accuracy {% endif %}

#--------------------------------------------------------------------

[gcode_macro system_shutdown] 
description: Power off the entire system (printer AND host)
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=system_shutdown func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> system_shutdown <<< {% endif %} 
	RUN_SHELL_COMMAND CMD=backup_configs
	RUN_SHELL_COMMAND CMD=power_off_printer
	RUN_SHELL_COMMAND CMD=system_shutdown

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=system_shutdown {% endif %}

#--------------------------------------------------------------------

[delayed_gcode delayed_printer_off]
#description: Power off the printer when/if timed out
initial_duration: 0.
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=delayed_printer_off func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> delayed_printer_off <<< {% endif %} 
	{% if printer.idle_timeout.state == "Idle" or printer.idle_timeout.state == "Ready"%}
		RUN_SHELL_COMMAND CMD=backup_configs
		#	RUN_SHELL_COMMAND CMD=power_off_printer		# causes sync issues between Mainsail/Moonraker and the Tasmota Outlet
		#M118 _!_ Commanding Printer Power Shutdown _!_
		{action_call_remote_method("set_device_power",
									device="Printer",
									state="off")}
		#   system_shutdown		# disabled to keep the klipper host alive...
	 {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=delayed_printer_off {% endif %}

[gcode_macro _PrintLED_Off]
#--------------------------------------------------------------------

##  These codes assume moonraker.conf is config'd to support same

#--------------------------------------------------------------------
description: Extinguish the Halo Sw Red LED
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_PrintLED_Off func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _PrintLED_Off <<< {% endif %} 
	SET_PIN PIN=_sw_red_led VALUE=0

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_PrintLED_Off {% endif %}

#--------------------------------------------------------------------

[gcode_macro _PrintLED_On]
description: Illuminate the Halo Sw Red LED
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_PrintLED_On func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _PrintLED_On <<< {% endif %} 
	SET_PIN PIN=_sw_red_led VALUE=1

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_PrintLED_On {% endif %}

#--------------------------------------------------------------------

[gcode_macro _IdleLED_Off]
description: Extinguish the Halo Sw Greeen LED
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_IdleLED_Off func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _IdleLED_Off <<< {% endif %} 
	SET_PIN PIN=_sw_grn_led VALUE=0

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_IdleLED_Off {% endif %}

#--------------------------------------------------------------------

[gcode_macro _IdleLED_On]
description: Illuminate the Halo Sw Green LED
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_IdleLED_On func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _IdleLED_On <<< {% endif %} 
	SET_PIN PIN=_sw_grn_led VALUE=1

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_IdleLED_On {% endif %}

#--------------------------------------------------------------------

[gcode_macro _PwrLED_Off]
description: Extinguish the Halo Sw Blue LED
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_PwrLED_Off func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _PwrLED_Off <<< {% endif %} 
	SET_PIN PIN=_sw_blu_led VALUE=0

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_PwrLED_Off {% endif %}

#--------------------------------------------------------------------

[gcode_macro _PwrLED_On]
description: Illuminate the Halo Sw Blue LED
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_PwrLED_On func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _PwrLED_On <<< {% endif %} 
	SET_PIN PIN=_sw_blu_led VALUE=1

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_PwrLED_On {% endif %}

#--------------------------------------------------------------------

[gcode_macro PrintLED_Off]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PrintLED_Off func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> PrintLED_Off <<< {% endif %} 
	_PrintLED_Off

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PrintLED_Off {% endif %}

#--------------------------------------------------------------------

[gcode_macro PrintLED_On]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PrintLED_On func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> PrintLED_On <<< {% endif %} 
	_PrintLED_On

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PrintLED_On {% endif %}

#--------------------------------------------------------------------

[gcode_macro IdleLED_Off]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=IdleLED_Off func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> IdleLED_Off <<< {% endif %} 
	_IdleLED_Off

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=IdleLED_Off {% endif %}

#--------------------------------------------------------------------

[gcode_macro IdleLED_On]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=IdleLED_On func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> IdleLED_On <<< {% endif %} 
	_IdleLED_On

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=IdleLED_On {% endif %}

#--------------------------------------------------------------------

[gcode_macro PwrLED_Off]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PwrLED_Off func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> PwrLED_Off <<< {% endif %} 
	_PwrLED_Off

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PwrLED_Off {% endif %}

#--------------------------------------------------------------------

[gcode_macro PwrLED_On]
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=PwrLED_On func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> PwrLED_On <<< {% endif %} 
	_PwrLED_On

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=PwrLED_On {% endif %}

#####################################################################
# 	Manually Disable Steppers
#####################################################################

[gcode_macro disable_steppers]
description: Disable Stepper Motors
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=disable_steppers func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> disable_steppers <<< {% endif %} 
	SAVE_VARIABLE VARIABLE=z_axis_cal VALUE=0						# since machine just started, flag a z_axis_cal is not complete
	SAVE_VARIABLE VARIABLE=ercf_selector_homed VALUE=0
	SAVE_VARIABLE VARIABLE=maxz VALUE=0.0							# init global var
	M18

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=disable_steppers {% endif %}

#####################################################################
# 	Hour Meter Control
#####################################################################

[gcode_macro _HOURMETER_OFF]
description: Turn Hour Meter Off
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_HOURMETER_OFF func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _HOURMETER_OFF <<< {% endif %} 
	SET_PIN PIN=_hourmeter VALUE=0

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_HOURMETER_OFF {% endif %}

#--------------------------------------------------------------------

[gcode_macro _HOURMETER_ON]
description: Turn Hour Meter On
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_HOURMETER_ON func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _HOURMETER_ON <<< {% endif %} 
	SET_PIN PIN=_hourmeter VALUE=1

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_HOURMETER_ON {% endif %}

#--------------------------------------------------------------------

[gcode_macro HOURMETER_TOGGLE]
description: Toggle Hour Meter
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=HOURMETER_TOGGLE func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> HOURMETER_TOGGLE <<< {% endif %} 
	{% if printer["output_pin _hourmeter"].value == 1 %}
		_HOURMETER_OFF
	{% else %}
		_HOURMETER_ON
	{% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=HOURMETER_TOGGLE {% endif %}

#--------------------------------------------------------------------

# this is for runtime updates to Klipper - pushes shite to the bottom of the printer.cfg
[gcode_macro save_conf]
description: Execute a Save Configuration
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=save_conf func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> save_conf <<< {% endif %} 
	SAVE_CONFIG

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=save_conf {% endif %}

#####################################################################
# 	Other Shite
#####################################################################

# [gcode_macro clean_bed]
# description: Heat bed and position head to allow cleaning of the heated print surface
# gcode:

  # SAVE_GCODE_STATE NAME=clean_bed
  # {% if printer.heater_bed.temperature < 60 %}
	# M117 Heating
	# M190 S60				#wait until bed warms - helps with cleaning
  # {% endif %}
  # M117 Homing
  # _ENSURE_HOMED					 #home
  # go_relative
  # G0 Z75				  #move head up and out of the way
  # M117 Elevating Gantry
  # RESTORE_GCODE_STATE NAME=clean_bed
  # M300 S1000 P100 
  # M300 S1000 P100
  # M117 Clean the bed...
  # go_absolute

#--------------------------------------------------------------------

[gcode_macro G32]
description: Do a Quad Gantry Level (QGL)
gcode:
	# BED_MESH_CLEAR
	_ENSURE_QGL							# also homes if needed - need to have the gantry leveled
	G28									# 
	G0 X175 Y350 Z30 F3600				# parks head at rear center

#--------------------------------------------------------------------

[gcode_macro DO_BED_MESH]
description: Heat bed and then perform a bed mesh sequence
variable_bed_temp: 60
variable_extruder_temp: 230
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=DO_BED_MESH func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> DO_BED_MESH <<< {% endif %} 
	M117 Heating...
	M140 S{bed_temp}			   # set bed final temp
	M104 S{extruder_temp}		  # set extruder final temp
	M190 S{bed_temp}			   # wait for bed final temp
	M109 S{extruder_temp}		  # wait for extruder final temp
  # _HOURMETER_ON
	_PrintLED_On
	M300
	_ENSURE_QGL							# homes if needed - need to have the gantry leveled
	BED_MESH_CALIBRATE
	G28
	M300
	M300
  # _HOURMETER_OFF
	_PrintLED_Off
	SAVE_CONFIG		# this is for runtime updates to Klipper - pushes shite to the bottom of the printer.cfg

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=DO_BED_MESH {% endif %}

#--------------------------------------------------------------------

[gcode_macro _ENSURE_HOMED]
description: Home only if needed - no wasted cycles/power
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ENSURE_HOMED func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> ENSURING HOMED <<< {% endif %} 
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"checking_home"'	# machine state save
	{% if "z" not in printer.toolhead.homed_axes %}
		# if z is homed, xy are explicitly homed as well
		{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 Homing {% endif %} 
		G28
		SAVE_VARIABLE VARIABLE=z_axis_cal VALUE=0		# since homed, flag a z_axis_cal (zcal.cfg) is not complete
	{% endif %}
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"home_checked"'	# machine state save
	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> ENSURED HOMED <<< {% endif %} 

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ENSURE_HOMED {% endif %}

#--------------------------------------------------------------------

[gcode_macro _ENSURE_QGL]
description: QGL only if needed - no wasted cycles/power
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_ENSURE_QGL func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _ENSURE_QGL <<< {% endif %} 
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"checking_qgl"'	# machine state save
	_ENSURE_HOMED					# needs to be homed else qgl is not practical, if homed, no wasted cycles
	{% if not printer.quad_gantry_level.applied %} 
		{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 QGL'g {% endif %} 
		QUAD_GANTRY_LEVEL			# in klicky's QGL, I wrapped to include a post-level G28 Z rehome https://i.imgur.com/rMTRcaH.png
#		G28 Z						# uncomment for those without that mod to klicky's code, if so desired
		SAVE_VARIABLE VARIABLE=z_axis_cal VALUE=0		# since QGL'd, flag a z_axis_cal (zcal.cfg) is not complete
	{% endif %}
	SAVE_VARIABLE VARIABLE=last_ptr_state VALUE='"qgl_checked"'	# machine state save
	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 qgl_checked {% endif %} 

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_ENSURE_QGL {% endif %}

#--------------------------------------------------------------------

[gcode_macro M141]
description: Implement a pseudo chamber heat control
# example: M141 S50
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=M141 func_params='"{rawparams|string}"'  {% endif %}

	{% set ch_tmp_tgt = params.S|default(0)|int %}
	{% if printer["gcode_macro _printer_vars"].ptr_verb_info %} M118 >>> M141 S{ch_tmp_tgt} <<< {% endif %} 
	SET_TEMPERATURE_FAN_TARGET temperature_fan=Exhaust target={ch_tmp_tgt} min_speed=0.0 max_speed=1.0

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=M141 {% endif %}

#--------------------------------------------------------------------

[gcode_macro _reset_extruder]
description: for readability - execute G92 E0
gcode:

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_start function=_reset_extruder func_params='"{rawparams|string}"'  {% endif %}

	{% if printer["gcode_macro _printer_vars"].ptr_verb_status %} M118 >>> _reset_extruder <<< {% endif %} 
	G92 E0

	{% if printer["gcode_macro _printer_vars"].ptr_verb_codeflow %} _proc_end function=_reset_extruder {% endif %}

#--------------------------------------------------------------------
[gcode_macro fix_cameras]
gcode:
	RUN_SHELL_COMMAND CMD=force_day_mode_wcv2_1
	RUN_SHELL_COMMAND CMD=force_day_mode_wcv2_2
	RUN_SHELL_COMMAND CMD=force_day_mode_wcv2_3

