#####################################################################
# 	_userlogs 
#####################################################################
# instantiate 1+ log files so user can log printer events thereto.
# will employ logrotate daemon to support programmatic rollover, etc.

[delayed_gcode _userlogs_loaded]
initial_duration: 4.501
gcode:
	_proc_start function=_userlogs_loaded func_params='"{rawparams|string}"'
	_module_loaded MODULE=_userlogs
	_proc_end function=_userlogs_loaded

#--------------------------------------------------------------------

[gcode_macro _info_userlogs]
gcode:
	#to do
#in user macros, affect a log entry by use of the kulog command
#log_gmove S="G0 {rawparams|upper}"
#ulog log_file S="log entry"		
	
#--------------------------------------------------------------------

[gcode_macro _userlogs_vars]
description: macro for _userlogs variables

gcode:

	_proc_start function=_userlogs_vars func_params='"{rawparams|string}"'

	# there is none, this is for module variable use only

	_proc_end function=_userlogs_vars

#--------------------------------------------------------------------

[delayed_gcode _userlogs_module_start]
#description: Sets module-specific state flags for conditional use elsewhere.
initial_duration: 0.5							# have this at 0.5s as init code in _startup_autoexec.cfg runs at 0.1s after start
gcode:

	_proc_start function=_userlogs_module_start func_params='"{rawparams|string}"'

	SAVE_VARIABLE VARIABLE=module__userlogs_loaded VALUE=1					#flag via persistent variable that this module is loaded
	SAVE_VARIABLE VARIABLE=_userlogs_err_flag VALUE=0						#init error flag via persistent variable that this module is not in error

	_proc_end function=_userlogs_module_start
	
#--------------------------------------------------------------------

[gcode_shell_command gmove_debug_log]
command: log_gmove_debug_event
verbose: False

#--------------------------------------------------------------------
[gcode_shell_command trace_debug_log]
command: log_trace_debug_event
verbose: False

#--------------------------------------------------------------------
[gcode_shell_command svv_debug_log]
command: log_svv_debug_event
verbose: False

#--------------------------------------------------------------------
[gcode_shell_command state_debug_log]
command: log_state_debug_event
verbose: False

#--------------------------------------------------------------------
[gcode_macro log_gmove]
gcode:

	_proc_start function=log_gmove func_params='"{rawparams|string}"'

	RUN_SHELL_CMD CMD=gmove_debug_log PARAMS='{params.S}'

	_proc_end function=log_gmove

#--------------------------------------------------------------------
[gcode_macro log_trace]
gcode:

# RECURSION	... 	_proc_start function=log_trace func_params='"{rawparams|string}"'

	RUN_SHELL_CMD CMD=trace_debug_log PARAMS='{params.S}'

# RECURSION	... 	_proc_end function=log_trace

#--------------------------------------------------------------------
[gcode_macro log_svv]
gcode:

	_proc_start function=log_svv func_params='"{rawparams|string}"'

	RUN_SHELL_CMD CMD=svv_debug_log PARAMS='{params.S}'

	_proc_end function=log_svv

#--------------------------------------------------------------------
[gcode_macro log_state]
gcode:

	_proc_start function=log_state func_params='"{rawparams|string}"'

	RUN_SHELL_CMD CMD=state_debug_log PARAMS='{params.S}'

	_proc_end function=log_state

#--------------------------------------------------------------------
[gcode_shell_command user_log_rotate]
#command: sudo logrotate -v -f /etc/logrotate.d/klipper_userlogs
command: sh /home/pi/printer_data/config/rotate_klipper_userlogs.sh
timeout: 60
verbose: True

#--------------------------------------------------------------------

[gcode_macro rotate_debug_logs]
gcode:

	_proc_start function=rotate_debug_logs func_params='"{rawparams|string}"'

	RUN_SHELL_CMD CMD=user_log_rotate

	_proc_end function=rotate_debug_logs

#--------------------------------------------------------------------


# [UserLogs]
# tracelog_filename:	~/printer_data/logs/trace_debug.log
# gmovelog_filename:	~/printer_data/logs/gmove_debug.log
# statelog_filename:	~/printer_data/logs/state_debug.log
# svvlog_filename:	~/printer_data/logs/svv_debug.log

#[userlog]
#log_file_directory:	~/printer_data/logs
#log_entry_timestamp: $(date +%H:%M:%S.%N)			# https://linux.die.net/man/3/strftime

# may need some pointers to logrotate stuffs, or is it reasonably the same on most all klipper hosts?
# rotates a user.log in log file directory using these settings when _rotatue_user_logs log_file=somelogfile is commanded
#logrot_conf:
#	daily
#	dateext
#	dateformat .%Y-%m-%d-%s.log
#	create 644 pi
#	rotate 3
#	missingok
#	notifempty
#	maxsize 4M

#[userlog macro_trace_debug]
# effectively a real-time logging of print-time code flow of stock and user macro calls
# 'tail -f -n40 ~/printer_data/logs/macro_trace_debug.log' via ssh for NRT visibility
# USE CASE: troubleshooting unexpected developments - timer too close, malformed commands, etc.
#macro_name_regex:
#	^\h*(?i)(\d|\w)+\h*(.*)

#[userlog gmove_debug]
# logging of print-time codes that affect tool-head movement/filament flow
# 'tail -f -n40 ~/printer_data/logs/gmove_debug.log' via ssh for NRT visibility.
# USE CASE: identifying issues and possible causes with print issues
#macro_name_regex:
#	^\h*(?i)(g0|g1|g4|g10|g11|m220|m221|g90|g91|m82|m83|g20|g21)+\h*(.*)

#[userlog svv_debug]
# logging of print-time variable value saves to the save_variables file
# 'tail -f -n40 ~/printer_data/logs/svv_debug.log' via ssh for NRT visibility.
# USE CASE: identifying errors when setting up user macros
#macro_name_regex:
#	^\h*(?i)(save_variable)+\h*(.*)

#[userlog gstate_debug]
# effectively a real-time logging of print-time gcode state saves/restores
# 'tail -f -n40 ~/printer_data/logs/gstate_debug.log' via ssh for NRT visibility.
# USE CASE: troubleshooting user macros - especially wrt pause/restore/park/fil chg/etc.
#macro_name_regex:
#	^\h*(?i)(save_gcode_state|restore_gcode_state)+\h*(.*)

#[userlog]
#log_file_directory:	~/printer_data/logs
#log_entry_timestamp: $(date +%H:%M:%S.%N)			# https://linux.die.net/man/3/strftime

# may need some pointers to logrotate stuffs, or is it reasonably the same on most all klipper hosts?
# rotates a user.log in log file directory using these settings when _rotatue_user_logs log_file=somelogfile is commanded
#logrot_conf:
#	daily
#	dateext
#	dateformat .%Y-%m-%d-%s.log
#	create 644 pi
#	rotate 3
#	missingok
#	notifempty
#	maxsize 4M

#[userlog macro_trace_debug]
# effectively a real-time logging of print-time code flow of stock and user macro calls
# 'tail -f -n40 ~/printer_data/logs/macro_trace_debug.log' via ssh for NRT visibility
# USE CASE: troubleshooting unexpected developments - timer too close, malformed commands, etc.
#macro_name_regex:
#	^\h*(?i)(\d|\w)+\h*(.*)

#[userlog gmove_debug]
# logging of print-time codes that affect tool-head movement/filament flow
# 'tail -f -n40 ~/printer_data/logs/gmove_debug.log' via ssh for NRT visibility.
# USE CASE: identifying issues and possible causes with print issues
#macro_name_regex:
#	^\h*(?i)(g0|g1|g4|g10|g11|m220|m221|g90|g91|m82|m83|g20|g21)+\h*(.*)

#[userlog svv_debug]
# logging of print-time variable value saves to the save_variables file
# 'tail -f -n40 ~/printer_data/logs/svv_debug.log' via ssh for NRT visibility.
# USE CASE: identifying errors when setting up user macros
#macro_name_regex:
#	^\h*(?i)(save_variable)+\h*(.*)

#[userlog gstate_debug]
# effectively a real-time logging of print-time gcode state saves/restores
# 'tail -f -n40 ~/printer_data/logs/gstate_debug.log' via ssh for NRT visibility.
# USE CASE: troubleshooting user macros - especially wrt pause/restore/park/fil chg/etc.
#macro_name_regex:
#	^\h*(?i)(save_gcode_state|restore_gcode_state)+\h*(.*)

